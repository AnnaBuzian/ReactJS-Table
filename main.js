(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({"./example/main.js":[function(require,module,exports){
/** @jsx React.DOM */
var React = require('react');
var ExampleTable = require('./ExampleTable.jsx');

React.render(
  React.createElement("div", {className: "container"}, 

    React.createElement("div", {className: "navbar navbar-default"}, 
      React.createElement("div", {className: "container-fluid"}, 
        React.createElement("div", {className: "navbar-header"}, 
          React.createElement("a", {className: "navbar-brand", href: "#"}, "react-structured-filter demo")
        )
      )
    ), 

    React.createElement("div", {className: "panel panel-default"}, 
      React.createElement("div", {className: "panel-body"}, 
        React.createElement("h2", null, "Example stock data"), 
        React.createElement(ExampleTable, null)
      )
    )
  )
  ,
  document.getElementById('main'));

},{"./ExampleTable.jsx":"/mnt/hgfs/deb/react-structured-filter-github/master/example/ExampleTable.jsx","react":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/react.js"}],"/mnt/hgfs/deb/react-structured-filter-github/master/example/ExampleData.jsx":[function(require,module,exports){
var React = require('react');
var Taffy = require('./taffy-min.js').taffy;


/*******************************************************************************
 * WARNING: DO NOT DO WHAT THIS FILE DOES
 * You should NOT put all of your data in a local file like this.
 * You should query a server.  This is purely for demo purposes.
 ******************************************************************************/

var ExampleData = React.createClass({displayName: "ExampleData",
  componentWillMount: function() {
    // Create instance variable of static data
    this.db = Taffy([
      {"Symbol":"TFSC", 	 "Name": "1347 Capital Corp.", 	 "Price": 9.43, 	 "MarketCap": 56090000, 	 "IPO":2014, 		 "Sector":"Finance", 	 "Industry":"Business Services"},
      {"Symbol":"PIH", 	 "Name": "1347 Property Insurance Holdings, Inc.", 	 "Price": 7.64, 	 "MarketCap": 48580000, 	 "IPO":2014, 		 "Sector":"Finance", 	 "Industry":"Property-Casualty Insurers"},
      {"Symbol":"FLWS", 	 "Name": "1-800 FLOWERS.COM, Inc.", 	 "Price": 10.33, 	 "MarketCap": 668420000, 	 "IPO":1999, 		 "Sector":"Consumer Services", 	 "Industry":"Other Specialty Stores"},
      {"Symbol":"VNET", 	 "Name": "21Vianet Group, Inc.", 	 "Price": 19.05, 	 "MarketCap": 1250000000, 	 "IPO":2011, 		 "Sector":"Technology", 	 "Industry":"Computer Software: Programming, Data Processing"},
      {"Symbol":"TWOU", 	 "Name": "2U, Inc.", 	 "Price": 17.11, 	 "MarketCap": 693670000, 	 "IPO":2014, 		 "Sector":"Technology", 	 "Industry":"Computer Software: Prepackaged Software"},
      {"Symbol":"JOBS", 	 "Name": "51job, Inc.", 	 "Price": 34.86, 	 "MarketCap": 2060000000, 	 "IPO":2004, 		 "Sector":"Technology", 	 "Industry":"Diversified Commercial Services"},
      {"Symbol":"SHLM", 	 "Name": "A. Schulman, Inc.", 	 "Price": 39.83, 	 "MarketCap": 1160000000, 	 "IPO":1972, 		 "Sector":"Basic Industries", 	 "Industry":"Major Chemicals"},
      {"Symbol":"ABAX", 	 "Name": "ABAXIS, Inc.", 	 "Price": 60.93, 	 "MarketCap": 1370000000, 	 "IPO":1992, 		 "Sector":"Capital Goods", 	 "Industry":"Industrial Machinery/Components"},
      {"Symbol":"ABY", 	 "Name": "Abengoa Yield plc", 	 "Price": 34.4, 	 "MarketCap": 2750000000, 	 "IPO":2014, 		 "Sector":"Public Utilities", 	 "Industry":"Electric Utilities: Central"},
      {"Symbol":"ABGB", 	 "Name": "Abengoa, S.A.", 	 "Price": 15.52, 	 "MarketCap": 2610000000, 	 "IPO":2013, 		 "Sector":"Consumer Services", 	 "Industry":"Military/Government/Technical"},
      {"Symbol":"ACAD", 	 "Name": "ACADIA Pharmaceuticals Inc.", 	 "Price": 34.21, 	 "MarketCap": 3410000000, 	 "IPO":1985, 		 "Sector":"Health Care", 	 "Industry":"Major Pharmaceuticals"},
      {"Symbol":"XLRN", 	 "Name": "Acceleron Pharma Inc.", 	 "Price": 38.02, 	 "MarketCap": 1230000000, 	 "IPO":2013, 		 "Sector":"Health Care", 	 "Industry":"Biotechnology: Biological Products (No Diagnostic Substances)"},
      {"Symbol":"ARAY", 	 "Name": "Accuray Incorporated", 	 "Price": 8, 	 "MarketCap": 627920000, 	 "IPO":2007, 		 "Sector":"Health Care", 	 "Industry":"Medical/Dental Instruments"},
      {"Symbol":"ACRX", 	 "Name": "AcelRx Pharmaceuticals, Inc.", 	 "Price": 7.29, 	 "MarketCap": 318630000, 	 "IPO":2011, 		 "Sector":"Health Care", 	 "Industry":"Major Pharmaceuticals"},
      {"Symbol":"AKAO", 	 "Name": "Achaogen, Inc.", 	 "Price": 11.11, 	 "MarketCap": 197290000, 	 "IPO":2014, 		 "Sector":"Health Care", 	 "Industry":"Major Pharmaceuticals"},
      {"Symbol":"ACHN", 	 "Name": "Achillion Pharmaceuticals, Inc.", 	 "Price": 10.89, 	 "MarketCap": 1090000000, 	 "IPO":2006, 		 "Sector":"Health Care", 	 "Industry":"Major Pharmaceuticals"},
      {"Symbol":"ACOR", 	 "Name": "Acorda Therapeutics, Inc.", 	 "Price": 36.14, 	 "MarketCap": 1520000000, 	 "IPO":2006, 		 "Sector":"Health Care", 	 "Industry":"Biotechnology: Biological Products (No Diagnostic Substances)"},
      {"Symbol":"ACTS", 	 "Name": "Actions Semiconductor Co., Ltd.", 	 "Price": 1.54, 	 "MarketCap": 132440000, 	 "IPO":2005, 		 "Sector":"Technology", 	 "Industry":"Semiconductors"},
      {"Symbol":"ACPW", 	 "Name": "Active Power, Inc.", 	 "Price": 1.86, 	 "MarketCap": 42950000, 	 "IPO":2000, 		 "Sector":"Public Utilities", 	 "Industry":"Electric Utilities: Central"},
      {"Symbol":"ADMS", 	 "Name": "Adamas Pharmaceuticals, Inc.", 	 "Price": 16.98, 	 "MarketCap": 290800000, 	 "IPO":2014, 		 "Sector":"Health Care", 	 "Industry":"Major Pharmaceuticals"},
      {"Symbol":"ADUS", 	 "Name": "Addus HomeCare Corporation", 	 "Price": 21.57, 	 "MarketCap": 237050000, 	 "IPO":2009, 		 "Sector":"Health Care", 	 "Industry":"Medical/Nursing Services"},
      {"Symbol":"ADBE", 	 "Name": "Adobe Systems Incorporated", 	 "Price": 76.51, 	 "MarketCap": 38130000000, 	 "IPO":1986, 		 "Sector":"Technology", 	 "Industry":"Computer Software: Prepackaged Software"},
      {"Symbol":"ADTN", 	 "Name": "ADTRAN, Inc.", 	 "Price": 23.11, 	 "MarketCap": 1260000000, 	 "IPO":1994, 		 "Sector":"Public Utilities", 	 "Industry":"Telecommunications Equipment"},
      {"Symbol":"AEIS", 	 "Name": "Advanced Energy Industries, Inc.", 	 "Price": 26.68, 	 "MarketCap": 1070000000, 	 "IPO":1995, 		 "Sector":"Capital Goods", 	 "Industry":"Industrial Machinery/Components"},
      {"Symbol":"ADVS", 	 "Name": "Advent Software, Inc.", 	 "Price": 44.18, 	 "MarketCap": 2280000000, 	 "IPO":1995, 		 "Sector":"Technology", 	 "Industry":"EDP Services"},
      {"Symbol":"AEGR", 	 "Name": "Aegerion Pharmaceuticals, Inc.", 	 "Price": 25.15, 	 "MarketCap": 715170000, 	 "IPO":2010, 		 "Sector":"Health Care", 	 "Industry":"Major Pharmaceuticals"},
      {"Symbol":"AEHR", 	 "Name": "Aehr Test Systems", 	 "Price": 2.47, 	 "MarketCap": 31300000, 	 "IPO":1997, 		 "Sector":"Capital Goods", 	 "Industry":"Electrical Products"},
      {"Symbol":"AEPI", 	 "Name": "AEP Industries Inc.", 	 "Price": 49.71, 	 "MarketCap": 252560000, 	 "IPO":1986, 		 "Sector":"Capital Goods", 	 "Industry":"Specialty Chemicals"},
      {"Symbol":"AERI", 	 "Name": "Aerie Pharmaceuticals, Inc.", 	 "Price": 27.91, 	 "MarketCap": 669410000, 	 "IPO":2013, 		 "Sector":"Health Care", 	 "Industry":"Biotechnology: Biological Products (No Diagnostic Substances)"},
      {"Symbol":"AVAV", 	 "Name": "AeroVironment, Inc.", 	 "Price": 26.86, 	 "MarketCap": 626430000, 	 "IPO":2007, 		 "Sector":"Capital Goods", 	 "Industry":"Aerospace"},
      {"Symbol":"AFMD", 	 "Name": "Affimed N.V.", 	 "Price": 5.7, 	 "MarketCap": 136710000, 	 "IPO":2014, 		 "Sector":"Health Care", 	 "Industry":"Major Pharmaceuticals"},
      {"Symbol":"AFFX", 	 "Name": "Affymetrix, Inc.", 	 "Price": 11.45, 	 "MarketCap": 842530000, 	 "IPO":1996, 		 "Sector":"Capital Goods", 	 "Industry":"Biotechnology: Laboratory Analytical Instruments"},
      {"Symbol":"AGEN", 	 "Name": "Agenus Inc.", 	 "Price": 5.03, 	 "MarketCap": 315300000, 	 "IPO":2000, 		 "Sector":"Health Care", 	 "Industry":"Biotechnology: Biological Products (No Diagnostic Substances)"},
      {"Symbol":"AGRX", 	 "Name": "Agile Therapeutics, Inc.", 	 "Price": 8.57, 	 "MarketCap": 171500000, 	 "IPO":2014, 		 "Sector":"Health Care", 	 "Industry":"Major Pharmaceuticals"},
      {"Symbol":"AGIO", 	 "Name": "Agios Pharmaceuticals, Inc.", 	 "Price": 118.55, 	 "MarketCap": 4380000000, 	 "IPO":2013, 		 "Sector":"Health Care", 	 "Industry":"Major Pharmaceuticals"},
      {"Symbol":"AMCN", 	 "Name": "AirMedia Group Inc", 	 "Price": 2.28, 	 "MarketCap": 135810000, 	 "IPO":2007, 		 "Sector":"Technology", 	 "Industry":"Advertising"},
      {"Symbol":"AKAM", 	 "Name": "Akamai Technologies, Inc.", 	 "Price": 68.77, 	 "MarketCap": 12240000000, 	 "IPO":1999, 		 "Sector":"Miscellaneous", 	 "Industry":"Business Services"},
      {"Symbol":"AKBA", 	 "Name": "Akebia Therapeutics, Inc.", 	 "Price": 9.32, 	 "MarketCap": 189580000, 	 "IPO":2014, 		 "Sector":"Health Care", 	 "Industry":"Major Pharmaceuticals"},
      {"Symbol":"AKER", 	 "Name": "Akers Biosciences Inc", 	 "Price": 3.5, 	 "MarketCap": 17340000, 	 "IPO":2014, 		 "Sector":"Health Care", 	 "Industry":"Biotechnology: In Vitro & In Vivo Diagnostic Substances"},
      {"Symbol":"ALSK", 	 "Name": "Alaska Communications Systems Group, Inc.", 	 "Price": 1.75, 	 "MarketCap": 86690000, 	 "IPO":1999, 		 "Sector":"Public Utilities", 	 "Industry":"Telecommunications Equipment"},
      {"Symbol":"AMRI", 	 "Name": "Albany Molecular Research, Inc.", 	 "Price": 16.94, 	 "MarketCap": 552360000, 	 "IPO":1999, 		 "Sector":"Health Care", 	 "Industry":"Biotechnology: Commercial Physical & Biological Resarch"},
      {"Symbol":"ADHD", 	 "Name": "Alcobra Ltd.", 	 "Price": 6.92, 	 "MarketCap": 146550000, 	 "IPO":2013, 		 "Sector":"Health Care", 	 "Industry":"Major Pharmaceuticals"},
      {"Symbol":"ALDR", 	 "Name": "Alder BioPharmaceuticals, Inc.", 	 "Price": 26.06, 	 "MarketCap": 982630000, 	 "IPO":2014, 		 "Sector":"Health Care", 	 "Industry":"Major Pharmaceuticals"},
      {"Symbol":"ALDX", 	 "Name": "Aldeyra Therapeutics, Inc.", 	 "Price": 11.01, 	 "MarketCap": 61280000, 	 "IPO":2014, 		 "Sector":"Health Care", 	 "Industry":"Major Pharmaceuticals"},
      {"Symbol":"ALXN", 	 "Name": "Alexion Pharmaceuticals, Inc.", 	 "Price": 182.29, 	 "MarketCap": 36850000000, 	 "IPO":1996, 		 "Sector":"Health Care", 	 "Industry":"Major Pharmaceuticals"},
      {"Symbol":"ALXA", 	 "Name": "Alexza Pharmaceuticals, Inc.", 	 "Price": 2.07, 	 "MarketCap": 40170000, 	 "IPO":2006, 		 "Sector":"Health Care", 	 "Industry":"Major Pharmaceuticals"},
      {"Symbol":"ALGN", 	 "Name": "Align Technology, Inc.", 	 "Price": 56.9, 	 "MarketCap": 4570000000, 	 "IPO":2001, 		 "Sector":"Health Care", 	 "Industry":"Industrial Specialties"},
      {"Symbol":"ALIM", 	 "Name": "Alimera Sciences, Inc.", 	 "Price": 5.16, 	 "MarketCap": 228570000, 	 "IPO":2010, 		 "Sector":"Health Care", 	 "Industry":"Major Pharmaceuticals"},
      {"Symbol":"ALKS", 	 "Name": "Alkermes plc", 	 "Price": 71.4, 	 "MarketCap": 10440000000, 	 "IPO":1991, 		 "Sector":"Health Care", 	 "Industry":"Major Pharmaceuticals"},
      {"Symbol":"ALGT", 	 "Name": "Allegiant Travel Company", 	 "Price": 178.42, 	 "MarketCap": 3120000000, 	 "IPO":2006, 		 "Sector":"Transportation", 	 "Industry":"Air Freight/Delivery Services"},
      {"Symbol":"AFOP", 	 "Name": "Alliance Fiber Optic Products, Inc.", 	 "Price": 16.51, 	 "MarketCap": 307950000, 	 "IPO":2000, 		 "Sector":"Technology", 	 "Industry":"Semiconductors"},
      {"Symbol":"AIQ", 	 "Name": "Alliance HealthCare Services, Inc.", 	 "Price": 24.99, 	 "MarketCap": 268250000, 	 "IPO":2001, 		 "Sector":"Health Care", 	 "Industry":"Medical Specialities"},
      {"Symbol":"AHGP", 	 "Name": "Alliance Holdings GP, L.P.", 	 "Price": 53, 	 "MarketCap": 3170000000, 	 "IPO":2006, 		 "Sector":"Energy", 	 "Industry":"Coal Mining"},
      {"Symbol":"ARLP", 	 "Name": "Alliance Resource Partners, L.P.", 	 "Price": 39.29, 	 "MarketCap": 2910000000, 	 "IPO":1999, 		 "Sector":"Energy", 	 "Industry":"Coal Mining"},
      {"Symbol":"AHPI", 	 "Name": "Allied Healthcare Products, Inc.", 	 "Price": 1.56, 	 "MarketCap": 12520000, 	 "IPO":1992, 		 "Sector":"Health Care", 	 "Industry":"Industrial Specialties"},
      {"Symbol":"ALLT", 	 "Name": "Allot Communications Ltd.", 	 "Price": 9.15, 	 "MarketCap": 304210000, 	 "IPO":2006, 		 "Sector":"Technology", 	 "Industry":"Computer Communications Equipment"},
      {"Symbol":"ALNY", 	 "Name": "Alnylam Pharmaceuticals, Inc.", 	 "Price": 95.54, 	 "MarketCap": 7830000000, 	 "IPO":2004, 		 "Sector":"Health Care", 	 "Industry":"Major Pharmaceuticals"},
      {"Symbol":"AOSL", 	 "Name": "Alpha and Omega Semiconductor Limited", 	 "Price": 9.05, 	 "MarketCap": 241240000, 	 "IPO":2010, 		 "Sector":"Technology", 	 "Industry":"Semiconductors"},
      {"Symbol":"ATEC", 	 "Name": "Alphatec Holdings, Inc.", 	 "Price": 1.34, 	 "MarketCap": 133460000, 	 "IPO":2006, 		 "Sector":"Health Care", 	 "Industry":"Medical/Dental Instruments"},
      {"Symbol":"ALTR", 	 "Name": "Altera Corporation", 	 "Price": 35.66, 	 "MarketCap": 10870000000, 	 "IPO":1988, 		 "Sector":"Technology", 	 "Industry":"Semiconductors"},
      {"Symbol":"AIMC", 	 "Name": "Altra Industrial Motion Corp.", 	 "Price": 27.85, 	 "MarketCap": 741790000, 	 "IPO":2006, 		 "Sector":"Capital Goods", 	 "Industry":"Industrial Machinery/Components"},
      {"Symbol":"AMZN", 	 "Name": "Amazon.com, Inc.", 	 "Price": 381.83, 	 "MarketCap": 1.7732E+11, 	 "IPO":1997, 		 "Sector":"Consumer Services", 	 "Industry":"Catalog/Specialty Distribution"},
      {"Symbol":"AMBA", 	 "Name": "Ambarella, Inc.", 	 "Price": 50.71, 	 "MarketCap": 1540000000, 	 "IPO":2012, 		 "Sector":"Technology", 	 "Industry":"Semiconductors"},
      {"Symbol":"AMDA", 	 "Name": "Amedica Corporation", 	 "Price": 0.65, 	 "MarketCap": 8970000, 	 "IPO":2014, 		 "Sector":"Health Care", 	 "Industry":"Medical/Dental Instruments"},
      {"Symbol":"AGNC", 	 "Name": "American Capital Agency Corp.", 	 "Price": 21.95, 	 "MarketCap": 7740000000, 	 "IPO":2008, 		 "Sector":"Consumer Services", 	 "Industry":"Real Estate Investment Trusts"},
      {"Symbol":"MTGE", 	 "Name": "American Capital Mortgage Investment Corp.", 	 "Price": 18.33, 	 "MarketCap": 937430000, 	 "IPO":2011, 		 "Sector":"Consumer Services", 	 "Industry":"Real Estate Investment Trusts"},
      {"Symbol":"APEI", 	 "Name": "American Public Education, Inc.", 	 "Price": 34.36, 	 "MarketCap": 593210000, 	 "IPO":2007, 		 "Sector":"Consumer Services", 	 "Industry":"Other Consumer Services"},
      {"Symbol":"ARII", 	 "Name": "American Railcar Industries, Inc.", 	 "Price": 54.26, 	 "MarketCap": 1160000000, 	 "IPO":2006, 		 "Sector":"Capital Goods", 	 "Industry":"Railroads"},
      {"Symbol":"ARCP", 	 "Name": "American Realty Capital Properties, Inc.", 	 "Price": 9.4, 	 "MarketCap": 8540000000, 	 "IPO":2011, 		 "Sector":"Consumer Services", 	 "Industry":"Real Estate Investment Trusts"},
      {"Symbol":"AMSC", 	 "Name": "American Superconductor Corporation", 	 "Price": 0.7999, 	 "MarketCap": 76570000, 	 "IPO":1991, 		 "Sector":"Consumer Durables", 	 "Industry":"Metal Fabrications"},
      {"Symbol":"AMWD", 	 "Name": "American Woodmark Corporation", 	 "Price": 43.98, 	 "MarketCap": 696160000, 	 "IPO":1986, 		 "Sector":"Basic Industries", 	 "Industry":"Forest Products"},
      {"Symbol":"ABCB", 	 "Name": "Ameris Bancorp", 	 "Price": 25.75, 	 "MarketCap": 725140000, 	 "IPO":1994, 		 "Sector":"Finance", 	 "Industry":"Major Banks"},
      {"Symbol":"AMSF", 	 "Name": "AMERISAFE, Inc.", 	 "Price": 43.7, 	 "MarketCap": 822560000, 	 "IPO":2005, 		 "Sector":"Finance", 	 "Industry":"Property-Casualty Insurers"},
      {"Symbol":"AMGN", 	 "Name": "Amgen Inc.", 	 "Price": 153.48, 	 "MarketCap": 1.1675E+11, 	 "IPO":1983, 		 "Sector":"Health Care", 	 "Industry":"Biotechnology: Biological Products (No Diagnostic Substances)"},
      {"Symbol":"FOLD", 	 "Name": "Amicus Therapeutics, Inc.", 	 "Price": 8.36, 	 "MarketCap": 796280000, 	 "IPO":2007, 		 "Sector":"Health Care", 	 "Industry":"Major Pharmaceuticals"},
      {"Symbol":"AMKR", 	 "Name": "Amkor Technology, Inc.", 	 "Price": 8.9, 	 "MarketCap": 2110000000, 	 "IPO":1998, 		 "Sector":"Technology", 	 "Industry":"Semiconductors"},
      {"Symbol":"AMPH", 	 "Name": "Amphastar Pharmaceuticals, Inc.", 	 "Price": 12.76, 	 "MarketCap": 569720000, 	 "IPO":2014, 		 "Sector":"Health Care", 	 "Industry":"Major Pharmaceuticals"},
      {"Symbol":"AMRS", 	 "Name": "Amyris, Inc.", 	 "Price": 2.09, 	 "MarketCap": 165270000, 	 "IPO":2010, 		 "Sector":"Basic Industries", 	 "Industry":"Major Chemicals"},
      {"Symbol":"ANAC", 	 "Name": "Anacor Pharmaceuticals, Inc.", 	 "Price": 40.76, 	 "MarketCap": 1750000000, 	 "IPO":2010, 		 "Sector":"Health Care", 	 "Industry":"Major Pharmaceuticals"},
      {"Symbol":"ANAD", 	 "Name": "ANADIGICS, Inc.", 	 "Price": 1.26, 	 "MarketCap": 109090000, 	 "IPO":1995, 		 "Sector":"Technology", 	 "Industry":"Semiconductors"},
      {"Symbol":"ALOG", 	 "Name": "Analogic Corporation", 	 "Price": 86.55, 	 "MarketCap": 1070000000, 	 "IPO":1972, 		 "Sector":"Capital Goods", 	 "Industry":"Electrical Products"},
      {"Symbol":"ANCB", 	 "Name": "Anchor Bancorp", 	 "Price": 22.14, 	 "MarketCap": 56460000, 	 "IPO":2011, 		 "Sector":"Finance", 	 "Industry":"Banks"},
      {"Symbol":"ABCW", 	 "Name": "Anchor BanCorp Wisconsin Inc.", 	 "Price": 33.49, 	 "MarketCap": 309630000, 	 "IPO":2014, 		 "Sector":"Finance", 	 "Industry":"Banks"},
      {"Symbol":"AMCF", 	 "Name": "Andatee China Marine Fuel Services Corporation", 	 "Price": 1.44, 	 "MarketCap": 14770000, 	 "IPO":2010, 		 "Sector":"Energy", 	 "Industry":"Oil Refining/Marketing"},
      {"Symbol":"ANGI", 	 "Name": "Angie&#39;s List, Inc.", 	 "Price": 5.02, 	 "MarketCap": 293750000, 	 "IPO":2011, 		 "Sector":"Consumer Services", 	 "Industry":"Advertising"},
      {"Symbol":"ANGO", 	 "Name": "AngioDynamics, Inc.", 	 "Price": 18.78, 	 "MarketCap": 672720000, 	 "IPO":2004, 		 "Sector":"Health Care", 	 "Industry":"Medical/Dental Instruments"},
      {"Symbol":"ANSS", 	 "Name": "ANSYS, Inc.", 	 "Price": 86.26, 	 "MarketCap": 7930000000, 	 "IPO":1996, 		 "Sector":"Technology", 	 "Industry":"Computer Software: Prepackaged Software"},
      {"Symbol":"ANTH", 	 "Name": "Anthera Pharmaceuticals, Inc.", 	 "Price": 3.84, 	 "MarketCap": 88090000, 	 "IPO":2010, 		 "Sector":"Health Care", 	 "Industry":"Major Pharmaceuticals"},
      {"Symbol":"APOL", 	 "Name": "Apollo Education Group, Inc.", 	 "Price": 25.97, 	 "MarketCap": 2810000000, 	 "IPO":1994, 		 "Sector":"Consumer Services", 	 "Industry":"Other Consumer Services"},
      {"Symbol":"AAPL", 	 "Name": "Apple Inc.", 	 "Price": 127.08, 	 "MarketCap": 7.4021E+11, 	 "IPO":1980, 		 "Sector":"Technology", 	 "Industry":"Computer Manufacturing"},
      {"Symbol":"AGTC", 	 "Name": "Applied Genetic Technologies Corporation", 	 "Price": 24.49, 	 "MarketCap": 401900000, 	 "IPO":2014, 		 "Sector":"Health Care", 	 "Industry":"Biotechnology: Biological Products (No Diagnostic Substances)"},
      {"Symbol":"AMAT", 	 "Name": "Applied Materials, Inc.", 	 "Price": 24.12, 	 "MarketCap": 29460000000, 	 "IPO":1972, 		 "Sector":"Technology", 	 "Industry":"Semiconductors"},
      {"Symbol":"AMCC", 	 "Name": "Applied Micro Circuits Corporation", 	 "Price": 5.21, 	 "MarketCap": 412320000, 	 "IPO":1997, 		 "Sector":"Technology", 	 "Industry":"Semiconductors"},
      {"Symbol":"AAOI", 	 "Name": "Applied Optoelectronics, Inc.", 	 "Price": 10.15, 	 "MarketCap": 150380000, 	 "IPO":2013, 		 "Sector":"Technology", 	 "Industry":"Semiconductors"},
      {"Symbol":"AREX", 	 "Name": "Approach Resources Inc.", 	 "Price": 8.15, 	 "MarketCap": 322380000, 	 "IPO":2007, 		 "Sector":"Energy", 	 "Industry":"Oil & Gas Production"},
      {"Symbol":"AQXP", 	 "Name": "Aquinox Pharmaceuticals, Inc.", 	 "Price": 10.29, 	 "MarketCap": 110050000, 	 "IPO":2014, 		 "Sector":"Health Care", 	 "Industry":"Major Pharmaceuticals"},
      {"Symbol":"AUMA", 	 "Name": "AR Capital Acquisition Corp.", 	 "Price": 9.75, 	 "MarketCap": 292500000, 	 "IPO":2014, 		 "Sector":"Finance", 	 "Industry":"Business Services"},
      {"Symbol":"ARDM", 	 "Name": "Aradigm Corporation", 	 "Price": 7.66, 	 "MarketCap": 112810000, 	 "IPO":1996, 		 "Sector":"Health Care", 	 "Industry":"Biotechnology: Electromedical & Electrotherapeutic Apparatus"},
      {"Symbol":"PETX", 	 "Name": "Aratana Therapeutics, Inc.", 	 "Price": 16.52, 	 "MarketCap": 573330000, 	 "IPO":2013, 		 "Sector":"Health Care", 	 "Industry":"Major Pharmaceuticals"},
      {"Symbol":"ACAT", 	 "Name": "Arctic Cat Inc.", 	 "Price": 39, 	 "MarketCap": 504930000, 	 "IPO":1990, 		 "Sector":"Capital Goods", 	 "Industry":"Industrial Specialties"},
      {"Symbol":"ARDX", 	 "Name": "Ardelyx, Inc.", 	 "Price": 17.14, 	 "MarketCap": 317780000, 	 "IPO":2014, 		 "Sector":"Health Care", 	 "Industry":"Major Pharmaceuticals"},
      {"Symbol":"ARNA", 	 "Name": "Arena Pharmaceuticals, Inc.", 	 "Price": 4.55, 	 "MarketCap": 1000000000, 	 "IPO":2000, 		 "Sector":"Health Care", 	 "Industry":"Major Pharmaceuticals"},
      {"Symbol":"ARGS", 	 "Name": "Argos Therapeutics, Inc.", 	 "Price": 8.35, 	 "MarketCap": 164120000, 	 "IPO":2014, 		 "Sector":"Health Care", 	 "Industry":"Major Pharmaceuticals"},
      {"Symbol":"ARIS", 	 "Name": "ARI Network Services, Inc.", 	 "Price": 3.63, 	 "MarketCap": 51660000, 	 "IPO":1991, 		 "Sector":"Technology", 	 "Industry":"Computer Software: Programming, Data Processing"},
      {"Symbol":"ARIA", 	 "Name": "ARIAD Pharmaceuticals, Inc.", 	 "Price": 7.35, 	 "MarketCap": 1380000000, 	 "IPO":1994, 		 "Sector":"Health Care", 	 "Industry":"Biotechnology: Biological Products (No Diagnostic Substances)"},
      {"Symbol":"ARTX", 	 "Name": "Arotech Corporation", 	 "Price": 2.44, 	 "MarketCap": 59640000, 	 "IPO":1994, 		 "Sector":"Miscellaneous", 	 "Industry":"Industrial Machinery/Components"},
      {"Symbol":"ARQL", 	 "Name": "ArQule, Inc.", 	 "Price": 1.35, 	 "MarketCap": 84740000, 	 "IPO":1996, 		 "Sector":"Health Care", 	 "Industry":"Major Pharmaceuticals"},
      {"Symbol":"ARRY", 	 "Name": "Array BioPharma Inc.", 	 "Price": 8.05, 	 "MarketCap": 1120000000, 	 "IPO":2000, 		 "Sector":"Health Care", 	 "Industry":"Major Pharmaceuticals"},
      {"Symbol":"ARUN", 	 "Name": "Aruba Networks, Inc.", 	 "Price": 17.7, 	 "MarketCap": 1940000000, 	 "IPO":2007, 		 "Sector":"Technology", 	 "Industry":"Computer peripheral equipment"},
      {"Symbol":"ASBB", 	 "Name": "ASB Bancorp, Inc.", 	 "Price": 19.9, 	 "MarketCap": 87130000, 	 "IPO":2011, 		 "Sector":"Finance", 	 "Industry":"Savings Institutions"},
      {"Symbol":"ASML", 	 "Name": "ASML Holding N.V.", 	 "Price": 104.48, 	 "MarketCap": 45680000000, 	 "IPO":1995, 		 "Sector":"Technology", 	 "Industry":"Industrial Machinery/Components"},
      {"Symbol":"AZPN", 	 "Name": "Aspen Technology, Inc.", 	 "Price": 38.4, 	 "MarketCap": 3390000000, 	 "IPO":1994, 		 "Sector":"Technology", 	 "Industry":"EDP Services"},
      {"Symbol":"ASFI", 	 "Name": "Asta Funding, Inc.", 	 "Price": 8.46, 	 "MarketCap": 109860000, 	 "IPO":1995, 		 "Sector":"Finance", 	 "Industry":"Finance Companies"},
      {"Symbol":"ATEA", 	 "Name": "Astea International, Inc.", 	 "Price": 1.76, 	 "MarketCap": 6310000, 	 "IPO":1995, 		 "Sector":"Technology", 	 "Industry":"Computer Software: Prepackaged Software"},
      {"Symbol":"ALOT", 	 "Name": "Astro-Med, Inc.", 	 "Price": 14.65, 	 "MarketCap": 106060000, 	 "IPO":1983, 		 "Sector":"Technology", 	 "Industry":"Computer peripheral equipment"},
      {"Symbol":"ATAI", 	 "Name": "ATA Inc.", 	 "Price": 4.15, 	 "MarketCap": 95640000, 	 "IPO":2008, 		 "Sector":"Consumer Services", 	 "Industry":"Other Consumer Services"},
      {"Symbol":"ATRA", 	 "Name": "Atara Biotherapeutics, Inc.", 	 "Price": 18, 	 "MarketCap": 363830000, 	 "IPO":2014, 		 "Sector":"Health Care", 	 "Industry":"Biotechnology: Biological Products (No Diagnostic Substances)"},
      {"Symbol":"ATHN", 	 "Name": "athenahealth, Inc.", 	 "Price": 134.605, 	 "MarketCap": 5140000000, 	 "IPO":2007, 		 "Sector":"Miscellaneous", 	 "Industry":"Business Services"},
      {"Symbol":"AFCB", 	 "Name": "Athens Bancshares Corporation", 	 "Price": 24.77, 	 "MarketCap": 44630000, 	 "IPO":2010, 		 "Sector":"Finance", 	 "Industry":"Savings Institutions"},
      {"Symbol":"ATLC", 	 "Name": "Atlanticus Holdings Corporation", 	 "Price": 2.9118, 	 "MarketCap": 40500000, 	 "IPO":1995, 		 "Sector":"Finance", 	 "Industry":"Finance: Consumer Services"},
      {"Symbol":"AFH", 	 "Name": "Atlas Financial Holdings, Inc.", 	 "Price": 17.55, 	 "MarketCap": 206590000, 	 "IPO":2013, 		 "Sector":"Finance", 	 "Industry":"Property-Casualty Insurers"},
      {"Symbol":"ATML", 	 "Name": "Atmel Corporation", 	 "Price": 8.39, 	 "MarketCap": 3500000000, 	 "IPO":1991, 		 "Sector":"Technology", 	 "Industry":"Semiconductors"},
      {"Symbol":"ATOS", 	 "Name": "Atossa Genetics Inc.", 	 "Price": 1.67, 	 "MarketCap": 41020000, 	 "IPO":2012, 		 "Sector":"Health Care", 	 "Industry":"Medical/Dental Instruments"},
      {"Symbol":"ATRC", 	 "Name": "AtriCure, Inc.", 	 "Price": 18.86, 	 "MarketCap": 518100000, 	 "IPO":2005, 		 "Sector":"Health Care", 	 "Industry":"Medical/Dental Instruments"},
      {"Symbol":"ATRM", 	 "Name": "ATRM Holdings, Inc.", 	 "Price": 3.15, 	 "MarketCap": 3740000, 	 "IPO":1993, 		 "Sector":"Capital Goods", 	 "Industry":"Electrical Products"},
      {"Symbol":"ADNC", 	 "Name": "Audience, Inc.", 	 "Price": 4.59, 	 "MarketCap": 105460000, 	 "IPO":2012, 		 "Sector":"Technology", 	 "Industry":"Semiconductors"},
      {"Symbol":"AUDC", 	 "Name": "AudioCodes Ltd.", 	 "Price": 5.44, 	 "MarketCap": 230110000, 	 "IPO":1999, 		 "Sector":"Public Utilities", 	 "Industry":"Telecommunications Equipment"},
      {"Symbol":"EARS", 	 "Name": "Auris Medical Holding AG", 	 "Price": 5.88, 	 "MarketCap": 170250000, 	 "IPO":2014, 		 "Sector":"Health Care", 	 "Industry":"Major Pharmaceuticals"},
      {"Symbol":"ASPX", 	 "Name": "Auspex Pharmaceuticals, Inc.", 	 "Price": 65.76, 	 "MarketCap": 2060000000, 	 "IPO":2014, 		 "Sector":"Health Care", 	 "Industry":"Major Pharmaceuticals"},
      {"Symbol":"ABTL", 	 "Name": "Autobytel Inc.", 	 "Price": 9.88, 	 "MarketCap": 89200000, 	 "IPO":1999, 		 "Sector":"Technology", 	 "Industry":"Computer Software: Programming, Data Processing"},
      {"Symbol":"AVGO", 	 "Name": "Avago Technologies Limited", 	 "Price": 110.15, 	 "MarketCap": 28120000000, 	 "IPO":2009, 		 "Sector":"Technology", 	 "Industry":"Semiconductors"},
      {"Symbol":"AAVL", 	 "Name": "Avalanche Biotechnologies, Inc.", 	 "Price": 36.29, 	 "MarketCap": 901430000, 	 "IPO":2014, 		 "Sector":"Health Care", 	 "Industry":"Biotechnology: Biological Products (No Diagnostic Substances)"},
      {"Symbol":"AVEO", 	 "Name": "AVEO Pharmaceuticals, Inc.", 	 "Price": 0.838, 	 "MarketCap": 43790000, 	 "IPO":2010, 		 "Sector":"Health Care", 	 "Industry":"Major Pharmaceuticals"},
      {"Symbol":"AVID", 	 "Name": "Avid Technology, Inc.", 	 "Price": 14.12, 	 "MarketCap": 553700000, 	 "IPO":1993, 		 "Sector":"Miscellaneous", 	 "Industry":"Industrial Machinery/Components"},
      {"Symbol":"AWRE", 	 "Name": "Aware, Inc.", 	 "Price": 4.5, 	 "MarketCap": 102620000, 	 "IPO":1996, 		 "Sector":"Technology", 	 "Industry":"Computer Software: Prepackaged Software"},
      {"Symbol":"ACLS", 	 "Name": "Axcelis Technologies, Inc.", 	 "Price": 2.81, 	 "MarketCap": 314730000, 	 "IPO":2000, 		 "Sector":"Technology", 	 "Industry":"Industrial Machinery/Components"},
      {"Symbol":"AXTI", 	 "Name": "AXT Inc", 	 "Price": 2.55, 	 "MarketCap": 83730000, 	 "IPO":1998, 		 "Sector":"Technology", 	 "Industry":"Semiconductors"},
      {"Symbol":"BEAV", 	 "Name": "B/E Aerospace, Inc.", 	 "Price": 62.7, 	 "MarketCap": 6600000000, 	 "IPO":1990, 		 "Sector":"Consumer Durables", 	 "Industry":"Industrial Specialties"},
      {"Symbol":"BIDU", 	 "Name": "Baidu, Inc.", 	 "Price": 212.13, 	 "MarketCap": 74400000000, 	 "IPO":2005, 		 "Sector":"Technology", 	 "Industry":"Computer Software: Programming, Data Processing"},
      {"Symbol":"BANF", 	 "Name": "BancFirst Corporation", 	 "Price": 59.91, 	 "MarketCap": 927800000, 	 "IPO":1993, 		 "Sector":"Finance", 	 "Industry":"Major Banks"},
      {"Symbol":"OZRK", 	 "Name": "Bank of the Ozarks", 	 "Price": 35.94, 	 "MarketCap": 2860000000, 	 "IPO":1997, 		 "Sector":"Finance", 	 "Industry":"Major Banks"},
      {"Symbol":"BWFG", 	 "Name": "Bankwell Financial Group, Inc.", 	 "Price": 19.034, 	 "MarketCap": 134540000, 	 "IPO":2014, 		 "Sector":"Finance", 	 "Industry":"Major Banks"},
      {"Symbol":"BBSI", 	 "Name": "Barrett Business Services, Inc.", 	 "Price": 39.78, 	 "MarketCap": 283100000, 	 "IPO":1993, 		 "Sector":"Technology", 	 "Industry":"Professional Services"},
      {"Symbol":"BV", 	 "Name": "Bazaarvoice, Inc.", 	 "Price": 8.54, 	 "MarketCap": 671540000, 	 "IPO":2012, 		 "Sector":"Technology", 	 "Industry":"Computer Software: Prepackaged Software"},
      {"Symbol":"BCBP", 	 "Name": "BCB Bancorp, Inc. (NJ)", 	 "Price": 11.7, 	 "MarketCap": 98130000, 	 "IPO":2005, 		 "Sector":"Finance", 	 "Industry":"Savings Institutions"},
      {"Symbol":"BECN", 	 "Name": "Beacon Roofing Supply, Inc.", 	 "Price": 28.08, 	 "MarketCap": 1390000000, 	 "IPO":2004, 		 "Sector":"Consumer Services", 	 "Industry":"RETAIL: Building Materials"},
      {"Symbol":"BBGI", 	 "Name": "Beasley Broadcast Group, Inc.", 	 "Price": 5.08, 	 "MarketCap": 117410000, 	 "IPO":2000, 		 "Sector":"Consumer Services", 	 "Industry":"Broadcasting"},
      {"Symbol":"BEBE", 	 "Name": "bebe stores, inc.", 	 "Price": 3.9, 	 "MarketCap": 310490000, 	 "IPO":1998, 		 "Sector":"Consumer Non-Durables", 	 "Industry":"Apparel"},
      {"Symbol":"BBBY", 	 "Name": "Bed Bath & Beyond Inc.", 	 "Price": 77.91, 	 "MarketCap": 14460000000, 	 "IPO":1992, 		 "Sector":"Consumer Services", 	 "Industry":"Home Furnishings"},
      {"Symbol":"BLCM", 	 "Name": "Bellicum Pharmaceuticals, Inc.", 	 "Price": 20, 	 "MarketCap": 516990000, 	 "IPO":2014, 		 "Sector":"Health Care", 	 "Industry":"Major Pharmaceuticals"},
      {"Symbol":"BNFT", 	 "Name": "Benefitfocus, Inc.", 	 "Price": 21.08, 	 "MarketCap": 538710000, 	 "IPO":2013, 		 "Sector":"Technology", 	 "Industry":"Computer Software: Prepackaged Software"},
      {"Symbol":"BGMD", 	 "Name": "BG Medicine, Inc.", 	 "Price": 0.88, 	 "MarketCap": 30290000, 	 "IPO":2011, 		 "Sector":"Health Care", 	 "Industry":"Biotechnology: In Vitro & In Vivo Diagnostic Substances"},
      {"Symbol":"BGFV", 	 "Name": "Big 5 Sporting Goods Corporation", 	 "Price": 12.53, 	 "MarketCap": 277840000, 	 "IPO":2002, 		 "Sector":"Consumer Services", 	 "Industry":"Other Specialty Stores"},
      {"Symbol":"BIND", 	 "Name": "BIND Therapeutics, Inc.", 	 "Price": 6.06, 	 "MarketCap": 100280000, 	 "IPO":2013, 		 "Sector":"Health Care", 	 "Industry":"Major Pharmaceuticals"},
      {"Symbol":"ORPN", 	 "Name": "Bio Blast Pharma Ltd.", 	 "Price": 7.17, 	 "MarketCap": 102030000, 	 "IPO":2014, 		 "Sector":"Health Care", 	 "Industry":"Major Pharmaceuticals"},
      {"Symbol":"BASI", 	 "Name": "Bioanalytical Systems, Inc.", 	 "Price": 2.06, 	 "MarketCap": 16640000, 	 "IPO":1997, 		 "Sector":"Health Care", 	 "Industry":"Biotechnology: Commercial Physical & Biological Resarch"},
      {"Symbol":"BIOC", 	 "Name": "Biocept, Inc.", 	 "Price": 1.41, 	 "MarketCap": 6270000, 	 "IPO":2014, 		 "Sector":"Health Care", 	 "Industry":"Medical Specialities"},
      {"Symbol":"BCRX", 	 "Name": "BioCryst Pharmaceuticals, Inc.", 	 "Price": 10.06, 	 "MarketCap": 722950000, 	 "IPO":1994, 		 "Sector":"Health Care", 	 "Industry":"Biotechnology: Biological Products (No Diagnostic Substances)"},
      {"Symbol":"BIOD", 	 "Name": "Biodel Inc.", 	 "Price": 1.38, 	 "MarketCap": 33200000, 	 "IPO":2007, 		 "Sector":"Health Care", 	 "Industry":"Major Pharmaceuticals"},
      {"Symbol":"BMRN", 	 "Name": "BioMarin Pharmaceutical Inc.", 	 "Price": 100.76, 	 "MarketCap": 14860000000, 	 "IPO":1999, 		 "Sector":"Health Care", 	 "Industry":"Major Pharmaceuticals"},
      {"Symbol":"BEAT", 	 "Name": "BioTelemetry, Inc.", 	 "Price": 10.35, 	 "MarketCap": 276180000, 	 "IPO":2008, 		 "Sector":"Health Care", 	 "Industry":"Medical/Dental Instruments"},
      {"Symbol":"BDMS", 	 "Name": "Birner Dental Management Services, Inc.", 	 "Price": 14.79, 	 "MarketCap": 27510000, 	 "IPO":1998, 		 "Sector":"Health Care", 	 "Industry":"Medical/Nursing Services"},
      {"Symbol":"BLKB", 	 "Name": "Blackbaud, Inc.", 	 "Price": 44.45, 	 "MarketCap": 2060000000, 	 "IPO":2004, 		 "Sector":"Technology", 	 "Industry":"Computer Software: Prepackaged Software"},
      {"Symbol":"HAWK", 	 "Name": "Blackhawk Network Holdings, Inc.", 	 "Price": 36.59, 	 "MarketCap": 1940000000, 	 "IPO":2013, 		 "Sector":"Finance", 	 "Industry":"Finance: Consumer Services"},
      {"Symbol":"BLMN", 	 "Name": "Bloomin&#39; Brands, Inc.", 	 "Price": 24.45, 	 "MarketCap": 3070000000, 	 "IPO":2012, 		 "Sector":"Consumer Services", 	 "Industry":"Restaurants"},
      {"Symbol":"BHBK", 	 "Name": "Blue Hills Bancorp, Inc.", 	 "Price": 12.97, 	 "MarketCap": 369210000, 	 "IPO":2014, 		 "Sector":"Finance", 	 "Industry":"Major Banks"},
      {"Symbol":"NILE", 	 "Name": "Blue Nile, Inc.", 	 "Price": 29.02, 	 "MarketCap": 343760000, 	 "IPO":2004, 		 "Sector":"Consumer Services", 	 "Industry":"Consumer Specialties"},
      {"Symbol":"BLUE", 	 "Name": "bluebird bio, Inc.", 	 "Price": 90.69, 	 "MarketCap": 2610000000, 	 "IPO":2013, 		 "Sector":"Health Care", 	 "Industry":"Biotechnology: Biological Products (No Diagnostic Substances)"},
      {"Symbol":"BKEP", 	 "Name": "Blueknight Energy Partners L.P., L.L.C.", 	 "Price": 7.19, 	 "MarketCap": 235590000, 	 "IPO":2011, 		 "Sector":"Energy", 	 "Industry":"Natural Gas Distribution"},
      {"Symbol":"BOFI", 	 "Name": "BofI Holding, Inc.", 	 "Price": 91.39, 	 "MarketCap": 1380000000, 	 "IPO":2005, 		 "Sector":"Finance", 	 "Industry":"Savings Institutions"},
      {"Symbol":"WIFI", 	 "Name": "Boingo Wireless, Inc.", 	 "Price": 8.4, 	 "MarketCap": 303120000, 	 "IPO":2011, 		 "Sector":"Consumer Services", 	 "Industry":"Telecommunications Equipment"},
      {"Symbol":"BONA", 	 "Name": "Bona Film Group Limited", 	 "Price": 7.0423, 	 "MarketCap": 428710000, 	 "IPO":2010, 		 "Sector":"Consumer Services", 	 "Industry":"Movies/Entertainment"},
      {"Symbol":"BAMM", 	 "Name": "Books-A-Million, Inc.", 	 "Price": 2.57, 	 "MarketCap": 38590000, 	 "IPO":1992, 		 "Sector":"Consumer Services", 	 "Industry":"Other Specialty Stores"},
      {"Symbol":"BRDR", 	 "Name": "Borderfree, Inc.", 	 "Price": 6.15, 	 "MarketCap": 195650000, 	 "IPO":2014, 		 "Sector":"Miscellaneous", 	 "Industry":"Business Services"},
      {"Symbol":"EPAY", 	 "Name": "Bottomline Technologies, Inc.", 	 "Price": 27.07, 	 "MarketCap": 1080000000, 	 "IPO":1999, 		 "Sector":"Technology", 	 "Industry":"Computer Software: Prepackaged Software"},
      {"Symbol":"BLVD", 	 "Name": "Boulevard Acquisition Corp.", 	 "Price": 9.73, 	 "MarketCap": 268180000, 	 "IPO":2014, 		 "Sector":"Finance", 	 "Industry":"Business Services"},
      {"Symbol":"BLVDU", 	 "Name": "Boulevard Acquisition Corp.", 	 "Price": 9.95, 	 "MarketCap": 274250000, 	 "IPO":2014, 		 "Sector":"Finance", 	 "Industry":"Business Services"},
      {"Symbol":"BBRG", 	 "Name": "Bravo Brio Restaurant Group, Inc.", 	 "Price": 13.49, 	 "MarketCap": 203500000, 	 "IPO":2010, 		 "Sector":"Consumer Services", 	 "Industry":"Restaurants"},
      {"Symbol":"BBEP", 	 "Name": "BreitBurn Energy Partners, L.P.", 	 "Price": 7.85, 	 "MarketCap": 1090000000, 	 "IPO":2006, 		 "Sector":"Energy", 	 "Industry":"Oil & Gas Production"},
      {"Symbol":"BCOV", 	 "Name": "Brightcove Inc.", 	 "Price": 8.43, 	 "MarketCap": 272060000, 	 "IPO":2012, 		 "Sector":"Technology", 	 "Industry":"EDP Services"},
      {"Symbol":"BRCM", 	 "Name": "Broadcom Corporation", 	 "Price": 45.69, 	 "MarketCap": 27370000000, 	 "IPO":1998, 		 "Sector":"Technology", 	 "Industry":"Semiconductors"},
      {"Symbol":"BSFT", 	 "Name": "BroadSoft, Inc.", 	 "Price": 27.58, 	 "MarketCap": 794490000, 	 "IPO":2010, 		 "Sector":"Technology", 	 "Industry":"Computer Software: Prepackaged Software"},
      {"Symbol":"BVSN", 	 "Name": "BroadVision, Inc.", 	 "Price": 6.27, 	 "MarketCap": 30230000, 	 "IPO":1996, 		 "Sector":"Technology", 	 "Industry":"Computer Software: Prepackaged Software"},
      {"Symbol":"BRCD", 	 "Name": "Brocade Communications Systems, Inc.", 	 "Price": 12.56, 	 "MarketCap": 5410000000, 	 "IPO":1999, 		 "Sector":"Technology", 	 "Industry":"Computer Communications Equipment"},
      {"Symbol":"BRKS", 	 "Name": "Brooks Automation, Inc.", 	 "Price": 12.08, 	 "MarketCap": 813150000, 	 "IPO":1995, 		 "Sector":"Technology", 	 "Industry":"Industrial Machinery/Components"},
      {"Symbol":"BLMT", 	 "Name": "BSB Bancorp, Inc.", 	 "Price": 18.88, 	 "MarketCap": 171120000, 	 "IPO":2011, 		 "Sector":"Finance", 	 "Industry":"Major Banks"},
      {"Symbol":"BSQR", 	 "Name": "BSQUARE Corporation", 	 "Price": 4.53, 	 "MarketCap": 53120000, 	 "IPO":1999, 		 "Sector":"Miscellaneous", 	 "Industry":"Business Services"},
      {"Symbol":"BWLD", 	 "Name": "Buffalo Wild Wings, Inc.", 	 "Price": 187.27, 	 "MarketCap": 3540000000, 	 "IPO":2003, 		 "Sector":"Consumer Services", 	 "Industry":"Restaurants"},
      {"Symbol":"BLDR", 	 "Name": "Builders FirstSource, Inc.", 	 "Price": 6.66, 	 "MarketCap": 653650000, 	 "IPO":2005, 		 "Sector":"Consumer Services", 	 "Industry":"RETAIL: Building Materials"},
      {"Symbol":"CHRW", 	 "Name": "C.H. Robinson Worldwide, Inc.", 	 "Price": 72.58, 	 "MarketCap": 10620000000, 	 "IPO":1997, 		 "Sector":"Transportation", 	 "Industry":"Oil Refining/Marketing"},
      {"Symbol":"CCMP", 	 "Name": "Cabot Microelectronics Corporation", 	 "Price": 52.18, 	 "MarketCap": 1260000000, 	 "IPO":2000, 		 "Sector":"Technology", 	 "Industry":"Semiconductors"},
      {"Symbol":"CZR", 	 "Name": "Caesars Entertainment Corporation", 	 "Price": 10.785, 	 "MarketCap": 1560000000, 	 "IPO":2012, 		 "Sector":"Consumer Services", 	 "Industry":"Hotels/Resorts"},
      {"Symbol":"CSTE", 	 "Name": "CaesarStone Sdot-Yam Ltd.", 	 "Price": 62.62, 	 "MarketCap": 2200000000, 	 "IPO":2012, 		 "Sector":"Capital Goods", 	 "Industry":"Building Materials"},
      {"Symbol":"PRSS", 	 "Name": "CafePress Inc.", 	 "Price": 2.95, 	 "MarketCap": 51250000, 	 "IPO":2012, 		 "Sector":"Consumer Services", 	 "Industry":"Other Specialty Stores"},
      {"Symbol":"CLMS", 	 "Name": "Calamos Asset Management, Inc.", 	 "Price": 12.96, 	 "MarketCap": 266080000, 	 "IPO":2004, 		 "Sector":"Finance", 	 "Industry":"Investment Bankers/Brokers/Service"},
      {"Symbol":"CAMP", 	 "Name": "CalAmp Corp.", 	 "Price": 18.55, 	 "MarketCap": 671610000, 	 "IPO":1983, 		 "Sector":"Technology", 	 "Industry":"Radio And Television Broadcasting And Communications Equipment"},
      {"Symbol":"CALA", 	 "Name": "Calithera Biosciences, Inc.", 	 "Price": 16.11, 	 "MarketCap": 288860000, 	 "IPO":2014, 		 "Sector":"Health Care", 	 "Industry":"Major Pharmaceuticals"},
      {"Symbol":"CALD", 	 "Name": "Callidus Software, Inc.", 	 "Price": 14.95, 	 "MarketCap": 727000000, 	 "IPO":2003, 		 "Sector":"Technology", 	 "Industry":"EDP Services"},
      {"Symbol":"CALM", 	 "Name": "Cal-Maine Foods, Inc.", 	 "Price": 35.73, 	 "MarketCap": 1730000000, 	 "IPO":1996, 		 "Sector":"Consumer Non-Durables", 	 "Industry":"Farming/Seeds/Milling"},
      {"Symbol":"CLMT", 	 "Name": "Calumet Specialty Products Partners, L.P.", 	 "Price": 25.38, 	 "MarketCap": 1760000000, 	 "IPO":2006, 		 "Sector":"Energy", 	 "Industry":"Integrated oil Companies"},
      {"Symbol":"CAMB", 	 "Name": "CAMBRIDGE CAPITAL ACQUISITION CORPORATION", 	 "Price": 9.92, 	 "MarketCap": 104500000, 	 "IPO":2014, 		 "Sector":"Finance", 	 "Industry":"Business Services"},
      {"Symbol":"CAMT", 	 "Name": "Camtek Ltd.", 	 "Price": 3.08, 	 "MarketCap": 93850000, 	 "IPO":2000, 		 "Sector":"Capital Goods", 	 "Industry":"Electronic Components"},
      {"Symbol":"CSIQ", 	 "Name": "Canadian Solar Inc.", 	 "Price": 28.84, 	 "MarketCap": 1560000000, 	 "IPO":2006, 		 "Sector":"Technology", 	 "Industry":"Semiconductors"},
      {"Symbol":"CPLA", 	 "Name": "Capella Education Company", 	 "Price": 65.23, 	 "MarketCap": 797800000, 	 "IPO":2006, 		 "Sector":"Consumer Services", 	 "Industry":"Other Consumer Services"},
      {"Symbol":"CBF", 	 "Name": "Capital Bank Financial Corp.", 	 "Price": 26.04, 	 "MarketCap": 1240000000, 	 "IPO":2012, 		 "Sector":"Finance", 	 "Industry":"Major Banks"},
      {"Symbol":"CPLP", 	 "Name": "Capital Product Partners L.P.", 	 "Price": 9.09, 	 "MarketCap": 965730000, 	 "IPO":2007, 		 "Sector":"Transportation", 	 "Industry":"Marine Transportation"},
      {"Symbol":"CLAC", 	 "Name": "Capitol Acquisition Corp. II", 	 "Price": 9.83, 	 "MarketCap": 245750000, 	 "IPO":2013, 		 "Sector":"Finance", 	 "Industry":"Business Services"},
      {"Symbol":"CLACU", 	 "Name": "Capitol Acquisition Corp. II", 	 "Price": 10, 	 "MarketCap": 250000000, 	 "IPO":2013, 		 "Sector":"Finance", 	 "Industry":"Business Services"},
      {"Symbol":"CAPN", 	 "Name": "Capnia, Inc.", 	 "Price": 1.77, 	 "MarketCap": 11980000, 	 "IPO":2014, 		 "Sector":"Health Care", 	 "Industry":"Biotechnology: Electromedical & Electrotherapeutic Apparatus"},
      {"Symbol":"CPST", 	 "Name": "Capstone Turbine Corporation", 	 "Price": 0.7339, 	 "MarketCap": 242410000, 	 "IPO":2000, 		 "Sector":"Energy", 	 "Industry":"Industrial Machinery/Components"},
      {"Symbol":"CARA", 	 "Name": "Cara Therapeutics, Inc.", 	 "Price": 10.96, 	 "MarketCap": 249650000, 	 "IPO":2014, 		 "Sector":"Health Care", 	 "Industry":"Major Pharmaceuticals"},
      {"Symbol":"CARB", 	 "Name": "Carbonite, Inc.", 	 "Price": 14.96, 	 "MarketCap": 407190000, 	 "IPO":2011, 		 "Sector":"Technology", 	 "Industry":"EDP Services"},
      {"Symbol":"CRDC", 	 "Name": "Cardica, Inc.", 	 "Price": 0.5798, 	 "MarketCap": 51580000, 	 "IPO":2006, 		 "Sector":"Health Care", 	 "Industry":"Medical/Dental Instruments"},
      {"Symbol":"CFNL", 	 "Name": "Cardinal Financial Corporation", 	 "Price": 19.32, 	 "MarketCap": 618820000, 	 "IPO":1998, 		 "Sector":"Finance", 	 "Industry":"Major Banks"},
      {"Symbol":"CSII", 	 "Name": "Cardiovascular Systems, Inc.", 	 "Price": 35.69, 	 "MarketCap": 1130000000, 	 "IPO":1981, 		 "Sector":"Health Care", 	 "Industry":"Medical/Dental Instruments"},
      {"Symbol":"CATM", 	 "Name": "Cardtronics, Inc.", 	 "Price": 37.02, 	 "MarketCap": 1650000000, 	 "IPO":2007, 		 "Sector":"Miscellaneous", 	 "Industry":"Business Services"},
      {"Symbol":"CDNA", 	 "Name": "CareDx, Inc.", 	 "Price": 6.3, 	 "MarketCap": 74360000, 	 "IPO":2014, 		 "Sector":"Health Care", 	 "Industry":"Medical Specialities"},
      {"Symbol":"CECO", 	 "Name": "Career Education Corporation", 	 "Price": 5.34, 	 "MarketCap": 359270000, 	 "IPO":1998, 		 "Sector":"Consumer Services", 	 "Industry":"Other Consumer Services"},
      {"Symbol":"CRZO", 	 "Name": "Carrizo Oil & Gas, Inc.", 	 "Price": 52.6, 	 "MarketCap": 2420000000, 	 "IPO":1997, 		 "Sector":"Energy", 	 "Industry":"Oil & Gas Production"},
      {"Symbol":"TAST", 	 "Name": "Carrols Restaurant Group, Inc.", 	 "Price": 7.93, 	 "MarketCap": 279310000, 	 "IPO":2006, 		 "Sector":"Consumer Services", 	 "Industry":"Restaurants"},
      {"Symbol":"CSCD", 	 "Name": "Cascade Microtech, Inc.", 	 "Price": 13.73, 	 "MarketCap": 224780000, 	 "IPO":2004, 		 "Sector":"Capital Goods", 	 "Industry":"Electrical Products"},
      {"Symbol":"CWST", 	 "Name": "Casella Waste Systems, Inc.", 	 "Price": 4.11, 	 "MarketCap": 166590000, 	 "IPO":1997, 		 "Sector":"Public Utilities", 	 "Industry":"Environmental Services"},
      {"Symbol":"CASY", 	 "Name": "Caseys General Stores, Inc.", 	 "Price": 88.93, 	 "MarketCap": 3440000000, 	 "IPO":1983, 		 "Sector":"Consumer Durables", 	 "Industry":"Automotive Aftermarket"},
      {"Symbol":"CPRX", 	 "Name": "Catalyst Pharmaceutical Partners, Inc.", 	 "Price": 3.36, 	 "MarketCap": 270880000, 	 "IPO":2006, 		 "Sector":"Health Care", 	 "Industry":"Major Pharmaceuticals"},
      {"Symbol":"CAVM", 	 "Name": "Cavium, Inc.", 	 "Price": 62.86, 	 "MarketCap": 3390000000, 	 "IPO":2007, 		 "Sector":"Technology", 	 "Industry":"Semiconductors"},
      {"Symbol":"CNLM", 	 "Name": "CB Pharma Acquisition Corp.", 	 "Price": 9.749, 	 "MarketCap": 51520000, 	 "IPO":2015, 		 "Sector":"Finance", 	 "Industry":"Business Services"},
      {"Symbol":"CBOE", 	 "Name": "CBOE Holdings, Inc.", 	 "Price": 63.01, 	 "MarketCap": 5320000000, 	 "IPO":2010, 		 "Sector":"Finance", 	 "Industry":"Investment Bankers/Brokers/Service"},
      {"Symbol":"CDW", 	 "Name": "CDW Corporation", 	 "Price": 37.03, 	 "MarketCap": 6380000000, 	 "IPO":2013, 		 "Sector":"Consumer Services", 	 "Industry":"Catalog/Specialty Distribution"},
      {"Symbol":"CELG", 	 "Name": "Celgene Corporation", 	 "Price": 115.88, 	 "MarketCap": 92550000000, 	 "IPO":1987, 		 "Sector":"Health Care", 	 "Industry":"Major Pharmaceuticals"},
      {"Symbol":"CLDN", 	 "Name": "Celladon Corporation", 	 "Price": 16.45, 	 "MarketCap": 383360000, 	 "IPO":2014, 		 "Sector":"Health Care", 	 "Industry":"Biotechnology: Biological Products (No Diagnostic Substances)"},
      {"Symbol":"ICEL", 	 "Name": "Cellular Dynamics International, Inc.", 	 "Price": 5.27, 	 "MarketCap": 83340000, 	 "IPO":2013, 		 "Sector":"Health Care", 	 "Industry":"Biotechnology: Biological Products (No Diagnostic Substances)"},
      {"Symbol":"CEMP", 	 "Name": "Cempra, Inc.", 	 "Price": 27.68, 	 "MarketCap": 1180000000, 	 "IPO":2012, 		 "Sector":"Health Care", 	 "Industry":"Major Pharmaceuticals"},
      {"Symbol":"CETV", 	 "Name": "Central European Media Enterprises Ltd.", 	 "Price": 2.8, 	 "MarketCap": 378940000, 	 "IPO":1994, 		 "Sector":"Consumer Services", 	 "Industry":"Broadcasting"},
      {"Symbol":"CENT", 	 "Name": "Central Garden & Pet Company", 	 "Price": 9, 	 "MarketCap": 449310000, 	 "IPO":1993, 		 "Sector":"Consumer Durables", 	 "Industry":"Consumer Specialties"},
      {"Symbol":"CENX", 	 "Name": "Century Aluminum Company", 	 "Price": 23.1, 	 "MarketCap": 2050000000, 	 "IPO":1996, 		 "Sector":"Basic Industries", 	 "Industry":"Aluminum"},
      {"Symbol":"CNBKA", 	 "Name": "Century Bancorp, Inc.", 	 "Price": 39.6, 	 "MarketCap": 220490000, 	 "IPO":1987, 		 "Sector":"Finance", 	 "Industry":"Major Banks"},
      {"Symbol":"CPHD", 	 "Name": "CEPHEID", 	 "Price": 59.62, 	 "MarketCap": 4200000000, 	 "IPO":2000, 		 "Sector":"Capital Goods", 	 "Industry":"Biotechnology: Laboratory Analytical Instruments"},
      {"Symbol":"CERE", 	 "Name": "Ceres, Inc.", 	 "Price": 0.2402, 	 "MarketCap": 11590000, 	 "IPO":2012, 		 "Sector":"Consumer Non-Durables", 	 "Industry":"Farming/Seeds/Milling"},
      {"Symbol":"CERN", 	 "Name": "Cerner Corporation", 	 "Price": 70.98, 	 "MarketCap": 24320000000, 	 "IPO":1986, 		 "Sector":"Technology", 	 "Industry":"EDP Services"},
      {"Symbol":"CERU", 	 "Name": "Cerulean Pharma Inc.", 	 "Price": 6.62, 	 "MarketCap": 133230000, 	 "IPO":2014, 		 "Sector":"Health Care", 	 "Industry":"Major Pharmaceuticals"},
      {"Symbol":"CERS", 	 "Name": "Cerus Corporation", 	 "Price": 5.53, 	 "MarketCap": 432830000, 	 "IPO":1997, 		 "Sector":"Health Care", 	 "Industry":"Medical/Dental Instruments"},
      {"Symbol":"CYOU", 	 "Name": "Changyou.com Limited", 	 "Price": 26.25, 	 "MarketCap": 1390000000, 	 "IPO":2009, 		 "Sector":"Technology", 	 "Industry":"Computer Software: Prepackaged Software"},
      {"Symbol":"CTHR", 	 "Name": "Charles & Colvard Ltd", 	 "Price": 1.63, 	 "MarketCap": 33180000, 	 "IPO":1997, 		 "Sector":"Consumer Durables", 	 "Industry":"Consumer Specialties"},
      {"Symbol":"CACG", 	 "Name": "Chart Acquisition Corp.", 	 "Price": 9.889, 	 "MarketCap": 86880000, 	 "IPO":2013, 		 "Sector":"Finance", 	 "Industry":"Business Services"},
      {"Symbol":"GTLS", 	 "Name": "Chart Industries, Inc.", 	 "Price": 32.02, 	 "MarketCap": 976010000, 	 "IPO":2006, 		 "Sector":"Capital Goods", 	 "Industry":"Metal Fabrications"},
      {"Symbol":"CHFN", 	 "Name": "Charter Financial Corp.", 	 "Price": 11.55, 	 "MarketCap": 194770000, 	 "IPO":2010, 		 "Sector":"Finance", 	 "Industry":"Savings Institutions"},
      {"Symbol":"CHKP", 	 "Name": "Check Point Software Technologies Ltd.", 	 "Price": 80.33, 	 "MarketCap": 15330000000, 	 "IPO":1996, 		 "Sector":"Technology", 	 "Industry":"Computer Software: Prepackaged Software"},
      {"Symbol":"CCXI", 	 "Name": "ChemoCentryx, Inc.", 	 "Price": 7.85, 	 "MarketCap": 340220000, 	 "IPO":2012, 		 "Sector":"Health Care", 	 "Industry":"Major Pharmaceuticals"},
      {"Symbol":"CHEV", 	 "Name": "Cheviot Financial Corp", 	 "Price": 14.44, 	 "MarketCap": 96860000, 	 "IPO":2004, 		 "Sector":"Finance", 	 "Industry":"Savings Institutions"},
      {"Symbol":"PLCE", 	 "Name": "Children&#39;s Place, Inc. (The)", 	 "Price": 59.21, 	 "MarketCap": 1260000000, 	 "IPO":1997, 		 "Sector":"Consumer Services", 	 "Industry":"Clothing/Shoe/Accessory Stores"},
      {"Symbol":"CMRX", 	 "Name": "Chimerix, Inc.", 	 "Price": 40.16, 	 "MarketCap": 1630000000, 	 "IPO":2013, 		 "Sector":"Health Care", 	 "Industry":"Major Pharmaceuticals"},
      {"Symbol":"CCCR", 	 "Name": "China Commercial Credit, Inc.", 	 "Price": 2.9801, 	 "MarketCap": 36500000, 	 "IPO":2013, 		 "Sector":"Finance", 	 "Industry":"Major Banks"},
      {"Symbol":"JRJC", 	 "Name": "China Finance Online Co. Limited", 	 "Price": 5.46, 	 "MarketCap": 121370000, 	 "IPO":2004, 		 "Sector":"Miscellaneous", 	 "Industry":"Business Services"},
      {"Symbol":"HTHT", 	 "Name": "China Lodging Group, Limited", 	 "Price": 21.88, 	 "MarketCap": 1350000000, 	 "IPO":2010, 		 "Sector":"Consumer Services", 	 "Industry":"Hotels/Resorts"},
      {"Symbol":"CPGI", 	 "Name": "China Shengda Packaging Group, Inc.", 	 "Price": 0.93, 	 "MarketCap": 36080000, 	 "IPO":2010, 		 "Sector":"Consumer Durables", 	 "Industry":"Containers/Packaging"},
      {"Symbol":"CSUN", 	 "Name": "China Sunergy Co., Ltd.", 	 "Price": 1.9, 	 "MarketCap": 25410000, 	 "IPO":2007, 		 "Sector":"Technology", 	 "Industry":"Semiconductors"},
      {"Symbol":"CNTF", 	 "Name": "China TechFaith Wireless Communication Technology Limited", 	 "Price": 1.08, 	 "MarketCap": 57170000, 	 "IPO":2005, 		 "Sector":"Miscellaneous", 	 "Industry":"Business Services"},
      {"Symbol":"CCIH", 	 "Name": "ChinaCache International Holdings Ltd.", 	 "Price": 10.5, 	 "MarketCap": 245740000, 	 "IPO":2010, 		 "Sector":"Technology", 	 "Industry":"EDP Services"},
      {"Symbol":"CHUY", 	 "Name": "Chuy&#39;s Holdings, Inc.", 	 "Price": 22.04, 	 "MarketCap": 362360000, 	 "IPO":2012, 		 "Sector":"Consumer Services", 	 "Industry":"Restaurants"},
      {"Symbol":"CTAS", 	 "Name": "Cintas Corporation", 	 "Price": 81.64, 	 "MarketCap": 9580000000, 	 "IPO":1983, 		 "Sector":"Consumer Non-Durables", 	 "Industry":"Apparel"},
      {"Symbol":"CRUS", 	 "Name": "Cirrus Logic, Inc.", 	 "Price": 29.36, 	 "MarketCap": 1840000000, 	 "IPO":1989, 		 "Sector":"Technology", 	 "Industry":"Semiconductors"},
      {"Symbol":"CSCO", 	 "Name": "Cisco Systems, Inc.", 	 "Price": 29.43, 	 "MarketCap": 1.5049E+11, 	 "IPO":1990, 		 "Sector":"Technology", 	 "Industry":"Computer Communications Equipment"},
      {"Symbol":"CTRN", 	 "Name": "Citi Trends, Inc.", 	 "Price": 27.2, 	 "MarketCap": 423730000, 	 "IPO":2005, 		 "Sector":"Consumer Services", 	 "Industry":"Clothing/Shoe/Accessory Stores"},
      {"Symbol":"CTXS", 	 "Name": "Citrix Systems, Inc.", 	 "Price": 64.51, 	 "MarketCap": 10380000000, 	 "IPO":1995, 		 "Sector":"Technology", 	 "Industry":"Computer Software: Prepackaged Software"},
      {"Symbol":"CLNE", 	 "Name": "Clean Energy Fuels Corp.", 	 "Price": 5.44, 	 "MarketCap": 489900000, 	 "IPO":2007, 		 "Sector":"Public Utilities", 	 "Industry":"Natural Gas Distribution"},
      {"Symbol":"CLIR", 	 "Name": "ClearSign Combustion Corporation", 	 "Price": 7.26, 	 "MarketCap": 70290000, 	 "IPO":2012, 		 "Sector":"Capital Goods", 	 "Industry":"Industrial Machinery/Components"},
      {"Symbol":"CBLI", 	 "Name": "Cleveland BioLabs, Inc.", 	 "Price": 3.24, 	 "MarketCap": 11130000, 	 "IPO":2006, 		 "Sector":"Health Care", 	 "Industry":"Biotechnology: Commercial Physical & Biological Resarch"},
      {"Symbol":"CKSW", 	 "Name": "ClickSoftware Technologies Ltd.", 	 "Price": 8.08, 	 "MarketCap": 262560000, 	 "IPO":2000, 		 "Sector":"Technology", 	 "Industry":"Computer Software: Prepackaged Software"},
      {"Symbol":"CLVS", 	 "Name": "Clovis Oncology, Inc.", 	 "Price": 68.79, 	 "MarketCap": 2340000000, 	 "IPO":2011, 		 "Sector":"Health Care", 	 "Industry":"Major Pharmaceuticals"},
      {"Symbol":"CME", 	 "Name": "CME Group Inc.", 	 "Price": 93.92, 	 "MarketCap": 31640000000, 	 "IPO":2002, 		 "Sector":"Finance", 	 "Industry":"Investment Bankers/Brokers/Service"},
      {"Symbol":"CISG", 	 "Name": "CNinsure Inc.", 	 "Price": 8, 	 "MarketCap": 399540000, 	 "IPO":2007, 		 "Sector":"Finance", 	 "Industry":"Specialty Insurers"},
      {"Symbol":"CNV", 	 "Name": "Cnova N.V.", 	 "Price": 5.9, 	 "MarketCap": 2590000000, 	 "IPO":2014, 		 "Sector":"Consumer Services", 	 "Industry":"Catalog/Specialty Distribution"},
      {"Symbol":"CWAY", 	 "Name": "Coastway Bancorp, Inc.", 	 "Price": 11.02, 	 "MarketCap": 54540000, 	 "IPO":2014, 		 "Sector":"Finance", 	 "Industry":"Savings Institutions"},
      {"Symbol":"COBZ", 	 "Name": "CoBiz Financial Inc.", 	 "Price": 11.71, 	 "MarketCap": 476530000, 	 "IPO":1998, 		 "Sector":"Finance", 	 "Industry":"Major Banks"},
      {"Symbol":"COKE", 	 "Name": "Coca-Cola Bottling Co. Consolidated", 	 "Price": 100.77, 	 "MarketCap": 934270000, 	 "IPO":1972, 		 "Sector":"Consumer Non-Durables", 	 "Industry":"Beverages (Production/Distribution)"},
      {"Symbol":"CDXS", 	 "Name": "Codexis, Inc.", 	 "Price": 3.42, 	 "MarketCap": 135260000, 	 "IPO":2010, 		 "Sector":"Basic Industries", 	 "Industry":"Major Chemicals"},
      {"Symbol":"JVA", 	 "Name": "Coffee Holding Co., Inc.", 	 "Price": 5.06, 	 "MarketCap": 32670000, 	 "IPO":2005, 		 "Sector":"Consumer Non-Durables", 	 "Industry":"Food Distributors"},
      {"Symbol":"CGNX", 	 "Name": "Cognex Corporation", 	 "Price": 41.82, 	 "MarketCap": 3640000000, 	 "IPO":1989, 		 "Sector":"Capital Goods", 	 "Industry":"Industrial Machinery/Components"},
      {"Symbol":"CTSH", 	 "Name": "Cognizant Technology Solutions Corporation", 	 "Price": 60.23, 	 "MarketCap": 36680000000, 	 "IPO":1998, 		 "Sector":"Technology", 	 "Industry":"EDP Services"},
      {"Symbol":"CHRS", 	 "Name": "Coherus BioSciences, Inc.", 	 "Price": 27.11, 	 "MarketCap": 901620000, 	 "IPO":2014, 		 "Sector":"Health Care", 	 "Industry":"Biotechnology: Biological Products (No Diagnostic Substances)"},
      {"Symbol":"CLCT", 	 "Name": "Collectors Universe, Inc.", 	 "Price": 22.72, 	 "MarketCap": 201840000, 	 "IPO":1999, 		 "Sector":"Miscellaneous", 	 "Industry":"Business Services"},
      {"Symbol":"COLB", 	 "Name": "Columbia Banking System, Inc.", 	 "Price": 27.85, 	 "MarketCap": 1480000000, 	 "IPO":1992, 		 "Sector":"Finance", 	 "Industry":"Major Banks"},
      {"Symbol":"CBRX", 	 "Name": "Columbia Laboratories, Inc.", 	 "Price": 5.78, 	 "MarketCap": 62260000, 	 "IPO":1988, 		 "Sector":"Health Care", 	 "Industry":"Major Pharmaceuticals"},
      {"Symbol":"COLM", 	 "Name": "Columbia Sportswear Company", 	 "Price": 51.5, 	 "MarketCap": 3590000000, 	 "IPO":1998, 		 "Sector":"Consumer Non-Durables", 	 "Industry":"Apparel"},
      {"Symbol":"CVGI", 	 "Name": "Commercial Vehicle Group, Inc.", 	 "Price": 6.11, 	 "MarketCap": 181420000, 	 "IPO":2004, 		 "Sector":"Capital Goods", 	 "Industry":"Auto Parts:O.E.M."},
      {"Symbol":"COMM", 	 "Name": "CommScope Holding Company, Inc.", 	 "Price": 30.4, 	 "MarketCap": 5710000000, 	 "IPO":2013, 		 "Sector":"Technology", 	 "Industry":"Radio And Television Broadcasting And Communications Equipment"},
      {"Symbol":"CVLT", 	 "Name": "CommVault Systems, Inc.", 	 "Price": 43.68, 	 "MarketCap": 1960000000, 	 "IPO":2006, 		 "Sector":"Technology", 	 "Industry":"Computer Software: Prepackaged Software"},
      {"Symbol":"CGEN", 	 "Name": "Compugen Ltd.", 	 "Price": 8.19, 	 "MarketCap": 410240000, 	 "IPO":2000, 		 "Sector":"Health Care", 	 "Industry":"Biotechnology: Biological Products (No Diagnostic Substances)"},
      {"Symbol":"CPSI", 	 "Name": "Computer Programs and Systems, Inc.", 	 "Price": 53.11, 	 "MarketCap": 595300000, 	 "IPO":2002, 		 "Sector":"Technology", 	 "Industry":"EDP Services"},
      {"Symbol":"SCOR", 	 "Name": "comScore, Inc.", 	 "Price": 53.35, 	 "MarketCap": 1820000000, 	 "IPO":2007, 		 "Sector":"Miscellaneous", 	 "Industry":"Business Services"},
      {"Symbol":"CHCI", 	 "Name": "Comstock Holding Companies, Inc.", 	 "Price": 1.06, 	 "MarketCap": 22900000, 	 "IPO":2004, 		 "Sector":"Capital Goods", 	 "Industry":"Homebuilding"},
      {"Symbol":"CNAT", 	 "Name": "Conatus Pharmaceuticals Inc.", 	 "Price": 5.92, 	 "MarketCap": 92880000, 	 "IPO":2013, 		 "Sector":"Health Care", 	 "Industry":"Major Pharmaceuticals"},
      {"Symbol":"CNCE", 	 "Name": "Concert Pharmaceuticals, Inc.", 	 "Price": 12.76, 	 "MarketCap": 232060000, 	 "IPO":2014, 		 "Sector":"Health Care", 	 "Industry":"Major Pharmaceuticals"},
      {"Symbol":"CNMD", 	 "Name": "CONMED Corporation", 	 "Price": 48.98, 	 "MarketCap": 1350000000, 	 "IPO":1987, 		 "Sector":"Health Care", 	 "Industry":"Biotechnology: Electromedical & Electrotherapeutic Apparatus"},
      {"Symbol":"CNXR", 	 "Name": "Connecture, Inc.", 	 "Price": 8.51, 	 "MarketCap": 184500000, 	 "IPO":2014, 		 "Sector":"Technology", 	 "Industry":"Computer Software: Prepackaged Software"},
      {"Symbol":"CONN", 	 "Name": "Conn&#39;s, Inc.", 	 "Price": 24.69, 	 "MarketCap": 896180000, 	 "IPO":2003, 		 "Sector":"Consumer Services", 	 "Industry":"Consumer Electronics/Video Chains"},
      {"Symbol":"CNSL", 	 "Name": "Consolidated Communications Holdings, Inc.", 	 "Price": 24.09, 	 "MarketCap": 1210000000, 	 "IPO":2005, 		 "Sector":"Public Utilities", 	 "Industry":"Telecommunications Equipment"},
      {"Symbol":"CTCT", 	 "Name": "Constant Contact, Inc.", 	 "Price": 42.48, 	 "MarketCap": 1350000000, 	 "IPO":2007, 		 "Sector":"Technology", 	 "Industry":"Advertising"},
      {"Symbol":"CPSS", 	 "Name": "Consumer Portfolio Services, Inc.", 	 "Price": 6.69, 	 "MarketCap": 169730000, 	 "IPO":1992, 		 "Sector":"Finance", 	 "Industry":"Finance: Consumer Services"},
      {"Symbol":"CFRX", 	 "Name": "ContraFect Corporation", 	 "Price": 4, 	 "MarketCap": 80870000, 	 "IPO":2014, 		 "Sector":"Health Care", 	 "Industry":"Major Pharmaceuticals"},
      {"Symbol":"CTRL", 	 "Name": "Control4 Corporation", 	 "Price": 13.39, 	 "MarketCap": 319760000, 	 "IPO":2013, 		 "Sector":"Capital Goods", 	 "Industry":"Electrical Products"},
      {"Symbol":"CPRT", 	 "Name": "Copart, Inc.", 	 "Price": 38.17, 	 "MarketCap": 4820000000, 	 "IPO":1994, 		 "Sector":"Consumer Durables", 	 "Industry":"Automotive Aftermarket"},
      {"Symbol":"CORT", 	 "Name": "Corcept Therapeutics Incorporated", 	 "Price": 3.15, 	 "MarketCap": 318750000, 	 "IPO":1982, 		 "Sector":"Health Care", 	 "Industry":"Major Pharmaceuticals"},
      {"Symbol":"COCO", 	 "Name": "Corinthian Colleges, Inc.", 	 "Price": 0.021, 	 "MarketCap": 1840000, 	 "IPO":1999, 		 "Sector":"Consumer Services", 	 "Industry":"Other Consumer Services"},
      {"Symbol":"CORI", 	 "Name": "Corium International, Inc.", 	 "Price": 7, 	 "MarketCap": 126500000, 	 "IPO":2014, 		 "Sector":"Health Care", 	 "Industry":"Major Pharmaceuticals"},
      {"Symbol":"CSOD", 	 "Name": "Cornerstone OnDemand, Inc.", 	 "Price": 35.025, 	 "MarketCap": 1880000000, 	 "IPO":2011, 		 "Sector":"Technology", 	 "Industry":"Computer Software: Prepackaged Software"},
      {"Symbol":"COSI", 	 "Name": "Cosi, Inc.", 	 "Price": 2.8, 	 "MarketCap": 112400000, 	 "IPO":2002, 		 "Sector":"Consumer Services", 	 "Industry":"Restaurants"},
      {"Symbol":"CSGP", 	 "Name": "CoStar Group, Inc.", 	 "Price": 200.535, 	 "MarketCap": 6490000000, 	 "IPO":1998, 		 "Sector":"Miscellaneous", 	 "Industry":"Business Services"},
      {"Symbol":"CVTI", 	 "Name": "Covenant Transportation Group, Inc.", 	 "Price": 29.64, 	 "MarketCap": 374530000, 	 "IPO":1994, 		 "Sector":"Transportation", 	 "Industry":"Trucking Freight/Courier Services"},
      {"Symbol":"COVS", 	 "Name": "Covisint Corporation", 	 "Price": 2.47, 	 "MarketCap": 94460000, 	 "IPO":2013, 		 "Sector":"Technology", 	 "Industry":"EDP Services"},
      {"Symbol":"CRAI", 	 "Name": "CRA International,Inc.", 	 "Price": 30.06, 	 "MarketCap": 286450000, 	 "IPO":1998, 		 "Sector":"Miscellaneous", 	 "Industry":"Other Consumer Services"},
      {"Symbol":"CBRL", 	 "Name": "Cracker Barrel Old Country Store, Inc.", 	 "Price": 130.79, 	 "MarketCap": 3130000000, 	 "IPO":1981, 		 "Sector":"Consumer Services", 	 "Industry":"Restaurants"},
      {"Symbol":"CACC", 	 "Name": "Credit Acceptance Corporation", 	 "Price": 172.65, 	 "MarketCap": 3560000000, 	 "IPO":1992, 		 "Sector":"Finance", 	 "Industry":"Finance: Consumer Services"},
      {"Symbol":"CREE", 	 "Name": "Cree, Inc.", 	 "Price": 37.51, 	 "MarketCap": 4190000000, 	 "IPO":1993, 		 "Sector":"Technology", 	 "Industry":"Semiconductors"},
      {"Symbol":"CRESY", 	 "Name": "Cresud S.A.C.I.F. y A.", 	 "Price": 10.52, 	 "MarketCap": 6090000, 	 "IPO":1997, 		 "Sector":"Finance", 	 "Industry":"Real Estate"},
      {"Symbol":"CRTO", 	 "Name": "Criteo S.A.", 	 "Price": 40.7, 	 "MarketCap": 2410000000, 	 "IPO":2013, 		 "Sector":"Technology", 	 "Industry":"Advertising"},
      {"Symbol":"CROX", 	 "Name": "Crocs, Inc.", 	 "Price": 10.62, 	 "MarketCap": 876120000, 	 "IPO":2006, 		 "Sector":"Consumer Non-Durables", 	 "Industry":"Shoe Manufacturing"},
      {"Symbol":"CCRN", 	 "Name": "Cross Country Healthcare, Inc.", 	 "Price": 11.13, 	 "MarketCap": 347870000, 	 "IPO":2001, 		 "Sector":"Technology", 	 "Industry":"Professional Services"},
      {"Symbol":"CRDS", 	 "Name": "Crossroads Systems, Inc.", 	 "Price": 2.32, 	 "MarketCap": 37200000, 	 "IPO":1999, 		 "Sector":"Technology", 	 "Industry":"Computer peripheral equipment"},
      {"Symbol":"CRWN", 	 "Name": "Crown Media Holdings, Inc.", 	 "Price": 3.28, 	 "MarketCap": 1180000000, 	 "IPO":2000, 		 "Sector":"Consumer Services", 	 "Industry":"Television Services"},
      {"Symbol":"CSGS", 	 "Name": "CSG Systems International, Inc.", 	 "Price": 30.35, 	 "MarketCap": 1040000000, 	 "IPO":1996, 		 "Sector":"Technology", 	 "Industry":"EDP Services"},
      {"Symbol":"CCLP", 	 "Name": "CSI Compressco LP", 	 "Price": 16.61, 	 "MarketCap": 550490000, 	 "IPO":2011, 		 "Sector":"Energy", 	 "Industry":"Oilfield Services/Equipment"},
      {"Symbol":"CSPI", 	 "Name": "CSP Inc.", 	 "Price": 7.17, 	 "MarketCap": 26210000, 	 "IPO":1982, 		 "Sector":"Technology", 	 "Industry":"EDP Services"},
      {"Symbol":"CTCM", 	 "Name": "CTC Media, Inc.", 	 "Price": 4.14, 	 "MarketCap": 644860000, 	 "IPO":2006, 		 "Sector":"Consumer Services", 	 "Industry":"Broadcasting"},
      {"Symbol":"CTIC", 	 "Name": "CTI BioPharma Corp.", 	 "Price": 2.23, 	 "MarketCap": 400930000, 	 "IPO":1997, 		 "Sector":"Health Care", 	 "Industry":"Major Pharmaceuticals"},
      {"Symbol":"CTIB", 	 "Name": "CTI Industries Corporation", 	 "Price": 3.9, 	 "MarketCap": 12870000, 	 "IPO":1997, 		 "Sector":"Basic Industries", 	 "Industry":"Specialty Chemicals"},
      {"Symbol":"CTRP", 	 "Name": "Ctrip.com International, Ltd.", 	 "Price": 46.75, 	 "MarketCap": 6330000000, 	 "IPO":2003, 		 "Sector":"Miscellaneous", 	 "Industry":"Business Services"},
      {"Symbol":"CPIX", 	 "Name": "Cumberland Pharmaceuticals Inc.", 	 "Price": 5.9, 	 "MarketCap": 102410000, 	 "IPO":2009, 		 "Sector":"Health Care", 	 "Industry":"Major Pharmaceuticals"},
      {"Symbol":"CMLS", 	 "Name": "Cumulus Media Inc.", 	 "Price": 4.32, 	 "MarketCap": 1000000000, 	 "IPO":1998, 		 "Sector":"Consumer Services", 	 "Industry":"Broadcasting"},
      {"Symbol":"CUTR", 	 "Name": "Cutera, Inc.", 	 "Price": 11.94, 	 "MarketCap": 167640000, 	 "IPO":2004, 		 "Sector":"Health Care", 	 "Industry":"Biotechnology: Electromedical & Electrotherapeutic Apparatus"},
      {"Symbol":"CYBR", 	 "Name": "CyberArk Software Ltd.", 	 "Price": 52.52, 	 "MarketCap": 1550000000, 	 "IPO":2014, 		 "Sector":"Technology", 	 "Industry":"Computer Software: Prepackaged Software"},
      {"Symbol":"CYBX", 	 "Name": "Cyberonics, Inc.", 	 "Price": 57.03, 	 "MarketCap": 1500000000, 	 "IPO":1993, 		 "Sector":"Health Care", 	 "Industry":"Biotechnology: Electromedical & Electrotherapeutic Apparatus"},
      {"Symbol":"CYBE", 	 "Name": "CyberOptics Corporation", 	 "Price": 10.44, 	 "MarketCap": 69280000, 	 "IPO":1987, 		 "Sector":"Capital Goods", 	 "Industry":"Electronic Components"},
      {"Symbol":"CYNO", 	 "Name": "Cynosure, Inc.", 	 "Price": 31.37, 	 "MarketCap": 679100000, 	 "IPO":2005, 		 "Sector":"Health Care", 	 "Industry":"Biotechnology: Electromedical & Electrotherapeutic Apparatus"},
      {"Symbol":"CY", 	 "Name": "Cypress Semiconductor Corporation", 	 "Price": 14.76, 	 "MarketCap": 2380000000, 	 "IPO":1986, 		 "Sector":"Technology", 	 "Industry":"Semiconductors"},
      {"Symbol":"CONE", 	 "Name": "CyrusOne Inc", 	 "Price": 28.78, 	 "MarketCap": 1110000000, 	 "IPO":2013, 		 "Sector":"Consumer Services", 	 "Industry":"Real Estate Investment Trusts"},
      {"Symbol":"CYTK", 	 "Name": "Cytokinetics, Incorporated", 	 "Price": 7.78, 	 "MarketCap": 284820000, 	 "IPO":2004, 		 "Sector":"Health Care", 	 "Industry":"Major Pharmaceuticals"},
      {"Symbol":"CYTR", 	 "Name": "CytRx Corporation", 	 "Price": 2.96, 	 "MarketCap": 164980000, 	 "IPO":1986, 		 "Sector":"Health Care", 	 "Industry":"Biotechnology: Biological Products (No Diagnostic Substances)"},
      {"Symbol":"DAKT", 	 "Name": "Daktronics, Inc.", 	 "Price": 12.81, 	 "MarketCap": 557970000, 	 "IPO":1994, 		 "Sector":"Consumer Durables", 	 "Industry":"Miscellaneous manufacturing industries"},
      {"Symbol":"DAIO", 	 "Name": "Data I/O Corporation", 	 "Price": 3.2, 	 "MarketCap": 25150000, 	 "IPO":1981, 		 "Sector":"Capital Goods", 	 "Industry":"Electrical Products"},
      {"Symbol":"DTLK", 	 "Name": "Datalink Corporation", 	 "Price": 12.22, 	 "MarketCap": 281480000, 	 "IPO":1999, 		 "Sector":"Technology", 	 "Industry":"EDP Services"},
      {"Symbol":"DWCH", 	 "Name": "Datawatch Corporation", 	 "Price": 6.26, 	 "MarketCap": 71060000, 	 "IPO":1992, 		 "Sector":"Technology", 	 "Industry":"Computer Software: Prepackaged Software"},
      {"Symbol":"PLAY", 	 "Name": "Dave & Buster&#39;s Entertainment, Inc.", 	 "Price": 29.51, 	 "MarketCap": 1180000000, 	 "IPO":2014, 		 "Sector":"Consumer Services", 	 "Industry":"Restaurants"},
      {"Symbol":"DBVT", 	 "Name": "DBV Technologies S.A.", 	 "Price": 22.21, 	 "MarketCap": 687140000, 	 "IPO":2014, 		 "Sector":"Health Care", 	 "Industry":"Biotechnology: Biological Products (No Diagnostic Substances)"},
      {"Symbol":"TRAK", 	 "Name": "Dealertrack Technologies, Inc.", 	 "Price": 42.84, 	 "MarketCap": 2310000000, 	 "IPO":2005, 		 "Sector":"Technology", 	 "Industry":"EDP Services"},
      {"Symbol":"DHRM", 	 "Name": "Dehaier Medical Systems Limited", 	 "Price": 2.64, 	 "MarketCap": 15420000, 	 "IPO":2010, 		 "Sector":"Health Care", 	 "Industry":"Medical/Dental Instruments"},
      {"Symbol":"DFRG", 	 "Name": "Del Frisco&#39;s Restaurant Group, Inc.", 	 "Price": 19.14, 	 "MarketCap": 448210000, 	 "IPO":2012, 		 "Sector":"Consumer Services", 	 "Industry":"Restaurants"},
      {"Symbol":"DCTH", 	 "Name": "Delcath Systems, Inc.", 	 "Price": 1.14, 	 "MarketCap": 11070000, 	 "IPO":2000, 		 "Sector":"Health Care", 	 "Industry":"Medical/Dental Instruments"},
      {"Symbol":"DGAS", 	 "Name": "Delta Natural Gas Company, Inc.", 	 "Price": 20.63, 	 "MarketCap": 144670000, 	 "IPO":1981, 		 "Sector":"Public Utilities", 	 "Industry":"Oil & Gas Production"},
      {"Symbol":"XRAY", 	 "Name": "DENTSPLY International Inc.", 	 "Price": 52.74, 	 "MarketCap": 7460000000, 	 "IPO":1987, 		 "Sector":"Health Care", 	 "Industry":"Medical/Dental Instruments"},
      {"Symbol":"DERM", 	 "Name": "Dermira, Inc.", 	 "Price": 16.52, 	 "MarketCap": 406390000, 	 "IPO":2014, 		 "Sector":"Health Care", 	 "Industry":"Major Pharmaceuticals"},
      {"Symbol":"DSWL", 	 "Name": "Deswell Industries, Inc.", 	 "Price": 1.8601, 	 "MarketCap": 29870000, 	 "IPO":1995, 		 "Sector":"Consumer Non-Durables", 	 "Industry":"Plastic Products"},
      {"Symbol":"DXCM", 	 "Name": "DexCom, Inc.", 	 "Price": 62.68, 	 "MarketCap": 4800000000, 	 "IPO":2005, 		 "Sector":"Health Care", 	 "Industry":"Medical/Dental Instruments"},
      {"Symbol":"DMND", 	 "Name": "Diamond Foods, Inc.", 	 "Price": 26.78, 	 "MarketCap": 841320000, 	 "IPO":2005, 		 "Sector":"Consumer Non-Durables", 	 "Industry":"Packaged Foods"},
      {"Symbol":"FANG", 	 "Name": "Diamondback Energy, Inc.", 	 "Price": 73.46, 	 "MarketCap": 4310000000, 	 "IPO":2012, 		 "Sector":"Energy", 	 "Industry":"Oil & Gas Production"},
      {"Symbol":"DRNA", 	 "Name": "Dicerna Pharmaceuticals, Inc.", 	 "Price": 21.3, 	 "MarketCap": 378570000, 	 "IPO":2014, 		 "Sector":"Health Care", 	 "Industry":"Major Pharmaceuticals"},
      {"Symbol":"DGII", 	 "Name": "Digi International Inc.", 	 "Price": 10.31, 	 "MarketCap": 251130000, 	 "IPO":1989, 		 "Sector":"Technology", 	 "Industry":"Computer Communications Equipment"},
      {"Symbol":"DRAD", 	 "Name": "Digirad Corporation", 	 "Price": 4.5, 	 "MarketCap": 74630000, 	 "IPO":2004, 		 "Sector":"Health Care", 	 "Industry":"Biotechnology: Electromedical & Electrotherapeutic Apparatus"},
      {"Symbol":"DPRX", 	 "Name": "Dipexium Pharmaceuticals, Inc.", 	 "Price": 12.76, 	 "MarketCap": 108940000, 	 "IPO":2014, 		 "Sector":"Health Care", 	 "Industry":"Major Pharmaceuticals"},
      {"Symbol":"DISH", 	 "Name": "DISH Network Corporation", 	 "Price": 77.2, 	 "MarketCap": 17220000000, 	 "IPO":1995, 		 "Sector":"Consumer Services", 	 "Industry":"Television Services"},
      {"Symbol":"DLTR", 	 "Name": "Dollar Tree, Inc.", 	 "Price": 76.82, 	 "MarketCap": 15800000000, 	 "IPO":1995, 		 "Sector":"Consumer Services", 	 "Industry":"Department/Specialty Retail Stores"},
      {"Symbol":"DGICB", 	 "Name": "Donegal Group, Inc.", 	 "Price": 27, 	 "MarketCap": 727170000, 	 "IPO":1986, 		 "Sector":"Finance", 	 "Industry":"Property-Casualty Insurers"},
      {"Symbol":"DOVR", 	 "Name": "Dover Saddlery, Inc.", 	 "Price": 4.75, 	 "MarketCap": 25660000, 	 "IPO":2005, 		 "Sector":"Consumer Services", 	 "Industry":"Other Specialty Stores"},
      {"Symbol":"DRWI", 	 "Name": "DragonWave Inc", 	 "Price": 0.8601, 	 "MarketCap": 64750000, 	 "IPO":2009, 		 "Sector":"Public Utilities", 	 "Industry":"Telecommunications Equipment"},
      {"Symbol":"DWA", 	 "Name": "Dreamworks Animation SKG, Inc.", 	 "Price": 20.72, 	 "MarketCap": 1770000000, 	 "IPO":2004, 		 "Sector":"Consumer Services", 	 "Industry":"Movies/Entertainment"},
      {"Symbol":"DRYS", 	 "Name": "DryShips Inc.", 	 "Price": 1.01, 	 "MarketCap": 691910000, 	 "IPO":2005, 		 "Sector":"Transportation", 	 "Industry":"Marine Transportation"},
      {"Symbol":"DSPG", 	 "Name": "DSP Group, Inc.", 	 "Price": 11.38, 	 "MarketCap": 245950000, 	 "IPO":1994, 		 "Sector":"Technology", 	 "Industry":"Semiconductors"},
      {"Symbol":"CADT", 	 "Name": "DT Asia Investments Limited", 	 "Price": 9.78, 	 "MarketCap": 87310000, 	 "IPO":2014, 		 "Sector":"Finance", 	 "Industry":"Business Services"},
      {"Symbol":"DTSI", 	 "Name": "DTS, Inc.", 	 "Price": 28.68, 	 "MarketCap": 492900000, 	 "IPO":2003, 		 "Sector":"Miscellaneous", 	 "Industry":"Multi-Sector Companies"},
      {"Symbol":"DNKN", 	 "Name": "Dunkin&#39; Brands Group, Inc.", 	 "Price": 46.7, 	 "MarketCap": 4880000000, 	 "IPO":2011, 		 "Sector":"Consumer Services", 	 "Industry":"Restaurants"},
      {"Symbol":"DRRX", 	 "Name": "Durect Corporation", 	 "Price": 1, 	 "MarketCap": 113680000, 	 "IPO":2000, 		 "Sector":"Health Care", 	 "Industry":"Major Pharmaceuticals"},
      {"Symbol":"DYAX", 	 "Name": "Dyax Corp.", 	 "Price": 15, 	 "MarketCap": 2050000000, 	 "IPO":2000, 		 "Sector":"Health Care", 	 "Industry":"Biotechnology: Commercial Physical & Biological Resarch"},
      {"Symbol":"DVAX", 	 "Name": "Dynavax Technologies Corporation", 	 "Price": 16.96, 	 "MarketCap": 44590000, 	 "IPO":2004, 		 "Sector":"Health Care", 	 "Industry":"Major Pharmaceuticals"},
      {"Symbol":"EOPN", 	 "Name": "E2open, Inc.", 	 "Price": 8.55, 	 "MarketCap": 250670000, 	 "IPO":2012, 		 "Sector":"Technology", 	 "Industry":"Computer Software: Prepackaged Software"},
      {"Symbol":"EGRX", 	 "Name": "Eagle Pharmaceuticals, Inc.", 	 "Price": 20.98, 	 "MarketCap": 294490000, 	 "IPO":2014, 		 "Sector":"Health Care", 	 "Industry":"Major Pharmaceuticals"},
      {"Symbol":"EROC", 	 "Name": "Eagle Rock Energy Partners, L.P.", 	 "Price": 2.63, 	 "MarketCap": 421120000, 	 "IPO":2006, 		 "Sector":"Energy", 	 "Industry":"Oil & Gas Production"},
      {"Symbol":"EBAY", 	 "Name": "eBay Inc.", 	 "Price": 56.47, 	 "MarketCap": 68330000000, 	 "IPO":1998, 		 "Sector":"Miscellaneous", 	 "Industry":"Business Services"},
      {"Symbol":"ELON", 	 "Name": "Echelon Corporation", 	 "Price": 1.16, 	 "MarketCap": 50990000, 	 "IPO":1998, 		 "Sector":"Technology", 	 "Industry":"Computer Communications Equipment"},
      {"Symbol":"ECHO", 	 "Name": "Echo Global Logistics, Inc.", 	 "Price": 26.72, 	 "MarketCap": 634520000, 	 "IPO":2009, 		 "Sector":"Transportation", 	 "Industry":"Oil Refining/Marketing"},
      {"Symbol":"EEI", 	 "Name": "Ecology and Environment, Inc.", 	 "Price": 10.2801, 	 "MarketCap": 44080000, 	 "IPO":1987, 		 "Sector":"Consumer Services", 	 "Industry":"Military/Government/Technical"},
      {"Symbol":"EDAP", 	 "Name": "EDAP TMS S.A.", 	 "Price": 3.55, 	 "MarketCap": 88000000, 	 "IPO":1997, 		 "Sector":"Health Care", 	 "Industry":"Biotechnology: Electromedical & Electrotherapeutic Apparatus"},
      {"Symbol":"EGAN", 	 "Name": "eGain Corporation", 	 "Price": 3.78, 	 "MarketCap": 100870000, 	 "IPO":1999, 		 "Sector":"Technology", 	 "Industry":"Computer Software: Prepackaged Software"},
      {"Symbol":"EGLT", 	 "Name": "Egalet Corporation", 	 "Price": 10.6, 	 "MarketCap": 183210000, 	 "IPO":2014, 		 "Sector":"Health Care", 	 "Industry":"Major Pharmaceuticals"},
      {"Symbol":"EHTH", 	 "Name": "eHealth, Inc.", 	 "Price": 10.91, 	 "MarketCap": 194390000, 	 "IPO":2006, 		 "Sector":"Finance", 	 "Industry":"Specialty Insurers"},
      {"Symbol":"LOCO", 	 "Name": "El Pollo Loco Holdings, Inc.", 	 "Price": 24.2, 	 "MarketCap": 894160000, 	 "IPO":2014, 		 "Sector":"Consumer Services", 	 "Industry":"Restaurants"},
      {"Symbol":"EFII", 	 "Name": "Electronics for Imaging, Inc.", 	 "Price": 40.59, 	 "MarketCap": 1910000000, 	 "IPO":1992, 		 "Sector":"Technology", 	 "Industry":"Computer Communications Equipment"},
      {"Symbol":"EBIO", 	 "Name": "Eleven Biotherapeutics, Inc.", 	 "Price": 10.13, 	 "MarketCap": 165010000, 	 "IPO":2014, 		 "Sector":"Health Care", 	 "Industry":"Major Pharmaceuticals"},
      {"Symbol":"LONG", 	 "Name": "eLong, Inc.", 	 "Price": 16.4099, 	 "MarketCap": 577950000, 	 "IPO":2004, 		 "Sector":"Consumer Services", 	 "Industry":"Transportation Services"},
      {"Symbol":"ELTK", 	 "Name": "Eltek Ltd.", 	 "Price": 1.29, 	 "MarketCap": 13080000, 	 "IPO":1997, 		 "Sector":"Technology", 	 "Industry":"Electrical Products"},
      {"Symbol":"EMCI", 	 "Name": "EMC Insurance Group Inc.", 	 "Price": 33.3, 	 "MarketCap": 451090000, 	 "IPO":1982, 		 "Sector":"Finance", 	 "Industry":"Property-Casualty Insurers"},
      {"Symbol":"EMKR", 	 "Name": "EMCORE Corporation", 	 "Price": 5.4, 	 "MarketCap": 172120000, 	 "IPO":1997, 		 "Sector":"Technology", 	 "Industry":"Semiconductors"},
      {"Symbol":"EMMS", 	 "Name": "Emmis Communications Corporation", 	 "Price": 2.09, 	 "MarketCap": 91060000, 	 "IPO":1994, 		 "Sector":"Consumer Services", 	 "Industry":"Broadcasting"},
      {"Symbol":"ENTA", 	 "Name": "Enanta Pharmaceuticals, Inc.", 	 "Price": 33.3, 	 "MarketCap": 622060000, 	 "IPO":2013, 		 "Sector":"Health Care", 	 "Industry":"Major Pharmaceuticals"},
      {"Symbol":"WIRE", 	 "Name": "Encore Wire Corporation", 	 "Price": 34.7, 	 "MarketCap": 718990000, 	 "IPO":1992, 		 "Sector":"Capital Goods", 	 "Industry":"Metal Fabrications"},
      {"Symbol":"ECYT", 	 "Name": "Endocyte, Inc.", 	 "Price": 5.26, 	 "MarketCap": 219400000, 	 "IPO":2011, 		 "Sector":"Health Care", 	 "Industry":"Major Pharmaceuticals"},
      {"Symbol":"EIGI", 	 "Name": "Endurance International Group Holdings, Inc.", 	 "Price": 19.49, 	 "MarketCap": 2580000000, 	 "IPO":2013, 		 "Sector":"Technology", 	 "Industry":"Computer Software: Prepackaged Software"},
      {"Symbol":"WATT", 	 "Name": "Energous Corporation", 	 "Price": 9.43, 	 "MarketCap": 120530000, 	 "IPO":2014, 		 "Sector":"Technology", 	 "Industry":"Radio And Television Broadcasting And Communications Equipment"},
      {"Symbol":"ERII", 	 "Name": "Energy Recovery, Inc.", 	 "Price": 3.36, 	 "MarketCap": 174310000, 	 "IPO":2008, 		 "Sector":"Technology", 	 "Industry":"Industrial Machinery/Components"},
      {"Symbol":"ENOC", 	 "Name": "EnerNOC, Inc.", 	 "Price": 18.24, 	 "MarketCap": 532160000, 	 "IPO":2007, 		 "Sector":"Technology", 	 "Industry":"Computer Software: Programming, Data Processing"},
      {"Symbol":"ENPH", 	 "Name": "Enphase Energy, Inc.", 	 "Price": 15.15, 	 "MarketCap": 660910000, 	 "IPO":2012, 		 "Sector":"Technology", 	 "Industry":"Semiconductors"},
      {"Symbol":"ENFC", 	 "Name": "Entegra Financial Corp.", 	 "Price": 15.4, 	 "MarketCap": 100810000, 	 "IPO":2014, 		 "Sector":"Finance", 	 "Industry":"Banks"},
      {"Symbol":"ENTG", 	 "Name": "Entegris, Inc.", 	 "Price": 13.5, 	 "MarketCap": 1880000000, 	 "IPO":2000, 		 "Sector":"Consumer Non-Durables", 	 "Industry":"Plastic Products"},
      {"Symbol":"ETRM", 	 "Name": "EnteroMedics Inc.", 	 "Price": 1.21, 	 "MarketCap": 83620000, 	 "IPO":2007, 		 "Sector":"Health Care", 	 "Industry":"Biotechnology: Electromedical & Electrotherapeutic Apparatus"},
      {"Symbol":"ENTR", 	 "Name": "Entropic Communications, Inc.", 	 "Price": 2.92, 	 "MarketCap": 263010000, 	 "IPO":2007, 		 "Sector":"Technology", 	 "Industry":"Semiconductors"},
      {"Symbol":"ENVI", 	 "Name": "Envivio, Inc.", 	 "Price": 1.45, 	 "MarketCap": 40180000, 	 "IPO":2012, 		 "Sector":"Technology", 	 "Industry":"Radio And Television Broadcasting And Communications Equipment"},
      {"Symbol":"ENZN", 	 "Name": "Enzon Pharmaceuticals, Inc.", 	 "Price": 0.99, 	 "MarketCap": 43700000, 	 "IPO":1984, 		 "Sector":"Health Care", 	 "Industry":"Biotechnology: Biological Products (No Diagnostic Substances)"},
      {"Symbol":"ENZY          ", 	 "Name": "Enzymotec Ltd.", 	 "Price": 5.68, 	 "MarketCap": 125610000, 	 "IPO":2013, 		 "Sector":"Consumer Durables", 	 "Industry":"Specialty Chemicals"},
      {"Symbol":"EPIQ", 	 "Name": "EPIQ Systems, Inc.", 	 "Price": 18.3, 	 "MarketCap": 666250000, 	 "IPO":1997, 		 "Sector":"Technology", 	 "Industry":"EDP Services"},
      {"Symbol":"EPZM", 	 "Name": "Epizyme, Inc.", 	 "Price": 21.58, 	 "MarketCap": 737240000, 	 "IPO":2013, 		 "Sector":"Health Care", 	 "Industry":"Major Pharmaceuticals"},
      {"Symbol":"PLUS", 	 "Name": "ePlus inc.", 	 "Price": 80.17, 	 "MarketCap": 592480000, 	 "IPO":1996, 		 "Sector":"Technology", 	 "Industry":"Retail: Computer Software & Peripheral Equipment"},
      {"Symbol":"EQIX", 	 "Name": "Equinix, Inc.", 	 "Price": 227.7, 	 "MarketCap": 12140000000, 	 "IPO":2000, 		 "Sector":"Public Utilities", 	 "Industry":"Telecommunications Equipment"},
      {"Symbol":"EAC           ", 	 "Name": "Erickson Incorporated", 	 "Price": 7.19, 	 "MarketCap": 99320000, 	 "IPO":2012, 		 "Sector":"Capital Goods", 	 "Industry":"Aerospace"},
      {"Symbol":"ESPR", 	 "Name": "Esperion Therapeutics, Inc.", 	 "Price": 67.13, 	 "MarketCap": 1370000000, 	 "IPO":2013, 		 "Sector":"Health Care", 	 "Industry":"Major Pharmaceuticals"},
      {"Symbol":"CLWT", 	 "Name": "Euro Tech Holdings Company Limited", 	 "Price": 2.69, 	 "MarketCap": 6000000, 	 "IPO":1997, 		 "Sector":"Consumer Durables", 	 "Industry":"Diversified Electronic Products"},
      {"Symbol":"EEFT", 	 "Name": "Euronet Worldwide, Inc.", 	 "Price": 53.96, 	 "MarketCap": 2840000000, 	 "IPO":1997, 		 "Sector":"Finance", 	 "Industry":"Investment Bankers/Brokers/Service"},
      {"Symbol":"EVEP", 	 "Name": "EV Energy Partners, L.P.", 	 "Price": 16.82, 	 "MarketCap": 816980000, 	 "IPO":2006, 		 "Sector":"Energy", 	 "Industry":"Oil & Gas Production"},
      {"Symbol":"EVRY", 	 "Name": "EveryWare Global, Inc.", 	 "Price": 1, 	 "MarketCap": 22120000, 	 "IPO":2012, 		 "Sector":"Consumer Durables", 	 "Industry":"Home Furnishings"},
      {"Symbol":"EVOK", 	 "Name": "Evoke Pharma, Inc.", 	 "Price": 5.41, 	 "MarketCap": 33070000, 	 "IPO":2013, 		 "Sector":"Health Care", 	 "Industry":"Major Pharmaceuticals"},
      {"Symbol":"EVOL", 	 "Name": "Evolving Systems, Inc.", 	 "Price": 8.83, 	 "MarketCap": 102990000, 	 "IPO":1998, 		 "Sector":"Technology", 	 "Industry":"EDP Services"},
      {"Symbol":"EXA", 	 "Name": "Exa Corporation", 	 "Price": 10.46, 	 "MarketCap": 144740000, 	 "IPO":2012, 		 "Sector":"Technology", 	 "Industry":"Computer Software: Prepackaged Software"},
      {"Symbol":"EXAS", 	 "Name": "EXACT Sciences Corporation", 	 "Price": 25.56, 	 "MarketCap": 2160000000, 	 "IPO":2001, 		 "Sector":"Health Care", 	 "Industry":"Biotechnology: Commercial Physical & Biological Resarch"},
      {"Symbol":"EXAC", 	 "Name": "Exactech, Inc.", 	 "Price": 22.33, 	 "MarketCap": 308340000, 	 "IPO":1996, 		 "Sector":"Health Care", 	 "Industry":"Industrial Specialties"},
      {"Symbol":"EXEL", 	 "Name": "Exelixis, Inc.", 	 "Price": 2.48, 	 "MarketCap": 484140000, 	 "IPO":2000, 		 "Sector":"Health Care", 	 "Industry":"Biotechnology: Commercial Physical & Biological Resarch"},
      {"Symbol":"EXLS", 	 "Name": "ExlService Holdings, Inc.", 	 "Price": 31.34, 	 "MarketCap": 1030000000, 	 "IPO":2006, 		 "Sector":"Miscellaneous", 	 "Industry":"Business Services"},
      {"Symbol":"ESRX", 	 "Name": "Express Scripts Holding Company", 	 "Price": 84.9, 	 "MarketCap": 62310000000, 	 "IPO":1992, 		 "Sector":"Health Care", 	 "Industry":"Medical/Nursing Services"},
      {"Symbol":"EXTR", 	 "Name": "Extreme Networks, Inc.", 	 "Price": 3.46, 	 "MarketCap": 343670000, 	 "IPO":1999, 		 "Sector":"Technology", 	 "Industry":"Computer Communications Equipment"},
      {"Symbol":"EZPW", 	 "Name": "EZCORP, Inc.", 	 "Price": 9.96, 	 "MarketCap": 534360000, 	 "IPO":1991, 		 "Sector":"Consumer Services", 	 "Industry":"Other Specialty Stores"},
      {"Symbol":"FFIV", 	 "Name": "F5 Networks, Inc.", 	 "Price": 116.635, 	 "MarketCap": 8410000000, 	 "IPO":1999, 		 "Sector":"Technology", 	 "Industry":"Computer Communications Equipment"},
      {"Symbol":"FB", 	 "Name": "Facebook, Inc.", 	 "Price": 75.74, 	 "MarketCap": 2.12E+11, 	 "IPO":2012, 		 "Sector":"Technology", 	 "Industry":"Computer Software: Programming, Data Processing"},
      {"Symbol":"FCS", 	 "Name": "Fairchild Semiconductor International, Inc.", 	 "Price": 16.37, 	 "MarketCap": 1940000000, 	 "IPO":1999, 		 "Sector":"Technology", 	 "Industry":"Semiconductors"},
      {"Symbol":"FWM", 	 "Name": "Fairway Group Holdings Corp.", 	 "Price": 5.55, 	 "MarketCap": 241910000, 	 "IPO":2013, 		 "Sector":"Consumer Services", 	 "Industry":"Food Chains"},
      {"Symbol":"FARO", 	 "Name": "FARO Technologies, Inc.", 	 "Price": 58.65, 	 "MarketCap": 1010000000, 	 "IPO":1997, 		 "Sector":"Capital Goods", 	 "Industry":"Industrial Machinery/Components"},
      {"Symbol":"FAST", 	 "Name": "Fastenal Company", 	 "Price": 42.5, 	 "MarketCap": 12570000000, 	 "IPO":1987, 		 "Sector":"Consumer Services", 	 "Industry":"RETAIL: Building Materials"},
      {"Symbol":"FATE", 	 "Name": "Fate Therapeutics, Inc.", 	 "Price": 5, 	 "MarketCap": 102850000, 	 "IPO":2013, 		 "Sector":"Health Care", 	 "Industry":"Biotechnology: Biological Products (No Diagnostic Substances)"},
      {"Symbol":"FEIC", 	 "Name": "FEI Company", 	 "Price": 79.99, 	 "MarketCap": 3320000000, 	 "IPO":1995, 		 "Sector":"Capital Goods", 	 "Industry":"Biotechnology: Laboratory Analytical Instruments"},
      {"Symbol":"FGEN", 	 "Name": "FibroGen, Inc", 	 "Price": 30.25, 	 "MarketCap": 1710000000, 	 "IPO":2014, 		 "Sector":"Health Care", 	 "Industry":"Major Pharmaceuticals"},
      {"Symbol":"FSAM", 	 "Name": "Fifth Street Asset Management Inc.", 	 "Price": 12.11, 	 "MarketCap": 591660000, 	 "IPO":2014, 		 "Sector":"Finance", 	 "Industry":"Investment Managers"},
      {"Symbol":"FNGN", 	 "Name": "Financial Engines, Inc.", 	 "Price": 39.76, 	 "MarketCap": 2070000000, 	 "IPO":2010, 		 "Sector":"Finance", 	 "Industry":"Investment Managers"},
      {"Symbol":"FISI", 	 "Name": "Financial Institutions, Inc.", 	 "Price": 22.98, 	 "MarketCap": 323980000, 	 "IPO":1999, 		 "Sector":"Finance", 	 "Industry":"Major Banks"},
      {"Symbol":"FNSR", 	 "Name": "Finisar Corporation", 	 "Price": 20.75, 	 "MarketCap": 2150000000, 	 "IPO":1999, 		 "Sector":"Technology", 	 "Industry":"Semiconductors"},
      {"Symbol":"FEYE", 	 "Name": "FireEye, Inc.", 	 "Price": 42.26, 	 "MarketCap": 6360000000, 	 "IPO":2013, 		 "Sector":"Technology", 	 "Industry":"Computer peripheral equipment"},
      {"Symbol":"FBNC", 	 "Name": "First Bancorp", 	 "Price": 17.2, 	 "MarketCap": 338930000, 	 "IPO":1987, 		 "Sector":"Finance", 	 "Industry":"Major Banks"},
      {"Symbol":"FCVA", 	 "Name": "First Capital Bancorp, Inc. (VA)", 	 "Price": 4.289, 	 "MarketCap": 55180000, 	 "IPO":2007, 		 "Sector":"Finance", 	 "Industry":"Major Banks"},
      {"Symbol":"FCFS", 	 "Name": "First Cash Financial Services, Inc.", 	 "Price": 48.92, 	 "MarketCap": 1380000000, 	 "IPO":1991, 		 "Sector":"Consumer Services", 	 "Industry":"Other Specialty Stores"},
      {"Symbol":"FBNK", 	 "Name": "First Connecticut Bancorp, Inc.", 	 "Price": 15.2, 	 "MarketCap": 243600000, 	 "IPO":2011, 		 "Sector":"Finance", 	 "Industry":"Banks"},
      {"Symbol":"FIBK", 	 "Name": "First Interstate BancSystem, Inc.", 	 "Price": 26.15, 	 "MarketCap": 1190000000, 	 "IPO":2010, 		 "Sector":"Finance", 	 "Industry":"Major Banks"},
      {"Symbol":"FNBC", 	 "Name": "First NBC Bank Holding Company", 	 "Price": 33.58, 	 "MarketCap": 623750000, 	 "IPO":2013, 		 "Sector":"Finance", 	 "Industry":"Major Banks"},
      {"Symbol":"FSGI", 	 "Name": "First Security Group, Inc.", 	 "Price": 2.27, 	 "MarketCap": 151700000, 	 "IPO":2005, 		 "Sector":"Finance", 	 "Industry":"Major Banks"},
      {"Symbol":"FSLR", 	 "Name": "First Solar, Inc.", 	 "Price": 48.84, 	 "MarketCap": 4890000000, 	 "IPO":2006, 		 "Sector":"Technology", 	 "Industry":"Semiconductors"},
      {"Symbol":"FISV", 	 "Name": "Fiserv, Inc.", 	 "Price": 78.7, 	 "MarketCap": 19200000000, 	 "IPO":1986, 		 "Sector":"Technology", 	 "Industry":"EDP Services"},
      {"Symbol":"FIVE", 	 "Name": "Five Below, Inc.", 	 "Price": 33.01, 	 "MarketCap": 1790000000, 	 "IPO":2012, 		 "Sector":"Consumer Services", 	 "Industry":"Department/Specialty Retail Stores"},
      {"Symbol":"FPRX", 	 "Name": "Five Prime Therapeutics, Inc.", 	 "Price": 24.63, 	 "MarketCap": 627150000, 	 "IPO":2013, 		 "Sector":"Health Care", 	 "Industry":"Major Pharmaceuticals"},
      {"Symbol":"FIVN", 	 "Name": "Five9, Inc.", 	 "Price": 3.78, 	 "MarketCap": 184760000, 	 "IPO":2014, 		 "Sector":"Technology", 	 "Industry":"EDP Services"},
      {"Symbol":"FLML", 	 "Name": "Flamel Technologies S.A.", 	 "Price": 14.15, 	 "MarketCap": 550950000, 	 "IPO":1996, 		 "Sector":"Health Care", 	 "Industry":"Major Pharmaceuticals"},
      {"Symbol":"FLXN", 	 "Name": "Flexion Therapeutics, Inc.", 	 "Price": 21.29, 	 "MarketCap": 456100000, 	 "IPO":2014, 		 "Sector":"Health Care", 	 "Industry":"Major Pharmaceuticals"},
      {"Symbol":"FLEX", 	 "Name": "Flextronics International Ltd.", 	 "Price": 12.045, 	 "MarketCap": 6890000000, 	 "IPO":1994, 		 "Sector":"Technology", 	 "Industry":"Electrical Products"},
      {"Symbol":"FLIR", 	 "Name": "FLIR Systems, Inc.", 	 "Price": 33.01, 	 "MarketCap": 4650000000, 	 "IPO":1993, 		 "Sector":"Capital Goods", 	 "Industry":"Industrial Machinery/Components"},
      {"Symbol":"FLDM", 	 "Name": "Fluidigm Corporation", 	 "Price": 37.93, 	 "MarketCap": 1070000000, 	 "IPO":2011, 		 "Sector":"Capital Goods", 	 "Industry":"Biotechnology: Laboratory Analytical Instruments"},
      {"Symbol":"FOMX", 	 "Name": "Foamix Pharmaceuticals Ltd.", 	 "Price": 9.04, 	 "MarketCap": 194140000, 	 "IPO":2014, 		 "Sector":"Consumer Durables", 	 "Industry":"Specialty Chemicals"},
      {"Symbol":"FONR", 	 "Name": "Fonar Corporation", 	 "Price": 12.19, 	 "MarketCap": 78420000, 	 "IPO":1981, 		 "Sector":"Health Care", 	 "Industry":"Biotechnology: Electromedical & Electrotherapeutic Apparatus"},
      {"Symbol":"FORM", 	 "Name": "FormFactor, Inc.", 	 "Price": 8.51, 	 "MarketCap": 480060000, 	 "IPO":2003, 		 "Sector":"Technology", 	 "Industry":"Semiconductors"},
      {"Symbol":"FORR", 	 "Name": "Forrester Research, Inc.", 	 "Price": 37.58, 	 "MarketCap": 684140000, 	 "IPO":1996, 		 "Sector":"Consumer Services", 	 "Industry":"Diversified Commercial Services"},
      {"Symbol":"FTNT", 	 "Name": "Fortinet, Inc.", 	 "Price": 33.23, 	 "MarketCap": 5480000000, 	 "IPO":2009, 		 "Sector":"Technology", 	 "Industry":"Computer peripheral equipment"},
      {"Symbol":"FWP", 	 "Name": "Forward Pharma A/S", 	 "Price": 22.66, 	 "MarketCap": 1040000000, 	 "IPO":2014, 		 "Sector":"Health Care", 	 "Industry":"Major Pharmaceuticals"},
      {"Symbol":"FOSL", 	 "Name": "Fossil Group, Inc.", 	 "Price": 98.44, 	 "MarketCap": 5030000000, 	 "IPO":1993, 		 "Sector":"Consumer Non-Durables", 	 "Industry":"Consumer Specialties"},
      {"Symbol":"FMI", 	 "Name": "Foundation Medicine, Inc.", 	 "Price": 48.88, 	 "MarketCap": 1390000000, 	 "IPO":2013, 		 "Sector":"Health Care", 	 "Industry":"Medical Specialities"},
      {"Symbol":"FOXF", 	 "Name": "Fox Factory Holding Corp.", 	 "Price": 16.14, 	 "MarketCap": 598110000, 	 "IPO":2013, 		 "Sector":"Consumer Non-Durables", 	 "Industry":"Motor Vehicles"},
      {"Symbol":"FRAN", 	 "Name": "Francesca&#39;s Holdings Corporation", 	 "Price": 15.96, 	 "MarketCap": 675070000, 	 "IPO":2011, 		 "Sector":"Consumer Services", 	 "Industry":"Clothing/Shoe/Accessory Stores"},
      {"Symbol":"FRED", 	 "Name": "Fred&#39;s, Inc.", 	 "Price": 18.47, 	 "MarketCap": 681830000, 	 "IPO":1992, 		 "Sector":"Consumer Services", 	 "Industry":"Department/Specialty Retail Stores"},
      {"Symbol":"RAIL", 	 "Name": "Freightcar America, Inc.", 	 "Price": 27.44, 	 "MarketCap": 331110000, 	 "IPO":2005, 		 "Sector":"Capital Goods", 	 "Industry":"Railroads"},
      {"Symbol":"FRPT", 	 "Name": "Freshpet, Inc.", 	 "Price": 16.78, 	 "MarketCap": 561590000, 	 "IPO":2014, 		 "Sector":"Consumer Non-Durables", 	 "Industry":"Packaged Foods"},
      {"Symbol":"FSBW", 	 "Name": "FS Bancorp, Inc.", 	 "Price": 19.36, 	 "MarketCap": 62640000, 	 "IPO":2012, 		 "Sector":"Finance", 	 "Industry":"Banks"},
      {"Symbol":"FFHL", 	 "Name": "Fuwei Films (Holdings) Co., Ltd.", 	 "Price": 0.5808, 	 "MarketCap": 7590000, 	 "IPO":2006, 		 "Sector":"Capital Goods", 	 "Industry":"Specialty Chemicals"},
      {"Symbol":"GAIA", 	 "Name": "Gaiam, Inc.", 	 "Price": 7.21, 	 "MarketCap": 176390000, 	 "IPO":1999, 		 "Sector":"Consumer Services", 	 "Industry":"Movies/Entertainment"},
      {"Symbol":"GLMD", 	 "Name": "Galmed Pharmaceuticals Ltd.", 	 "Price": 6.8, 	 "MarketCap": 75480000, 	 "IPO":2014, 		 "Sector":"Health Care", 	 "Industry":"Major Pharmaceuticals"},
      {"Symbol":"GRMN", 	 "Name": "Garmin Ltd.", 	 "Price": 55.93, 	 "MarketCap": 10700000000, 	 "IPO":2000, 		 "Sector":"Capital Goods", 	 "Industry":"Industrial Machinery/Components"},
      {"Symbol":"GGAC", 	 "Name": "Garnero Group Acquisition Company", 	 "Price": 9.51, 	 "MarketCap": 176910000, 	 "IPO":2014, 		 "Sector":"Finance", 	 "Industry":"Business Services"},
      {"Symbol":"GGACU", 	 "Name": "Garnero Group Acquisition Company", 	 "Price": 9.9, 	 "MarketCap": 129330000, 	 "IPO":2014, 		 "Sector":"Finance", 	 "Industry":"Business Services"},
      {"Symbol":"GNMK", 	 "Name": "GenMark Diagnostics, Inc.", 	 "Price": 13.51, 	 "MarketCap": 563830000, 	 "IPO":2010, 		 "Sector":"Health Care", 	 "Industry":"Medical/Dental Instruments"},
      {"Symbol":"GNCA", 	 "Name": "Genocea Biosciences, Inc.", 	 "Price": 8.93, 	 "MarketCap": 157260000, 	 "IPO":2014, 		 "Sector":"Health Care", 	 "Industry":"Biotechnology: Biological Products (No Diagnostic Substances)"},
      {"Symbol":"GHDX", 	 "Name": "Genomic Health, Inc.", 	 "Price": 31.12, 	 "MarketCap": 987180000, 	 "IPO":2005, 		 "Sector":"Health Care", 	 "Industry":"Medical Specialities"},
      {"Symbol":"GNVC", 	 "Name": "GenVec, Inc.", 	 "Price": 3.99, 	 "MarketCap": 68910000, 	 "IPO":2000, 		 "Sector":"Health Care", 	 "Industry":"Major Pharmaceuticals"},
      {"Symbol":"GERN", 	 "Name": "Geron Corporation", 	 "Price": 3.03, 	 "MarketCap": 476350000, 	 "IPO":1996, 		 "Sector":"Health Care", 	 "Industry":"Major Pharmaceuticals"},
      {"Symbol":"GEVO", 	 "Name": "Gevo, Inc.", 	 "Price": 0.229, 	 "MarketCap": 22810000, 	 "IPO":2011, 		 "Sector":"Basic Industries", 	 "Industry":"Major Chemicals"},
      {"Symbol":"ROCK", 	 "Name": "Gibraltar Industries, Inc.", 	 "Price": 16.6, 	 "MarketCap": 513020000, 	 "IPO":1993, 		 "Sector":"Capital Goods", 	 "Industry":"Steel/Iron Ore"},
      {"Symbol":"GIGA", 	 "Name": "Giga-tronics Incorporated", 	 "Price": 1.78, 	 "MarketCap": 9690000, 	 "IPO":1983, 		 "Sector":"Capital Goods", 	 "Industry":"Electrical Products"},
      {"Symbol":"GIII", 	 "Name": "G-III Apparel Group, LTD.", 	 "Price": 103.56, 	 "MarketCap": 2330000000, 	 "IPO":1989, 		 "Sector":"Consumer Non-Durables", 	 "Industry":"Apparel"},
      {"Symbol":"GILD", 	 "Name": "Gilead Sciences, Inc.", 	 "Price": 101.9, 	 "MarketCap": 1.5373E+11, 	 "IPO":1992, 		 "Sector":"Health Care", 	 "Industry":"Biotechnology: Biological Products (No Diagnostic Substances)"},
      {"Symbol":"GOOD", 	 "Name": "Gladstone Commercial Corporation", 	 "Price": 17.39, 	 "MarketCap": 329170000, 	 "IPO":2003, 		 "Sector":"Consumer Services", 	 "Industry":"Real Estate"},
      {"Symbol":"LAND", 	 "Name": "Gladstone Land Corporation", 	 "Price": 10.68, 	 "MarketCap": 82810000, 	 "IPO":1993, 		 "Sector":"Consumer Services", 	 "Industry":"Real Estate Investment Trusts"},
      {"Symbol":"GDEF", 	 "Name": "Global Defense & National Security Systems, Inc.", 	 "Price": 10.2, 	 "MarketCap": 98170000, 	 "IPO":2013, 		 "Sector":"Finance", 	 "Industry":"Business Services"},
      {"Symbol":"ENT", 	 "Name": "Global Eagle Entertainment Inc.", 	 "Price": 13.56, 	 "MarketCap": 1040000000, 	 "IPO":2011, 		 "Sector":"Consumer Services", 	 "Industry":"Telecommunications Equipment"},
      {"Symbol":"GSM", 	 "Name": "Globe Specialty Metals Inc.", 	 "Price": 15.6, 	 "MarketCap": 1150000000, 	 "IPO":2009, 		 "Sector":"Capital Goods", 	 "Industry":"Metal Fabrications"},
      {"Symbol":"GBIM", 	 "Name": "GlobeImmune, Inc.", 	 "Price": 7.85, 	 "MarketCap": 45130000, 	 "IPO":2014, 		 "Sector":"Health Care", 	 "Industry":"Major Pharmaceuticals"},
      {"Symbol":"GLUU", 	 "Name": "Glu Mobile Inc.", 	 "Price": 5.12, 	 "MarketCap": 547580000, 	 "IPO":2007, 		 "Sector":"Technology", 	 "Industry":"EDP Services"},
      {"Symbol":"GLYC", 	 "Name": "GlycoMimetics, Inc.", 	 "Price": 7.77, 	 "MarketCap": 146810000, 	 "IPO":2014, 		 "Sector":"Health Care", 	 "Industry":"Major Pharmaceuticals"},
      {"Symbol":"GOGO", 	 "Name": "Gogo Inc.", 	 "Price": 16.08, 	 "MarketCap": 1370000000, 	 "IPO":2013, 		 "Sector":"Consumer Services", 	 "Industry":"Telecommunications Equipment"},
      {"Symbol":"GMLP", 	 "Name": "Golar LNG Partners LP", 	 "Price": 28.17, 	 "MarketCap": 1740000000, 	 "IPO":2011, 		 "Sector":"Consumer Services", 	 "Industry":"Marine Transportation"},
      {"Symbol":"GOOG", 	 "Name": "Google Inc.", 	 "Price": 549.01, 	 "MarketCap": 3.7367E+11, 	 "IPO":2004, 		 "Sector":"Technology", 	 "Industry":"Computer Software: Programming, Data Processing"},
      {"Symbol":"GPRO", 	 "Name": "GoPro, Inc.", 	 "Price": 45.27, 	 "MarketCap": 5690000000, 	 "IPO":2014, 		 "Sector":"Miscellaneous", 	 "Industry":"Industrial Machinery/Components"},
      {"Symbol":"GMAN", 	 "Name": "Gordmans Stores, Inc.", 	 "Price": 4, 	 "MarketCap": 78310000, 	 "IPO":2010, 		 "Sector":"Consumer Services", 	 "Industry":"Clothing/Shoe/Accessory Stores"},
      {"Symbol":"LOPE", 	 "Name": "Grand Canyon Education, Inc.", 	 "Price": 44.75, 	 "MarketCap": 2090000000, 	 "IPO":2008, 		 "Sector":"Consumer Services", 	 "Industry":"Other Consumer Services"},
      {"Symbol":"GRVY", 	 "Name": "GRAVITY Co., Ltd.", 	 "Price": 0.5001, 	 "MarketCap": 13900000, 	 "IPO":2005, 		 "Sector":"Miscellaneous", 	 "Industry":"Business Services"},
      {"Symbol":"GBSN", 	 "Name": "Great Basin Scientific, Inc.", 	 "Price": 1.77, 	 "MarketCap": 8990000, 	 "IPO":2014, 		 "Sector":"Health Care", 	 "Industry":"Medical/Dental Instruments"},
      {"Symbol":"GSBC", 	 "Name": "Great Southern Bancorp, Inc.", 	 "Price": 38.05, 	 "MarketCap": 522340000, 	 "IPO":1989, 		 "Sector":"Finance", 	 "Industry":"Major Banks"},
      {"Symbol":"GNBC", 	 "Name": "Green Bancorp, Inc.", 	 "Price": 11.4, 	 "MarketCap": 298350000, 	 "IPO":2014, 		 "Sector":"Finance", 	 "Industry":"Major Banks"},
      {"Symbol":"GLRE", 	 "Name": "Greenlight Reinsurance, Ltd.", 	 "Price": 31.99, 	 "MarketCap": 1190000000, 	 "IPO":2007, 		 "Sector":"Finance", 	 "Industry":"Property-Casualty Insurers"},
      {"Symbol":"GRPN", 	 "Name": "Groupon, Inc.", 	 "Price": 7.97, 	 "MarketCap": 5350000000, 	 "IPO":2011, 		 "Sector":"Technology", 	 "Industry":"Advertising"},
      {"Symbol":"OMAB", 	 "Name": "Grupo Aeroportuario del Centro Norte S.A.B. de C.V.", 	 "Price": 38.76, 	 "MarketCap": 1920000000, 	 "IPO":2006, 		 "Sector":"Transportation", 	 "Industry":"Aerospace"},
      {"Symbol":"GSIT", 	 "Name": "GSI Technology, Inc.", 	 "Price": 5.64, 	 "MarketCap": 131900000, 	 "IPO":2007, 		 "Sector":"Technology", 	 "Industry":"Semiconductors"},
      {"Symbol":"GTXI", 	 "Name": "GTx, Inc.", 	 "Price": 0.6, 	 "MarketCap": 84200000, 	 "IPO":2004, 		 "Sector":"Health Care", 	 "Industry":"Major Pharmaceuticals"},
      {"Symbol":"GUID", 	 "Name": "Guidance Software, Inc.", 	 "Price": 6.28, 	 "MarketCap": 185100000, 	 "IPO":2006, 		 "Sector":"Technology", 	 "Industry":"Computer Software: Prepackaged Software"},
      {"Symbol":"GIFI", 	 "Name": "Gulf Island Fabrication, Inc.", 	 "Price": 17.15, 	 "MarketCap": 248880000, 	 "IPO":1997, 		 "Sector":"Capital Goods", 	 "Industry":"Metal Fabrications"},
      {"Symbol":"GWPH", 	 "Name": "GW Pharmaceuticals Plc", 	 "Price": 78.09, 	 "MarketCap": 1540000000, 	 "IPO":2013, 		 "Sector":"Health Care", 	 "Industry":"Major Pharmaceuticals"},
      {"Symbol":"GWGH", 	 "Name": "GWG Holdings, Inc", 	 "Price": 6.642, 	 "MarketCap": 38990000, 	 "IPO":2014, 		 "Sector":"Finance", 	 "Industry":"Life Insurance"},
      {"Symbol":"HBK", 	 "Name": "Hamilton Bancorp, Inc.", 	 "Price": 12.89, 	 "MarketCap": 43990000, 	 "IPO":2012, 		 "Sector":"Finance", 	 "Industry":"Savings Institutions"},
      {"Symbol":"HNSN", 	 "Name": "Hansen Medical, Inc.", 	 "Price": 1.05, 	 "MarketCap": 139140000, 	 "IPO":2006, 		 "Sector":"Health Care", 	 "Industry":"Industrial Specialties"},
      {"Symbol":"HDNG", 	 "Name": "Hardinge, Inc.", 	 "Price": 11.69, 	 "MarketCap": 149890000, 	 "IPO":1995, 		 "Sector":"Capital Goods", 	 "Industry":"Industrial Machinery/Components"},
      {"Symbol":"HLIT", 	 "Name": "Harmonic Inc.", 	 "Price": 7.9, 	 "MarketCap": 695670000, 	 "IPO":1995, 		 "Sector":"Technology", 	 "Industry":"Radio And Television Broadcasting And Communications Equipment"},
      {"Symbol":"HAYN", 	 "Name": "Haynes International, Inc.", 	 "Price": 41.98, 	 "MarketCap": 522500000, 	 "IPO":2007, 		 "Sector":"Capital Goods", 	 "Industry":"Steel/Iron Ore"},
      {"Symbol":"HDS", 	 "Name": "HD Supply Holdings, Inc.", 	 "Price": 28.62, 	 "MarketCap": 5610000000, 	 "IPO":2013, 		 "Sector":"Consumer Services", 	 "Industry":"Office Equipment/Supplies/Services"},
      {"Symbol":"HIIQ", 	 "Name": "Health Insurance Innovations, Inc.", 	 "Price": 8.03, 	 "MarketCap": 117950000, 	 "IPO":2013, 		 "Sector":"Finance", 	 "Industry":"Specialty Insurers"},
      {"Symbol":"HCSG", 	 "Name": "Healthcare Services Group, Inc.", 	 "Price": 33.23, 	 "MarketCap": 2350000000, 	 "IPO":1983, 		 "Sector":"Health Care", 	 "Industry":"Hospital/Nursing Management"},
      {"Symbol":"HQY", 	 "Name": "HealthEquity, Inc.", 	 "Price": 20.02, 	 "MarketCap": 1100000000, 	 "IPO":2014, 		 "Sector":"Miscellaneous", 	 "Industry":"Business Services"},
      {"Symbol":"HSTM", 	 "Name": "HealthStream, Inc.", 	 "Price": 29.37, 	 "MarketCap": 811620000, 	 "IPO":2000, 		 "Sector":"Technology", 	 "Industry":"Computer Software: Programming, Data Processing"},
      {"Symbol":"HTLD", 	 "Name": "Heartland Express, Inc.", 	 "Price": 25.88, 	 "MarketCap": 2270000000, 	 "IPO":1986, 		 "Sector":"Transportation", 	 "Industry":"Trucking Freight/Courier Services"},
      {"Symbol":"HTBX", 	 "Name": "Heat Biologics, Inc.", 	 "Price": 5.83, 	 "MarketCap": 37790000, 	 "IPO":2013, 		 "Sector":"Health Care", 	 "Industry":"Major Pharmaceuticals"},
      {"Symbol":"HSII", 	 "Name": "Heidrick & Struggles International, Inc.", 	 "Price": 23.3, 	 "MarketCap": 425090000, 	 "IPO":1999, 		 "Sector":"Technology", 	 "Industry":"Diversified Commercial Services"},
      {"Symbol":"HCACU", 	 "Name": "Hennessy Capital Acquisition Corp.", 	 "Price": 10.29, 	 "MarketCap": 102900000, 	 "IPO":2014, 		 "Sector":"Finance", 	 "Industry":"Investment Managers"},
      {"Symbol":"HSIC", 	 "Name": "Henry Schein, Inc.", 	 "Price": 143.175, 	 "MarketCap": 12000000000, 	 "IPO":1995, 		 "Sector":"Health Care", 	 "Industry":"Medical Specialities"},
      {"Symbol":"HERO", 	 "Name": "Hercules Offshore, Inc.", 	 "Price": 0.9153, 	 "MarketCap": 147190000, 	 "IPO":2005, 		 "Sector":"Energy", 	 "Industry":"Oil & Gas Production"},
      {"Symbol":"HCCI", 	 "Name": "Heritage-Crystal Clean, Inc.", 	 "Price": 12.05, 	 "MarketCap": 265900000, 	 "IPO":2008, 		 "Sector":"Basic Industries", 	 "Industry":"Miscellaneous"},
      {"Symbol":"HSKA", 	 "Name": "Heska Corporation", 	 "Price": 20.95, 	 "MarketCap": 132400000, 	 "IPO":1997, 		 "Sector":"Health Care", 	 "Industry":"Biotechnology: Biological Products (No Diagnostic Substances)"},
      {"Symbol":"HTWO", 	 "Name": "HF2 Financial Management Inc.", 	 "Price": 10.2, 	 "MarketCap": 242680000, 	 "IPO":2013, 		 "Sector":"Finance", 	 "Industry":"Investment Managers"},
      {"Symbol":"HIBB", 	 "Name": "Hibbett Sports, Inc.", 	 "Price": 49.6, 	 "MarketCap": 1240000000, 	 "IPO":1996, 		 "Sector":"Consumer Services", 	 "Industry":"Other Specialty Stores"},
      {"Symbol":"HIMX", 	 "Name": "Himax Technologies, Inc.", 	 "Price": 8.04, 	 "MarketCap": 1380000000, 	 "IPO":2006, 		 "Sector":"Technology", 	 "Industry":"Semiconductors"},
      {"Symbol":"HSGX", 	 "Name": "Histogenics Corporation", 	 "Price": 8.61, 	 "MarketCap": 109840000, 	 "IPO":2014, 		 "Sector":"Health Care", 	 "Industry":"Industrial Specialties"},
      {"Symbol":"HMSY", 	 "Name": "HMS Holdings Corp", 	 "Price": 20, 	 "MarketCap": 1760000000, 	 "IPO":1992, 		 "Sector":"Miscellaneous", 	 "Industry":"Business Services"},
      {"Symbol":"HOLX", 	 "Name": "Hologic, Inc.", 	 "Price": 30.46, 	 "MarketCap": 8530000000, 	 "IPO":1990, 		 "Sector":"Health Care", 	 "Industry":"Medical Electronics"},
      {"Symbol":"HOMB", 	 "Name": "Home BancShares, Inc.", 	 "Price": 31.7, 	 "MarketCap": 2140000000, 	 "IPO":2006, 		 "Sector":"Finance", 	 "Industry":"Major Banks"},
      {"Symbol":"HLSS", 	 "Name": "Home Loan Servicing Solutions, Ltd.", 	 "Price": 16.15, 	 "MarketCap": 1150000000, 	 "IPO":2012, 		 "Sector":"Finance", 	 "Industry":"Finance: Consumer Services"},
      {"Symbol":"AWAY", 	 "Name": "HomeAway, Inc.", 	 "Price": 29.68, 	 "MarketCap": 2800000000, 	 "IPO":2011, 		 "Sector":"Technology", 	 "Industry":"EDP Services"},
      {"Symbol":"HMST", 	 "Name": "HomeStreet, Inc.", 	 "Price": 17.75, 	 "MarketCap": 263700000, 	 "IPO":2012, 		 "Sector":"Finance", 	 "Industry":"Banks"},
      {"Symbol":"HTBI", 	 "Name": "HomeTrust Bancshares, Inc.", 	 "Price": 15.86, 	 "MarketCap": 323520000, 	 "IPO":2012, 		 "Sector":"Finance", 	 "Industry":"Savings Institutions"},
      {"Symbol":"HZNP", 	 "Name": "Horizon Pharma plc", 	 "Price": 16.84, 	 "MarketCap": 2000000000, 	 "IPO":2011, 		 "Sector":"Health Care", 	 "Industry":"Major Pharmaceuticals"},
      {"Symbol":"ZINC", 	 "Name": "Horsehead Holding Corp.", 	 "Price": 13.95, 	 "MarketCap": 789550000, 	 "IPO":2007, 		 "Sector":"Capital Goods", 	 "Industry":"Metal Fabrications"},
      {"Symbol":"HDP", 	 "Name": "Hortonworks, Inc.", 	 "Price": 22.81, 	 "MarketCap": 949290000, 	 "IPO":2014, 		 "Sector":"Technology", 	 "Industry":"Computer Software: Prepackaged Software"},
      {"Symbol":"HMHC", 	 "Name": "Houghton Mifflin Harcourt Company", 	 "Price": 19.98, 	 "MarketCap": 2830000000, 	 "IPO":2013, 		 "Sector":"Consumer Services", 	 "Industry":"Books"},
      {"Symbol":"HWCC", 	 "Name": "Houston Wire & Cable Company", 	 "Price": 10.79, 	 "MarketCap": 189060000, 	 "IPO":2006, 		 "Sector":"Consumer Non-Durables", 	 "Industry":"Telecommunications Equipment"},
      {"Symbol":"HUBG", 	 "Name": "Hub Group, Inc.", 	 "Price": 39.46, 	 "MarketCap": 1480000000, 	 "IPO":1996, 		 "Sector":"Transportation", 	 "Industry":"Oil Refining/Marketing"},
      {"Symbol":"HURN", 	 "Name": "Huron Consulting Group Inc.", 	 "Price": 77.7, 	 "MarketCap": 1780000000, 	 "IPO":2004, 		 "Sector":"Consumer Services", 	 "Industry":"Professional Services"},
      {"Symbol":"HTCH", 	 "Name": "Hutchinson Technology Incorporated", 	 "Price": 3.71, 	 "MarketCap": 124130000, 	 "IPO":1985, 		 "Sector":"Capital Goods", 	 "Industry":"Industrial Machinery/Components"},
      {"Symbol":"HDRA", 	 "Name": "Hydra Industries Acquisition Corp.", 	 "Price": 9.5, 	 "MarketCap": 97850000, 	 "IPO":2014, 		 "Sector":"Finance", 	 "Industry":"Business Services"},
      {"Symbol":"HPTX", 	 "Name": "Hyperion Therapeutics, Inc.", 	 "Price": 26.83, 	 "MarketCap": 556010000, 	 "IPO":2012, 		 "Sector":"Health Care", 	 "Industry":"Major Pharmaceuticals"},
      {"Symbol":"IDSY", 	 "Name": "I.D. Systems, Inc.", 	 "Price": 6.9, 	 "MarketCap": 88370000, 	 "IPO":1999, 		 "Sector":"Consumer Durables", 	 "Industry":"Telecommunications Equipment"},
      {"Symbol":"ICFI", 	 "Name": "ICF International, Inc.", 	 "Price": 38.98, 	 "MarketCap": 756160000, 	 "IPO":2006, 		 "Sector":"Consumer Services", 	 "Industry":"Professional Services"},
      {"Symbol":"ICLR", 	 "Name": "ICON plc", 	 "Price": 60.01, 	 "MarketCap": 3690000000, 	 "IPO":1998, 		 "Sector":"Health Care", 	 "Industry":"Biotechnology: Commercial Physical & Biological Resarch"},
      {"Symbol":"ICUI", 	 "Name": "ICU Medical, Inc.", 	 "Price": 88.98, 	 "MarketCap": 1370000000, 	 "IPO":1992, 		 "Sector":"Health Care", 	 "Industry":"Medical/Dental Instruments"},
      {"Symbol":"IPWR", 	 "Name": "Ideal Power Inc.", 	 "Price": 8.24, 	 "MarketCap": 58080000, 	 "IPO":2013, 		 "Sector":"Energy", 	 "Industry":"Industrial Machinery/Components"},
      {"Symbol":"IDXX", 	 "Name": "IDEXX Laboratories, Inc.", 	 "Price": 159.08, 	 "MarketCap": 7590000000, 	 "IPO":1991, 		 "Sector":"Health Care", 	 "Industry":"Biotechnology: In Vitro & In Vivo Diagnostic Substances"},
      {"Symbol":"DSKY", 	 "Name": "iDreamSky Technology Limited", 	 "Price": 11.99, 	 "MarketCap": 507460000, 	 "IPO":2014, 		 "Sector":"Technology", 	 "Industry":"Computer Software: Prepackaged Software"},
      {"Symbol":"IROQ", 	 "Name": "IF Bancorp, Inc.", 	 "Price": 16.6999, 	 "MarketCap": 73110000, 	 "IPO":2011, 		 "Sector":"Finance", 	 "Industry":"Savings Institutions"},
      {"Symbol":"IRG", 	 "Name": "Ignite Restaurant Group, Inc.", 	 "Price": 6.95, 	 "MarketCap": 182100000, 	 "IPO":2012, 		 "Sector":"Consumer Services", 	 "Industry":"Restaurants"},
      {"Symbol":"IIVI", 	 "Name": "II-VI Incorporated", 	 "Price": 17.4, 	 "MarketCap": 1060000000, 	 "IPO":1987, 		 "Sector":"Capital Goods", 	 "Industry":"Electronic Components"},
      {"Symbol":"KANG", 	 "Name": "iKang Healthcare Group, Inc.", 	 "Price": 17.49, 	 "MarketCap": 1150000000, 	 "IPO":2014, 		 "Sector":"Health Care", 	 "Industry":"Medical/Nursing Services"},
      {"Symbol":"IKAN", 	 "Name": "Ikanos Communications, Inc.", 	 "Price": 0.333, 	 "MarketCap": 46410000, 	 "IPO":2005, 		 "Sector":"Public Utilities", 	 "Industry":"Telecommunications Equipment"},
      {"Symbol":"ILMN", 	 "Name": "Illumina, Inc.", 	 "Price": 198.54, 	 "MarketCap": 28190000000, 	 "IPO":2000, 		 "Sector":"Capital Goods", 	 "Industry":"Biotechnology: Laboratory Analytical Instruments"},
      {"Symbol":"ISNS", 	 "Name": "Image Sensing Systems, Inc.", 	 "Price": 2.49, 	 "MarketCap": 12420000, 	 "IPO":1995, 		 "Sector":"Capital Goods", 	 "Industry":"Industrial Machinery/Components"},
      {"Symbol":"IMMR", 	 "Name": "Immersion Corporation", 	 "Price": 9.01, 	 "MarketCap": 249380000, 	 "IPO":1999, 		 "Sector":"Technology", 	 "Industry":"Computer peripheral equipment"},
      {"Symbol":"ICCC", 	 "Name": "ImmuCell Corporation", 	 "Price": 6.293, 	 "MarketCap": 19050000, 	 "IPO":1987, 		 "Sector":"Health Care", 	 "Industry":"Biotechnology: In Vitro & In Vivo Diagnostic Substances"},
      {"Symbol":"IMDZ", 	 "Name": "Immune Design Corp.", 	 "Price": 25.34, 	 "MarketCap": 427710000, 	 "IPO":2014, 		 "Sector":"Health Care", 	 "Industry":"Major Pharmaceuticals"},
      {"Symbol":"IMGN", 	 "Name": "ImmunoGen, Inc.", 	 "Price": 7.19, 	 "MarketCap": 619120000, 	 "IPO":1989, 		 "Sector":"Health Care", 	 "Industry":"Major Pharmaceuticals"},
      {"Symbol":"INCR", 	 "Name": "INC Research Holdings, Inc.", 	 "Price": 24.19, 	 "MarketCap": 1480000000, 	 "IPO":2014, 		 "Sector":"Health Care", 	 "Industry":"Biotechnology: Commercial Physical & Biological Resarch"},
      {"Symbol":"IBTX", 	 "Name": "Independent Bank Group, Inc", 	 "Price": 38.53, 	 "MarketCap": 655670000, 	 "IPO":2013, 		 "Sector":"Finance", 	 "Industry":"Major Banks"},
      {"Symbol":"INFN", 	 "Name": "Infinera Corporation", 	 "Price": 17.56, 	 "MarketCap": 2200000000, 	 "IPO":2007, 		 "Sector":"Public Utilities", 	 "Industry":"Telecommunications Equipment"},
      {"Symbol":"IPCC", 	 "Name": "Infinity Property and Casualty Corporation", 	 "Price": 73.93, 	 "MarketCap": 849840000, 	 "IPO":2003, 		 "Sector":"Finance", 	 "Industry":"Property-Casualty Insurers"},
      {"Symbol":"INFA", 	 "Name": "Informatica Corporation", 	 "Price": 44.17, 	 "MarketCap": 4800000000, 	 "IPO":1999, 		 "Sector":"Technology", 	 "Industry":"Computer Software: Prepackaged Software"},
      {"Symbol":"IMKTA", 	 "Name": "Ingles Markets, Incorporated", 	 "Price": 42.26, 	 "MarketCap": 856180000, 	 "IPO":1987, 		 "Sector":"Consumer Services", 	 "Industry":"Food Chains"},
      {"Symbol":"INWK", 	 "Name": "InnerWorkings, Inc.", 	 "Price": 6.29, 	 "MarketCap": 338930000, 	 "IPO":2006, 		 "Sector":"Consumer Durables", 	 "Industry":"Containers/Packaging"},
      {"Symbol":"INNL", 	 "Name": "Innocoll AG", 	 "Price": 8.5, 	 "MarketCap": 168320000, 	 "IPO":2014, 		 "Sector":"Health Care", 	 "Industry":"Major Pharmaceuticals"},
      {"Symbol":"INOD", 	 "Name": "Innodata Inc.", 	 "Price": 2.78, 	 "MarketCap": 70440000, 	 "IPO":1993, 		 "Sector":"Technology", 	 "Industry":"EDP Services"},
      {"Symbol":"IPHS", 	 "Name": "Innophos Holdings, Inc.", 	 "Price": 61.46, 	 "MarketCap": 1340000000, 	 "IPO":2006, 		 "Sector":"Consumer Durables", 	 "Industry":"Specialty Chemicals"},
      {"Symbol":"ISSC", 	 "Name": "Innovative Solutions and Support, Inc.", 	 "Price": 4.24, 	 "MarketCap": 71610000, 	 "IPO":2000, 		 "Sector":"Technology", 	 "Industry":"EDP Services"},
      {"Symbol":"INGN", 	 "Name": "Inogen, Inc", 	 "Price": 33.53, 	 "MarketCap": 624630000, 	 "IPO":2014, 		 "Sector":"Health Care", 	 "Industry":"Industrial Specialties"},
      {"Symbol":"NSIT", 	 "Name": "Insight Enterprises, Inc.", 	 "Price": 25.92, 	 "MarketCap": 1060000000, 	 "IPO":1995, 		 "Sector":"Consumer Services", 	 "Industry":"Catalog/Specialty Distribution"},
      {"Symbol":"ISIG", 	 "Name": "Insignia Systems, Inc.", 	 "Price": 3.19, 	 "MarketCap": 39220000, 	 "IPO":1991, 		 "Sector":"Consumer Services", 	 "Industry":"Advertising"},
      {"Symbol":"PODD", 	 "Name": "Insulet Corporation", 	 "Price": 32, 	 "MarketCap": 1790000000, 	 "IPO":2007, 		 "Sector":"Health Care", 	 "Industry":"Medical/Dental Instruments"},
      {"Symbol":"INSY", 	 "Name": "Insys Therapeutics, Inc.", 	 "Price": 51.5, 	 "MarketCap": 1800000000, 	 "IPO":2013, 		 "Sector":"Health Care", 	 "Industry":"Major Pharmaceuticals"},
      {"Symbol":"IDTI", 	 "Name": "Integrated Device Technology, Inc.", 	 "Price": 20.555, 	 "MarketCap": 3050000000, 	 "IPO":1984, 		 "Sector":"Technology", 	 "Industry":"Semiconductors"},
      {"Symbol":"ISSI", 	 "Name": "Integrated Silicon Solution, Inc.", 	 "Price": 17.13, 	 "MarketCap": 539630000, 	 "IPO":1995, 		 "Sector":"Technology", 	 "Industry":"Semiconductors"},
      {"Symbol":"ININ", 	 "Name": "Interactive Intelligence Group, Inc.", 	 "Price": 42.99, 	 "MarketCap": 906580000, 	 "IPO":1999, 		 "Sector":"Technology", 	 "Industry":"Computer Software: Prepackaged Software"},
      {"Symbol":"ICPT", 	 "Name": "Intercept Pharmaceuticals, Inc.", 	 "Price": 209.115, 	 "MarketCap": 4720000000, 	 "IPO":2012, 		 "Sector":"Health Care", 	 "Industry":"Major Pharmaceuticals"},
      {"Symbol":"IMI", 	 "Name": "Intermolecular, Inc.", 	 "Price": 1.7, 	 "MarketCap": 80910000, 	 "IPO":2011, 		 "Sector":"Technology", 	 "Industry":"Semiconductors"},
      {"Symbol":"INAP", 	 "Name": "Internap Corporation", 	 "Price": 8.98, 	 "MarketCap": 488390000, 	 "IPO":1999, 		 "Sector":"Technology", 	 "Industry":"Computer Software: Programming, Data Processing"},
      {"Symbol":"ISCA", 	 "Name": "International Speedway Corporation", 	 "Price": 31.08, 	 "MarketCap": 1450000000, 	 "IPO":1996, 		 "Sector":"Consumer Services", 	 "Industry":"Services-Misc. Amusement & Recreation"},
      {"Symbol":"IGLD", 	 "Name": "Internet Gold Golden Lines Ltd.", 	 "Price": 4.51, 	 "MarketCap": 86610000, 	 "IPO":1999, 		 "Sector":"Public Utilities", 	 "Industry":"Telecommunications Equipment"},
      {"Symbol":"INPH", 	 "Name": "Interphase Corporation", 	 "Price": 1.91, 	 "MarketCap": 16000000, 	 "IPO":1984, 		 "Sector":"Technology", 	 "Industry":"Computer Communications Equipment"},
      {"Symbol":"XENT", 	 "Name": "Intersect ENT, Inc.", 	 "Price": 23.06, 	 "MarketCap": 539070000, 	 "IPO":2014, 		 "Sector":"Health Care", 	 "Industry":"Medical/Dental Instruments"},
      {"Symbol":"INTX", 	 "Name": "Intersections, Inc.", 	 "Price": 3.73, 	 "MarketCap": 69120000, 	 "IPO":2004, 		 "Sector":"Technology", 	 "Industry":"EDP Services"},
      {"Symbol":"ISIL", 	 "Name": "Intersil Corporation", 	 "Price": 15.3, 	 "MarketCap": 1990000000, 	 "IPO":2000, 		 "Sector":"Technology", 	 "Industry":"Semiconductors"},
      {"Symbol":"IVAC", 	 "Name": "Intevac, Inc.", 	 "Price": 7.04, 	 "MarketCap": 163510000, 	 "IPO":1995, 		 "Sector":"Technology", 	 "Industry":"Industrial Machinery/Components"},
      {"Symbol":"INTU", 	 "Name": "Intuit Inc.", 	 "Price": 90.25, 	 "MarketCap": 25770000000, 	 "IPO":1993, 		 "Sector":"Technology", 	 "Industry":"Computer Software: Prepackaged Software"},
      {"Symbol":"ISRG", 	 "Name": "Intuitive Surgical, Inc.", 	 "Price": 510.73, 	 "MarketCap": 18690000000, 	 "IPO":2000, 		 "Sector":"Health Care", 	 "Industry":"Industrial Specialties"},
      {"Symbol":"SNAK", 	 "Name": "Inventure Foods, Inc.", 	 "Price": 10.29, 	 "MarketCap": 201040000, 	 "IPO":1996, 		 "Sector":"Consumer Non-Durables", 	 "Industry":"Packaged Foods"},
      {"Symbol":"ISTR", 	 "Name": "Investar Holding Corporation", 	 "Price": 14.5, 	 "MarketCap": 105190000, 	 "IPO":2014, 		 "Sector":"Finance", 	 "Industry":"Major Banks"},
      {"Symbol":"IPAS", 	 "Name": "iPass Inc.", 	 "Price": 1.31, 	 "MarketCap": 84670000, 	 "IPO":2003, 		 "Sector":"Technology", 	 "Industry":"EDP Services"},
      {"Symbol":"IPCM", 	 "Name": "IPC Healthcare, Inc.", 	 "Price": 42.99, 	 "MarketCap": 740390000, 	 "IPO":2008, 		 "Sector":"Health Care", 	 "Industry":"Hospital/Nursing Management"},
      {"Symbol":"IPGP", 	 "Name": "IPG Photonics Corporation", 	 "Price": 87.26, 	 "MarketCap": 4550000000, 	 "IPO":2006, 		 "Sector":"Technology", 	 "Industry":"Semiconductors"},
      {"Symbol":"IRIX", 	 "Name": "IRIDEX Corporation", 	 "Price": 9.95, 	 "MarketCap": 97930000, 	 "IPO":1996, 		 "Sector":"Health Care", 	 "Industry":"Biotechnology: Electromedical & Electrotherapeutic Apparatus"},
      {"Symbol":"IRBT", 	 "Name": "iRobot Corporation", 	 "Price": 31.16, 	 "MarketCap": 921050000, 	 "IPO":2005, 		 "Sector":"Consumer Durables", 	 "Industry":"Consumer Electronics/Appliances"},
      {"Symbol":"IRWD", 	 "Name": "Ironwood Pharmaceuticals, Inc.", 	 "Price": 15.15, 	 "MarketCap": 2120000000, 	 "IPO":2010, 		 "Sector":"Health Care", 	 "Industry":"Major Pharmaceuticals"},
      {"Symbol":"ISIS", 	 "Name": "Isis Pharmaceuticals, Inc.", 	 "Price": 63.86, 	 "MarketCap": 7540000000, 	 "IPO":1991, 		 "Sector":"Health Care", 	 "Industry":"Major Pharmaceuticals"},
      {"Symbol":"ISRL", 	 "Name": "Isramco, Inc.", 	 "Price": 129.45, 	 "MarketCap": 351810000, 	 "IPO":1983, 		 "Sector":"Energy", 	 "Industry":"Oil & Gas Production"},
      {"Symbol":"ITRI", 	 "Name": "Itron, Inc.", 	 "Price": 35.75, 	 "MarketCap": 1400000000, 	 "IPO":1993, 		 "Sector":"Capital Goods", 	 "Industry":"Electrical Products"},
      {"Symbol":"ITRN", 	 "Name": "Ituran Location and Control Ltd.", 	 "Price": 21.955, 	 "MarketCap": 515400000, 	 "IPO":2005, 		 "Sector":"Consumer Non-Durables", 	 "Industry":"Electronic Components"},
      {"Symbol":"XXIA", 	 "Name": "Ixia", 	 "Price": 10.56, 	 "MarketCap": 827860000, 	 "IPO":2000, 		 "Sector":"Capital Goods", 	 "Industry":"Electrical Products"},
      {"Symbol":"JJSF", 	 "Name": "J & J Snack Foods Corp.", 	 "Price": 100.08, 	 "MarketCap": 1870000000, 	 "IPO":1986, 		 "Sector":"Consumer Non-Durables", 	 "Industry":"Specialty Foods"},
      {"Symbol":"JCOM", 	 "Name": "j2 Global, Inc.", 	 "Price": 65.83, 	 "MarketCap": 3150000000, 	 "IPO":1999, 		 "Sector":"Technology", 	 "Industry":"Telecommunications Equipment"},
      {"Symbol":"JASO", 	 "Name": "JA Solar Holdings, Co., Ltd.", 	 "Price": 8.89, 	 "MarketCap": 404490000, 	 "IPO":2007, 		 "Sector":"Technology", 	 "Industry":"Semiconductors"},
      {"Symbol":"JKHY", 	 "Name": "Jack Henry & Associates, Inc.", 	 "Price": 65.78, 	 "MarketCap": 5380000000, 	 "IPO":1985, 		 "Sector":"Technology", 	 "Industry":"EDP Services"},
      {"Symbol":"JAKK", 	 "Name": "JAKKS Pacific, Inc.", 	 "Price": 6.9, 	 "MarketCap": 160530000, 	 "IPO":1996, 		 "Sector":"Consumer Non-Durables", 	 "Industry":"Recreational Products/Toys"},
      {"Symbol":"JRVR", 	 "Name": "James River Group Holdings, Ltd.", 	 "Price": 21.55, 	 "MarketCap": 615040000, 	 "IPO":2014, 		 "Sector":"Finance", 	 "Industry":"Property-Casualty Insurers"},
      {"Symbol":"JASN", 	 "Name": "Jason Industries, Inc.", 	 "Price": 8.19, 	 "MarketCap": 180100000, 	 "IPO":2013, 		 "Sector":"Consumer Durables", 	 "Industry":"Miscellaneous manufacturing industries"},
      {"Symbol":"JAZZ", 	 "Name": "Jazz Pharmaceuticals plc", 	 "Price": 169.69, 	 "MarketCap": 10260000000, 	 "IPO":2007, 		 "Sector":"Health Care", 	 "Industry":"Major Pharmaceuticals"},
      {"Symbol":"JD", 	 "Name": "JD.com, Inc.", 	 "Price": 26.23, 	 "MarketCap": 35730000000, 	 "IPO":2014, 		 "Sector":"Consumer Services", 	 "Industry":"Other Specialty Stores"},
      {"Symbol":"JBLU", 	 "Name": "JetBlue Airways Corporation", 	 "Price": 16.83, 	 "MarketCap": 4910000000, 	 "IPO":2002, 		 "Sector":"Transportation", 	 "Industry":"Air Freight/Delivery Services"},
      {"Symbol":"JTPY", 	 "Name": "JetPay Corporation", 	 "Price": 2.6, 	 "MarketCap": 36050000, 	 "IPO":2011, 		 "Sector":"Finance", 	 "Industry":"Business Services"},
      {"Symbol":"DATE", 	 "Name": "Jiayuan.com International Ltd.", 	 "Price": 4.83, 	 "MarketCap": 157880000, 	 "IPO":2011, 		 "Sector":"Technology", 	 "Industry":"EDP Services"},
      {"Symbol":"JST", 	 "Name": "Jinpan International Limited", 	 "Price": 5.35, 	 "MarketCap": 87840000, 	 "IPO":1998, 		 "Sector":"Consumer Durables", 	 "Industry":"Electrical Products"},
      {"Symbol":"JIVE", 	 "Name": "Jive Software, Inc.", 	 "Price": 5.34, 	 "MarketCap": 382310000, 	 "IPO":2011, 		 "Sector":"Technology", 	 "Industry":"EDP Services"},
      {"Symbol":"JBSS", 	 "Name": "John B. Sanfilippo & Son, Inc.", 	 "Price": 37.24, 	 "MarketCap": 414370000, 	 "IPO":1991, 		 "Sector":"Consumer Non-Durables", 	 "Industry":"Specialty Foods"},
      {"Symbol":"JUNO", 	 "Name": "Juno Therapeutics, Inc.", 	 "Price": 40.52, 	 "MarketCap": 3660000000, 	 "IPO":2014, 		 "Sector":"Health Care", 	 "Industry":"Biotechnology: Biological Products (No Diagnostic Substances)"},
      {"Symbol":"KTWO", 	 "Name": "K2M Group Holdings, Inc.", 	 "Price": 19.75, 	 "MarketCap": 779430000, 	 "IPO":2014, 		 "Sector":"Health Care", 	 "Industry":"Medical/Dental Instruments"},
      {"Symbol":"KBIO", 	 "Name": "KaloBios Pharmaceuticals, Inc.", 	 "Price": 0.45, 	 "MarketCap": 14840000, 	 "IPO":2013, 		 "Sector":"Health Care", 	 "Industry":"Major Pharmaceuticals"},
      {"Symbol":"KMDA", 	 "Name": "Kamada Ltd.", 	 "Price": 4.23, 	 "MarketCap": 152230000, 	 "IPO":2013, 		 "Sector":"Health Care", 	 "Industry":"Major Pharmaceuticals"},
      {"Symbol":"KPTI", 	 "Name": "Karyopharm Therapeutics Inc.", 	 "Price": 27.12, 	 "MarketCap": 886910000, 	 "IPO":2013, 		 "Sector":"Health Care", 	 "Industry":"Major Pharmaceuticals"},
      {"Symbol":"KBSF", 	 "Name": "KBS Fashion Group Limited", 	 "Price": 4.25, 	 "MarketCap": 108020000, 	 "IPO":2013, 		 "Sector":"Consumer Non-Durables", 	 "Industry":"Apparel"},
      {"Symbol":"GMCR", 	 "Name": "Keurig Green Mountain, Inc.", 	 "Price": 118.53, 	 "MarketCap": 19160000000, 	 "IPO":1993, 		 "Sector":"Consumer Non-Durables", 	 "Industry":"Packaged Foods"},
      {"Symbol":"KTEC", 	 "Name": "Key Technology, Inc.", 	 "Price": 12.53, 	 "MarketCap": 78170000, 	 "IPO":1993, 		 "Sector":"Technology", 	 "Industry":"Industrial Machinery/Components"},
      {"Symbol":"KTCC", 	 "Name": "Key Tronic Corporation", 	 "Price": 9.7, 	 "MarketCap": 102350000, 	 "IPO":1983, 		 "Sector":"Technology", 	 "Industry":"Computer peripheral equipment"},
      {"Symbol":"KFRC", 	 "Name": "Kforce, Inc.", 	 "Price": 23.24, 	 "MarketCap": 710860000, 	 "IPO":1995, 		 "Sector":"Technology", 	 "Industry":"Professional Services"},
      {"Symbol":"KIN", 	 "Name": "Kindred Biosciences, Inc.", 	 "Price": 6.79, 	 "MarketCap": 133930000, 	 "IPO":2013, 		 "Sector":"Health Care", 	 "Industry":"Major Pharmaceuticals"},
      {"Symbol":"KONE", 	 "Name": "Kingtone Wirelessinfo Solution Holding Ltd", 	 "Price": 4.2, 	 "MarketCap": 5900000, 	 "IPO":2010, 		 "Sector":"Technology", 	 "Industry":"EDP Services"},
      {"Symbol":"KIRK", 	 "Name": "Kirkland&#39;s, Inc.", 	 "Price": 25.87, 	 "MarketCap": 443580000, 	 "IPO":2002, 		 "Sector":"Consumer Services", 	 "Industry":"Other Specialty Stores"},
      {"Symbol":"KITE", 	 "Name": "Kite Pharma, Inc.", 	 "Price": 62.59, 	 "MarketCap": 2650000000, 	 "IPO":2014, 		 "Sector":"Health Care", 	 "Industry":"Biotechnology: Biological Products (No Diagnostic Substances)"},
      {"Symbol":"KLAC", 	 "Name": "KLA-Tencor Corporation", 	 "Price": 63.64, 	 "MarketCap": 10350000000, 	 "IPO":1980, 		 "Sector":"Capital Goods", 	 "Industry":"Electronic Components"},
      {"Symbol":"VLCCF", 	 "Name": "Knightsbridge Shipping Limited", 	 "Price": 4.15, 	 "MarketCap": 332500000, 	 "IPO":1997, 		 "Sector":"Consumer Services", 	 "Industry":"Marine Transportation"},
      {"Symbol":"KFX", 	 "Name": "Kofax Limited", 	 "Price": 6.99, 	 "MarketCap": 644450000, 	 "IPO":2013, 		 "Sector":"Technology", 	 "Industry":"Computer Software: Programming, Data Processing"},
      {"Symbol":"KONA", 	 "Name": "Kona Grill, Inc.", 	 "Price": 24.38, 	 "MarketCap": 269110000, 	 "IPO":2005, 		 "Sector":"Consumer Services", 	 "Industry":"Restaurants"},
      {"Symbol":"KOPN", 	 "Name": "Kopin Corporation", 	 "Price": 3.91, 	 "MarketCap": 257700000, 	 "IPO":1992, 		 "Sector":"Technology", 	 "Industry":"Semiconductors"},
      {"Symbol":"KVHI", 	 "Name": "KVH Industries, Inc.", 	 "Price": 13.11, 	 "MarketCap": 208590000, 	 "IPO":1996, 		 "Sector":"Technology", 	 "Industry":"Radio And Television Broadcasting And Communications Equipment"},
      {"Symbol":"KYTH", 	 "Name": "Kythera Biopharmaceuticals, Inc.", 	 "Price": 39.72, 	 "MarketCap": 900660000, 	 "IPO":2012, 		 "Sector":"Health Care", 	 "Industry":"Major Pharmaceuticals"},
      {"Symbol":"LJPC", 	 "Name": "La Jolla Pharmaceutical Company", 	 "Price": 18.79, 	 "MarketCap": 286100000, 	 "IPO":1994, 		 "Sector":"Health Care", 	 "Industry":"Biotechnology: Biological Products (No Diagnostic Substances)"},
      {"Symbol":"LAKE", 	 "Name": "Lakeland Industries, Inc.", 	 "Price": 10.18, 	 "MarketCap": 71740000, 	 "IPO":1986, 		 "Sector":"Health Care", 	 "Industry":"Industrial Specialties"},
      {"Symbol":"LRCX", 	 "Name": "Lam Research Corporation", 	 "Price": 82.21, 	 "MarketCap": 13100000000, 	 "IPO":1984, 		 "Sector":"Technology", 	 "Industry":"Industrial Machinery/Components"},
      {"Symbol":"LAMR", 	 "Name": "Lamar Advertising Company", 	 "Price": 57.55, 	 "MarketCap": 6330000000, 	 "IPO":1996, 		 "Sector":"Consumer Services", 	 "Industry":"Real Estate Investment Trusts"},
      {"Symbol":"LNDC", 	 "Name": "Landec Corporation", 	 "Price": 14.3, 	 "MarketCap": 384330000, 	 "IPO":1996, 		 "Sector":"Basic Industries", 	 "Industry":"Major Chemicals"},
      {"Symbol":"LMRK", 	 "Name": "Landmark Infrastructure Partners LP", 	 "Price": 17.4, 	 "MarketCap": 136380000, 	 "IPO":2014, 		 "Sector":"Consumer Services", 	 "Industry":"Real Estate"},
      {"Symbol":"LSTR", 	 "Name": "Landstar System, Inc.", 	 "Price": 68.62, 	 "MarketCap": 3070000000, 	 "IPO":1993, 		 "Sector":"Transportation", 	 "Industry":"Trucking Freight/Courier Services"},
      {"Symbol":"LTRX", 	 "Name": "Lantronix, Inc.", 	 "Price": 1.74, 	 "MarketCap": 26000000, 	 "IPO":2000, 		 "Sector":"Technology", 	 "Industry":"Computer Communications Equipment"},
      {"Symbol":"LAYN", 	 "Name": "Layne Christensen Company", 	 "Price": 7.93, 	 "MarketCap": 156530000, 	 "IPO":1992, 		 "Sector":"Basic Industries", 	 "Industry":"Engineering & Construction"},
      {"Symbol":"LDRH", 	 "Name": "LDR Holding Corporation", 	 "Price": 37.73, 	 "MarketCap": 983120000, 	 "IPO":2013, 		 "Sector":"Health Care", 	 "Industry":"Medical/Dental Instruments"},
      {"Symbol":"LTRE", 	 "Name": "Learning Tree International, Inc.", 	 "Price": 1.71, 	 "MarketCap": 22610000, 	 "IPO":1995, 		 "Sector":"Consumer Services", 	 "Industry":"Other Consumer Services"},
      {"Symbol":"LGCY", 	 "Name": "Legacy Reserves LP", 	 "Price": 13.35, 	 "MarketCap": 923360000, 	 "IPO":2007, 		 "Sector":"Energy", 	 "Industry":"Oil & Gas Production"},
      {"Symbol":"LMAT", 	 "Name": "LeMaitre Vascular, Inc.", 	 "Price": 7.66, 	 "MarketCap": 133060000, 	 "IPO":2006, 		 "Sector":"Health Care", 	 "Industry":"Medical/Dental Instruments"},
      {"Symbol":"LEVY", 	 "Name": "Levy Acquisition Corp.", 	 "Price": 9.99, 	 "MarketCap": 187310000, 	 "IPO":2014, 		 "Sector":"Finance", 	 "Industry":"Business Services"},
      {"Symbol":"LEVYU", 	 "Name": "Levy Acquisition Corp.", 	 "Price": 10.4, 	 "MarketCap": 195000000, 	 "IPO":2013, 		 "Sector":"Finance", 	 "Industry":"Business Services"},
      {"Symbol":"LGIH", 	 "Name": "LGI Homes, Inc.", 	 "Price": 13.38, 	 "MarketCap": 277810000, 	 "IPO":2013, 		 "Sector":"Capital Goods", 	 "Industry":"Homebuilding"},
      {"Symbol":"LHCG", 	 "Name": "LHC Group", 	 "Price": 30.42, 	 "MarketCap": 541430000, 	 "IPO":2005, 		 "Sector":"Health Care", 	 "Industry":"Medical/Nursing Services"},
      {"Symbol":"LCUT", 	 "Name": "Lifetime Brands, Inc.", 	 "Price": 15.84, 	 "MarketCap": 216750000, 	 "IPO":1991, 		 "Sector":"Capital Goods", 	 "Industry":"Industrial Machinery/Components"},
      {"Symbol":"LPTH", 	 "Name": "LightPath Technologies, Inc.", 	 "Price": 1.18, 	 "MarketCap": 17980000, 	 "IPO":1996, 		 "Sector":"Technology", 	 "Industry":"Semiconductors"},
      {"Symbol":"LLNW", 	 "Name": "Limelight Networks, Inc.", 	 "Price": 2.99, 	 "MarketCap": 295070000, 	 "IPO":2007, 		 "Sector":"Miscellaneous", 	 "Industry":"Business Services"},
      {"Symbol":"LINC", 	 "Name": "Lincoln Educational Services Corporation", 	 "Price": 2.4, 	 "MarketCap": 57730000, 	 "IPO":2005, 		 "Sector":"Consumer Services", 	 "Industry":"Other Consumer Services"},
      {"Symbol":"LLTC", 	 "Name": "Linear Technology Corporation", 	 "Price": 48.385, 	 "MarketCap": 11570000000, 	 "IPO":1986, 		 "Sector":"Technology", 	 "Industry":"Semiconductors"},
      {"Symbol":"LNCO", 	 "Name": "Linn Co, LLC", 	 "Price": 12.3, 	 "MarketCap": 1580000000, 	 "IPO":2012, 		 "Sector":"Energy", 	 "Industry":"Oil & Gas Production"},
      {"Symbol":"LINE", 	 "Name": "Linn Energy, LLC", 	 "Price": 12.94, 	 "MarketCap": 4260000000, 	 "IPO":2006, 		 "Sector":"Energy", 	 "Industry":"Oil & Gas Production"},
      {"Symbol":"LIOX", 	 "Name": "Lionbridge Technologies, Inc.", 	 "Price": 5.57, 	 "MarketCap": 355270000, 	 "IPO":1999, 		 "Sector":"Miscellaneous", 	 "Industry":"Business Services"},
      {"Symbol":"LIQD", 	 "Name": "Liquid Holdings Group, Inc.", 	 "Price": 0.383, 	 "MarketCap": 23110000, 	 "IPO":2013, 		 "Sector":"Technology", 	 "Industry":"Computer Software: Prepackaged Software"},
      {"Symbol":"LQDT", 	 "Name": "Liquidity Services, Inc.", 	 "Price": 9.52, 	 "MarketCap": 285390000, 	 "IPO":2006, 		 "Sector":"Miscellaneous", 	 "Industry":"Business Services"},
      {"Symbol":"LPSN", 	 "Name": "LivePerson, Inc.", 	 "Price": 10.74, 	 "MarketCap": 586980000, 	 "IPO":2000, 		 "Sector":"Technology", 	 "Industry":"Computer Software: Prepackaged Software"},
      {"Symbol":"LMIA", 	 "Name": "LMI Aerospace, Inc.", 	 "Price": 14.33, 	 "MarketCap": 181960000, 	 "IPO":1998, 		 "Sector":"Capital Goods", 	 "Industry":"Military/Government/Technical"},
      {"Symbol":"LOGI", 	 "Name": "Logitech International S.A.", 	 "Price": 14.86, 	 "MarketCap": 2440000000, 	 "IPO":1997, 		 "Sector":"Technology", 	 "Industry":"Computer peripheral equipment"},
      {"Symbol":"LOGM", 	 "Name": "LogMein, Inc.", 	 "Price": 52.22, 	 "MarketCap": 1270000000, 	 "IPO":2009, 		 "Sector":"Technology", 	 "Industry":"Computer Software: Prepackaged Software"},
      {"Symbol":"EVAR", 	 "Name": "Lombard Medical, Inc.", 	 "Price": 5.469, 	 "MarketCap": 88520000, 	 "IPO":2014, 		 "Sector":"Health Care", 	 "Industry":"Medical/Dental Instruments"},
      {"Symbol":"LOOK", 	 "Name": "LookSmart, Ltd.", 	 "Price": 0.7485, 	 "MarketCap": 4320000, 	 "IPO":1999, 		 "Sector":"Technology", 	 "Industry":"EDP Services"},
      {"Symbol":"LOXO", 	 "Name": "Loxo Oncology, Inc.", 	 "Price": 11.91, 	 "MarketCap": 198110000, 	 "IPO":2014, 		 "Sector":"Health Care", 	 "Industry":"Major Pharmaceuticals"},
      {"Symbol":"LPLA", 	 "Name": "LPL Financial Holdings Inc.", 	 "Price": 45.6, 	 "MarketCap": 4510000000, 	 "IPO":2010, 		 "Sector":"Finance", 	 "Industry":"Investment Bankers/Brokers/Service"},
      {"Symbol":"LYTS", 	 "Name": "LSI Industries Inc.", 	 "Price": 8.06, 	 "MarketCap": 194620000, 	 "IPO":1985, 		 "Sector":"Consumer Durables", 	 "Industry":"Building Products"},
      {"Symbol":"LULU", 	 "Name": "lululemon athletica inc.", 	 "Price": 65.98, 	 "MarketCap": 8720000000, 	 "IPO":2007, 		 "Sector":"Consumer Non-Durables", 	 "Industry":"Apparel"},
      {"Symbol":"LMNS", 	 "Name": "Lumenis Ltd.", 	 "Price": 10.8, 	 "MarketCap": 380610000, 	 "IPO":2014, 		 "Sector":"Health Care", 	 "Industry":"Medical Specialities"},
      {"Symbol":"LMNX", 	 "Name": "Luminex Corporation", 	 "Price": 15.45, 	 "MarketCap": 661770000, 	 "IPO":2000, 		 "Sector":"Health Care", 	 "Industry":"Medical/Dental Instruments"},
      {"Symbol":"LUNA", 	 "Name": "Luna Innovations Incorporated", 	 "Price": 1.48, 	 "MarketCap": 22270000, 	 "IPO":2006, 		 "Sector":"Health Care", 	 "Industry":"Biotechnology: Commercial Physical & Biological Resarch"},
      {"Symbol":"MTSI", 	 "Name": "M/A-COM Technology Solutions Holdings, Inc.", 	 "Price": 33.06, 	 "MarketCap": 1770000000, 	 "IPO":2012, 		 "Sector":"Technology", 	 "Industry":"Semiconductors"},
      {"Symbol":"MCUR", 	 "Name": "MACROCURE LTD.", 	 "Price": 11.195, 	 "MarketCap": 182480000, 	 "IPO":2014, 		 "Sector":"Health Care", 	 "Industry":"Biotechnology: Biological Products (No Diagnostic Substances)"},
      {"Symbol":"MGNX", 	 "Name": "MacroGenics, Inc.", 	 "Price": 34.09, 	 "MarketCap": 947530000, 	 "IPO":2013, 		 "Sector":"Health Care", 	 "Industry":"Major Pharmaceuticals"},
      {"Symbol":"MCBK", 	 "Name": "Madison County Financial, Inc.", 	 "Price": 20.1, 	 "MarketCap": 60950000, 	 "IPO":2012, 		 "Sector":"Finance", 	 "Industry":"Savings Institutions"},
      {"Symbol":"MAGS", 	 "Name": "Magal Security Systems Ltd.", 	 "Price": 4.91, 	 "MarketCap": 79880000, 	 "IPO":1993, 		 "Sector":"Consumer Durables", 	 "Industry":"Telecommunications Equipment"},
      {"Symbol":"MGIC", 	 "Name": "Magic Software Enterprises Ltd.", 	 "Price": 6.4, 	 "MarketCap": 282450000, 	 "IPO":1991, 		 "Sector":"Technology", 	 "Industry":"Computer Software: Prepackaged Software"},
      {"Symbol":"MMYT", 	 "Name": "MakeMyTrip Limited", 	 "Price": 24.55, 	 "MarketCap": 1020000000, 	 "IPO":2010, 		 "Sector":"Consumer Services", 	 "Industry":"Transportation Services"},
      {"Symbol":"MBUU", 	 "Name": "Malibu Boats, Inc.", 	 "Price": 20.04, 	 "MarketCap": 312800000, 	 "IPO":2014, 		 "Sector":"Capital Goods", 	 "Industry":"Marine Transportation"},
      {"Symbol":"MANH", 	 "Name": "Manhattan Associates, Inc.", 	 "Price": 51.61, 	 "MarketCap": 3830000000, 	 "IPO":1998, 		 "Sector":"Technology", 	 "Industry":"Computer Software: Prepackaged Software"},
      {"Symbol":"MNKD", 	 "Name": "MannKind Corporation", 	 "Price": 7, 	 "MarketCap": 2840000000, 	 "IPO":2004, 		 "Sector":"Health Care", 	 "Industry":"Major Pharmaceuticals"},
      {"Symbol":"MANT", 	 "Name": "ManTech International Corporation", 	 "Price": 34.72, 	 "MarketCap": 1290000000, 	 "IPO":2002, 		 "Sector":"Consumer Services", 	 "Industry":"Other Consumer Services"},
      {"Symbol":"MCHX", 	 "Name": "Marchex, Inc.", 	 "Price": 4.34, 	 "MarketCap": 185940000, 	 "IPO":2004, 		 "Sector":"Miscellaneous", 	 "Industry":"Business Services"},
      {"Symbol":"MRNS", 	 "Name": "Marinus Pharmaceuticals, Inc.", 	 "Price": 10.94, 	 "MarketCap": 153240000, 	 "IPO":2014, 		 "Sector":"Health Care", 	 "Industry":"Major Pharmaceuticals"},
      {"Symbol":"MKTX", 	 "Name": "MarketAxess Holdings, Inc.", 	 "Price": 81.22, 	 "MarketCap": 3040000000, 	 "IPO":2004, 		 "Sector":"Finance", 	 "Industry":"Investment Bankers/Brokers/Service"},
      {"Symbol":"MKTO", 	 "Name": "Marketo, Inc.", 	 "Price": 28.24, 	 "MarketCap": 1160000000, 	 "IPO":2013, 		 "Sector":"Technology", 	 "Industry":"Computer Software: Prepackaged Software"},
      {"Symbol":"MRKT", 	 "Name": "Markit Ltd.", 	 "Price": 26.14, 	 "MarketCap": 4750000000, 	 "IPO":2014, 		 "Sector":"Finance", 	 "Industry":"Investment Bankers/Brokers/Service"},
      {"Symbol":"MRLN", 	 "Name": "Marlin Business Services Corp.", 	 "Price": 17.71, 	 "MarketCap": 227050000, 	 "IPO":2003, 		 "Sector":"Finance", 	 "Industry":"Major Banks"},
      {"Symbol":"FISH", 	 "Name": "Marlin Midstream Partners, LP", 	 "Price": 22.86, 	 "MarketCap": 404710000, 	 "IPO":1992, 		 "Sector":"Public Utilities", 	 "Industry":"Natural Gas Distribution"},
      {"Symbol":"MBII", 	 "Name": "Marrone Bio Innovations, Inc.", 	 "Price": 3.88, 	 "MarketCap": 94670000, 	 "IPO":2013, 		 "Sector":"Basic Industries", 	 "Industry":"Agricultural Chemicals"},
      {"Symbol":"MRTN", 	 "Name": "Marten Transport, Ltd.", 	 "Price": 22.56, 	 "MarketCap": 753640000, 	 "IPO":1986, 		 "Sector":"Transportation", 	 "Industry":"Trucking Freight/Courier Services"},
      {"Symbol":"MMLP", 	 "Name": "Martin Midstream Partners L.P.", 	 "Price": 30.17, 	 "MarketCap": 1070000000, 	 "IPO":2002, 		 "Sector":"Energy", 	 "Industry":"Oil Refining/Marketing"},
      {"Symbol":"MRVL", 	 "Name": "Marvell Technology Group Ltd.", 	 "Price": 16.59, 	 "MarketCap": 8480000000, 	 "IPO":2000, 		 "Sector":"Technology", 	 "Industry":"Semiconductors"},
      {"Symbol":"MASI", 	 "Name": "Masimo Corporation", 	 "Price": 27.38, 	 "MarketCap": 1440000000, 	 "IPO":2007, 		 "Sector":"Health Care", 	 "Industry":"Biotechnology: Electromedical & Electrotherapeutic Apparatus"},
      {"Symbol":"MTLS", 	 "Name": "Materialise NV", 	 "Price": 8.17, 	 "MarketCap": 384580000, 	 "IPO":2014, 		 "Sector":"Technology", 	 "Industry":"Computer Software: Prepackaged Software"},
      {"Symbol":"MTRX", 	 "Name": "Matrix Service Company", 	 "Price": 19.92, 	 "MarketCap": 532080000, 	 "IPO":1990, 		 "Sector":"Basic Industries", 	 "Industry":"Engineering & Construction"},
      {"Symbol":"MATW", 	 "Name": "Matthews International Corporation", 	 "Price": 49.13, 	 "MarketCap": 1620000000, 	 "IPO":1994, 		 "Sector":"Capital Goods", 	 "Industry":"Metal Fabrications"},
      {"Symbol":"MFRM", 	 "Name": "Mattress Firm Holding Corp.", 	 "Price": 62.22, 	 "MarketCap": 2180000000, 	 "IPO":2011, 		 "Sector":"Consumer Services", 	 "Industry":"Other Specialty Stores"},
      {"Symbol":"MTSN", 	 "Name": "Mattson Technology, Inc.", 	 "Price": 4.04, 	 "MarketCap": 298170000, 	 "IPO":1994, 		 "Sector":"Technology", 	 "Industry":"Industrial Machinery/Components"},
      {"Symbol":"MXIM", 	 "Name": "Maxim Integrated Products, Inc.", 	 "Price": 34.92, 	 "MarketCap": 9880000000, 	 "IPO":1988, 		 "Sector":"Technology", 	 "Industry":"Semiconductors"},
      {"Symbol":"MGRC", 	 "Name": "McGrath RentCorp", 	 "Price": 32.63, 	 "MarketCap": 847070000, 	 "IPO":1984, 		 "Sector":"Technology", 	 "Industry":"Diversified Commercial Services"},
      {"Symbol":"MCOX", 	 "Name": "Mecox Lane Limited", 	 "Price": 3.96, 	 "MarketCap": 51490000, 	 "IPO":2010, 		 "Sector":"Consumer Non-Durables", 	 "Industry":"Apparel"},
      {"Symbol":"TAXI", 	 "Name": "Medallion Financial Corp.", 	 "Price": 9.92, 	 "MarketCap": 249610000, 	 "IPO":1996, 		 "Sector":"Finance", 	 "Industry":"Finance: Consumer Services"},
      {"Symbol":"MDAS", 	 "Name": "MedAssets, Inc.", 	 "Price": 19.81, 	 "MarketCap": 1190000000, 	 "IPO":2007, 		 "Sector":"Technology", 	 "Industry":"Computer Software: Prepackaged Software"},
      {"Symbol":"MTBC", 	 "Name": "Medical Transcription Billing, Corp.", 	 "Price": 2.39, 	 "MarketCap": 26290000, 	 "IPO":2014, 		 "Sector":"Technology", 	 "Industry":"Computer Software: Prepackaged Software"},
      {"Symbol":"MDSO", 	 "Name": "Medidata Solutions, Inc.", 	 "Price": 46.575, 	 "MarketCap": 2530000000, 	 "IPO":2009, 		 "Sector":"Technology", 	 "Industry":"Computer Software: Prepackaged Software"},
      {"Symbol":"MDWD", 	 "Name": "MediWound Ltd.", 	 "Price": 7.22, 	 "MarketCap": 153770000, 	 "IPO":2014, 		 "Sector":"Consumer Durables", 	 "Industry":"Specialty Chemicals"},
      {"Symbol":"MELA", 	 "Name": "MELA Sciences, Inc", 	 "Price": 1.55, 	 "MarketCap": 9360000, 	 "IPO":2005, 		 "Sector":"Health Care", 	 "Industry":"Medical/Dental Instruments"},
      {"Symbol":"MPEL", 	 "Name": "Melco Crown Entertainment Limited", 	 "Price": 27.54, 	 "MarketCap": 15170000000, 	 "IPO":2006, 		 "Sector":"Consumer Services", 	 "Industry":"Hotels/Resorts"},
      {"Symbol":"MLNX", 	 "Name": "Mellanox Technologies, Ltd.", 	 "Price": 46.35, 	 "MarketCap": 2100000000, 	 "IPO":2007, 		 "Sector":"Technology", 	 "Industry":"Semiconductors"},
      {"Symbol":"MELR", 	 "Name": "Melrose Bancorp, Inc.", 	 "Price": 13.99, 	 "MarketCap": 39590000, 	 "IPO":2014, 		 "Sector":"Finance", 	 "Industry":"Major Banks"},
      {"Symbol":"MEMP", 	 "Name": "Memorial Production Partners LP", 	 "Price": 17.35, 	 "MarketCap": 1500000000, 	 "IPO":2011, 		 "Sector":"Energy", 	 "Industry":"Oil & Gas Production"},
      {"Symbol":"MRD", 	 "Name": "Memorial Resource Development Corp.", 	 "Price": 18.66, 	 "MarketCap": 3610000000, 	 "IPO":2014, 		 "Sector":"Energy", 	 "Industry":"Oil & Gas Production"},
      {"Symbol":"MENT", 	 "Name": "Mentor Graphics Corporation", 	 "Price": 24.58, 	 "MarketCap": 2830000000, 	 "IPO":1984, 		 "Sector":"Technology", 	 "Industry":"EDP Services"},
      {"Symbol":"MTSL", 	 "Name": "MER Telemanagement Solutions Ltd.", 	 "Price": 1.52, 	 "MarketCap": 7080000, 	 "IPO":1997, 		 "Sector":"Public Utilities", 	 "Industry":"Telecommunications Equipment"},
      {"Symbol":"MELI", 	 "Name": "MercadoLibre, Inc.", 	 "Price": 129.99, 	 "MarketCap": 5740000000, 	 "IPO":2007, 		 "Sector":"Miscellaneous", 	 "Industry":"Business Services"},
      {"Symbol":"MBWM", 	 "Name": "Mercantile Bank Corporation", 	 "Price": 19.32, 	 "MarketCap": 325790000, 	 "IPO":1998, 		 "Sector":"Finance", 	 "Industry":"Major Banks"},
      {"Symbol":"MRCY", 	 "Name": "Mercury Systems Inc", 	 "Price": 17.42, 	 "MarketCap": 594890000, 	 "IPO":1998, 		 "Sector":"Capital Goods", 	 "Industry":"Electrical Products"},
      {"Symbol":"MRGE", 	 "Name": "Merge Healthcare Incorporated.", 	 "Price": 4.47, 	 "MarketCap": 440750000, 	 "IPO":1998, 		 "Sector":"Technology", 	 "Industry":"EDP Services"},
      {"Symbol":"VIVO", 	 "Name": "Meridian Bioscience Inc.", 	 "Price": 19.15, 	 "MarketCap": 798670000, 	 "IPO":1986, 		 "Sector":"Health Care", 	 "Industry":"Biotechnology: In Vitro & In Vivo Diagnostic Substances"},
      {"Symbol":"MACK", 	 "Name": "Merrimack Pharmaceuticals, Inc.", 	 "Price": 10.22, 	 "MarketCap": 1080000000, 	 "IPO":2012, 		 "Sector":"Health Care", 	 "Industry":"Major Pharmaceuticals"},
      {"Symbol":"MERU", 	 "Name": "Meru Networks, Inc.", 	 "Price": 2.74, 	 "MarketCap": 65210000, 	 "IPO":2010, 		 "Sector":"Technology", 	 "Industry":"Computer Communications Equipment"},
      {"Symbol":"CASH", 	 "Name": "Meta Financial Group, Inc.", 	 "Price": 34.34, 	 "MarketCap": 220500000, 	 "IPO":1993, 		 "Sector":"Finance", 	 "Industry":"Savings Institutions"},
      {"Symbol":"MBLX", 	 "Name": "Metabolix, Inc.", 	 "Price": 0.44, 	 "MarketCap": 59480000, 	 "IPO":2006, 		 "Sector":"Basic Industries", 	 "Industry":"Containers/Packaging"},
      {"Symbol":"MEIL", 	 "Name": "METHES ENERGIES INTERNATIONAL LTD", 	 "Price": 1.64, 	 "MarketCap": 18800000, 	 "IPO":2012, 		 "Sector":"Basic Industries", 	 "Industry":"Major Chemicals"},
      {"Symbol":"MFRI", 	 "Name": "MFRI, Inc.", 	 "Price": 6.79, 	 "MarketCap": 49500000, 	 "IPO":1989, 		 "Sector":"Capital Goods", 	 "Industry":"Pollution Control Equipment"},
      {"Symbol":"MCRL", 	 "Name": "Micrel, Incorporated", 	 "Price": 14.63, 	 "MarketCap": 828890000, 	 "IPO":1994, 		 "Sector":"Technology", 	 "Industry":"Semiconductors"},
      {"Symbol":"MCHP", 	 "Name": "Microchip Technology Incorporated", 	 "Price": 50.71, 	 "MarketCap": 10220000000, 	 "IPO":1993, 		 "Sector":"Technology", 	 "Industry":"Semiconductors"},
      {"Symbol":"MSFT", 	 "Name": "Microsoft Corporation", 	 "Price": 43.87, 	 "MarketCap": 3.599E+11, 	 "IPO":1986, 		 "Sector":"Technology", 	 "Industry":"Computer Software: Prepackaged Software"},
      {"Symbol":"MSTR", 	 "Name": "MicroStrategy Incorporated", 	 "Price": 181.24, 	 "MarketCap": 2050000000, 	 "IPO":1998, 		 "Sector":"Technology", 	 "Industry":"Computer Software: Prepackaged Software"},
      {"Symbol":"MVIS", 	 "Name": "Microvision, Inc.", 	 "Price": 2.01, 	 "MarketCap": 89340000, 	 "IPO":1996, 		 "Sector":"Capital Goods", 	 "Industry":"Industrial Machinery/Components"},
      {"Symbol":"MCEP", 	 "Name": "Mid-Con Energy Partners, LP", 	 "Price": 6.29, 	 "MarketCap": 146790000, 	 "IPO":2011, 		 "Sector":"Energy", 	 "Industry":"Oil & Gas Production"},
      {"Symbol":"NERV", 	 "Name": "Minerva Neurosciences, Inc", 	 "Price": 4.68, 	 "MarketCap": 86300000, 	 "IPO":2014, 		 "Sector":"Health Care", 	 "Industry":"Major Pharmaceuticals"},
      {"Symbol":"MSON", 	 "Name": "MISONIX, Inc.", 	 "Price": 12.47, 	 "MarketCap": 95230000, 	 "IPO":1992, 		 "Sector":"Capital Goods", 	 "Industry":"Medical Specialities"},
      {"Symbol":"MIND", 	 "Name": "Mitcham Industries, Inc.", 	 "Price": 6.94, 	 "MarketCap": 83860000, 	 "IPO":1994, 		 "Sector":"Technology", 	 "Industry":"Diversified Commercial Services"},
      {"Symbol":"MKSI", 	 "Name": "MKS Instruments, Inc.", 	 "Price": 35.56, 	 "MarketCap": 1890000000, 	 "IPO":1999, 		 "Sector":"Capital Goods", 	 "Industry":"Industrial Machinery/Components"},
      {"Symbol":"MINI", 	 "Name": "Mobile Mini, Inc.", 	 "Price": 40.62, 	 "MarketCap": 1870000000, 	 "IPO":1994, 		 "Sector":"Capital Goods", 	 "Industry":"Metal Fabrications"},
      {"Symbol":"MOBL", 	 "Name": "MobileIron, Inc.", 	 "Price": 9.53, 	 "MarketCap": 724090000, 	 "IPO":2014, 		 "Sector":"Technology", 	 "Industry":"Computer Software: Prepackaged Software"},
      {"Symbol":"MOKO", 	 "Name": "Moko Social Media Ltd.", 	 "Price": 4.75, 	 "MarketCap": 71320000, 	 "IPO":2014, 		 "Sector":"Technology", 	 "Industry":"Computer Software: Programming, Data Processing"},
      {"Symbol":"MOLG", 	 "Name": "MOL Global, Inc.", 	 "Price": 2.46, 	 "MarketCap": 166050000, 	 "IPO":2014, 		 "Sector":"Miscellaneous", 	 "Industry":"Business Services"},
      {"Symbol":"MNTA", 	 "Name": "Momenta Pharmaceuticals, Inc.", 	 "Price": 11.7, 	 "MarketCap": 620690000, 	 "IPO":2004, 		 "Sector":"Health Care", 	 "Industry":"Biotechnology: Biological Products (No Diagnostic Substances)"},
      {"Symbol":"MOMO", 	 "Name": "Momo Inc.", 	 "Price": 11.02, 	 "MarketCap": 2050000000, 	 "IPO":2014, 		 "Sector":"Technology", 	 "Industry":"Computer Software: Prepackaged Software"},
      {"Symbol":"MCRI", 	 "Name": "Monarch Casino & Resort, Inc.", 	 "Price": 17.44, 	 "MarketCap": 293050000, 	 "IPO":1993, 		 "Sector":"Consumer Services", 	 "Industry":"Hotels/Resorts"},
      {"Symbol":"MPWR", 	 "Name": "Monolithic Power Systems, Inc.", 	 "Price": 50.32, 	 "MarketCap": 1950000000, 	 "IPO":2004, 		 "Sector":"Technology", 	 "Industry":"Semiconductors"},
      {"Symbol":"TYPE", 	 "Name": "Monotype Imaging Holdings Inc.", 	 "Price": 32.19, 	 "MarketCap": 1270000000, 	 "IPO":2007, 		 "Sector":"Technology", 	 "Industry":"EDP Services"},
      {"Symbol":"MNRO", 	 "Name": "Monro Muffler Brake, Inc.", 	 "Price": 61.51, 	 "MarketCap": 1950000000, 	 "IPO":1991, 		 "Sector":"Consumer Services", 	 "Industry":"Automotive Aftermarket"},
      {"Symbol":"MORN", 	 "Name": "Morningstar, Inc.", 	 "Price": 78.24, 	 "MarketCap": 3490000000, 	 "IPO":2005, 		 "Sector":"Finance", 	 "Industry":"Investment Managers"},
      {"Symbol":"MOSY", 	 "Name": "MoSys, Inc.", 	 "Price": 2.1, 	 "MarketCap": 104530000, 	 "IPO":2001, 		 "Sector":"Technology", 	 "Industry":"Semiconductors"},
      {"Symbol":"MRVC", 	 "Name": "MRV Communications, Inc.", 	 "Price": 10.04, 	 "MarketCap": 73920000, 	 "IPO":1992, 		 "Sector":"Technology", 	 "Industry":"Semiconductors"},
      {"Symbol":"LABL", 	 "Name": "Multi-Color Corporation", 	 "Price": 63.28, 	 "MarketCap": 1050000000, 	 "IPO":1987, 		 "Sector":"Miscellaneous", 	 "Industry":"Publishing"},
      {"Symbol":"MFLX", 	 "Name": "Multi-Fineline Electronix, Inc.", 	 "Price": 14.99, 	 "MarketCap": 364310000, 	 "IPO":2004, 		 "Sector":"Technology", 	 "Industry":"Electrical Products"},
      {"Symbol":"MWIV", 	 "Name": "MWI Veterinary Supply, Inc.", 	 "Price": 189.72, 	 "MarketCap": 2450000000, 	 "IPO":2005, 		 "Sector":"Health Care", 	 "Industry":"Medical Specialities"},
      {"Symbol":"MYGN", 	 "Name": "Myriad Genetics, Inc.", 	 "Price": 34.03, 	 "MarketCap": 2420000000, 	 "IPO":1995, 		 "Sector":"Health Care", 	 "Industry":"Biotechnology: In Vitro & In Vivo Diagnostic Substances"},
      {"Symbol":"NANO", 	 "Name": "Nanometrics Incorporated", 	 "Price": 17.5, 	 "MarketCap": 422770000, 	 "IPO":1984, 		 "Sector":"Capital Goods", 	 "Industry":"Industrial Machinery/Components"},
      {"Symbol":"NSPH", 	 "Name": "Nanosphere, Inc.", 	 "Price": 0.2459, 	 "MarketCap": 28840000, 	 "IPO":2007, 		 "Sector":"Health Care", 	 "Industry":"Medical/Dental Instruments"},
      {"Symbol":"NSTG", 	 "Name": "NanoString Technologies, Inc.", 	 "Price": 12.66, 	 "MarketCap": 230440000, 	 "IPO":2013, 		 "Sector":"Health Care", 	 "Industry":"Biotechnology: Biological Products (No Diagnostic Substances)"},
      {"Symbol":"NATH", 	 "Name": "Nathan&#39;s Famous, Inc.", 	 "Price": 77.03, 	 "MarketCap": 346380000, 	 "IPO":1993, 		 "Sector":"Consumer Services", 	 "Industry":"Restaurants"},
      {"Symbol":"NCMI", 	 "Name": "National CineMedia, Inc.", 	 "Price": 14.92, 	 "MarketCap": 908190000, 	 "IPO":2007, 		 "Sector":"Consumer Services", 	 "Industry":"Advertising"},
      {"Symbol":"NATI", 	 "Name": "National Instruments Corporation", 	 "Price": 31.2, 	 "MarketCap": 3980000000, 	 "IPO":1995, 		 "Sector":"Technology", 	 "Industry":"Computer Software: Prepackaged Software"},
      {"Symbol":"NATL", 	 "Name": "National Interstate Corporation", 	 "Price": 26.86, 	 "MarketCap": 531320000, 	 "IPO":2005, 		 "Sector":"Finance", 	 "Industry":"Property-Casualty Insurers"},
      {"Symbol":"BABY", 	 "Name": "Natus Medical Incorporated", 	 "Price": 36.96, 	 "MarketCap": 1200000000, 	 "IPO":2001, 		 "Sector":"Health Care", 	 "Industry":"Biotechnology: Electromedical & Electrotherapeutic Apparatus"},
      {"Symbol":"NCIT", 	 "Name": "NCI, Inc.", 	 "Price": 11.49, 	 "MarketCap": 148900000, 	 "IPO":2005, 		 "Sector":"Technology", 	 "Industry":"EDP Services"},
      {"Symbol":"NEOG", 	 "Name": "Neogen Corporation", 	 "Price": 48.46, 	 "MarketCap": 1790000000, 	 "IPO":1989, 		 "Sector":"Health Care", 	 "Industry":"Biotechnology: In Vitro & In Vivo Diagnostic Substances"},
      {"Symbol":"NEOT", 	 "Name": "Neothetics, Inc.", 	 "Price": 6.69, 	 "MarketCap": 91120000, 	 "IPO":1996, 		 "Sector":"Health Care", 	 "Industry":"Major Pharmaceuticals"},
      {"Symbol":"NRX", 	 "Name": "NephroGenex, Inc.", 	 "Price": 6.67, 	 "MarketCap": 59110000, 	 "IPO":2014, 		 "Sector":"Health Care", 	 "Industry":"Major Pharmaceuticals"},
      {"Symbol":"UEPS", 	 "Name": "Net 1 UEPS Technologies, Inc.", 	 "Price": 12.89, 	 "MarketCap": 599990000, 	 "IPO":2005, 		 "Sector":"Finance", 	 "Industry":"Investment Bankers/Brokers/Service"},
      {"Symbol":"NTAP", 	 "Name": "NetApp, Inc.", 	 "Price": 38.22, 	 "MarketCap": 11910000000, 	 "IPO":1995, 		 "Sector":"Technology", 	 "Industry":"Electronic Components"},
      {"Symbol":"NFLX", 	 "Name": "Netflix, Inc.", 	 "Price": 466.1, 	 "MarketCap": 28200000000, 	 "IPO":2002, 		 "Sector":"Consumer Services", 	 "Industry":"Consumer Electronics/Video Chains"},
      {"Symbol":"NTGR", 	 "Name": "NETGEAR, Inc.", 	 "Price": 31.63, 	 "MarketCap": 1090000000, 	 "IPO":2003, 		 "Sector":"Public Utilities", 	 "Industry":"Telecommunications Equipment"},
      {"Symbol":"NLST", 	 "Name": "Netlist, Inc.", 	 "Price": 1.86, 	 "MarketCap": 77150000, 	 "IPO":2006, 		 "Sector":"Technology", 	 "Industry":"Semiconductors"},
      {"Symbol":"NTCT", 	 "Name": "NetScout Systems, Inc.", 	 "Price": 38.98, 	 "MarketCap": 1610000000, 	 "IPO":1999, 		 "Sector":"Technology", 	 "Industry":"EDP Services"},
      {"Symbol":"NBIX", 	 "Name": "Neurocrine Biosciences, Inc.", 	 "Price": 37.22, 	 "MarketCap": 2870000000, 	 "IPO":1996, 		 "Sector":"Health Care", 	 "Industry":"Biotechnology: Biological Products (No Diagnostic Substances)"},
      {"Symbol":"NDRM", 	 "Name": "NeuroDerm Ltd.", 	 "Price": 10.76, 	 "MarketCap": 182890000, 	 "IPO":2014, 		 "Sector":"Health Care", 	 "Industry":"Major Pharmaceuticals"},
      {"Symbol":"NLNK", 	 "Name": "NewLink Genetics Corporation", 	 "Price": 38.84, 	 "MarketCap": 1090000000, 	 "IPO":2011, 		 "Sector":"Health Care", 	 "Industry":"Major Pharmaceuticals"},
      {"Symbol":"NEWS", 	 "Name": "NewStar Financial, Inc.", 	 "Price": 10.58, 	 "MarketCap": 503640000, 	 "IPO":2006, 		 "Sector":"Finance", 	 "Industry":"Finance: Consumer Services"},
      {"Symbol":"NXST", 	 "Name": "Nexstar Broadcasting Group, Inc.", 	 "Price": 53.62, 	 "MarketCap": 1660000000, 	 "IPO":2003, 		 "Sector":"Consumer Services", 	 "Industry":"Broadcasting"},
      {"Symbol":"EGOV", 	 "Name": "NIC Inc.", 	 "Price": 16.2, 	 "MarketCap": 1060000000, 	 "IPO":1999, 		 "Sector":"Consumer Services", 	 "Industry":"Professional Services"},
      {"Symbol":"NMIH", 	 "Name": "NMI Holdings Inc", 	 "Price": 8.41, 	 "MarketCap": 490840000, 	 "IPO":2013, 		 "Sector":"Finance", 	 "Industry":"Property-Casualty Insurers"},
      {"Symbol":"NNBR", 	 "Name": "NN, Inc.", 	 "Price": 26.3, 	 "MarketCap": 498580000, 	 "IPO":1994, 		 "Sector":"Capital Goods", 	 "Industry":"Metal Fabrications"},
      {"Symbol":"NDLS", 	 "Name": "Noodles & Company", 	 "Price": 25.96, 	 "MarketCap": 773330000, 	 "IPO":2013, 		 "Sector":"Consumer Services", 	 "Industry":"Restaurants"},
      {"Symbol":"NWBI", 	 "Name": "Northwest Bancshares, Inc.", 	 "Price": 11.91, 	 "MarketCap": 1130000000, 	 "IPO":2009, 		 "Sector":"Finance", 	 "Industry":"Major Banks"},
      {"Symbol":"NWBO", 	 "Name": "Northwest Biotherapeutics, Inc.", 	 "Price": 6.07, 	 "MarketCap": 377670000, 	 "IPO":2012, 		 "Sector":"Health Care", 	 "Industry":"Major Pharmaceuticals"},
      {"Symbol":"NWPX", 	 "Name": "Northwest Pipe Company", 	 "Price": 26.32, 	 "MarketCap": 250570000, 	 "IPO":1995, 		 "Sector":"Basic Industries", 	 "Industry":"Steel/Iron Ore"},
      {"Symbol":"NCLH", 	 "Name": "Norwegian Cruise Line Holdings Ltd.", 	 "Price": 43.71, 	 "MarketCap": 8890000000, 	 "IPO":2013, 		 "Sector":"Consumer Services", 	 "Industry":"Marine Transportation"},
      {"Symbol":"NVMI", 	 "Name": "Nova Measuring Instruments Ltd.", 	 "Price": 11.02, 	 "MarketCap": 305570000, 	 "IPO":2000, 		 "Sector":"Capital Goods", 	 "Industry":"Electronic Components"},
      {"Symbol":"TAIT", 	 "Name": "Taitron Components Incorporated", 	 "Price": 1.03, 	 "MarketCap": 5710000, 	 "IPO":1995, 		 "Sector":"Consumer Non-Durables", 	 "Industry":"Electronic Components"},
      {"Symbol":"NPSP", 	 "Name": "NPS Pharmaceuticals, Inc.", 	 "Price": 45.88, 	 "MarketCap": 4900000000, 	 "IPO":1994, 		 "Sector":"Health Care", 	 "Industry":"Biotechnology: Biological Products (No Diagnostic Substances)"},
      {"Symbol":"NTLS", 	 "Name": "NTELOS Holdings Corp.", 	 "Price": 5.19, 	 "MarketCap": 112140000, 	 "IPO":2006, 		 "Sector":"Public Utilities", 	 "Industry":"Telecommunications Equipment"},
      {"Symbol":"NUTR", 	 "Name": "Nutraceutical International Corporation", 	 "Price": 18.04, 	 "MarketCap": 173820000, 	 "IPO":1998, 		 "Sector":"Consumer Durables", 	 "Industry":"Specialty Chemicals"},
      {"Symbol":"NUVA", 	 "Name": "NuVasive, Inc.", 	 "Price": 46.99, 	 "MarketCap": 2210000000, 	 "IPO":2004, 		 "Sector":"Health Care", 	 "Industry":"Medical/Dental Instruments"},
      {"Symbol":"NVEE", 	 "Name": "NV5 Holdings, Inc.", 	 "Price": 12.6, 	 "MarketCap": 72480000, 	 "IPO":2013, 		 "Sector":"Consumer Services", 	 "Industry":"Other Consumer Services"},
      {"Symbol":"NVDA", 	 "Name": "NVIDIA Corporation", 	 "Price": 22.31, 	 "MarketCap": 12130000000, 	 "IPO":1999, 		 "Sector":"Technology", 	 "Industry":"Semiconductors"},
      {"Symbol":"NXPI", 	 "Name": "NXP Semiconductors N.V.", 	 "Price": 84.79, 	 "MarketCap": 19570000000, 	 "IPO":2010, 		 "Sector":"Technology", 	 "Industry":"Semiconductors"},
      {"Symbol":"NXTM", 	 "Name": "NxStage Medical, Inc.", 	 "Price": 17.56, 	 "MarketCap": 1090000000, 	 "IPO":2005, 		 "Sector":"Health Care", 	 "Industry":"Biotechnology: Electromedical & Electrotherapeutic Apparatus"},
      {"Symbol":"OPTT", 	 "Name": "Ocean Power Technologies, Inc.", 	 "Price": 0.495, 	 "MarketCap": 8940000, 	 "IPO":2007, 		 "Sector":"Public Utilities", 	 "Industry":"Electric Utilities: Central"},
      {"Symbol":"OCRX", 	 "Name": "Ocera Therapeutics, Inc.", 	 "Price": 6.27, 	 "MarketCap": 123780000, 	 "IPO":2011, 		 "Sector":"Health Care", 	 "Industry":"Major Pharmaceuticals"},
      {"Symbol":"OFED", 	 "Name": "Oconee Federal Financial Corp.", 	 "Price": 20.41, 	 "MarketCap": 119080000, 	 "IPO":2011, 		 "Sector":"Finance", 	 "Industry":"Savings Institutions"},
      {"Symbol":"OCUL", 	 "Name": "Ocular Therapeutix, Inc.", 	 "Price": 31.25, 	 "MarketCap": 666330000, 	 "IPO":2014, 		 "Sector":"Health Care", 	 "Industry":"Major Pharmaceuticals"},
      {"Symbol":"OCLS", 	 "Name": "Oculus Innovative Sciences, Inc.", 	 "Price": 0.7951, 	 "MarketCap": 11860000, 	 "IPO":2007, 		 "Sector":"Health Care", 	 "Industry":"Medical/Dental Instruments"},
      {"Symbol":"ODFL", 	 "Name": "Old Dominion Freight Line, Inc.", 	 "Price": 76.255, 	 "MarketCap": 6570000000, 	 "IPO":1991, 		 "Sector":"Transportation", 	 "Industry":"Trucking Freight/Courier Services"},
      {"Symbol":"ZEUS", 	 "Name": "Olympic Steel, Inc.", 	 "Price": 16.29, 	 "MarketCap": 178900000, 	 "IPO":1994, 		 "Sector":"Basic Industries", 	 "Industry":"Metal Fabrications"},
      {"Symbol":"OMER", 	 "Name": "Omeros Corporation", 	 "Price": 20.63, 	 "MarketCap": 776230000, 	 "IPO":2009, 		 "Sector":"Health Care", 	 "Industry":"Major Pharmaceuticals"},
      {"Symbol":"OMCL", 	 "Name": "Omnicell, Inc.", 	 "Price": 35.29, 	 "MarketCap": 1260000000, 	 "IPO":2001, 		 "Sector":"Technology", 	 "Industry":"Computer Manufacturing"},
      {"Symbol":"OVTI", 	 "Name": "OmniVision Technologies, Inc.", 	 "Price": 27.3, 	 "MarketCap": 1580000000, 	 "IPO":2000, 		 "Sector":"Technology", 	 "Industry":"Semiconductors"},
      {"Symbol":"ONNN", 	 "Name": "ON Semiconductor Corporation", 	 "Price": 11.945, 	 "MarketCap": 5210000000, 	 "IPO":2000, 		 "Sector":"Technology", 	 "Industry":"Semiconductors"},
      {"Symbol":"OMED", 	 "Name": "OncoMed Pharmaceuticals, Inc.", 	 "Price": 26.06, 	 "MarketCap": 777430000, 	 "IPO":2013, 		 "Sector":"Health Care", 	 "Industry":"Major Pharmaceuticals"},
      {"Symbol":"ONTX", 	 "Name": "Onconova Therapeutics, Inc.", 	 "Price": 2.27, 	 "MarketCap": 49240000, 	 "IPO":2013, 		 "Sector":"Health Care", 	 "Industry":"Major Pharmaceuticals"},
      {"Symbol":"ONVI", 	 "Name": "Onvia, Inc.", 	 "Price": 4.5505, 	 "MarketCap": 33660000, 	 "IPO":2000, 		 "Sector":"Miscellaneous", 	 "Industry":"Business Services"},
      {"Symbol":"OTEX", 	 "Name": "Open Text Corporation", 	 "Price": 61.19, 	 "MarketCap": 7480000000, 	 "IPO":1996, 		 "Sector":"Technology", 	 "Industry":"EDP Services"},
      {"Symbol":"OPHT", 	 "Name": "Ophthotech Corporation", 	 "Price": 51.11, 	 "MarketCap": 1720000000, 	 "IPO":2013, 		 "Sector":"Health Care", 	 "Industry":"Major Pharmaceuticals"},
      {"Symbol":"OBAS", 	 "Name": "Optibase Ltd.", 	 "Price": 6.25, 	 "MarketCap": 32400000, 	 "IPO":1999, 		 "Sector":"Finance", 	 "Industry":"Real Estate"},
      {"Symbol":"ORBC", 	 "Name": "ORBCOMM Inc.", 	 "Price": 5.83, 	 "MarketCap": 397160000, 	 "IPO":2006, 		 "Sector":"Consumer Services", 	 "Industry":"Telecommunications Equipment"},
      {"Symbol":"ORLY", 	 "Name": "O&#39;Reilly Automotive, Inc.", 	 "Price": 205.55, 	 "MarketCap": 20850000000, 	 "IPO":1993, 		 "Sector":"Consumer Services", 	 "Industry":"Other Specialty Stores"},
      {"Symbol":"OREX", 	 "Name": "Orexigen Therapeutics, Inc.", 	 "Price": 5.55, 	 "MarketCap": 683570000, 	 "IPO":2007, 		 "Sector":"Health Care", 	 "Industry":"Major Pharmaceuticals"},
      {"Symbol":"OFIX", 	 "Name": "Orthofix International N.V.", 	 "Price": 32.09, 	 "MarketCap": 591630000, 	 "IPO":1992, 		 "Sector":"Health Care", 	 "Industry":"Medical/Dental Instruments"},
      {"Symbol":"OSIS", 	 "Name": "OSI Systems, Inc.", 	 "Price": 71.63, 	 "MarketCap": 1420000000, 	 "IPO":1997, 		 "Sector":"Technology", 	 "Industry":"Semiconductors"},
      {"Symbol":"OSIR", 	 "Name": "Osiris Therapeutics, Inc.", 	 "Price": 15.95, 	 "MarketCap": 547400000, 	 "IPO":2006, 		 "Sector":"Health Care", 	 "Industry":"Biotechnology: Biological Products (No Diagnostic Substances)"},
      {"Symbol":"OSN", 	 "Name": "Ossen Innovation Co., Ltd.", 	 "Price": 0.7001, 	 "MarketCap": 13930000, 	 "IPO":2010, 		 "Sector":"Basic Industries", 	 "Industry":"Steel/Iron Ore"},
      {"Symbol":"OTIC", 	 "Name": "Otonomy, Inc.", 	 "Price": 31.14, 	 "MarketCap": 750650000, 	 "IPO":2014, 		 "Sector":"Health Care", 	 "Industry":"Major Pharmaceuticals"},
      {"Symbol":"OSTK", 	 "Name": "Overstock.com, Inc.", 	 "Price": 22.45, 	 "MarketCap": 539640000, 	 "IPO":2002, 		 "Sector":"Consumer Services", 	 "Industry":"Catalog/Specialty Distribution"},
      {"Symbol":"OXBR", 	 "Name": "Oxbridge Re Holdings Limited", 	 "Price": 6.29, 	 "MarketCap": 37740000, 	 "IPO":2014, 		 "Sector":"Finance", 	 "Industry":"Property-Casualty Insurers"},
      {"Symbol":"OXFD", 	 "Name": "Oxford Immunotec Global PLC", 	 "Price": 12.63, 	 "MarketCap": 222430000, 	 "IPO":2013, 		 "Sector":"Health Care", 	 "Industry":"Biotechnology: In Vitro & In Vivo Diagnostic Substances"},
      {"Symbol":"PTSI", 	 "Name": "P.A.M. Transportation Services, Inc.", 	 "Price": 56.07, 	 "MarketCap": 448150000, 	 "IPO":1986, 		 "Sector":"Transportation", 	 "Industry":"Trucking Freight/Courier Services"},
      {"Symbol":"PACB", 	 "Name": "Pacific Biosciences of California, Inc.", 	 "Price": 6.96, 	 "MarketCap": 514530000, 	 "IPO":2010, 		 "Sector":"Capital Goods", 	 "Industry":"Biotechnology: Laboratory Analytical Instruments"},
      {"Symbol":"PMBC", 	 "Name": "Pacific Mercantile Bancorp", 	 "Price": 7.2, 	 "MarketCap": 139930000, 	 "IPO":2000, 		 "Sector":"Finance", 	 "Industry":"Major Banks"},
      {"Symbol":"PSUN", 	 "Name": "Pacific Sunwear of California, Inc.", 	 "Price": 2.95, 	 "MarketCap": 204330000, 	 "IPO":1999, 		 "Sector":"Consumer Services", 	 "Industry":"Clothing/Shoe/Accessory Stores"},
      {"Symbol":"PCRX", 	 "Name": "Pacira Pharmaceuticals, Inc.", 	 "Price": 113.94, 	 "MarketCap": 4110000000, 	 "IPO":2011, 		 "Sector":"Health Care", 	 "Industry":"Major Pharmaceuticals"},
      {"Symbol":"PTIE", 	 "Name": "Pain Therapeutics", 	 "Price": 2.05, 	 "MarketCap": 93800000, 	 "IPO":2000, 		 "Sector":"Health Care", 	 "Industry":"Major Pharmaceuticals"},
      {"Symbol":"PANL", 	 "Name": "Pangaea Logistics Solutions Ltd.", 	 "Price": 2.63, 	 "MarketCap": 26, 	 "IPO":2013, 		 "Sector":"Consumer Services", 	 "Industry":"Marine Transportation"},
      {"Symbol":"PZZA", 	 "Name": "Papa John&#39;S International, Inc.", 	 "Price": 62.11, 	 "MarketCap": 2490000000, 	 "IPO":1993, 		 "Sector":"Consumer Services", 	 "Industry":"Restaurants"},
      {"Symbol":"FRSH", 	 "Name": "Papa Murphy&#39;s Holdings, Inc.", 	 "Price": 13.25, 	 "MarketCap": 224470000, 	 "IPO":2014, 		 "Sector":"Consumer Services", 	 "Industry":"Restaurants"},
      {"Symbol":"PRGN", 	 "Name": "Paragon Shipping Inc.", 	 "Price": 1.775, 	 "MarketCap": 43650000, 	 "IPO":2013, 		 "Sector":"Transportation", 	 "Industry":"Marine Transportation"},
      {"Symbol":"PRXL", 	 "Name": "PAREXEL International Corporation", 	 "Price": 62.91, 	 "MarketCap": 3450000000, 	 "IPO":1995, 		 "Sector":"Health Care", 	 "Industry":"Biotechnology: Commercial Physical & Biological Resarch"},
      {"Symbol":"PSTB", 	 "Name": "Park Sterling Corporation", 	 "Price": 6.94, 	 "MarketCap": 311250000, 	 "IPO":2010, 		 "Sector":"Finance", 	 "Industry":"Major Banks"},
      {"Symbol":"PRKR", 	 "Name": "ParkerVision, Inc.", 	 "Price": 1.07, 	 "MarketCap": 103940000, 	 "IPO":1993, 		 "Sector":"Technology", 	 "Industry":"Radio And Television Broadcasting And Communications Equipment"},
      {"Symbol":"PDCO", 	 "Name": "Patterson Companies, Inc.", 	 "Price": 50.65, 	 "MarketCap": 5220000000, 	 "IPO":1992, 		 "Sector":"Health Care", 	 "Industry":"Medical Specialities"},
      {"Symbol":"PTEN", 	 "Name": "Patterson-UTI Energy, Inc.", 	 "Price": 18.14, 	 "MarketCap": 2660000000, 	 "IPO":1993, 		 "Sector":"Energy", 	 "Industry":"Oil & Gas Production"},
      {"Symbol":"PAYX", 	 "Name": "Paychex, Inc.", 	 "Price": 48.76, 	 "MarketCap": 17710000000, 	 "IPO":1983, 		 "Sector":"Consumer Services", 	 "Industry":"Diversified Commercial Services"},
      {"Symbol":"PCTY", 	 "Name": "Paylocity Holding Corporation", 	 "Price": 28.59, 	 "MarketCap": 1440000000, 	 "IPO":2014, 		 "Sector":"Technology", 	 "Industry":"Computer Software: Prepackaged Software"},
      {"Symbol":"PCCC", 	 "Name": "PC Connection, Inc.", 	 "Price": 23.66, 	 "MarketCap": 622330000, 	 "IPO":1998, 		 "Sector":"Consumer Services", 	 "Industry":"Catalog/Specialty Distribution"},
      {"Symbol":"PCTI", 	 "Name": "PC-Tel, Inc.", 	 "Price": 8.23, 	 "MarketCap": 152480000, 	 "IPO":1999, 		 "Sector":"Technology", 	 "Industry":"Radio And Television Broadcasting And Communications Equipment"},
      {"Symbol":"PDFS", 	 "Name": "PDF Solutions, Inc.", 	 "Price": 18.31, 	 "MarketCap": 567150000, 	 "IPO":2001, 		 "Sector":"Technology", 	 "Industry":"EDP Services"},
      {"Symbol":"PDII", 	 "Name": "PDI, Inc.", 	 "Price": 1.84, 	 "MarketCap": 28270000, 	 "IPO":1998, 		 "Sector":"Miscellaneous", 	 "Industry":"Business Services"},
      {"Symbol":"PDLI", 	 "Name": "PDL BioPharma, Inc.", 	 "Price": 7.28, 	 "MarketCap": 1170000000, 	 "IPO":1992, 		 "Sector":"Health Care", 	 "Industry":"Biotechnology: Biological Products (No Diagnostic Substances)"},
      {"Symbol":"SKIS", 	 "Name": "Peak Resorts, Inc.", 	 "Price": 7.39, 	 "MarketCap": 103330000, 	 "IPO":2014, 		 "Sector":"Consumer Services", 	 "Industry":"Hotels/Resorts"},
      {"Symbol":"PEGA", 	 "Name": "Pegasystems Inc.", 	 "Price": 20.88, 	 "MarketCap": 1590000000, 	 "IPO":1996, 		 "Sector":"Technology", 	 "Industry":"EDP Services"},
      {"Symbol":"PENN", 	 "Name": "Penn National Gaming, Inc.", 	 "Price": 16.62, 	 "MarketCap": 1310000000, 	 "IPO":1994, 		 "Sector":"Consumer Services", 	 "Industry":"Hotels/Resorts"},
      {"Symbol":"PEOP", 	 "Name": "Peoples Federal Bancshares, Inc.", 	 "Price": 21.62, 	 "MarketCap": 134900000, 	 "IPO":2010, 		 "Sector":"Finance", 	 "Industry":"Banks"},
      {"Symbol":"PRCP", 	 "Name": "Perceptron, Inc.", 	 "Price": 10.94, 	 "MarketCap": 101300000, 	 "IPO":1992, 		 "Sector":"Capital Goods", 	 "Industry":"Electronic Components"},
      {"Symbol":"PWRD", 	 "Name": "Perfect World Co., Ltd.", 	 "Price": 18.95, 	 "MarketCap": 942240000, 	 "IPO":2007, 		 "Sector":"Miscellaneous", 	 "Industry":"Business Services"},
      {"Symbol":"PRFT", 	 "Name": "Perficient, Inc.", 	 "Price": 19.53, 	 "MarketCap": 672310000, 	 "IPO":1999, 		 "Sector":"Technology", 	 "Industry":"EDP Services"},
      {"Symbol":"PFMT", 	 "Name": "Performant Financial Corporation", 	 "Price": 6.02, 	 "MarketCap": 297090000, 	 "IPO":2012, 		 "Sector":"Consumer Services", 	 "Industry":"Other Consumer Services"},
      {"Symbol":"PSEM", 	 "Name": "Pericom Semiconductor Corporation", 	 "Price": 14.82, 	 "MarketCap": 331330000, 	 "IPO":1997, 		 "Sector":"Technology", 	 "Industry":"Semiconductors"},
      {"Symbol":"PERY", 	 "Name": "Perry Ellis International Inc.", 	 "Price": 24.38, 	 "MarketCap": 377940000, 	 "IPO":1993, 		 "Sector":"Consumer Non-Durables", 	 "Industry":"Apparel"},
      {"Symbol":"PETM", 	 "Name": "PetSmart, Inc", 	 "Price": 82.7, 	 "MarketCap": 8220000000, 	 "IPO":1993, 		 "Sector":"Consumer Services", 	 "Industry":"Other Specialty Stores"},
      {"Symbol":"PFSW", 	 "Name": "PFSweb, Inc.", 	 "Price": 10.23, 	 "MarketCap": 175480000, 	 "IPO":1999, 		 "Sector":"Miscellaneous", 	 "Industry":"Business Services"},
      {"Symbol":"PGTI", 	 "Name": "PGT, Inc.", 	 "Price": 8.56, 	 "MarketCap": 407630000, 	 "IPO":2006, 		 "Sector":"Capital Goods", 	 "Industry":"Building Products"},
      {"Symbol":"PCYC", 	 "Name": "Pharmacyclics, Inc.", 	 "Price": 163.28, 	 "MarketCap": 12330000000, 	 "IPO":1995, 		 "Sector":"Health Care", 	 "Industry":"Major Pharmaceuticals"},
      {"Symbol":"PAHC", 	 "Name": "Phibro Animal Health Corporation", 	 "Price": 30.85, 	 "MarketCap": 1200000000, 	 "IPO":2014, 		 "Sector":"Health Care", 	 "Industry":"Major Pharmaceuticals"},
      {"Symbol":"PLAB", 	 "Name": "Photronics, Inc.", 	 "Price": 8.66, 	 "MarketCap": 574580000, 	 "IPO":1987, 		 "Sector":"Technology", 	 "Industry":"Semiconductors"},
      {"Symbol":"PXLW", 	 "Name": "Pixelworks, Inc.", 	 "Price": 5.24, 	 "MarketCap": 121280000, 	 "IPO":2000, 		 "Sector":"Technology", 	 "Industry":"Semiconductors"},
      {"Symbol":"PLNR", 	 "Name": "Planar Systems, Inc.", 	 "Price": 6.63, 	 "MarketCap": 148570000, 	 "IPO":1993, 		 "Sector":"Capital Goods", 	 "Industry":"Industrial Machinery/Components"},
      {"Symbol":"PLUG", 	 "Name": "Plug Power, Inc.", 	 "Price": 3.15, 	 "MarketCap": 545350000, 	 "IPO":1999, 		 "Sector":"Energy", 	 "Industry":"Industrial Machinery/Components"},
      {"Symbol":"PBSK", 	 "Name": "Poage Bankshares, Inc.", 	 "Price": 14.95, 	 "MarketCap": 58030000, 	 "IPO":2011, 		 "Sector":"Finance", 	 "Industry":"Savings Institutions"},
      {"Symbol":"PLCM", 	 "Name": "Polycom, Inc.", 	 "Price": 13.94, 	 "MarketCap": 1900000000, 	 "IPO":1996, 		 "Sector":"Public Utilities", 	 "Industry":"Telecommunications Equipment"},
      {"Symbol":"POOL", 	 "Name": "Pool Corporation", 	 "Price": 70.09, 	 "MarketCap": 3040000000, 	 "IPO":1995, 		 "Sector":"Consumer Durables", 	 "Industry":"Industrial Specialties"},
      {"Symbol":"PBIB", 	 "Name": "Porter Bancorp, Inc.", 	 "Price": 0.87, 	 "MarketCap": 12950000, 	 "IPO":2006, 		 "Sector":"Finance", 	 "Industry":"Major Banks"},
      {"Symbol":"PTLA", 	 "Name": "Portola Pharmaceuticals, Inc.", 	 "Price": 34.96, 	 "MarketCap": 1700000000, 	 "IPO":2013, 		 "Sector":"Health Care", 	 "Industry":"Major Pharmaceuticals"},
      {"Symbol":"PBPB", 	 "Name": "Potbelly Corporation", 	 "Price": 13.92, 	 "MarketCap": 403190000, 	 "IPO":2013, 		 "Sector":"Consumer Services", 	 "Industry":"Restaurants"},
      {"Symbol":"POWI", 	 "Name": "Power Integrations, Inc.", 	 "Price": 54.73, 	 "MarketCap": 1610000000, 	 "IPO":1997, 		 "Sector":"Technology", 	 "Industry":"Semiconductors"},
      {"Symbol":"POZN", 	 "Name": "Pozen, Inc.", 	 "Price": 6.95, 	 "MarketCap": 222940000, 	 "IPO":2000, 		 "Sector":"Health Care", 	 "Industry":"Major Pharmaceuticals"},
      {"Symbol":"PRAA", 	 "Name": "PRA Group, Inc.", 	 "Price": 52.74, 	 "MarketCap": 2640000000, 	 "IPO":2002, 		 "Sector":"Finance", 	 "Industry":"Finance: Consumer Services"},
      {"Symbol":"PRAH", 	 "Name": "PRA Health Sciences, Inc.", 	 "Price": 27.19, 	 "MarketCap": 1560000000, 	 "IPO":2014, 		 "Sector":"Health Care", 	 "Industry":"Biotechnology: Commercial Physical & Biological Resarch"},
      {"Symbol":"PFBI", 	 "Name": "Premier Financial Bancorp, Inc.", 	 "Price": 15.19, 	 "MarketCap": 123270000, 	 "IPO":1996, 		 "Sector":"Finance", 	 "Industry":"Major Banks"},
      {"Symbol":"PINC", 	 "Name": "Premier, Inc.", 	 "Price": 36.37, 	 "MarketCap": 1360000000, 	 "IPO":2013, 		 "Sector":"Consumer Services", 	 "Industry":"Other Consumer Services"},
      {"Symbol":"PRGX", 	 "Name": "PRGX Global, Inc.", 	 "Price": 5.43, 	 "MarketCap": 147970000, 	 "IPO":1996, 		 "Sector":"Consumer Services", 	 "Industry":"Diversified Commercial Services"},
      {"Symbol":"PRMW", 	 "Name": "Primo Water Corporation", 	 "Price": 4.17, 	 "MarketCap": 102290000, 	 "IPO":2010, 		 "Sector":"Consumer Non-Durables", 	 "Industry":"Food Distributors"},
      {"Symbol":"PVTB", 	 "Name": "PrivateBancorp, Inc.", 	 "Price": 34.98, 	 "MarketCap": 2730000000, 	 "IPO":1999, 		 "Sector":"Finance", 	 "Industry":"Major Banks"},
      {"Symbol":"IPDN", 	 "Name": "Professional Diversity Network, Inc.", 	 "Price": 4.56, 	 "MarketCap": 57550000, 	 "IPO":2013, 		 "Sector":"Technology", 	 "Industry":"Computer Software: Programming, Data Processing"},
      {"Symbol":"PGNX", 	 "Name": "Progenics Pharmaceuticals Inc.", 	 "Price": 5.66, 	 "MarketCap": 393680000, 	 "IPO":1997, 		 "Sector":"Health Care", 	 "Industry":"Major Pharmaceuticals"},
      {"Symbol":"PRGS", 	 "Name": "Progress Software Corporation", 	 "Price": 26.67, 	 "MarketCap": 1350000000, 	 "IPO":1991, 		 "Sector":"Technology", 	 "Industry":"Computer Software: Prepackaged Software"},
      {"Symbol":"PFPT", 	 "Name": "Proofpoint, Inc.", 	 "Price": 55.97, 	 "MarketCap": 2130000000, 	 "IPO":2012, 		 "Sector":"Technology", 	 "Industry":"EDP Services"},
      {"Symbol":"PRQR", 	 "Name": "ProQR Therapeutics N.V.", 	 "Price": 18.32, 	 "MarketCap": 427550000, 	 "IPO":2014, 		 "Sector":"Health Care", 	 "Industry":"Major Pharmaceuticals"},
      {"Symbol":"PRTO", 	 "Name": "Proteon Therapeutics, Inc.", 	 "Price": 10.45, 	 "MarketCap": 171890000, 	 "IPO":2014, 		 "Sector":"Health Care", 	 "Industry":"Biotechnology: Biological Products (No Diagnostic Substances)"},
      {"Symbol":"PTCT", 	 "Name": "PTC Therapeutics, Inc.", 	 "Price": 53.37, 	 "MarketCap": 1790000000, 	 "IPO":2013, 		 "Sector":"Health Care", 	 "Industry":"Major Pharmaceuticals"},
      {"Symbol":"QCCO", 	 "Name": "QC Holdings, Inc.", 	 "Price": 1.67, 	 "MarketCap": 29240000, 	 "IPO":2004, 		 "Sector":"Finance", 	 "Industry":"Investment Bankers/Brokers/Service"},
      {"Symbol":"QIWI", 	 "Name": "QIWI plc", 	 "Price": 25.16, 	 "MarketCap": 1310000000, 	 "IPO":2013, 		 "Sector":"Miscellaneous", 	 "Industry":"Business Services"},
      {"Symbol":"QLIK", 	 "Name": "Qlik Technologies Inc.", 	 "Price": 31.17, 	 "MarketCap": 2820000000, 	 "IPO":2010, 		 "Sector":"Technology", 	 "Industry":"Computer Software: Prepackaged Software"},
      {"Symbol":"QCOM", 	 "Name": "QUALCOMM Incorporated", 	 "Price": 70.88, 	 "MarketCap": 1.1692E+11, 	 "IPO":1991, 		 "Sector":"Technology", 	 "Industry":"Radio And Television Broadcasting And Communications Equipment"},
      {"Symbol":"QLTY", 	 "Name": "Quality Distribution, Inc.", 	 "Price": 10.52, 	 "MarketCap": 295180000, 	 "IPO":2003, 		 "Sector":"Transportation", 	 "Industry":"Trucking Freight/Courier Services"},
      {"Symbol":"QSII", 	 "Name": "Quality Systems, Inc.", 	 "Price": 17.04, 	 "MarketCap": 1030000000, 	 "IPO":1982, 		 "Sector":"Technology", 	 "Industry":"EDP Services"},
      {"Symbol":"QBAK", 	 "Name": "Qualstar Corporation", 	 "Price": 1.4, 	 "MarketCap": 17150000, 	 "IPO":2000, 		 "Sector":"Technology", 	 "Industry":"Electronic Components"},
      {"Symbol":"QLYS", 	 "Name": "Qualys, Inc.", 	 "Price": 47.95, 	 "MarketCap": 1600000000, 	 "IPO":2012, 		 "Sector":"Technology", 	 "Industry":"Computer Software: Prepackaged Software"},
      {"Symbol":"QUIK", 	 "Name": "QuickLogic Corporation", 	 "Price": 2.17, 	 "MarketCap": 121210000, 	 "IPO":1999, 		 "Sector":"Technology", 	 "Industry":"Semiconductors"},
      {"Symbol":"QNST", 	 "Name": "QuinStreet, Inc.", 	 "Price": 6.15, 	 "MarketCap": 273630000, 	 "IPO":2010, 		 "Sector":"Miscellaneous", 	 "Industry":"Business Services"},
      {"Symbol":"QUNR", 	 "Name": "Qunar Cayman Islands Limited", 	 "Price": 28.42, 	 "MarketCap": 3380000000, 	 "IPO":2013, 		 "Sector":"Miscellaneous", 	 "Industry":"Business Services"},
      {"Symbol":"QTNT", 	 "Name": "Quotient Limited", 	 "Price": 16.97, 	 "MarketCap": 243970000, 	 "IPO":2014, 		 "Sector":"Health Care", 	 "Industry":"Biotechnology: In Vitro & In Vivo Diagnostic Substances"},
      {"Symbol":"RDCM", 	 "Name": "Radcom Ltd.", 	 "Price": 9.85, 	 "MarketCap": 79520000, 	 "IPO":1997, 		 "Sector":"Technology", 	 "Industry":"Computer peripheral equipment"},
      {"Symbol":"ROIA", 	 "Name": "Radio One, Inc.", 	 "Price": 2.77, 	 "MarketCap": 138900000, 	 "IPO":1999, 		 "Sector":"Consumer Services", 	 "Industry":"Broadcasting"},
      {"Symbol":"RSYS", 	 "Name": "RadiSys Corporation", 	 "Price": 2.15, 	 "MarketCap": 78430000, 	 "IPO":1995, 		 "Sector":"Technology", 	 "Industry":"Computer peripheral equipment"},
      {"Symbol":"RDUS", 	 "Name": "Radius Health, Inc.", 	 "Price": 50.37, 	 "MarketCap": 1890000000, 	 "IPO":2014, 		 "Sector":"Health Care", 	 "Industry":"Major Pharmaceuticals"},
      {"Symbol":"RDWR", 	 "Name": "Radware Ltd.", 	 "Price": 20.85, 	 "MarketCap": 938860000, 	 "IPO":1999, 		 "Sector":"Miscellaneous", 	 "Industry":"Business Services"},
      {"Symbol":"RMBS", 	 "Name": "Rambus, Inc.", 	 "Price": 12.12, 	 "MarketCap": 1390000000, 	 "IPO":1997, 		 "Sector":"Technology", 	 "Industry":"Semiconductors"},
      {"Symbol":"ROLL", 	 "Name": "RBC Bearings Incorporated", 	 "Price": 61.78, 	 "MarketCap": 1440000000, 	 "IPO":2005, 		 "Sector":"Capital Goods", 	 "Industry":"Metal Fabrications"},
      {"Symbol":"RICK", 	 "Name": "RCI Hospitality Holdings, Inc.", 	 "Price": 10.5, 	 "MarketCap": 108100000, 	 "IPO":1995, 		 "Sector":"Consumer Services", 	 "Industry":"Restaurants"},
      {"Symbol":"RLOC", 	 "Name": "ReachLocal, Inc.", 	 "Price": 3.58, 	 "MarketCap": 104410000, 	 "IPO":2010, 		 "Sector":"Technology", 	 "Industry":"Advertising"},
      {"Symbol":"RNWK", 	 "Name": "RealNetworks, Inc.", 	 "Price": 7.04, 	 "MarketCap": 253680000, 	 "IPO":1997, 		 "Sector":"Technology", 	 "Industry":"EDP Services"},
      {"Symbol":"RP", 	 "Name": "RealPage, Inc.", 	 "Price": 19.3, 	 "MarketCap": 1520000000, 	 "IPO":2010, 		 "Sector":"Technology", 	 "Industry":"Computer Software: Prepackaged Software"},
      {"Symbol":"RCPT", 	 "Name": "Receptos, Inc.", 	 "Price": 115.83, 	 "MarketCap": 3650000000, 	 "IPO":2013, 		 "Sector":"Health Care", 	 "Industry":"Major Pharmaceuticals"},
      {"Symbol":"RCON", 	 "Name": "Recon Technology, Ltd.", 	 "Price": 2.11, 	 "MarketCap": 9970000, 	 "IPO":2009, 		 "Sector":"Energy", 	 "Industry":"Oilfield Services/Equipment"},
      {"Symbol":"REPH", 	 "Name": "Recro Pharma, Inc.", 	 "Price": 3.13, 	 "MarketCap": 24120000, 	 "IPO":2014, 		 "Sector":"Health Care", 	 "Industry":"Major Pharmaceuticals"},
      {"Symbol":"RRGB", 	 "Name": "Red Robin Gourmet Burgers, Inc.", 	 "Price": 77.77, 	 "MarketCap": 1090000000, 	 "IPO":2002, 		 "Sector":"Consumer Services", 	 "Industry":"Restaurants"},
      {"Symbol":"RGDO", 	 "Name": "Regado BioSciences, Inc.", 	 "Price": 1.17, 	 "MarketCap": 39320000, 	 "IPO":2013, 		 "Sector":"Health Care", 	 "Industry":"Major Pharmaceuticals"},
      {"Symbol":"REGN", 	 "Name": "Regeneron Pharmaceuticals, Inc.", 	 "Price": 402.4, 	 "MarketCap": 40910000000, 	 "IPO":1991, 		 "Sector":"Health Care", 	 "Industry":"Major Pharmaceuticals"},
      {"Symbol":"RGLS", 	 "Name": "Regulus Therapeutics Inc.", 	 "Price": 16.85, 	 "MarketCap": 818970000, 	 "IPO":2012, 		 "Sector":"Health Care", 	 "Industry":"Major Pharmaceuticals"},
      {"Symbol":"RLYP", 	 "Name": "Relypsa, Inc.", 	 "Price": 33.98, 	 "MarketCap": 1160000000, 	 "IPO":2013, 		 "Sector":"Health Care", 	 "Industry":"Major Pharmaceuticals"},
      {"Symbol":"REGI", 	 "Name": "Renewable Energy Group, Inc.", 	 "Price": 8.54, 	 "MarketCap": 361300000, 	 "IPO":2012, 		 "Sector":"Basic Industries", 	 "Industry":"Major Chemicals"},
      {"Symbol":"RCII", 	 "Name": "Rent-A-Center Inc.", 	 "Price": 30.49, 	 "MarketCap": 1610000000, 	 "IPO":1995, 		 "Sector":"Technology", 	 "Industry":"Diversified Commercial Services"},
      {"Symbol":"RTK", 	 "Name": "Rentech, Inc.", 	 "Price": 1.26, 	 "MarketCap": 287890000, 	 "IPO":1991, 		 "Sector":"Basic Industries", 	 "Industry":"Agricultural Chemicals"},
      {"Symbol":"RGEN", 	 "Name": "Repligen Corporation", 	 "Price": 24.77, 	 "MarketCap": 810520000, 	 "IPO":1986, 		 "Sector":"Health Care", 	 "Industry":"Biotechnology: Biological Products (No Diagnostic Substances)"},
      {"Symbol":"RJET", 	 "Name": "Republic Airways Holdings, Inc.", 	 "Price": 13.97, 	 "MarketCap": 695520000, 	 "IPO":2004, 		 "Sector":"Transportation", 	 "Industry":"Air Freight/Delivery Services"},
      {"Symbol":"RBCAA", 	 "Name": "Republic Bancorp, Inc.", 	 "Price": 24.05, 	 "MarketCap": 500620000, 	 "IPO":1998, 		 "Sector":"Finance", 	 "Industry":"Major Banks"},
      {"Symbol":"RESN", 	 "Name": "Resonant Inc.", 	 "Price": 16.62, 	 "MarketCap": 114810000, 	 "IPO":2014, 		 "Sector":"Technology", 	 "Industry":"Semiconductors"},
      {"Symbol":"RECN", 	 "Name": "Resources Connection, Inc.", 	 "Price": 17.46, 	 "MarketCap": 657290000, 	 "IPO":2000, 		 "Sector":"Miscellaneous", 	 "Industry":"Business Services"},
      {"Symbol":"RGDX", 	 "Name": "Response Genetics, Inc.", 	 "Price": 0.524, 	 "MarketCap": 20320000, 	 "IPO":2007, 		 "Sector":"Health Care", 	 "Industry":"Biotechnology: In Vitro & In Vivo Diagnostic Substances"},
      {"Symbol":"SALE", 	 "Name": "RetailMeNot, Inc.", 	 "Price": 16.41, 	 "MarketCap": 887230000, 	 "IPO":2013, 		 "Sector":"Consumer Services", 	 "Industry":"Advertising"},
      {"Symbol":"RVNC", 	 "Name": "Revance Therapeutics, Inc.", 	 "Price": 16.84, 	 "MarketCap": 399440000, 	 "IPO":2014, 		 "Sector":"Health Care", 	 "Industry":"Major Pharmaceuticals"},
      {"Symbol":"RWLK", 	 "Name": "ReWalk Robotics Ltd", 	 "Price": 17.4, 	 "MarketCap": 208430000, 	 "IPO":2014, 		 "Sector":"Health Care", 	 "Industry":"Industrial Specialties"},
      {"Symbol":"REXX", 	 "Name": "Rex Energy Corporation", 	 "Price": 5.08, 	 "MarketCap": 274860000, 	 "IPO":2007, 		 "Sector":"Energy", 	 "Industry":"Oil & Gas Production"},
      {"Symbol":"RELL", 	 "Name": "Richardson Electronics, Ltd.", 	 "Price": 9.21, 	 "MarketCap": 127030000, 	 "IPO":1983, 		 "Sector":"Consumer Non-Durables", 	 "Industry":"Electronic Components"},
      {"Symbol":"RIGL", 	 "Name": "Rigel Pharmaceuticals, Inc.", 	 "Price": 2.47, 	 "MarketCap": 216850000, 	 "IPO":2000, 		 "Sector":"Health Care", 	 "Industry":"Major Pharmaceuticals"},
      {"Symbol":"RNET", 	 "Name": "RigNet, Inc.", 	 "Price": 36.4, 	 "MarketCap": 641170000, 	 "IPO":2010, 		 "Sector":"Consumer Services", 	 "Industry":"Telecommunications Equipment"},
      {"Symbol":"RITT", 	 "Name": "RIT Technologies Ltd.", 	 "Price": 1.29, 	 "MarketCap": 20050000, 	 "IPO":1997, 		 "Sector":"Consumer Durables", 	 "Industry":"Telecommunications Equipment"},
      {"Symbol":"RVBD", 	 "Name": "Riverbed Technology, Inc.", 	 "Price": 20.85, 	 "MarketCap": 3230000000, 	 "IPO":2006, 		 "Sector":"Technology", 	 "Industry":"Computer Communications Equipment"},
      {"Symbol":"FUEL", 	 "Name": "Rocket Fuel Inc.", 	 "Price": 14.3, 	 "MarketCap": 590520000, 	 "IPO":2013, 		 "Sector":"Technology", 	 "Industry":"Computer Software: Programming, Data Processing"},
      {"Symbol":"RMTI", 	 "Name": "Rockwell Medical, Inc.", 	 "Price": 11.17, 	 "MarketCap": 559660000, 	 "IPO":1998, 		 "Sector":"Health Care", 	 "Industry":"Biotechnology: Electromedical & Electrotherapeutic Apparatus"},
      {"Symbol":"RCKY", 	 "Name": "Rocky Brands, Inc.", 	 "Price": 18.43, 	 "MarketCap": 139150000, 	 "IPO":1993, 		 "Sector":"Consumer Non-Durables", 	 "Industry":"Shoe Manufacturing"},
      {"Symbol":"RSTI", 	 "Name": "Rofin-Sinar Technologies, Inc.", 	 "Price": 24.12, 	 "MarketCap": 677590000, 	 "IPO":1996, 		 "Sector":"Miscellaneous", 	 "Industry":"Industrial Machinery/Components"},
      {"Symbol":"ROIQ", 	 "Name": "ROI Acquisition Corp. II", 	 "Price": 9.74, 	 "MarketCap": 152190000, 	 "IPO":2013, 		 "Sector":"Finance", 	 "Industry":"Business Services"},
      {"Symbol":"ROKA", 	 "Name": "Roka Bioscience, Inc.", 	 "Price": 4.04, 	 "MarketCap": 71350000, 	 "IPO":2014, 		 "Sector":"Capital Goods", 	 "Industry":"Biotechnology: Laboratory Analytical Instruments"},
      {"Symbol":"ROSG", 	 "Name": "Rosetta Genomics Ltd.", 	 "Price": 3.65, 	 "MarketCap": 42760000, 	 "IPO":2007, 		 "Sector":"Health Care", 	 "Industry":"Major Pharmaceuticals"},
      {"Symbol":"ROST", 	 "Name": "Ross Stores, Inc.", 	 "Price": 96.18, 	 "MarketCap": 20050000000, 	 "IPO":1985, 		 "Sector":"Consumer Services", 	 "Industry":"Clothing/Shoe/Accessory Stores"},
      {"Symbol":"RPXC", 	 "Name": "RPX Corporation", 	 "Price": 13.94, 	 "MarketCap": 751910000, 	 "IPO":2011, 		 "Sector":"Miscellaneous", 	 "Industry":"Multi-Sector Companies"},
      {"Symbol":"RRST", 	 "Name": "RRSat Global Communications Network Ltd.", 	 "Price": 7.233, 	 "MarketCap": 125830000, 	 "IPO":2006, 		 "Sector":"Consumer Services", 	 "Industry":"Telecommunications Equipment"},
      {"Symbol":"RTIX", 	 "Name": "RTI Surgical, Inc.", 	 "Price": 5.54, 	 "MarketCap": 315210000, 	 "IPO":2000, 		 "Sector":"Health Care", 	 "Industry":"Industrial Specialties"},
      {"Symbol":"RBCN", 	 "Name": "Rubicon Technology, Inc.", 	 "Price": 4.53, 	 "MarketCap": 118470000, 	 "IPO":2007, 		 "Sector":"Technology", 	 "Industry":"Semiconductors"},
      {"Symbol":"RTGN", 	 "Name": "Ruthigen, Inc.", 	 "Price": 4.2, 	 "MarketCap": 20180000, 	 "IPO":2014, 		 "Sector":"Health Care", 	 "Industry":"Major Pharmaceuticals"},
      {"Symbol":"RUTH", 	 "Name": "Ruth&#39;s Hospitality Group, Inc.", 	 "Price": 15.73, 	 "MarketCap": 556160000, 	 "IPO":2005, 		 "Sector":"Consumer Services", 	 "Industry":"Restaurants"},
      {"Symbol":"RYAAY", 	 "Name": "Ryanair Holdings plc", 	 "Price": 61.46, 	 "MarketCap": 17050000000, 	 "IPO":1997, 		 "Sector":"Transportation", 	 "Industry":"Air Freight/Delivery Services"},
      {"Symbol":"SABR", 	 "Name": "Sabre Corporation", 	 "Price": 21.74, 	 "MarketCap": 5820000000, 	 "IPO":2014, 		 "Sector":"Technology", 	 "Industry":"Computer Software: Programming, Data Processing"},
      {"Symbol":"SAFT", 	 "Name": "Safety Insurance Group, Inc.", 	 "Price": 63.44, 	 "MarketCap": 952180000, 	 "IPO":2002, 		 "Sector":"Finance", 	 "Industry":"Property-Casualty Insurers"},
      {"Symbol":"SAGE", 	 "Name": "Sage Therapeutics, Inc.", 	 "Price": 41.03, 	 "MarketCap": 1060000000, 	 "IPO":2014, 		 "Sector":"Health Care", 	 "Industry":"Major Pharmaceuticals"},
      {"Symbol":"SGNT", 	 "Name": "Sagent Pharmaceuticals, Inc.", 	 "Price": 27.75, 	 "MarketCap": 885510000, 	 "IPO":2011, 		 "Sector":"Health Care", 	 "Industry":"Major Pharmaceuticals"},
      {"Symbol":"SALM", 	 "Name": "Salem Communications Corporation", 	 "Price": 6.99, 	 "MarketCap": 176640000, 	 "IPO":1999, 		 "Sector":"Consumer Services", 	 "Industry":"Broadcasting"},
      {"Symbol":"SAFM", 	 "Name": "Sanderson Farms, Inc.", 	 "Price": 78.56, 	 "MarketCap": 1820000000, 	 "IPO":1987, 		 "Sector":"Consumer Non-Durables", 	 "Industry":"Meat/Poultry/Fish"},
      {"Symbol":"SNDK", 	 "Name": "SanDisk Corporation", 	 "Price": 82.81, 	 "MarketCap": 17640000000, 	 "IPO":1995, 		 "Sector":"Technology", 	 "Industry":"Electronic Components"},
      {"Symbol":"SGMO", 	 "Name": "Sangamo BioSciences, Inc.", 	 "Price": 15.4, 	 "MarketCap": 1050000000, 	 "IPO":2000, 		 "Sector":"Health Care", 	 "Industry":"Biotechnology: Biological Products (No Diagnostic Substances)"},
      {"Symbol":"SANM", 	 "Name": "Sanmina Corporation", 	 "Price": 22.495, 	 "MarketCap": 1870000000, 	 "IPO":1993, 		 "Sector":"Technology", 	 "Industry":"Electrical Products"},
      {"Symbol":"SPNS", 	 "Name": "Sapiens International Corporation N.V.", 	 "Price": 6.91, 	 "MarketCap": 329460000, 	 "IPO":1992, 		 "Sector":"Technology", 	 "Industry":"Computer Software: Prepackaged Software"},
      {"Symbol":"SBAC", 	 "Name": "SBA Communications Corporation", 	 "Price": 121.665, 	 "MarketCap": 15710000000, 	 "IPO":1999, 		 "Sector":"Consumer Services", 	 "Industry":"Telecommunications Equipment"},
      {"Symbol":"SCHN", 	 "Name": "Schnitzer Steel Industries, Inc.", 	 "Price": 17.18, 	 "MarketCap": 460160000, 	 "IPO":1993, 		 "Sector":"Consumer Durables", 	 "Industry":"Industrial Specialties"},
      {"Symbol":"SCHL", 	 "Name": "Scholastic Corporation", 	 "Price": 37.06, 	 "MarketCap": 1210000000, 	 "IPO":1992, 		 "Sector":"Consumer Services", 	 "Industry":"Books"},
      {"Symbol":"SCLN", 	 "Name": "SciClone Pharmaceuticals, Inc.", 	 "Price": 7.85, 	 "MarketCap": 398570000, 	 "IPO":1992, 		 "Sector":"Health Care", 	 "Industry":"Major Pharmaceuticals"},
      {"Symbol":"SQI", 	 "Name": "SciQuest, Inc.", 	 "Price": 16.77, 	 "MarketCap": 461550000, 	 "IPO":2010, 		 "Sector":"Technology", 	 "Industry":"Computer Software: Prepackaged Software"},
      {"Symbol":"SCYX", 	 "Name": "SCYNEXIS, Inc.", 	 "Price": 9.48, 	 "MarketCap": 80690000, 	 "IPO":2014, 		 "Sector":"Health Care", 	 "Industry":"Major Pharmaceuticals"},
      {"Symbol":"SEAC", 	 "Name": "SeaChange International, Inc.", 	 "Price": 7.49, 	 "MarketCap": 244580000, 	 "IPO":1996, 		 "Sector":"Technology", 	 "Industry":"Radio And Television Broadcasting And Communications Equipment"},
      {"Symbol":"STX", 	 "Name": "Seagate Technology.", 	 "Price": 61.835, 	 "MarketCap": 20300000000, 	 "IPO":2002, 		 "Sector":"Technology", 	 "Industry":"Electronic Components"},
      {"Symbol":"SGEN", 	 "Name": "Seattle Genetics, Inc.", 	 "Price": 31.57, 	 "MarketCap": 3910000000, 	 "IPO":2001, 		 "Sector":"Health Care", 	 "Industry":"Biotechnology: Biological Products (No Diagnostic Substances)"},
      {"Symbol":"EYES", 	 "Name": "Second Sight Medical Products, Inc.", 	 "Price": 8.95, 	 "MarketCap": 309900000, 	 "IPO":2014, 		 "Sector":"Health Care", 	 "Industry":"Biotechnology: Electromedical & Electrotherapeutic Apparatus"},
      {"Symbol":"SEIC", 	 "Name": "SEI Investments Company", 	 "Price": 43.2, 	 "MarketCap": 7220000000, 	 "IPO":1981, 		 "Sector":"Finance", 	 "Industry":"Investment Bankers/Brokers/Service"},
      {"Symbol":"SCSS", 	 "Name": "Select Comfort Corporation", 	 "Price": 32.14, 	 "MarketCap": 1710000000, 	 "IPO":1998, 		 "Sector":"Consumer Durables", 	 "Industry":"Home Furnishings"},
      {"Symbol":"SLTC", 	 "Name": "Selectica, Inc.", 	 "Price": 4.84, 	 "MarketCap": 37670000, 	 "IPO":2000, 		 "Sector":"Technology", 	 "Industry":"Computer Software: Prepackaged Software"},
      {"Symbol":"LEDS", 	 "Name": "SemiLEDS Corporation", 	 "Price": 1.34, 	 "MarketCap": 38090000, 	 "IPO":2010, 		 "Sector":"Technology", 	 "Industry":"Semiconductors"},
      {"Symbol":"SMLR", 	 "Name": "Semler Scientific, Inc.", 	 "Price": 4.54, 	 "MarketCap": 21380000, 	 "IPO":2014, 		 "Sector":"Health Care", 	 "Industry":"Biotechnology: Electromedical & Electrotherapeutic Apparatus"},
      {"Symbol":"SNMX", 	 "Name": "Senomyx, Inc.", 	 "Price": 5.92, 	 "MarketCap": 256660000, 	 "IPO":2004, 		 "Sector":"Health Care", 	 "Industry":"Biotechnology: Commercial Physical & Biological Resarch"},
      {"Symbol":"SQNM", 	 "Name": "Sequenom, Inc.", 	 "Price": 3.62, 	 "MarketCap": 424850000, 	 "IPO":2000, 		 "Sector":"Capital Goods", 	 "Industry":"Industrial Machinery/Components"},
      {"Symbol":"SREV", 	 "Name": "ServiceSource International, Inc.", 	 "Price": 3.65, 	 "MarketCap": 305820000, 	 "IPO":2011, 		 "Sector":"Miscellaneous", 	 "Industry":"Business Services"},
      {"Symbol":"SFBS", 	 "Name": "ServisFirst Bancshares, Inc.", 	 "Price": 32.07, 	 "MarketCap": 795060000, 	 "IPO":2014, 		 "Sector":"Finance", 	 "Industry":"Major Banks"},
      {"Symbol":"SFXE", 	 "Name": "SFX Entertainment, Inc.", 	 "Price": 3.49, 	 "MarketCap": 316080000, 	 "IPO":2013, 		 "Sector":"Consumer Services", 	 "Industry":"Services-Misc. Amusement & Recreation"},
      {"Symbol":"SGOC", 	 "Name": "SGOCO Group, Ltd", 	 "Price": 0.555, 	 "MarketCap": 9670000, 	 "IPO":2010, 		 "Sector":"Technology", 	 "Industry":"Radio And Television Broadcasting And Communications Equipment"},
      {"Symbol":"SHLO", 	 "Name": "Shiloh Industries, Inc.", 	 "Price": 13.17, 	 "MarketCap": 226790000, 	 "IPO":1993, 		 "Sector":"Capital Goods", 	 "Industry":"Industrial Specialties"},
      {"Symbol":"SCVL", 	 "Name": "Shoe Carnival, Inc.", 	 "Price": 24.02, 	 "MarketCap": 487270000, 	 "IPO":1993, 		 "Sector":"Consumer Services", 	 "Industry":"Clothing/Shoe/Accessory Stores"},
      {"Symbol":"SHOR", 	 "Name": "ShoreTel, Inc.", 	 "Price": 7.48, 	 "MarketCap": 479920000, 	 "IPO":2007, 		 "Sector":"Public Utilities", 	 "Industry":"Telecommunications Equipment"},
      {"Symbol":"SFLY", 	 "Name": "Shutterfly, Inc.", 	 "Price": 44.86, 	 "MarketCap": 1740000000, 	 "IPO":2006, 		 "Sector":"Miscellaneous", 	 "Industry":"Other Consumer Services"},
      {"Symbol":"SIEN", 	 "Name": "Sientra, Inc.", 	 "Price": 15.9, 	 "MarketCap": 237110000, 	 "IPO":2014, 		 "Sector":"Health Care", 	 "Industry":"Industrial Specialties"},
      {"Symbol":"SIGM", 	 "Name": "Sigma Designs, Inc.", 	 "Price": 6.69, 	 "MarketCap": 233720000, 	 "IPO":1986, 		 "Sector":"Technology", 	 "Industry":"Semiconductors"},
      {"Symbol":"SGMA", 	 "Name": "SigmaTron International, Inc.", 	 "Price": 6.61, 	 "MarketCap": 26800000, 	 "IPO":1994, 		 "Sector":"Technology", 	 "Industry":"Electrical Products"},
      {"Symbol":"SGNL", 	 "Name": "Signal Genetics, Inc.", 	 "Price": 3.91, 	 "MarketCap": 14790000, 	 "IPO":2014, 		 "Sector":"Health Care", 	 "Industry":"Medical Specialities"},
      {"Symbol":"SBNY", 	 "Name": "Signature Bank", 	 "Price": 125.7, 	 "MarketCap": 6320000000, 	 "IPO":2004, 		 "Sector":"Finance", 	 "Industry":"Major Banks"},
      {"Symbol":"SLGN", 	 "Name": "Silgan Holdings Inc.", 	 "Price": 56.85, 	 "MarketCap": 3590000000, 	 "IPO":1997, 		 "Sector":"Consumer Durables", 	 "Industry":"Containers/Packaging"},
      {"Symbol":"SIMG", 	 "Name": "Silicon Image, Inc.", 	 "Price": 7.25, 	 "MarketCap": 561120000, 	 "IPO":1999, 		 "Sector":"Capital Goods", 	 "Industry":"Electrical Products"},
      {"Symbol":"SLAB", 	 "Name": "Silicon Laboratories, Inc.", 	 "Price": 49.26, 	 "MarketCap": 2080000000, 	 "IPO":2000, 		 "Sector":"Technology", 	 "Industry":"Semiconductors"},
      {"Symbol":"SIMO", 	 "Name": "Silicon Motion Technology Corporation", 	 "Price": 29.08, 	 "MarketCap": 956950000, 	 "IPO":2005, 		 "Sector":"Technology", 	 "Industry":"Semiconductors"},
      {"Symbol":"SAMG", 	 "Name": "Silvercrest Asset Management Group Inc.", 	 "Price": 14.63, 	 "MarketCap": 178900000, 	 "IPO":2013, 		 "Sector":"Finance", 	 "Industry":"Investment Managers"},
      {"Symbol":"SBGI", 	 "Name": "Sinclair Broadcast Group, Inc.", 	 "Price": 26.55, 	 "MarketCap": 2540000000, 	 "IPO":1995, 		 "Sector":"Consumer Services", 	 "Industry":"Broadcasting"},
      {"Symbol":"SMAC", 	 "Name": "Sino Mercury Acquisition Corp.", 	 "Price": 9.92, 	 "MarketCap": 52680000, 	 "IPO":2014, 		 "Sector":"Finance", 	 "Industry":"Business Services"},
      {"Symbol":"SMACU", 	 "Name": "Sino Mercury Acquisition Corp.", 	 "Price": 10.0405, 	 "MarketCap": 42270000, 	 "IPO":2014, 		 "Sector":"Finance", 	 "Industry":"Business Services"},
      {"Symbol":"SKUL", 	 "Name": "Skullcandy, Inc.", 	 "Price": 10.82, 	 "MarketCap": 304410000, 	 "IPO":2011, 		 "Sector":"Consumer Non-Durables", 	 "Industry":"Consumer Electronics/Appliances"},
      {"Symbol":"MOBI", 	 "Name": "Sky-mobi Limited", 	 "Price": 4.2, 	 "MarketCap": 115970000, 	 "IPO":2010, 		 "Sector":"Technology", 	 "Industry":"Computer Software: Prepackaged Software"},
      {"Symbol":"SKYW", 	 "Name": "SkyWest, Inc.", 	 "Price": 13.84, 	 "MarketCap": 708320000, 	 "IPO":1986, 		 "Sector":"Transportation", 	 "Industry":"Air Freight/Delivery Services"},
      {"Symbol":"SMSI", 	 "Name": "Smith Micro Software, Inc.", 	 "Price": 1.6, 	 "MarketCap": 72090000, 	 "IPO":1995, 		 "Sector":"Technology", 	 "Industry":"Computer Software: Prepackaged Software"},
      {"Symbol":"SMTX", 	 "Name": "SMTC Corporation", 	 "Price": 1.66, 	 "MarketCap": 27250000, 	 "IPO":2000, 		 "Sector":"Technology", 	 "Industry":"Electrical Products"},
      {"Symbol":"SODA", 	 "Name": "SodaStream International Ltd.", 	 "Price": 19.4, 	 "MarketCap": 407360000, 	 "IPO":2010, 		 "Sector":"Consumer Durables", 	 "Industry":"Consumer Electronics/Appliances"},
      {"Symbol":"SCTY", 	 "Name": "SolarCity Corporation", 	 "Price": 57.6, 	 "MarketCap": 5530000000, 	 "IPO":2012, 		 "Sector":"Basic Industries", 	 "Industry":"Engineering & Construction"},
      {"Symbol":"SZYM", 	 "Name": "Solazyme, Inc.", 	 "Price": 2.65, 	 "MarketCap": 210140000, 	 "IPO":2011, 		 "Sector":"Basic Industries", 	 "Industry":"Major Chemicals"},
      {"Symbol":"SONC", 	 "Name": "Sonic Corp.", 	 "Price": 31.59, 	 "MarketCap": 1690000000, 	 "IPO":1991, 		 "Sector":"Consumer Services", 	 "Industry":"Restaurants"},
      {"Symbol":"OKSB", 	 "Name": "Southwest Bancorp, Inc.", 	 "Price": 16.51, 	 "MarketCap": 321220000, 	 "IPO":1993, 		 "Sector":"Finance", 	 "Industry":"Major Banks"},
      {"Symbol":"SPAN", 	 "Name": "Span-America Medical Systems, Inc.", 	 "Price": 18.3, 	 "MarketCap": 54200000, 	 "IPO":1983, 		 "Sector":"Health Care", 	 "Industry":"Industrial Specialties"},
      {"Symbol":"SBSA", 	 "Name": "Spanish Broadcasting System, Inc.", 	 "Price": 3.6, 	 "MarketCap": 23430000, 	 "IPO":1999, 		 "Sector":"Consumer Services", 	 "Industry":"Broadcasting"},
      {"Symbol":"SPKE", 	 "Name": "Spark Energy, Inc.", 	 "Price": 13.42, 	 "MarketCap": 184530000, 	 "IPO":2014, 		 "Sector":"Public Utilities", 	 "Industry":"Power Generation"},
      {"Symbol":"SAVE", 	 "Name": "Spirit Airlines, Inc.", 	 "Price": 79.32, 	 "MarketCap": 5770000000, 	 "IPO":2011, 		 "Sector":"Transportation", 	 "Industry":"Air Freight/Delivery Services"},
      {"Symbol":"SPLK", 	 "Name": "Splunk Inc.", 	 "Price": 64.18, 	 "MarketCap": 7780000000, 	 "IPO":2012, 		 "Sector":"Technology", 	 "Industry":"Computer Software: Prepackaged Software"},
      {"Symbol":"SFM", 	 "Name": "Sprouts Farmers Market, Inc.", 	 "Price": 38.38, 	 "MarketCap": 5810000000, 	 "IPO":2013, 		 "Sector":"Consumer Services", 	 "Industry":"Food Chains"},
      {"Symbol":"SPSC", 	 "Name": "SPS Commerce, Inc.", 	 "Price": 68.39, 	 "MarketCap": 1110000000, 	 "IPO":2010, 		 "Sector":"Technology", 	 "Industry":"Computer Software: Prepackaged Software"},
      {"Symbol":"SQBK", 	 "Name": "Square 1 Financial, Inc.", 	 "Price": 25.66, 	 "MarketCap": 736670000, 	 "IPO":2014, 		 "Sector":"Finance", 	 "Industry":"Major Banks"},
      {"Symbol":"SSNC", 	 "Name": "SS&C Technologies Holdings, Inc.", 	 "Price": 63.38, 	 "MarketCap": 5300000000, 	 "IPO":2010, 		 "Sector":"Technology", 	 "Industry":"Computer Software: Prepackaged Software"},
      {"Symbol":"STMP", 	 "Name": "Stamps.com Inc.", 	 "Price": 56.92, 	 "MarketCap": 905630000, 	 "IPO":1999, 		 "Sector":"Miscellaneous", 	 "Industry":"Business Services"},
      {"Symbol":"SPLS", 	 "Name": "Staples, Inc.", 	 "Price": 16.86, 	 "MarketCap": 10800000000, 	 "IPO":1989, 		 "Sector":"Consumer Services", 	 "Industry":"Other Specialty Stores"},
      {"Symbol":"SBUX", 	 "Name": "Starbucks Corporation", 	 "Price": 91.58, 	 "MarketCap": 68670000000, 	 "IPO":1992, 		 "Sector":"Consumer Services", 	 "Industry":"Restaurants"},
      {"Symbol":"STFC", 	 "Name": "State Auto Financial Corporation", 	 "Price": 23.46, 	 "MarketCap": 961080000, 	 "IPO":1991, 		 "Sector":"Finance", 	 "Industry":"Property-Casualty Insurers"},
      {"Symbol":"SIBC", 	 "Name": "State Investors Bancorp, Inc.", 	 "Price": 21.0999, 	 "MarketCap": 48700000, 	 "IPO":2011, 		 "Sector":"Finance", 	 "Industry":"Savings Institutions"},
      {"Symbol":"GASS", 	 "Name": "StealthGas, Inc.", 	 "Price": 5.92, 	 "MarketCap": 236810000, 	 "IPO":2005, 		 "Sector":"Transportation", 	 "Industry":"Marine Transportation"},
      {"Symbol":"STLD", 	 "Name": "Steel Dynamics, Inc.", 	 "Price": 20.01, 	 "MarketCap": 4810000000, 	 "IPO":1996, 		 "Sector":"Basic Industries", 	 "Industry":"Steel/Iron Ore"},
      {"Symbol":"SMRT", 	 "Name": "Stein Mart, Inc.", 	 "Price": 15.82, 	 "MarketCap": 710960000, 	 "IPO":1992, 		 "Sector":"Consumer Services", 	 "Industry":"Clothing/Shoe/Accessory Stores"},
      {"Symbol":"STNR", 	 "Name": "Steiner Leisure Limited", 	 "Price": 46.27, 	 "MarketCap": 627670000, 	 "IPO":1996, 		 "Sector":"Consumer Services", 	 "Industry":"Other Consumer Services"},
      {"Symbol":"STEM", 	 "Name": "StemCells, Inc.", 	 "Price": 1.09, 	 "MarketCap": 74920000, 	 "IPO":1992, 		 "Sector":"Health Care", 	 "Industry":"Biotechnology: Biological Products (No Diagnostic Substances)"},
      {"Symbol":"STML", 	 "Name": "Stemline Therapeutics, Inc.", 	 "Price": 14.07, 	 "MarketCap": 186920000, 	 "IPO":2013, 		 "Sector":"Health Care", 	 "Industry":"Major Pharmaceuticals"},
      {"Symbol":"STXS", 	 "Name": "Stereotaxis, Inc.", 	 "Price": 2.27, 	 "MarketCap": 46450000, 	 "IPO":2004, 		 "Sector":"Health Care", 	 "Industry":"Biotechnology: Electromedical & Electrotherapeutic Apparatus"},
      {"Symbol":"SRCL", 	 "Name": "Stericycle, Inc.", 	 "Price": 131.07, 	 "MarketCap": 11130000000, 	 "IPO":1996, 		 "Sector":"Basic Industries", 	 "Industry":"Environmental Services"},
      {"Symbol":"SHOO", 	 "Name": "Steven Madden, Ltd.", 	 "Price": 35.65, 	 "MarketCap": 2290000000, 	 "IPO":1993, 		 "Sector":"Consumer Non-Durables", 	 "Industry":"Shoe Manufacturing"},
      {"Symbol":"STCK", 	 "Name": "Stock Building Supply Holdings, Inc.", 	 "Price": 16.3, 	 "MarketCap": 426670000, 	 "IPO":2013, 		 "Sector":"Consumer Services", 	 "Industry":"RETAIL: Building Materials"},
      {"Symbol":"SSYS", 	 "Name": "Stratasys, Ltd.", 	 "Price": 67.16, 	 "MarketCap": 3420000000, 	 "IPO":1994, 		 "Sector":"Technology", 	 "Industry":"Computer peripheral equipment"},
      {"Symbol":"STRA", 	 "Name": "Strayer Education, Inc.", 	 "Price": 62.41, 	 "MarketCap": 680480000, 	 "IPO":1996, 		 "Sector":"Consumer Services", 	 "Industry":"Other Consumer Services"},
      {"Symbol":"SCMP", 	 "Name": "Sucampo Pharmaceuticals, Inc.", 	 "Price": 15.32, 	 "MarketCap": 686690000, 	 "IPO":2007, 		 "Sector":"Health Care", 	 "Industry":"Major Pharmaceuticals"},
      {"Symbol":"SNHY", 	 "Name": "Sun Hydraulics Corporation", 	 "Price": 38.48, 	 "MarketCap": 1020000000, 	 "IPO":1997, 		 "Sector":"Capital Goods", 	 "Industry":"Metal Fabrications"},
      {"Symbol":"SEMI", 	 "Name": "SunEdison Semiconductor Limited", 	 "Price": 22.21, 	 "MarketCap": 921850000, 	 "IPO":2014, 		 "Sector":"Technology", 	 "Industry":"Semiconductors"},
      {"Symbol":"SNSS", 	 "Name": "Sunesis Pharmaceuticals, Inc.", 	 "Price": 2.28, 	 "MarketCap": 141240000, 	 "IPO":2005, 		 "Sector":"Health Care", 	 "Industry":"Major Pharmaceuticals"},
      {"Symbol":"GOMO", 	 "Name": "Sungy Mobile Limited", 	 "Price": 4.94, 	 "MarketCap": 165410000, 	 "IPO":2013, 		 "Sector":"Technology", 	 "Industry":"Computer Software: Prepackaged Software"},
      {"Symbol":"SBCP", 	 "Name": "Sunshine Bancorp, Inc.", 	 "Price": 12.03, 	 "MarketCap": 50910000, 	 "IPO":2014, 		 "Sector":"Finance", 	 "Industry":"Savings Institutions"},
      {"Symbol":"SMCI", 	 "Name": "Super Micro Computer, Inc.", 	 "Price": 39.74, 	 "MarketCap": 1850000000, 	 "IPO":2007, 		 "Sector":"Technology", 	 "Industry":"Computer Manufacturing"},
      {"Symbol":"SCON", 	 "Name": "Superconductor Technologies Inc.", 	 "Price": 2.73, 	 "MarketCap": 36170000, 	 "IPO":1993, 		 "Sector":"Technology", 	 "Industry":"Radio And Television Broadcasting And Communications Equipment"},
      {"Symbol":"SUPN", 	 "Name": "Supernus Pharmaceuticals, Inc.", 	 "Price": 8.8, 	 "MarketCap": 377790000, 	 "IPO":2012, 		 "Sector":"Health Care", 	 "Industry":"Major Pharmaceuticals"},
      {"Symbol":"SPRT", 	 "Name": "support.com, Inc.", 	 "Price": 1.78, 	 "MarketCap": 96290000, 	 "IPO":2000, 		 "Sector":"Technology", 	 "Industry":"EDP Services"},
      {"Symbol":"SCAI", 	 "Name": "Surgical Care Affiliates, Inc.", 	 "Price": 32.88, 	 "MarketCap": 1270000000, 	 "IPO":2013, 		 "Sector":"Health Care", 	 "Industry":"Medical Specialities"},
      {"Symbol":"SRDX", 	 "Name": "SurModics, Inc.", 	 "Price": 23.53, 	 "MarketCap": 304460000, 	 "IPO":1998, 		 "Sector":"Health Care", 	 "Industry":"Medical/Dental Instruments"},
      {"Symbol":"SYKE", 	 "Name": "Sykes Enterprises, Incorporated", 	 "Price": 24.28, 	 "MarketCap": 1050000000, 	 "IPO":1996, 		 "Sector":"Technology", 	 "Industry":"EDP Services"},
      {"Symbol":"SYMC", 	 "Name": "Symantec Corporation", 	 "Price": 26.33, 	 "MarketCap": 17970000000, 	 "IPO":1989, 		 "Sector":"Technology", 	 "Industry":"Computer Software: Prepackaged Software"},
      {"Symbol":"SYNC", 	 "Name": "Synacor, Inc.", 	 "Price": 2.18, 	 "MarketCap": 59690000, 	 "IPO":2012, 		 "Sector":"Technology", 	 "Industry":"Computer Software: Programming, Data Processing"},
      {"Symbol":"SYNA", 	 "Name": "Synaptics Incorporated", 	 "Price": 78.91, 	 "MarketCap": 2900000000, 	 "IPO":2002, 		 "Sector":"Technology", 	 "Industry":"EDP Services"},
      {"Symbol":"SNCR", 	 "Name": "Synchronoss Technologies, Inc.", 	 "Price": 43.89, 	 "MarketCap": 1860000000, 	 "IPO":2006, 		 "Sector":"Technology", 	 "Industry":"EDP Services"},
      {"Symbol":"ELOS", 	 "Name": "Syneron Medical Ltd.", 	 "Price": 10.16, 	 "MarketCap": 372560000, 	 "IPO":2004, 		 "Sector":"Health Care", 	 "Industry":"Biotechnology: Electromedical & Electrotherapeutic Apparatus"},
      {"Symbol":"SNPS", 	 "Name": "Synopsys, Inc.", 	 "Price": 44.9, 	 "MarketCap": 6870000000, 	 "IPO":1992, 		 "Sector":"Technology", 	 "Industry":"Computer Software: Prepackaged Software"},
      {"Symbol":"SNTA", 	 "Name": "Synta Pharmaceuticals Corp.", 	 "Price": 2.29, 	 "MarketCap": 249370000, 	 "IPO":2007, 		 "Sector":"Health Care", 	 "Industry":"Major Pharmaceuticals"},
      {"Symbol":"SYNT", 	 "Name": "Syntel, Inc.", 	 "Price": 45.23, 	 "MarketCap": 3780000000, 	 "IPO":1997, 		 "Sector":"Technology", 	 "Industry":"EDP Services"},
      {"Symbol":"SYRX", 	 "Name": "Sysorex Global Holding Corp.", 	 "Price": 1.5, 	 "MarketCap": 29480000, 	 "IPO":2014, 		 "Sector":"Technology", 	 "Industry":"EDP Services"},
      {"Symbol":"TROW", 	 "Name": "T. Rowe Price Group, Inc.", 	 "Price": 82.45, 	 "MarketCap": 21500000000, 	 "IPO":1986, 		 "Sector":"Finance", 	 "Industry":"Investment Bankers/Brokers/Service"},
      {"Symbol":"TTOO", 	 "Name": "T2 Biosystems, Inc.", 	 "Price": 19.95, 	 "MarketCap": 399830000, 	 "IPO":2014, 		 "Sector":"Health Care", 	 "Industry":"Medical/Dental Instruments"},
      {"Symbol":"TTWO", 	 "Name": "Take-Two Interactive Software, Inc.", 	 "Price": 28.4, 	 "MarketCap": 2400000000, 	 "IPO":1997, 		 "Sector":"Technology", 	 "Industry":"Computer Software: Prepackaged Software"},
      {"Symbol":"TLMR", 	 "Name": "Talmer Bancorp, Inc.", 	 "Price": 14.02, 	 "MarketCap": 988460000, 	 "IPO":2014, 		 "Sector":"Finance", 	 "Industry":"Major Banks"},
      {"Symbol":"TNDM", 	 "Name": "Tandem Diabetes Care, Inc.", 	 "Price": 13.16, 	 "MarketCap": 311020000, 	 "IPO":2013, 		 "Sector":"Health Care", 	 "Industry":"Medical/Dental Instruments"},
      {"Symbol":"TNGO", 	 "Name": "Tangoe, Inc.", 	 "Price": 12.11, 	 "MarketCap": 470410000, 	 "IPO":2011, 		 "Sector":"Technology", 	 "Industry":"Computer Software: Prepackaged Software"},
      {"Symbol":"TEDU", 	 "Name": "Tarena International, Inc.", 	 "Price": 11.36, 	 "MarketCap": 575470000, 	 "IPO":2014, 		 "Sector":"Consumer Services", 	 "Industry":"Other Consumer Services"},
      {"Symbol":"TRGT", 	 "Name": "Targacept, Inc.", 	 "Price": 2.5, 	 "MarketCap": 85780000, 	 "IPO":2006, 		 "Sector":"Health Care", 	 "Industry":"Major Pharmaceuticals"},
      {"Symbol":"TECD", 	 "Name": "Tech Data Corporation", 	 "Price": 60.41, 	 "MarketCap": 2310000000, 	 "IPO":1986, 		 "Sector":"Technology", 	 "Industry":"Retail: Computer Software & Peripheral Equipment"},
      {"Symbol":"TTGT", 	 "Name": "TechTarget, Inc.", 	 "Price": 11.9, 	 "MarketCap": 392380000, 	 "IPO":2007, 		 "Sector":"Miscellaneous", 	 "Industry":"Business Services"},
      {"Symbol":"TGLS", 	 "Name": "Tecnoglass Inc.", 	 "Price": 9.89, 	 "MarketCap": 241350000, 	 "IPO":2012, 		 "Sector":"Consumer Durables", 	 "Industry":"Electronic Components"},
      {"Symbol":"TGEN", 	 "Name": "Tecogen Inc.", 	 "Price": 5.3699, 	 "MarketCap": 84890000, 	 "IPO":2014, 		 "Sector":"Capital Goods", 	 "Industry":"Industrial Machinery/Components"},
      {"Symbol":"TSYS", 	 "Name": "TeleCommunication Systems, Inc.", 	 "Price": 3.28, 	 "MarketCap": 195670000, 	 "IPO":2000, 		 "Sector":"Technology", 	 "Industry":"Computer Software: Prepackaged Software"},
      {"Symbol":"TNAV", 	 "Name": "TeleNav, Inc.", 	 "Price": 8.18, 	 "MarketCap": 326400000, 	 "IPO":2010, 		 "Sector":"Capital Goods", 	 "Industry":"Industrial Machinery/Components"},
      {"Symbol":"TTEC", 	 "Name": "TeleTech Holdings, Inc.", 	 "Price": 23.35, 	 "MarketCap": 1140000000, 	 "IPO":1996, 		 "Sector":"Technology", 	 "Industry":"Professional Services"},
      {"Symbol":"TERP", 	 "Name": "TerraForm Power, Inc.", 	 "Price": 31.64, 	 "MarketCap": 1340000000, 	 "IPO":2014, 		 "Sector":"Public Utilities", 	 "Industry":"Electric Utilities: Central"},
      {"Symbol":"TRTL", 	 "Name": "Terrapin 3 Acquisition Corporation", 	 "Price": 9.9, 	 "MarketCap": 263280000, 	 "IPO":2014, 		 "Sector":"Finance", 	 "Industry":"Business Services"},
      {"Symbol":"TRTLU", 	 "Name": "Terrapin 3 Acquisition Corporation", 	 "Price": 10.07, 	 "MarketCap": 186300000, 	 "IPO":2014, 		 "Sector":"Finance", 	 "Industry":"Business Services"},
      {"Symbol":"TBNK", 	 "Name": "Territorial Bancorp Inc.", 	 "Price": 21.7, 	 "MarketCap": 216340000, 	 "IPO":2009, 		 "Sector":"Finance", 	 "Industry":"Savings Institutions"},
      {"Symbol":"TSRO", 	 "Name": "TESARO, Inc.", 	 "Price": 38.49, 	 "MarketCap": 1390000000, 	 "IPO":2012, 		 "Sector":"Health Care", 	 "Industry":"Major Pharmaceuticals"},
      {"Symbol":"TSLA", 	 "Name": "Tesla Motors, Inc.", 	 "Price": 203.77, 	 "MarketCap": 25550000000, 	 "IPO":2010, 		 "Sector":"Capital Goods", 	 "Industry":"Auto Manufacturing"},
      {"Symbol":"TESS", 	 "Name": "TESSCO Technologies Incorporated", 	 "Price": 25.19, 	 "MarketCap": 206200000, 	 "IPO":1994, 		 "Sector":"Consumer Non-Durables", 	 "Industry":"Electronic Components"},
      {"Symbol":"TSRA", 	 "Name": "Tessera Technologies, Inc.", 	 "Price": 39.27, 	 "MarketCap": 2070000000, 	 "IPO":2003, 		 "Sector":"Technology", 	 "Industry":"Semiconductors"},
      {"Symbol":"TTEK", 	 "Name": "Tetra Tech, Inc.", 	 "Price": 24.58, 	 "MarketCap": 1520000000, 	 "IPO":1991, 		 "Sector":"Consumer Services", 	 "Industry":"Military/Government/Technical"},
      {"Symbol":"TLOG", 	 "Name": "TetraLogic Pharmaceuticals Corporation", 	 "Price": 5.12, 	 "MarketCap": 114260000, 	 "IPO":2013, 		 "Sector":"Health Care", 	 "Industry":"Major Pharmaceuticals"},
      {"Symbol":"TTPH", 	 "Name": "Tetraphase Pharmaceuticals, Inc.", 	 "Price": 35.18, 	 "MarketCap": 1080000000, 	 "IPO":2013, 		 "Sector":"Health Care", 	 "Industry":"Major Pharmaceuticals"},
      {"Symbol":"TCBI", 	 "Name": "Texas Capital Bancshares, Inc.", 	 "Price": 48.51, 	 "MarketCap": 2090000000, 	 "IPO":2003, 		 "Sector":"Finance", 	 "Industry":"Major Banks"},
      {"Symbol":"TXRH", 	 "Name": "Texas Roadhouse, Inc.", 	 "Price": 34.59, 	 "MarketCap": 2400000000, 	 "IPO":2004, 		 "Sector":"Consumer Services", 	 "Industry":"Restaurants"},
      {"Symbol":"ABCO", 	 "Name": "The Advisory Board Company", 	 "Price": 53.69, 	 "MarketCap": 2070000000, 	 "IPO":2001, 		 "Sector":"Consumer Services", 	 "Industry":"Other Consumer Services"},
      {"Symbol":"BONT", 	 "Name": "The Bon-Ton Stores, Inc.", 	 "Price": 5.79, 	 "MarketCap": 118300000, 	 "IPO":1991, 		 "Sector":"Consumer Services", 	 "Industry":"Department/Specialty Retail Stores"},
      {"Symbol":"CG", 	 "Name": "The Carlyle Group L.P.", 	 "Price": 28.18, 	 "MarketCap": 8970000000, 	 "IPO":2012, 		 "Sector":"Finance", 	 "Industry":"Investment Managers"},
      {"Symbol":"CAKE", 	 "Name": "The Cheesecake Factory Incorporated", 	 "Price": 48.22, 	 "MarketCap": 2390000000, 	 "IPO":1992, 		 "Sector":"Consumer Services", 	 "Industry":"Restaurants"},
      {"Symbol":"CHEF", 	 "Name": "The Chefs&#39; Warehouse, Inc.", 	 "Price": 22.76, 	 "MarketCap": 570310000, 	 "IPO":2011, 		 "Sector":"Consumer Non-Durables", 	 "Industry":"Food Distributors"},
      {"Symbol":"ENSG", 	 "Name": "The Ensign Group, Inc.", 	 "Price": 40.91, 	 "MarketCap": 925220000, 	 "IPO":2007, 		 "Sector":"Health Care", 	 "Industry":"Hospital/Nursing Management"},
      {"Symbol":"XONE", 	 "Name": "The ExOne Company", 	 "Price": 16.93, 	 "MarketCap": 244520000, 	 "IPO":2013, 		 "Sector":"Capital Goods", 	 "Industry":"Industrial Machinery/Components"},
      {"Symbol":"FINL", 	 "Name": "The Finish Line, Inc.", 	 "Price": 23.51, 	 "MarketCap": 1100000000, 	 "IPO":1992, 		 "Sector":"Consumer Services", 	 "Industry":"Clothing/Shoe/Accessory Stores"},
      {"Symbol":"TFM", 	 "Name": "The Fresh Market, Inc.", 	 "Price": 37.14, 	 "MarketCap": 1800000000, 	 "IPO":2010, 		 "Sector":"Consumer Services", 	 "Industry":"Food Chains"},
      {"Symbol":"HABT", 	 "Name": "The Habit Restaurants, Inc.", 	 "Price": 30.87, 	 "MarketCap": 779550000, 	 "IPO":2014, 		 "Sector":"Consumer Services", 	 "Industry":"Restaurants"},
      {"Symbol":"JYNT", 	 "Name": "The Joint Corp.", 	 "Price": 7.03, 	 "MarketCap": 68360000, 	 "IPO":2014, 		 "Sector":"Miscellaneous", 	 "Industry":"Multi-Sector Companies"},
      {"Symbol":"KEYW", 	 "Name": "The KEYW Holding Corporation", 	 "Price": 9.6, 	 "MarketCap": 360870000, 	 "IPO":2010, 		 "Sector":"Technology", 	 "Industry":"EDP Services"},
      {"Symbol":"MDCO", 	 "Name": "The Medicines Company", 	 "Price": 29.79, 	 "MarketCap": 1950000000, 	 "IPO":2000, 		 "Sector":"Health Care", 	 "Industry":"Major Pharmaceuticals"},
      {"Symbol":"MIK", 	 "Name": "The Michaels Companies, Inc.", 	 "Price": 27.45, 	 "MarketCap": 5610000000, 	 "IPO":2014, 		 "Sector":"Consumer Services", 	 "Industry":"Recreational Products/Toys"},
      {"Symbol":"NAVG", 	 "Name": "The Navigators Group, Inc.", 	 "Price": 74.13, 	 "MarketCap": 1060000000, 	 "IPO":1986, 		 "Sector":"Finance", 	 "Industry":"Property-Casualty Insurers"},
      {"Symbol":"PTRY", 	 "Name": "The Pantry, Inc.", 	 "Price": 36.72, 	 "MarketCap": 863090000, 	 "IPO":1999, 		 "Sector":"Consumer Durables", 	 "Industry":"Automotive Aftermarket"},
      {"Symbol":"PCLN", 	 "Name": "The Priceline Group Inc. ", 	 "Price": 1103.37, 	 "MarketCap": 57770000000, 	 "IPO":1999, 		 "Sector":"Miscellaneous", 	 "Industry":"Business Services"},
      {"Symbol":"PRSC", 	 "Name": "The Providence Service Corporation", 	 "Price": 39.6, 	 "MarketCap": 627790000, 	 "IPO":2003, 		 "Sector":"Consumer Services", 	 "Industry":"Transportation Services"},
      {"Symbol":"SPNC", 	 "Name": "The Spectranetics Corporation", 	 "Price": 33.69, 	 "MarketCap": 1410000000, 	 "IPO":1992, 		 "Sector":"Health Care", 	 "Industry":"Biotechnology: Electromedical & Electrotherapeutic Apparatus"},
      {"Symbol":"ULTI", 	 "Name": "The Ultimate Software Group, Inc.", 	 "Price": 163.76, 	 "MarketCap": 4650000000, 	 "IPO":1998, 		 "Sector":"Technology", 	 "Industry":"Computer Software: Prepackaged Software"},
      {"Symbol":"NCTY", 	 "Name": "The9 Limited", 	 "Price": 1.46, 	 "MarketCap": 33790000, 	 "IPO":2004, 		 "Sector":"Miscellaneous", 	 "Industry":"Business Services"},
      {"Symbol":"THRX", 	 "Name": "Theravance, Inc.", 	 "Price": 14.85, 	 "MarketCap": 1710000000, 	 "IPO":2004, 		 "Sector":"Health Care", 	 "Industry":"Major Pharmaceuticals"},
      {"Symbol":"THLD", 	 "Name": "Threshold Pharmaceuticals, Inc.", 	 "Price": 4.03, 	 "MarketCap": 252880000, 	 "IPO":2005, 		 "Sector":"Health Care", 	 "Industry":"Major Pharmaceuticals"},
      {"Symbol":"TITN", 	 "Name": "Titan Machinery Inc.", 	 "Price": 14.01, 	 "MarketCap": 299970000, 	 "IPO":2007, 		 "Sector":"Consumer Services", 	 "Industry":"Other Specialty Stores"},
      {"Symbol":"TIVO", 	 "Name": "TiVo Inc.", 	 "Price": 11.03, 	 "MarketCap": 1130000000, 	 "IPO":1999, 		 "Sector":"Consumer Services", 	 "Industry":"Television Services"},
      {"Symbol":"TKAI", 	 "Name": "Tokai Pharmaceuticals, Inc.", 	 "Price": 13.62, 	 "MarketCap": 304840000, 	 "IPO":2014, 		 "Sector":"Health Care", 	 "Industry":"Major Pharmaceuticals"},
      {"Symbol":"TISA", 	 "Name": "Top Image Systems, Ltd.", 	 "Price": 3.2499, 	 "MarketCap": 57900000, 	 "IPO":1996, 		 "Sector":"Technology", 	 "Industry":"Computer peripheral equipment"},
      {"Symbol":"TORM", 	 "Name": "TOR Minerals International Inc", 	 "Price": 7.21, 	 "MarketCap": 21730000, 	 "IPO":1988, 		 "Sector":"Basic Industries", 	 "Industry":"Major Chemicals"},
      {"Symbol":"TRNX", 	 "Name": "Tornier N.V.", 	 "Price": 25.32, 	 "MarketCap": 1240000000, 	 "IPO":2011, 		 "Sector":"Health Care", 	 "Industry":"Industrial Specialties"},
      {"Symbol":"TSEM", 	 "Name": "Tower Semiconductor Ltd.", 	 "Price": 13.96, 	 "MarketCap": 889190000, 	 "IPO":1994, 		 "Sector":"Technology", 	 "Industry":"Semiconductors"},
      {"Symbol":"CLUB", 	 "Name": "Town Sports International Holdings, Inc.", 	 "Price": 6.94, 	 "MarketCap": 168620000, 	 "IPO":2006, 		 "Sector":"Consumer Services", 	 "Industry":"Hotels/Resorts"},
      {"Symbol":"TSCO", 	 "Name": "Tractor Supply Company", 	 "Price": 84.26, 	 "MarketCap": 11450000000, 	 "IPO":1994, 		 "Sector":"Consumer Services", 	 "Industry":"RETAIL: Building Materials"},
      {"Symbol":"TSRE", 	 "Name": "Trade Street Residential, Inc.", 	 "Price": 8.02, 	 "MarketCap": 294320000, 	 "IPO":2013, 		 "Sector":"Consumer Services", 	 "Industry":"Real Estate Investment Trusts"},
      {"Symbol":"TACT", 	 "Name": "TransAct Technologies Incorporated", 	 "Price": 6.48, 	 "MarketCap": 53270000, 	 "IPO":1996, 		 "Sector":"Technology", 	 "Industry":"Computer peripheral equipment"},
      {"Symbol":"TBIO", 	 "Name": "Transgenomic, Inc.", 	 "Price": 2.91, 	 "MarketCap": 24100000, 	 "IPO":2000, 		 "Sector":"Capital Goods", 	 "Industry":"Biotechnology: Laboratory Analytical Instruments"},
      {"Symbol":"TRVN", 	 "Name": "Trevena, Inc.", 	 "Price": 5.42, 	 "MarketCap": 212630000, 	 "IPO":2014, 		 "Sector":"Health Care", 	 "Industry":"Major Pharmaceuticals"},
      {"Symbol":"TRS", 	 "Name": "TriMas Corporation", 	 "Price": 30.105, 	 "MarketCap": 1360000000, 	 "IPO":2007, 		 "Sector":"Capital Goods", 	 "Industry":"Industrial Specialties"},
      {"Symbol":"TRMB", 	 "Name": "Trimble Navigation Limited", 	 "Price": 26.865, 	 "MarketCap": 6960000000, 	 "IPO":1990, 		 "Sector":"Capital Goods", 	 "Industry":"Industrial Machinery/Components"},
      {"Symbol":"TRIB", 	 "Name": "Trinity Biotech plc", 	 "Price": 17.295, 	 "MarketCap": 399070000, 	 "IPO":1992, 		 "Sector":"Health Care", 	 "Industry":"Biotechnology: In Vitro & In Vivo Diagnostic Substances"},
      {"Symbol":"TSC", 	 "Name": "TriState Capital Holdings, Inc.", 	 "Price": 9.9, 	 "MarketCap": 284260000, 	 "IPO":2013, 		 "Sector":"Finance", 	 "Industry":"Major Banks"},
      {"Symbol":"TBK", 	 "Name": "Triumph Bancorp, Inc.", 	 "Price": 13.03, 	 "MarketCap": 234070000, 	 "IPO":2014, 		 "Sector":"Finance", 	 "Industry":"Major Banks"},
      {"Symbol":"TRIV", 	 "Name": "TriVascular Technologies, Inc.", 	 "Price": 10.07, 	 "MarketCap": 205110000, 	 "IPO":2014, 		 "Sector":"Health Care", 	 "Industry":"Medical/Dental Instruments"},
      {"Symbol":"TRUE", 	 "Name": "TrueCar, Inc.", 	 "Price": 19.55, 	 "MarketCap": 1550000000, 	 "IPO":2014, 		 "Sector":"Technology", 	 "Industry":"Computer Software: Programming, Data Processing"},
      {"Symbol":"THST", 	 "Name": "Truett-Hurst, Inc.", 	 "Price": 3.06, 	 "MarketCap": 11480000, 	 "IPO":2013, 		 "Sector":"Consumer Non-Durables", 	 "Industry":"Beverages (Production/Distribution)"},
      {"Symbol":"TTMI", 	 "Name": "TTM Technologies, Inc.", 	 "Price": 8.72, 	 "MarketCap": 726770000, 	 "IPO":2000, 		 "Sector":"Technology", 	 "Industry":"Electrical Products"},
      {"Symbol":"TUBE", 	 "Name": "TubeMogul, Inc.", 	 "Price": 15.69, 	 "MarketCap": 467440000, 	 "IPO":2014, 		 "Sector":"Technology", 	 "Industry":"Computer Software: Prepackaged Software"},
      {"Symbol":"TUES", 	 "Name": "Tuesday Morning Corp.", 	 "Price": 19.41, 	 "MarketCap": 851010000, 	 "IPO":1999, 		 "Sector":"Consumer Services", 	 "Industry":"Department/Specialty Retail Stores"},
      {"Symbol":"TOUR", 	 "Name": "Tuniu Corporation", 	 "Price": 15.09, 	 "MarketCap": 732670000, 	 "IPO":2014, 		 "Sector":"Consumer Services", 	 "Industry":"Transportation Services"},
      {"Symbol":"PRTS", 	 "Name": "U.S. Auto Parts Network, Inc.", 	 "Price": 2.69, 	 "MarketCap": 90290000, 	 "IPO":2007, 		 "Sector":"Consumer Services", 	 "Industry":"Other Specialty Stores"},
      {"Symbol":"UBIC", 	 "Name": "UBIC, Inc.", 	 "Price": 20.8909, 	 "MarketCap": 369880000, 	 "IPO":2013, 		 "Sector":"Technology", 	 "Industry":"EDP Services"},
      {"Symbol":"UBNT", 	 "Name": "Ubiquiti Networks, Inc.", 	 "Price": 28.78, 	 "MarketCap": 2530000000, 	 "IPO":2011, 		 "Sector":"Technology", 	 "Industry":"Radio And Television Broadcasting And Communications Equipment"},
      {"Symbol":"UFPT", 	 "Name": "UFP Technologies, Inc.", 	 "Price": 23.42, 	 "MarketCap": 165260000, 	 "IPO":1993, 		 "Sector":"Capital Goods", 	 "Industry":"Containers/Packaging"},
      {"Symbol":"ULTA", 	 "Name": "Ulta Salon, Cosmetics & Fragrance, Inc.", 	 "Price": 136.66, 	 "MarketCap": 8800000000, 	 "IPO":2007, 		 "Sector":"Consumer Services", 	 "Industry":"Other Specialty Stores"},
      {"Symbol":"UCTT", 	 "Name": "Ultra Clean Holdings, Inc.", 	 "Price": 9.87, 	 "MarketCap": 291490000, 	 "IPO":2004, 		 "Sector":"Technology", 	 "Industry":"Semiconductors"},
      {"Symbol":"RARE", 	 "Name": "Ultragenyx Pharmaceutical Inc.", 	 "Price": 54.1, 	 "MarketCap": 1890000000, 	 "IPO":2014, 		 "Sector":"Health Care", 	 "Industry":"Major Pharmaceuticals"},
      {"Symbol":"ULBI", 	 "Name": "Ultralife Corporation", 	 "Price": 3.4, 	 "MarketCap": 59150000, 	 "IPO":1992, 		 "Sector":"Miscellaneous", 	 "Industry":"Industrial Machinery/Components"},
      {"Symbol":"ULTR", 	 "Name": "Ultrapetrol (Bahamas) Limited", 	 "Price": 1.76, 	 "MarketCap": 247680000, 	 "IPO":2006, 		 "Sector":"Transportation", 	 "Industry":"Marine Transportation"},
      {"Symbol":"UTEK", 	 "Name": "Ultratech, Inc.", 	 "Price": 17.68, 	 "MarketCap": 499830000, 	 "IPO":1993, 		 "Sector":"Technology", 	 "Industry":"Industrial Machinery/Components"},
      {"Symbol":"QURE", 	 "Name": "uniQure N.V.", 	 "Price": 19.83, 	 "MarketCap": 353780000, 	 "IPO":2014, 		 "Sector":"Health Care", 	 "Industry":"Major Pharmaceuticals"},
      {"Symbol":"UNFI", 	 "Name": "United Natural Foods, Inc.", 	 "Price": 81.1, 	 "MarketCap": 4060000000, 	 "IPO":1996, 		 "Sector":"Consumer Non-Durables", 	 "Industry":"Food Distributors"},
      {"Symbol":"USTR", 	 "Name": "United Stationers Inc.", 	 "Price": 44.16, 	 "MarketCap": 1720000000, 	 "IPO":1981, 		 "Sector":"Consumer Services", 	 "Industry":"Paper"},
      {"Symbol":"UTHR", 	 "Name": "United Therapeutics Corporation", 	 "Price": 151.11, 	 "MarketCap": 7180000000, 	 "IPO":1999, 		 "Sector":"Health Care", 	 "Industry":"Major Pharmaceuticals"},
      {"Symbol":"UEIC", 	 "Name": "Universal Electronics Inc.", 	 "Price": 66.32, 	 "MarketCap": 1050000000, 	 "IPO":1993, 		 "Sector":"Consumer Non-Durables", 	 "Industry":"Consumer Electronics/Appliances"},
      {"Symbol":"UFPI", 	 "Name": "Universal Forest Products, Inc.", 	 "Price": 52.29, 	 "MarketCap": 1040000000, 	 "IPO":1993, 		 "Sector":"Basic Industries", 	 "Industry":"Forest Products"},
      {"Symbol":"USAP", 	 "Name": "Universal Stainless & Alloy Products, Inc.", 	 "Price": 23.61, 	 "MarketCap": 166970000, 	 "IPO":1994, 		 "Sector":"Basic Industries", 	 "Industry":"Steel/Iron Ore"},
      {"Symbol":"UACL", 	 "Name": "Universal Truckload Services, Inc.", 	 "Price": 24.84, 	 "MarketCap": 744420000, 	 "IPO":2005, 		 "Sector":"Transportation", 	 "Industry":"Trucking Freight/Courier Services"},
      {"Symbol":"UPLD", 	 "Name": "Upland Software, Inc.", 	 "Price": 7.22, 	 "MarketCap": 109810000, 	 "IPO":2014, 		 "Sector":"Technology", 	 "Industry":"Computer Software: Prepackaged Software"},
      {"Symbol":"URBN", 	 "Name": "Urban Outfitters, Inc.", 	 "Price": 38.465, 	 "MarketCap": 5060000000, 	 "IPO":1993, 		 "Sector":"Consumer Services", 	 "Industry":"Clothing/Shoe/Accessory Stores"},
      {"Symbol":"USAK", 	 "Name": "USA Truck, Inc.", 	 "Price": 30.27, 	 "MarketCap": 318790000, 	 "IPO":1992, 		 "Sector":"Transportation", 	 "Industry":"Trucking Freight/Courier Services"},
      {"Symbol":"UTIW", 	 "Name": "UTi Worldwide Inc.", 	 "Price": 12.1, 	 "MarketCap": 1280000000, 	 "IPO":2000, 		 "Sector":"Transportation", 	 "Industry":"Oil Refining/Marketing"},
      {"Symbol":"UTSI", 	 "Name": "UTStarcom Holdings Corp", 	 "Price": 2.76, 	 "MarketCap": 109790000, 	 "IPO":2000, 		 "Sector":"Consumer Durables", 	 "Industry":"Telecommunications Equipment"},
      {"Symbol":"VALU", 	 "Name": "Value Line, Inc.", 	 "Price": 15.0999, 	 "MarketCap": 148170000, 	 "IPO":1983, 		 "Sector":"Finance", 	 "Industry":"Investment Managers"},
      {"Symbol":"VNDA", 	 "Name": "Vanda Pharmaceuticals Inc.", 	 "Price": 12.37, 	 "MarketCap": 490480000, 	 "IPO":2006, 		 "Sector":"Health Care", 	 "Industry":"Major Pharmaceuticals"},
      {"Symbol":"VRNS", 	 "Name": "Varonis Systems, Inc.", 	 "Price": 37.34, 	 "MarketCap": 917300000, 	 "IPO":2014, 		 "Sector":"Technology", 	 "Industry":"Computer Software: Prepackaged Software"},
      {"Symbol":"VBLT", 	 "Name": "Vascular Biogenics Ltd.", 	 "Price": 14.11, 	 "MarketCap": 280770000, 	 "IPO":2014, 		 "Sector":"Health Care", 	 "Industry":"Major Pharmaceuticals"},
      {"Symbol":"VASC", 	 "Name": "Vascular Solutions, Inc.", 	 "Price": 26.44, 	 "MarketCap": 454820000, 	 "IPO":2000, 		 "Sector":"Health Care", 	 "Industry":"Medical/Dental Instruments"},
      {"Symbol":"WOOF", 	 "Name": "VCA Inc. ", 	 "Price": 52.74, 	 "MarketCap": 4440000000, 	 "IPO":2001, 		 "Sector":"Consumer Non-Durables", 	 "Industry":"Farming/Seeds/Milling"},
      {"Symbol":"VECO", 	 "Name": "Veeco Instruments Inc.", 	 "Price": 30.45, 	 "MarketCap": 1220000000, 	 "IPO":1994, 		 "Sector":"Technology", 	 "Industry":"Industrial Machinery/Components"},
      {"Symbol":"VRA", 	 "Name": "Vera Bradley, Inc.", 	 "Price": 20.18, 	 "MarketCap": 813430000, 	 "IPO":2010, 		 "Sector":"Consumer Non-Durables", 	 "Industry":"Apparel"},
      {"Symbol":"VCYT", 	 "Name": "Veracyte, Inc.", 	 "Price": 8.77, 	 "MarketCap": 197380000, 	 "IPO":2013, 		 "Sector":"Health Care", 	 "Industry":"Medical Specialities"},
      {"Symbol":"VSTM", 	 "Name": "Verastem, Inc.", 	 "Price": 7.93, 	 "MarketCap": 271460000, 	 "IPO":2012, 		 "Sector":"Health Care", 	 "Industry":"Major Pharmaceuticals"},
      {"Symbol":"VRNT", 	 "Name": "Verint Systems Inc.", 	 "Price": 55.64, 	 "MarketCap": 3380000000, 	 "IPO":2002, 		 "Sector":"Technology", 	 "Industry":"EDP Services"},
      {"Symbol":"VRSN", 	 "Name": "VeriSign, Inc.", 	 "Price": 62.15, 	 "MarketCap": 7530000000, 	 "IPO":1998, 		 "Sector":"Technology", 	 "Industry":"EDP Services"},
      {"Symbol":"VRSK", 	 "Name": "Verisk Analytics, Inc.", 	 "Price": 67.9, 	 "MarketCap": 11200000000, 	 "IPO":2009, 		 "Sector":"Technology", 	 "Industry":"EDP Services"},
      {"Symbol":"VBTX", 	 "Name": "Veritex Holdings, Inc.", 	 "Price": 14.45, 	 "MarketCap": 136750000, 	 "IPO":2014, 		 "Sector":"Finance", 	 "Industry":"Major Banks"},
      {"Symbol":"VSAR", 	 "Name": "Versartis, Inc.", 	 "Price": 18.04, 	 "MarketCap": 436470000, 	 "IPO":2014, 		 "Sector":"Health Care", 	 "Industry":"Major Pharmaceuticals"},
      {"Symbol":"VRTX", 	 "Name": "Vertex Pharmaceuticals Incorporated", 	 "Price": 113.66, 	 "MarketCap": 27340000000, 	 "IPO":1991, 		 "Sector":"Health Care", 	 "Industry":"Major Pharmaceuticals"},
      {"Symbol":"VSAT", 	 "Name": "ViaSat, Inc.", 	 "Price": 62.71, 	 "MarketCap": 2990000000, 	 "IPO":1996, 		 "Sector":"Technology", 	 "Industry":"Radio And Television Broadcasting And Communications Equipment"},
      {"Symbol":"VICL", 	 "Name": "Vical Incorporated", 	 "Price": 1.01, 	 "MarketCap": 91230000, 	 "IPO":1993, 		 "Sector":"Health Care", 	 "Industry":"Biotechnology: Biological Products (No Diagnostic Substances)"},
      {"Symbol":"VIDE", 	 "Name": "Video Display Corporation", 	 "Price": 2.45, 	 "MarketCap": 15660000, 	 "IPO":1985, 		 "Sector":"Capital Goods", 	 "Industry":"Electrical Products"},
      {"Symbol":"VIMC", 	 "Name": "Vimicro International Corporation", 	 "Price": 8.585, 	 "MarketCap": 205790000, 	 "IPO":2005, 		 "Sector":"Technology", 	 "Industry":"Semiconductors"},
      {"Symbol":"VNOM", 	 "Name": "Viper Energy Partners LP", 	 "Price": 18.98, 	 "MarketCap": 1510000000, 	 "IPO":2014, 		 "Sector":"Energy", 	 "Industry":"Oil & Gas Production"},
      {"Symbol":"VA", 	 "Name": "Virgin America Inc.", 	 "Price": 34.79, 	 "MarketCap": 1490000000, 	 "IPO":2014, 		 "Sector":"Transportation", 	 "Industry":"Air Freight/Delivery Services"},
      {"Symbol":"VRTU", 	 "Name": "Virtusa Corporation", 	 "Price": 39.08, 	 "MarketCap": 1160000000, 	 "IPO":2007, 		 "Sector":"Technology", 	 "Industry":"EDP Services"},
      {"Symbol":"VISN", 	 "Name": "VisionChina Media, Inc.", 	 "Price": 12.9, 	 "MarketCap": 65510000, 	 "IPO":2007, 		 "Sector":"Technology", 	 "Industry":"Advertising"},
      {"Symbol":"VSCI", 	 "Name": "Vision-Sciences, Inc.", 	 "Price": 0.475, 	 "MarketCap": 22710000, 	 "IPO":1992, 		 "Sector":"Health Care", 	 "Industry":"Biotechnology: Electromedical & Electrotherapeutic Apparatus"},
      {"Symbol":"VTAE", 	 "Name": "Vitae Pharmaceuticals, Inc.", 	 "Price": 14.4, 	 "MarketCap": 314900000, 	 "IPO":2014, 		 "Sector":"Health Care", 	 "Industry":"Major Pharmaceuticals"},
      {"Symbol":"VTL", 	 "Name": "Vital Therapies, Inc.", 	 "Price": 21.43, 	 "MarketCap": 511000000, 	 "IPO":2014, 		 "Sector":"Health Care", 	 "Industry":"Major Pharmaceuticals"},
      {"Symbol":"VTSS", 	 "Name": "Vitesse Semiconductor Corporation", 	 "Price": 3.925, 	 "MarketCap": 270740000, 	 "IPO":1991, 		 "Sector":"Technology", 	 "Industry":"Semiconductors"},
      {"Symbol":"VVUS", 	 "Name": "VIVUS, Inc.", 	 "Price": 2.68, 	 "MarketCap": 277860000, 	 "IPO":1994, 		 "Sector":"Health Care", 	 "Industry":"Major Pharmaceuticals"},
      {"Symbol":"VOLC", 	 "Name": "Volcano Corporation", 	 "Price": 17.98, 	 "MarketCap": 927950000, 	 "IPO":2006, 		 "Sector":"Health Care", 	 "Industry":"Biotechnology: Electromedical & Electrotherapeutic Apparatus"},
      {"Symbol":"VWR", 	 "Name": "VWR Corporation", 	 "Price": 25.7, 	 "MarketCap": 3380000000, 	 "IPO":2014, 		 "Sector":"Consumer Durables", 	 "Industry":"Diversified Electronic Products"},
      {"Symbol":"WRES", 	 "Name": "Warren Resources, Inc.", 	 "Price": 1.27, 	 "MarketCap": 102550000, 	 "IPO":2004, 		 "Sector":"Energy", 	 "Industry":"Oil & Gas Production"},
      {"Symbol":"WAVX", 	 "Name": "Wave Systems Corp.", 	 "Price": 0.73, 	 "MarketCap": 33550000, 	 "IPO":1994, 		 "Sector":"Technology", 	 "Industry":"Computer peripheral equipment"},
      {"Symbol":"WDFC", 	 "Name": "WD-40 Company", 	 "Price": 82.95, 	 "MarketCap": 1210000000, 	 "IPO":1973, 		 "Sector":"Basic Industries", 	 "Industry":"Major Chemicals"},
      {"Symbol":"WBMD", 	 "Name": "WebMD Health Corp", 	 "Price": 39.12, 	 "MarketCap": 1460000000, 	 "IPO":2005, 		 "Sector":"Miscellaneous", 	 "Industry":"Business Services"},
      {"Symbol":"WB", 	 "Name": "Weibo Corporation", 	 "Price": 13.3, 	 "MarketCap": 2660000000, 	 "IPO":2014, 		 "Sector":"Technology", 	 "Industry":"Computer Software: Programming, Data Processing"},
      {"Symbol":"WEBK", 	 "Name": "Wellesley Bancorp, Inc.", 	 "Price": 18.75, 	 "MarketCap": 46020000, 	 "IPO":2012, 		 "Sector":"Finance", 	 "Industry":"Banks"},
      {"Symbol":"WERN", 	 "Name": "Werner Enterprises, Inc.", 	 "Price": 31.06, 	 "MarketCap": 2230000000, 	 "IPO":1986, 		 "Sector":"Transportation", 	 "Industry":"Trucking Freight/Courier Services"},
      {"Symbol":"WSTC", 	 "Name": "West Corporation", 	 "Price": 33.92, 	 "MarketCap": 2860000000, 	 "IPO":2013, 		 "Sector":"Miscellaneous", 	 "Industry":"Business Services"},
      {"Symbol":"WMAR", 	 "Name": "West Marine, Inc.", 	 "Price": 12.17, 	 "MarketCap": 295890000, 	 "IPO":1993, 		 "Sector":"Consumer Durables", 	 "Industry":"Automotive Aftermarket"},
      {"Symbol":"WBB", 	 "Name": "Westbury Bancorp, Inc.", 	 "Price": 16.1276, 	 "MarketCap": 79420000, 	 "IPO":2013, 		 "Sector":"Finance", 	 "Industry":"Major Banks"},
      {"Symbol":"WSTL", 	 "Name": "Westell Technologies, Inc.", 	 "Price": 1.45, 	 "MarketCap": 87280000, 	 "IPO":1995, 		 "Sector":"Public Utilities", 	 "Industry":"Telecommunications Equipment"},
      {"Symbol":"WHLR", 	 "Name": "Wheeler Real Estate Investment Trust, Inc.", 	 "Price": 3.41, 	 "MarketCap": 25390000, 	 "IPO":2012, 		 "Sector":"Consumer Services", 	 "Industry":"Real Estate Investment Trusts"},
      {"Symbol":"WLDN", 	 "Name": "Willdan Group, Inc.", 	 "Price": 14.4, 	 "MarketCap": 109830000, 	 "IPO":2006, 		 "Sector":"Consumer Services", 	 "Industry":"Military/Government/Technical"},
      {"Symbol":"WLFC", 	 "Name": "Willis Lease Finance Corporation", 	 "Price": 21.3, 	 "MarketCap": 179250000, 	 "IPO":1996, 		 "Sector":"Consumer Durables", 	 "Industry":"Industrial Specialties"},
      {"Symbol":"WIX", 	 "Name": "Wix.com Ltd.", 	 "Price": 18.84, 	 "MarketCap": 717600000, 	 "IPO":2013, 		 "Sector":"Technology", 	 "Industry":"Computer Software: Programming, Data Processing"},
      {"Symbol":"WLRHU", 	 "Name": "WL Ross Holding Corp.", 	 "Price": 10.39, 	 "MarketCap": 415600000, 	 "IPO":2014, 		 "Sector":"Finance", 	 "Industry":"Business Services"},
      {"Symbol":"WBKC", 	 "Name": "Wolverine Bancorp, Inc.", 	 "Price": 23.75, 	 "MarketCap": 53870000, 	 "IPO":2011, 		 "Sector":"Finance", 	 "Industry":"Banks"},
      {"Symbol":"WRLD", 	 "Name": "World Acceptance Corporation", 	 "Price": 78.79, 	 "MarketCap": 750980000, 	 "IPO":1991, 		 "Sector":"Finance", 	 "Industry":"Finance: Consumer Services"},
      {"Symbol":"WMGI", 	 "Name": "Wright Medical Group, Inc.", 	 "Price": 25.68, 	 "MarketCap": 1310000000, 	 "IPO":2001, 		 "Sector":"Health Care", 	 "Industry":"Industrial Specialties"},
      {"Symbol":"WYNN", 	 "Name": "Wynn Resorts, Limited", 	 "Price": 159.34, 	 "MarketCap": 16150000000, 	 "IPO":2002, 		 "Sector":"Consumer Services", 	 "Industry":"Hotels/Resorts"},
      {"Symbol":"XNCR", 	 "Name": "Xencor, Inc.", 	 "Price": 15.47, 	 "MarketCap": 486410000, 	 "IPO":2013, 		 "Sector":"Health Care", 	 "Industry":"Major Pharmaceuticals"},
      {"Symbol":"XENE", 	 "Name": "Xenon Pharmaceuticals Inc.", 	 "Price": 16.37, 	 "MarketCap": 232150000, 	 "IPO":2014, 		 "Sector":"Health Care", 	 "Industry":"Major Pharmaceuticals"},
      {"Symbol":"XNPT", 	 "Name": "XenoPort, Inc.", 	 "Price": 6.69, 	 "MarketCap": 416370000, 	 "IPO":2005, 		 "Sector":"Health Care", 	 "Industry":"Major Pharmaceuticals"},
      {"Symbol":"XGTI", 	 "Name": "XG Technology, Inc", 	 "Price": 0.431, 	 "MarketCap": 10780000, 	 "IPO":2013, 		 "Sector":"Consumer Durables", 	 "Industry":"Telecommunications Equipment"},
      {"Symbol":"XLNX", 	 "Name": "Xilinx, Inc.", 	 "Price": 41.51, 	 "MarketCap": 10850000000, 	 "IPO":1990, 		 "Sector":"Technology", 	 "Industry":"Semiconductors"},
      {"Symbol":"XOMA", 	 "Name": "XOMA Corporation", 	 "Price": 3.41, 	 "MarketCap": 395190000, 	 "IPO":1986, 		 "Sector":"Health Care", 	 "Industry":"Major Pharmaceuticals"},
      {"Symbol":"XOOM", 	 "Name": "Xoom Corporation", 	 "Price": 15.77, 	 "MarketCap": 606320000, 	 "IPO":2013, 		 "Sector":"Finance", 	 "Industry":"Investment Bankers/Brokers/Service"},
      {"Symbol":"XNET", 	 "Name": "Xunlei Limited", 	 "Price": 7.93, 	 "MarketCap": 515570000, 	 "IPO":2014, 		 "Sector":"Technology", 	 "Industry":"Computer Software: Prepackaged Software"},
      {"Symbol":"YHOO", 	 "Name": "Yahoo! Inc.", 	 "Price": 44.42, 	 "MarketCap": 42080000000, 	 "IPO":1996, 		 "Sector":"Technology", 	 "Industry":"EDP Services"},
      {"Symbol":"YNDX", 	 "Name": "Yandex N.V.", 	 "Price": 17, 	 "MarketCap": 5410000000, 	 "IPO":2011, 		 "Sector":"Technology", 	 "Industry":"Computer Software: Programming, Data Processing"},
      {"Symbol":"YDLE", 	 "Name": "Yodlee, Inc.", 	 "Price": 13.07, 	 "MarketCap": 382060000, 	 "IPO":2014, 		 "Sector":"Technology", 	 "Industry":"Computer Software: Prepackaged Software"},
      {"Symbol":"YY", 	 "Name": "YY Inc.", 	 "Price": 63.08, 	 "MarketCap": 3570000000, 	 "IPO":2012, 		 "Sector":"Technology", 	 "Industry":"EDP Services"},
      {"Symbol":"ZFGN", 	 "Name": "Zafgen, Inc.", 	 "Price": 39.06, 	 "MarketCap": 1040000000, 	 "IPO":2014, 		 "Sector":"Health Care", 	 "Industry":"Major Pharmaceuticals"},
      {"Symbol":"ZBRA", 	 "Name": "Zebra Technologies Corporation", 	 "Price": 90.525, 	 "MarketCap": 4610000000, 	 "IPO":1991, 		 "Sector":"Technology", 	 "Industry":"Industrial Machinery/Components"},
      {"Symbol":"ZLTQ", 	 "Name": "ZELTIQ Aesthetics, Inc.", 	 "Price": 34.48, 	 "MarketCap": 1310000000, 	 "IPO":2011, 		 "Sector":"Health Care", 	 "Industry":"Biotechnology: Electromedical & Electrotherapeutic Apparatus"},
      {"Symbol":"Z", 	 "Name": "Zillow, Inc.", 	 "Price": 106.5, 	 "MarketCap": 3670000000, 	 "IPO":2011, 		 "Sector":"Miscellaneous", 	 "Industry":"Business Services"},
      {"Symbol":"ZGNX", 	 "Name": "Zogenix, Inc.", 	 "Price": 1.43, 	 "MarketCap": 218850000, 	 "IPO":2010, 		 "Sector":"Health Care", 	 "Industry":"Major Pharmaceuticals"},
      {"Symbol":"ZSPH", 	 "Name": "ZS Pharma, Inc.", 	 "Price": 46.77, 	 "MarketCap": 973720000, 	 "IPO":2014, 		 "Sector":"Health Care", 	 "Industry":"Major Pharmaceuticals"},
      {"Symbol":"ZU", 	 "Name": "zulily, inc.", 	 "Price": 14.22, 	 "MarketCap": 1780000000, 	 "IPO":2013, 		 "Sector":"Consumer Services", 	 "Industry":"Catalog/Specialty Distribution"},
      {"Symbol":"ZUMZ", 	 "Name": "Zumiez Inc.", 	 "Price": 38.84, 	 "MarketCap": 1140000000, 	 "IPO":2005, 		 "Sector":"Consumer Services", 	 "Industry":"Clothing/Shoe/Accessory Stores"},
      {"Symbol":"ZNGA", 	 "Name": "Zynga Inc.", 	 "Price": 2.24, 	 "MarketCap": 2020000000, 	 "IPO":2011, 		 "Sector":"Technology", 	 "Industry":"EDP Services"}
    ]);
  },

  filter: function(filterString, sortColumn, sortAscending, page, pageSize) {
    console.log("Filter: "+filterString);

    // Apply filters
    var filteredData = this.db();

    if (filterString != "") {
      var filterArray = JSON.parse(filterString);
      for (i = 0; i < filterArray.length; i++) {
        filter = filterArray[i];

        // Filter Symbol
        if (filter.category == "Symbol") {
          if (filter.operator == "==") {
            filteredData = filteredData.filter({Symbol:{'==':filter.value}});
          } else if (filter.operator == "!=") {
            filteredData = filteredData.filter({Symbol:{'!==':filter.value}});
          }
        }

        // Filter Name
        else if (filter.category == "Name") {
          if (filter.operator == "==") {
            filteredData = filteredData.filter({Name:{'==':filter.value}});
          } else if (filter.operator == "!=") {
            filteredData = filteredData.filter({Name:{'!==':filter.value}});
          } else if (filter.operator == "contains") {
            filteredData = filteredData.filter({Name:{'likenocase':filter.value}});
          } else if (filter.operator == "!contains") {
            filteredData = filteredData.filter({Name:{'!likenocase':filter.value}});
          }
        }

        // Filter Sector
        else if (filter.category == "Sector") {
          if (filter.operator == "==") {
            filteredData = filteredData.filter({Sector:{'==':filter.value}});
          } else if (filter.operator == "!=") {
            filteredData = filteredData.filter({Sector:{'!==':filter.value}});
          }
        }

        // Filter Industry
        else if (filter.category == "Industry") {
          if (filter.operator == "==") {
            filteredData = filteredData.filter({Industry:{'==':filter.value}});
          } else if (filter.operator == "!=") {
            filteredData = filteredData.filter({Industry:{'!==':filter.value}});
          }
        }

        // Filter Price
        else if (filter.category == "Price") {
          if (filter.operator == "==") {
            filteredData = filteredData.filter({Price:{'==':filter.value}});
          } else if (filter.operator == "!=") {
            filteredData = filteredData.filter({Price:{'!==':filter.value}});
          } else if (filter.operator == "<") {
            filteredData = filteredData.filter({Price:{'<':filter.value}});
          } else if (filter.operator == "<=") {
            filteredData = filteredData.filter({Price:{'<=':filter.value}});
          } else if (filter.operator == ">") {
            filteredData = filteredData.filter({Price:{'>':filter.value}});
          } else if (filter.operator == ">=") {
            filteredData = filteredData.filter({Price:{'>=':filter.value}});
          }
        }

        // Filter MarketCap
        else if (filter.category == "MarketCap") {
          if (filter.operator == "==") {
            filteredData = filteredData.filter({MarketCap:{'==':filter.value}});
          } else if (filter.operator == "!=") {
            filteredData = filteredData.filter({MarketCap:{'!==':filter.value}});
          } else if (filter.operator == "<") {
            filteredData = filteredData.filter({MarketCap:{'<':filter.value}});
          } else if (filter.operator == "<=") {
            filteredData = filteredData.filter({MarketCap:{'<=':filter.value}});
          } else if (filter.operator == ">") {
            filteredData = filteredData.filter({MarketCap:{'>':filter.value}});
          } else if (filter.operator == ">=") {
            filteredData = filteredData.filter({MarketCap:{'>=':filter.value}});
          }
        }

        // Filter IPO
        else if (filter.category == "IPO") {
          year = filter.value.substring(0, 4);
          console.log("year:"+year);
          if (filter.operator == "==") {
            filteredData = filteredData.filter({IPO:{'==':year}});
          } else if (filter.operator == "!=") {
            filteredData = filteredData.filter({IPO:{'!==':year}});
          } else if (filter.operator == "<") {
            filteredData = filteredData.filter({IPO:{'<':year}});
          } else if (filter.operator == "<=") {
            filteredData = filteredData.filter({IPO:{'<=':year}});
          } else if (filter.operator == ">") {
            filteredData = filteredData.filter({IPO:{'>':year}});
          } else if (filter.operator == ">=") {
            filteredData = filteredData.filter({IPO:{'>=':year}});
          }
        }



      }
    }


    // Get count
    var totalResults = filteredData.count();

    // Set ordering
    var ordering = "Symbol asec";
    if (sortColumn != "") {
      ordering = sortColumn;
      if (sortAscending) {
        ordering += " desc";
      } else {
        ordering += " asec";
      }
    }
    // Get data with limits
    var results = filteredData.order(ordering).start(pageSize*page).limit(pageSize).get();

    // Taffy returns my data with "___id" and "___s" added, so delete those things.
    // (There is likely a cleaner way to do this)
    for (i = 0; i < results.length; i++) {
      delete results[i]["___id"];
      delete results[i]["___s"]
    }

    return {
      results: results,
      totalResults: totalResults,
      pageSize: pageSize
    };
  },

  getSymbolOptions: function() {
    return this.db().distinct("Symbol");
  },

  getSectorOptions: function() {
    return this.db().distinct("Sector");
  },

  getIndustryOptions: function() {
    return this.db().distinct("Industry");
  },

  render: function() {
    return (React.createElement("div", null));
  }
});

module.exports = ExampleData;

},{"./taffy-min.js":"/mnt/hgfs/deb/react-structured-filter-github/master/example/taffy-min.js","react":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/react.js"}],"/mnt/hgfs/deb/react-structured-filter-github/master/example/ExampleTable.jsx":[function(require,module,exports){
var React = require('react');
var Griddle = require('griddle-react');
var GriddleWithCallback = require('./GriddleWithCallback.jsx');
var Tokenizer = require('../src/react-typeahead/react-typeahead.js').Tokenizer;

var ExampleData = require('./ExampleData.jsx');

var ExampleTable = React.createClass({displayName: "ExampleTable",
  getInitialState: function() {
    return {
      filter: "",
    }
  },


  getJsonData: function(filterString, sortColumn, sortAscending, page, pageSize, callback) {
    thisComponent = this;

    if (filterString==undefined) {
      filterString = "";
    }
    if (sortColumn==undefined) {
      sortColumn = "";
    }

    // Normally you would make a Reqwest here to the server
    var results = this.refs.ExampleData.filter(filterString, sortColumn, sortAscending, page, pageSize);
    callback(results);
  },


  updateFilter: function(filter){
    // Set our filter to json data of the current filter tokens
    this.setState({filter: JSON.stringify(filter)});
  },


  getSymbolOptions: function() {
    return this.refs.ExampleData.getSymbolOptions();
  },

  getSectorOptions: function() {
    return this.refs.ExampleData.getSectorOptions();
  },

  getIndustryOptions: function() {
    return this.refs.ExampleData.getIndustryOptions();
  },


  render: function(){
    return (
      React.createElement("div", null, 
        React.createElement(Tokenizer, {
          placeholder: "", 
          options: [
            {category:"Symbol", type:"textoptions", options:this.getSymbolOptions},
            {category:"Name",type:"text"},
            {category:"Price",type:"number"},
            {category:"MarketCap",type:"number"},
            {category:"IPO", type:"date"},
            {category:"Sector", type:"textoptions", options:this.getSectorOptions},
            {category:"Industry", type:"textoptions", options:this.getIndustryOptions}
            ], 
          customClasses: {
            input: "filter-tokenizer-text-input",
            results: "filter-tokenizer-list__container",
            listItem: "filter-tokenizer-list__item"
          }, 
          updateFilter: this.updateFilter, 
          onTokenAdd: this.updateFilter, 
          onTokenRemove: this.updateFilter}
        ), 
        React.createElement(GriddleWithCallback, {
          getExternalResults: this.getJsonData, filter: this.state.filter, 
          resultsPerPage: 10}
        ), 
        React.createElement(ExampleData, {ref: "ExampleData"})
      )
    )
  }
});
module.exports = ExampleTable;

},{"../src/react-typeahead/react-typeahead.js":"/mnt/hgfs/deb/react-structured-filter-github/master/src/react-typeahead/react-typeahead.js","./ExampleData.jsx":"/mnt/hgfs/deb/react-structured-filter-github/master/example/ExampleData.jsx","./GriddleWithCallback.jsx":"/mnt/hgfs/deb/react-structured-filter-github/master/example/GriddleWithCallback.jsx","griddle-react":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/griddle-react/modules/griddle.jsx.js","react":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/react.js"}],"/mnt/hgfs/deb/react-structured-filter-github/master/example/GriddleWithCallback.jsx":[function(require,module,exports){
var React = require('react');
var _ = require('underscore');
var Griddle = require('griddle-react');

var Loading = React.createClass({displayName: "Loading",
  getDefaultProps: function(){
    return {
      loadingText: "Loading"
    }
  },
  render: function(){
    return React.createElement("div", {className: "loading"}, this.props.loadingText);
  }
});

var NextArrow = React.createElement("i", {className: "glyphicon glyphicon-chevron-right"}, null);
var PreviousArrow = React.createElement("i", {className: "glyphicon glyphicon-chevron-left"}, null);
var SettingsIconComponent = React.createElement("i", {className: "glyphicon glyphicon-cog"}, null);

var GriddleWithCallback = React.createClass({displayName: "GriddleWithCallback",
  /**
   *
   */
  getDefaultProps: function(){
    return {
      getExternalResults: null,
      resultsPerPage: 10,
      loadingComponent: null,
      enableInfiniteScroll: false,
      filter: ""
    }
  },


  /**
   *
   */
  getInitialState: function(){
    var initial = { "results": [],
        "page": 0,
        "maxPage": 0,
        "sortColumn":null,
        "sortAscending":true
    };

    // If we need to get external results, grab the results.
    initial.isLoading = true; // Initialize to 'loading'

    return initial;
  },


  /**
   * Called when component mounts
   */
  componentDidMount: function(){
    var state = this.state;
    state.pageSize = this.props.resultsPerPage;

    var that = this;

    if (!this.hasExternalResults()) {
      console.error("When using GriddleWithCallback, a getExternalResults callback must be supplied.");
      return;
    }

    // Update the state with external results when mounting
    state = this.updateStateWithExternalResults(state, function(updatedState) {
      that.setState(updatedState);
    });
  },


  /**
   *
   */
  componentWillReceiveProps: function(nextProps) {
    var state = this.state,
    that = this;

    var state = {
      page: 0,
      filter: nextProps.filter
    }

    this.updateStateWithExternalResults(state, function(updatedState) {
      //if filter is null or undefined reset the filter.
      if (_.isUndefined(nextProps.filter) || _.isNull(nextProps.filter) || _.isEmpty(nextProps.filter)){
        updatedState.filter = nextProps.filter;
        updatedState.filteredResults = null;
      }

      // Set the state.
      that.setState(updatedState);
    });
  },


  /**
   * Utility function
   */
  setDefault: function(original, value){
    return typeof original === 'undefined' ? value : original;
  },


  /**
   *
   */
  setPage: function(index, pageSize){
    //This should interact with the data source to get the page at the given index
    var that = this;
    var state = {
      page: index,
      pageSize: this.setDefault(pageSize, this.state.pageSize)
    };

    this.updateStateWithExternalResults(state, function(updatedState) {
      that.setState(updatedState);
    });
  },

  /**
   *
   */
  getExternalResults: function(state, callback) {
    var filter,
    sortColumn,
    sortAscending,
    page,
    pageSize;

    // Fill the search properties.
    if (state !== undefined && state.filter !== undefined) {
      filter = state.filter;
    } else {
      filter = this.state.filter;
    }

    if (state !== undefined && state.sortColumn !== undefined) {
      sortColumn = state.sortColumn;
    } else {
      sortColumn = this.state.sortColumn;
    }

    sortColumn = _.isEmpty(sortColumn) ? this.props.initialSort : sortColumn;

    if (state !== undefined && state.sortAscending !== undefined) {
      sortAscending = state.sortAscending;
    } else {
      sortAscending = this.state.sortAscending;
    }

    if (state !== undefined && state.page !== undefined) {
      page = state.page;
    } else {
      page = this.state.page;
    }

    if (state !== undefined && state.pageSize !== undefined) {
      pageSize = state.pageSize;
    } else {
      pageSize = this.state.pageSize;
    }

    // Obtain the results
    this.props.getExternalResults(filter, sortColumn, sortAscending, page, pageSize, callback);
  },


  /**
   *
   */
  updateStateWithExternalResults: function(state, callback) {
    var that = this;

    // Update the table to indicate that it's loading.
    this.setState({ isLoading: true });
    // Grab the results.
    this.getExternalResults(state, function(externalResults) {
      // Fill the state result properties
      if (that.props.enableInfiniteScroll && that.state.results) {
        state.results = that.state.results.concat(externalResults.results);
      } else {
        state.results = externalResults.results;
      }

      state.totalResults = externalResults.totalResults;
      state.maxPage = that.getMaxPage(externalResults.pageSize, externalResults.totalResults);
      state.isLoading = false;

      // If the current page is larger than the max page, reset the page.
      if (state.page >= state.maxPage) {
        state.page = state.maxPage - 1;
      }

      callback(state);
    });
  },


  /**
   *
   */
  getMaxPage: function(pageSize, totalResults){
    if (!totalResults) {
      totalResults = this.state.totalResults;
    }

    var maxPage = Math.ceil(totalResults / pageSize);
    return maxPage;
  },


  /**
   *
   */
  hasExternalResults: function() {
    return typeof(this.props.getExternalResults) === 'function';
  },


  /**
   *
   */
  changeSort: function(sort, sortAscending){
    var that = this;

    // This should change the sort for the given column
    var state = {
      page:0,
      sortColumn: sort,
      sortAscending: sortAscending
    };

    this.updateStateWithExternalResults(state, function(updatedState) {
      that.setState(updatedState);
    });
  },

  setFilter: function(filter) {
    // no-op
  },


  /**
   *
   */
  setPageSize: function(size){
    this.setPage(0, size);
  },


  /**
   *
   */
  render: function(){
    return React.createElement(Griddle, React.__spread({},  this.props, {useExternal: true, externalSetPage: this.setPage, 
      externalChangeSort: this.changeSort, externalSetFilter: this.setFilter, 
      externalSetPageSize: this.setPageSize, externalMaxPage: this.state.maxPage, 
      externalCurrentPage: this.state.page, results: this.state.results, tableClassName: "table", resultsPerPage: this.state.pageSize, 
      externalSortColumn: this.state.sortColumn, externalSortAscending: this.state.sortAscending, 
      externalLoadingComponent: this.props.loadingComponent, externalIsLoading: this.state.isLoading, 

      loadingComponent: Loading, 
      nextIconComponent: NextArrow, 
      previousIconComponent: PreviousArrow, 
      settingsIconComponent: SettingsIconComponent, 
      settingsText: "Settings ", 
      showSettings: true, 
      useGriddleStyles: false, 
      enableSort: true, 
      showFilter: false})
      )
  }
});

module.exports = GriddleWithCallback;

},{"griddle-react":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/griddle-react/modules/griddle.jsx.js","react":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/react.js","underscore":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/underscore/underscore.js"}],"/mnt/hgfs/deb/react-structured-filter-github/master/example/taffy-min.js":[function(require,module,exports){
var TAFFY,exports,T;(function(){var f,q,p,t,d,b,n,m,r,e,c,u,w,v,h,g,j,o,i,l,a,s,k;if(!TAFFY){d="2.7";b=1;n="000000";m=1000;r={};e=function(x){if(TAFFY.isArray(x)||TAFFY.isObject(x)){return x}else{return JSON.parse(x)}};i=function(y,x){return l(y,function(z){return x.indexOf(z)>=0})};l=function(A,z,y){var x=[];if(A==null){return x}if(Array.prototype.filter&&A.filter===Array.prototype.filter){return A.filter(z,y)}c(A,function(D,B,C){if(z.call(y,D,B,C)){x[x.length]=D}});return x};k=function(x){return Object.prototype.toString.call(x)==="[object RegExp]"};s=function(z){var x=T.isArray(z)?[]:T.isObject(z)?{}:null;if(z===null){return z}for(var y in z){x[y]=k(z[y])?z[y].toString():T.isArray(z[y])||T.isObject(z[y])?s(z[y]):z[y]}return x};a=function(y){var x=JSON.stringify(y);if(x.match(/regex/)===null){return x}return JSON.stringify(s(y))};c=function(B,A,C){var E,D,z,F;if(B&&((T.isArray(B)&&B.length===1)||(!T.isArray(B)))){A((T.isArray(B))?B[0]:B,0)}else{for(E,D,z=0,B=(T.isArray(B))?B:[B],F=B.length;z<F;z++){D=B[z];if(!T.isUndefined(D)||(C||false)){E=A(D,z);if(E===T.EXIT){break}}}}};u=function(C,z){var y=0,B,A;for(A in C){if(C.hasOwnProperty(A)){B=z(C[A],A,y++);if(B===T.EXIT){break}}}};r.extend=function(x,y){r[x]=function(){return y.apply(this,arguments)}};w=function(y){var x;if(T.isString(y)&&/[t][0-9]*[r][0-9]*/i.test(y)){return true}if(T.isObject(y)&&y.___id&&y.___s){return true}if(T.isArray(y)){x=true;c(y,function(z){if(!w(z)){x=false;return TAFFY.EXIT}});return x}return false};h=function(z,y){var x=true;c(y,function(A){switch(T.typeOf(A)){case"function":if(!A.apply(z)){x=false;return TAFFY.EXIT}break;case"array":x=(A.length===1)?(h(z,A[0])):(A.length===2)?(h(z,A[0])||h(z,A[1])):(A.length===3)?(h(z,A[0])||h(z,A[1])||h(z,A[2])):(A.length===4)?(h(z,A[0])||h(z,A[1])||h(z,A[2])||h(z,A[3])):false;if(A.length>4){c(A,function(B){if(h(z,B)){x=true}})}break}});return x};v=function(y){var x=[];if(T.isString(y)&&/[t][0-9]*[r][0-9]*/i.test(y)){y={___id:y}}if(T.isArray(y)){c(y,function(z){x.push(v(z))});y=function(){var A=this,z=false;c(x,function(B){if(h(A,B)){z=true}});return z};return y}if(T.isObject(y)){if(T.isObject(y)&&y.___id&&y.___s){y={___id:y.___id}}u(y,function(z,A){if(!T.isObject(z)){z={is:z}}u(z,function(B,C){var E=[],D;D=(C==="hasAll")?function(F,G){G(F)}:c;D(B,function(G){var F=true,H=false,I;I=function(){var N=this[A],M="==",O="!=",Q="===",R="<",L=">",S="<=",P=">=",K="!==",J;if(typeof N==="undefined"){return false}if((C.indexOf("!")===0)&&C!==O&&C!==K){F=false;C=C.substring(1,C.length)}J=((C==="regex")?(G.test(N)):(C==="lt"||C===R)?(N<G):(C==="gt"||C===L)?(N>G):(C==="lte"||C===S)?(N<=G):(C==="gte"||C===P)?(N>=G):(C==="left")?(N.indexOf(G)===0):(C==="leftnocase")?(N.toLowerCase().indexOf(G.toLowerCase())===0):(C==="right")?(N.substring((N.length-G.length))===G):(C==="rightnocase")?(N.toLowerCase().substring((N.length-G.length))===G.toLowerCase()):(C==="like")?(N.indexOf(G)>=0):(C==="likenocase")?(N.toLowerCase().indexOf(G.toLowerCase())>=0):(C===Q||C==="is")?(N===G):(C===M)?(N==G):(C===K)?(N!==G):(C===O)?(N!=G):(C==="isnocase")?(N.toLowerCase?N.toLowerCase()===G.toLowerCase():N===G):(C==="has")?(T.has(N,G)):(C==="hasall")?(T.hasAll(N,G)):(C==="contains")?(TAFFY.isArray(N)&&N.indexOf(G)>-1):(C.indexOf("is")===-1&&!TAFFY.isNull(N)&&!TAFFY.isUndefined(N)&&!TAFFY.isObject(G)&&!TAFFY.isArray(G))?(G===N[C]):(T[C]&&T.isFunction(T[C])&&C.indexOf("is")===0)?T[C](N)===G:(T[C]&&T.isFunction(T[C]))?T[C](N,G):(false));J=(J&&!F)?false:(!J&&!F)?true:J;return J};E.push(I)});if(E.length===1){x.push(E[0])}else{x.push(function(){var G=this,F=false;c(E,function(H){if(H.apply(G)){F=true}});return F})}})});y=function(){var A=this,z=true;z=(x.length===1&&!x[0].apply(A))?false:(x.length===2&&(!x[0].apply(A)||!x[1].apply(A)))?false:(x.length===3&&(!x[0].apply(A)||!x[1].apply(A)||!x[2].apply(A)))?false:(x.length===4&&(!x[0].apply(A)||!x[1].apply(A)||!x[2].apply(A)||!x[3].apply(A)))?false:true;if(x.length>4){c(x,function(B){if(!h(A,B)){z=false}})}return z};return y}if(T.isFunction(y)){return y}};j=function(x,y){var z=function(B,A){var C=0;T.each(y,function(F){var H,E,D,I,G;H=F.split(" ");E=H[0];D=(H.length===1)?"logical":H[1];if(D==="logical"){I=g(B[E]);G=g(A[E]);T.each((I.length<=G.length)?I:G,function(J,K){if(I[K]<G[K]){C=-1;return TAFFY.EXIT}else{if(I[K]>G[K]){C=1;return TAFFY.EXIT}}})}else{if(D==="logicaldesc"){I=g(B[E]);G=g(A[E]);T.each((I.length<=G.length)?I:G,function(J,K){if(I[K]>G[K]){C=-1;return TAFFY.EXIT}else{if(I[K]<G[K]){C=1;return TAFFY.EXIT}}})}else{if(D==="asec"&&B[E]<A[E]){C=-1;return T.EXIT}else{if(D==="asec"&&B[E]>A[E]){C=1;return T.EXIT}else{if(D==="desc"&&B[E]>A[E]){C=-1;return T.EXIT}else{if(D==="desc"&&B[E]<A[E]){C=1;return T.EXIT}}}}}}if(C===0&&D==="logical"&&I.length<G.length){C=-1}else{if(C===0&&D==="logical"&&I.length>G.length){C=1}else{if(C===0&&D==="logicaldesc"&&I.length>G.length){C=-1}else{if(C===0&&D==="logicaldesc"&&I.length<G.length){C=1}}}}if(C!==0){return T.EXIT}});return C};return(x&&x.push)?x.sort(z):x};(function(){var x={},y=0;g=function(z){if(y>m){x={};y=0}return x["_"+z]||(function(){var D=String(z),C=[],G="_",B="",A,E,F;for(A=0,E=D.length;A<E;A++){F=D.charCodeAt(A);if((F>=48&&F<=57)||F===46){if(B!=="n"){B="n";C.push(G.toLowerCase());G=""}G=G+D.charAt(A)}else{if(B!=="s"){B="s";C.push(parseFloat(G));G=""}G=G+D.charAt(A)}}C.push((B==="n")?parseFloat(G):G.toLowerCase());C.shift();x["_"+z]=C;y++;return C}())}}());o=function(){this.context({results:this.getDBI().query(this.context())})};r.extend("filter",function(){var y=TAFFY.mergeObj(this.context(),{run:null}),x=[];c(y.q,function(z){x.push(z)});y.q=x;c(arguments,function(z){y.q.push(v(z));y.filterRaw.push(z)});return this.getroot(y)});r.extend("order",function(z){z=z.split(",");var y=[],A;c(z,function(x){y.push(x.replace(/^\s*/,"").replace(/\s*$/,""))});A=TAFFY.mergeObj(this.context(),{sort:null});A.order=y;return this.getroot(A)});r.extend("limit",function(z){var y=TAFFY.mergeObj(this.context(),{}),x;y.limit=z;if(y.run&&y.sort){x=[];c(y.results,function(B,A){if((A+1)>z){return TAFFY.EXIT}x.push(B)});y.results=x}return this.getroot(y)});r.extend("start",function(z){var y=TAFFY.mergeObj(this.context(),{}),x;y.start=z;if(y.run&&y.sort&&!y.limit){x=[];c(y.results,function(B,A){if((A+1)>z){x.push(B)}});y.results=x}else{y=TAFFY.mergeObj(this.context(),{run:null,start:z})}return this.getroot(y)});r.extend("update",function(A,z,x){var B=true,D={},y=arguments,C;if(TAFFY.isString(A)&&(arguments.length===2||arguments.length===3)){D[A]=z;if(arguments.length===3){B=x}}else{D=A;if(y.length===2){B=z}}C=this;o.call(this);c(this.context().results,function(E){var F=D;if(TAFFY.isFunction(F)){F=F.apply(TAFFY.mergeObj(E,{}))}else{if(T.isFunction(F)){F=F(TAFFY.mergeObj(E,{}))}}if(TAFFY.isObject(F)){C.getDBI().update(E.___id,F,B)}});if(this.context().results.length){this.context({run:null})}return this});r.extend("remove",function(x){var y=this,z=0;o.call(this);c(this.context().results,function(A){y.getDBI().remove(A.___id);z++});if(this.context().results.length){this.context({run:null});y.getDBI().removeCommit(x)}return z});r.extend("count",function(){o.call(this);return this.context().results.length});r.extend("callback",function(z,x){if(z){var y=this;setTimeout(function(){o.call(y);z.call(y.getroot(y.context()))},x||0)}return null});r.extend("get",function(){o.call(this);return this.context().results});r.extend("stringify",function(){return JSON.stringify(this.get())});r.extend("first",function(){o.call(this);return this.context().results[0]||false});r.extend("last",function(){o.call(this);return this.context().results[this.context().results.length-1]||false});r.extend("sum",function(){var y=0,x=this;o.call(x);c(arguments,function(z){c(x.context().results,function(A){y=y+(A[z]||0)})});return y});r.extend("min",function(y){var x=null;o.call(this);c(this.context().results,function(z){if(x===null||z[y]<x){x=z[y]}});return x});(function(){var x=(function(){var A,y,z;A=function(E,G,D){var C,F,H,B;if(D.length===2){C=E[D[0]];H="===";F=G[D[1]]}else{C=E[D[0]];H=D[1];F=G[D[2]]}switch(H){case"===":return C===F;case"!==":return C!==F;case"<":return C<F;case">":return C>F;case"<=":return C<=F;case">=":return C>=F;case"==":return C==F;case"!=":return C!=F;default:throw String(H)+" is not supported"}};y=function(C,F){var B={},D,E;for(D in C){if(C.hasOwnProperty(D)){B[D]=C[D]}}for(D in F){if(F.hasOwnProperty(D)&&D!=="___id"&&D!=="___s"){E=!TAFFY.isUndefined(B[D])?"right_":"";B[E+String(D)]=F[D]}}return B};z=function(F){var B,D,C=arguments,E=C.length,G=[];if(typeof F.filter!=="function"){if(F.TAFFY){B=F()}else{throw"TAFFY DB or result not supplied"}}else{B=F}this.context({results:this.getDBI().query(this.context())});TAFFY.each(this.context().results,function(H){B.each(function(K){var I,J=true;CONDITION:for(D=1;D<E;D++){I=C[D];if(typeof I==="function"){J=I(H,K)}else{if(typeof I==="object"&&I.length){J=A(H,K,I)}else{J=false}}if(!J){break CONDITION}}if(J){G.push(y(H,K))}})});return TAFFY(G)()};return z}());r.extend("join",x)}());r.extend("max",function(y){var x=null;o.call(this);c(this.context().results,function(z){if(x===null||z[y]>x){x=z[y]}});return x});r.extend("select",function(){var y=[],x=arguments;o.call(this);if(arguments.length===1){c(this.context().results,function(z){y.push(z[x[0]])})}else{c(this.context().results,function(z){var A=[];c(x,function(B){A.push(z[B])});y.push(A)})}return y});r.extend("distinct",function(){var y=[],x=arguments;o.call(this);if(arguments.length===1){c(this.context().results,function(A){var z=A[x[0]],B=false;c(y,function(C){if(z===C){B=true;return TAFFY.EXIT}});if(!B){y.push(z)}})}else{c(this.context().results,function(z){var B=[],A=false;c(x,function(C){B.push(z[C])});c(y,function(D){var C=true;c(x,function(F,E){if(B[E]!==D[E]){C=false;return TAFFY.EXIT}});if(C){A=true;return TAFFY.EXIT}});if(!A){y.push(B)}})}return y});r.extend("supplant",function(y,x){var z=[];o.call(this);c(this.context().results,function(A){z.push(y.replace(/\{([^\{\}]*)\}/g,function(C,B){var D=A[B];return typeof D==="string"||typeof D==="number"?D:C}))});return(!x)?z.join(""):z});r.extend("each",function(x){o.call(this);c(this.context().results,x);return this});r.extend("map",function(x){var y=[];o.call(this);c(this.context().results,function(z){y.push(x(z))});return y});T=function(F){var C=[],G={},D=1,z={template:false,onInsert:false,onUpdate:false,onRemove:false,onDBChange:false,storageName:false,forcePropertyCase:null,cacheSize:100,name:""},B=new Date(),A=0,y=0,I={},E,x,H;x=function(L){var K=[],J=false;if(L.length===0){return C}c(L,function(M){if(T.isString(M)&&/[t][0-9]*[r][0-9]*/i.test(M)&&C[G[M]]){K.push(C[G[M]]);J=true}if(T.isObject(M)&&M.___id&&M.___s&&C[G[M.___id]]){K.push(C[G[M.___id]]);J=true}if(T.isArray(M)){c(M,function(N){c(x(N),function(O){K.push(O)})})}});if(J&&K.length>1){K=[]}return K};E={dm:function(J){if(J){B=J;I={};A=0;y=0}if(z.onDBChange){setTimeout(function(){z.onDBChange.call(C)},0)}if(z.storageName){setTimeout(function(){localStorage.setItem("taffy_"+z.storageName,JSON.stringify(C))})}return B},insert:function(M,N){var L=[],K=[],J=e(M);c(J,function(P,Q){var O,R;if(T.isArray(P)&&Q===0){c(P,function(S){L.push((z.forcePropertyCase==="lower")?S.toLowerCase():(z.forcePropertyCase==="upper")?S.toUpperCase():S)});return true}else{if(T.isArray(P)){O={};c(P,function(U,S){O[L[S]]=U});P=O}else{if(T.isObject(P)&&z.forcePropertyCase){R={};u(P,function(U,S){R[(z.forcePropertyCase==="lower")?S.toLowerCase():(z.forcePropertyCase==="upper")?S.toUpperCase():S]=P[S]});P=R}}}D++;P.___id="T"+String(n+b).slice(-6)+"R"+String(n+D).slice(-6);P.___s=true;K.push(P.___id);if(z.template){P=T.mergeObj(z.template,P)}C.push(P);G[P.___id]=C.length-1;if(z.onInsert&&(N||TAFFY.isUndefined(N))){z.onInsert.call(P)}E.dm(new Date())});return H(K)},sort:function(J){C=j(C,J.split(","));G={};c(C,function(L,K){G[L.___id]=K});E.dm(new Date());return true},update:function(Q,M,L){var P={},O,N,J,K;if(z.forcePropertyCase){u(M,function(R,S){P[(z.forcePropertyCase==="lower")?S.toLowerCase():(z.forcePropertyCase==="upper")?S.toUpperCase():S]=R});M=P}O=C[G[Q]];N=T.mergeObj(O,M);J={};K=false;u(N,function(R,S){if(TAFFY.isUndefined(O[S])||O[S]!==R){J[S]=R;K=true}});if(K){if(z.onUpdate&&(L||TAFFY.isUndefined(L))){z.onUpdate.call(N,C[G[Q]],J)}C[G[Q]]=N;E.dm(new Date())}},remove:function(J){C[G[J]].___s=false},removeCommit:function(K){var J;for(J=C.length-1;J>-1;J--){if(!C[J].___s){if(z.onRemove&&(K||TAFFY.isUndefined(K))){z.onRemove.call(C[J])}G[C[J].___id]=undefined;C.splice(J,1)}}G={};c(C,function(M,L){G[M.___id]=L});E.dm(new Date())},query:function(L){var O,P,K,N,M,J;if(z.cacheSize){P="";c(L.filterRaw,function(Q){if(T.isFunction(Q)){P="nocache";return TAFFY.EXIT}});if(P===""){P=a(T.mergeObj(L,{q:false,run:false,sort:false}))}}if(!L.results||!L.run||(L.run&&E.dm()>L.run)){K=[];if(z.cacheSize&&I[P]){I[P].i=A++;return I[P].results}else{if(L.q.length===0&&L.index.length===0){c(C,function(Q){K.push(Q)});O=K}else{N=x(L.index);c(N,function(Q){if(L.q.length===0||h(Q,L.q)){K.push(Q)}});O=K}}}else{O=L.results}if(L.order.length>0&&(!L.run||!L.sort)){O=j(O,L.order)}if(O.length&&((L.limit&&L.limit<O.length)||L.start)){M=[];c(O,function(R,Q){if(!L.start||(L.start&&(Q+1)>=L.start)){if(L.limit){J=(L.start)?(Q+1)-L.start:Q;if(J<L.limit){M.push(R)}else{if(J>L.limit){return TAFFY.EXIT}}}else{M.push(R)}}});O=M}if(z.cacheSize&&P!=="nocache"){y++;setTimeout(function(){var Q,R;if(y>=z.cacheSize*2){y=0;Q=A-z.cacheSize;R={};u(function(U,S){if(U.i>=Q){R[S]=U}});I=R}},0);I[P]={i:A++,results:O}}return O}};H=function(){var K,J;K=TAFFY.mergeObj(TAFFY.mergeObj(r,{insert:undefined}),{getDBI:function(){return E},getroot:function(L){return H.call(L)},context:function(L){if(L){J=TAFFY.mergeObj(J,L.hasOwnProperty("results")?TAFFY.mergeObj(L,{run:new Date(),sort:new Date()}):L)}return J},extend:undefined});J=(this&&this.q)?this:{limit:false,start:false,q:[],filterRaw:[],index:[],order:[],results:false,run:null,sort:null,settings:z};c(arguments,function(L){if(w(L)){J.index.push(L)}else{J.q.push(v(L))}J.filterRaw.push(L)});return K};b++;if(F){E.insert(F)}H.insert=E.insert;H.merge=function(M,L,N){var K={},J=[],O={};N=N||false;L=L||"id";c(M,function(Q){var P;K[L]=Q[L];J.push(Q[L]);P=H(K).first();if(P){E.update(P.___id,Q,N)}else{E.insert(Q,N)}});O[L]=J;return H(O)};H.TAFFY=true;H.sort=E.sort;H.settings=function(J){if(J){z=TAFFY.mergeObj(z,J);if(J.template){H().update(J.template)}}return z};H.store=function(L){var K=false,J;if(localStorage){if(L){J=localStorage.getItem("taffy_"+L);if(J&&J.length>0){H.insert(J);K=true}if(C.length>0){setTimeout(function(){localStorage.setItem("taffy_"+z.storageName,JSON.stringify(C))})}}H.settings({storageName:L})}return H};return H};TAFFY=T;T.each=c;T.eachin=u;T.extend=r.extend;TAFFY.EXIT="TAFFYEXIT";TAFFY.mergeObj=function(z,x){var y={};u(z,function(A,B){y[B]=z[B]});u(x,function(A,B){y[B]=x[B]});return y};TAFFY.has=function(z,y){var x=false,A;if((z.TAFFY)){x=z(y);if(x.length>0){return true}else{return false}}else{switch(T.typeOf(z)){case"object":if(T.isObject(y)){u(y,function(B,C){if(x===true&&!T.isUndefined(z[C])&&z.hasOwnProperty(C)){x=T.has(z[C],y[C])}else{x=false;return TAFFY.EXIT}})}else{if(T.isArray(y)){c(y,function(B,C){x=T.has(z,y[C]);if(x){return TAFFY.EXIT}})}else{if(T.isString(y)){if(!TAFFY.isUndefined(z[y])){return true}else{return false}}}}return x;case"array":if(T.isObject(y)){c(z,function(B,C){x=T.has(z[C],y);if(x===true){return TAFFY.EXIT}})}else{if(T.isArray(y)){c(y,function(C,B){c(z,function(E,D){x=T.has(z[D],y[B]);if(x===true){return TAFFY.EXIT}});if(x===true){return TAFFY.EXIT}})}else{if(T.isString(y)||T.isNumber(y)){x=false;for(A=0;A<z.length;A++){x=T.has(z[A],y);if(x){return true}}}}}return x;case"string":if(T.isString(y)&&y===z){return true}break;default:if(T.typeOf(z)===T.typeOf(y)&&z===y){return true}break}}return false};TAFFY.hasAll=function(A,z){var y=TAFFY,x;if(y.isArray(z)){x=true;c(z,function(B){x=y.has(A,B);if(x===false){return TAFFY.EXIT}});return x}else{return y.has(A,z)}};TAFFY.typeOf=function(x){var y=typeof x;if(y==="object"){if(x){if(typeof x.length==="number"&&!(x.propertyIsEnumerable("length"))){y="array"}}else{y="null"}}return y};TAFFY.getObjectKeys=function(x){var y=[];u(x,function(A,z){y.push(z)});y.sort();return y};TAFFY.isSameArray=function(y,x){return(TAFFY.isArray(y)&&TAFFY.isArray(x)&&y.join(",")===x.join(","))?true:false};TAFFY.isSameObject=function(A,y){var x=TAFFY,z=true;if(x.isObject(A)&&x.isObject(y)){if(x.isSameArray(x.getObjectKeys(A),x.getObjectKeys(y))){u(A,function(B,C){if(!((x.isObject(A[C])&&x.isObject(y[C])&&x.isSameObject(A[C],y[C]))||(x.isArray(A[C])&&x.isArray(y[C])&&x.isSameArray(A[C],y[C]))||(A[C]===y[C]))){z=false;return TAFFY.EXIT}})}else{z=false}}else{z=false}return z};f=["String","Number","Object","Array","Boolean","Null","Function","Undefined"];q=function(x){return function(y){return TAFFY.typeOf(y)===x.toLowerCase()?true:false}};for(p=0;p<f.length;p++){t=f[p];TAFFY["is"+t]=q(t)}}}());if(typeof(exports)==="object"){exports.taffy=TAFFY};

},{}],"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/browserify/node_modules/process/browser.js":[function(require,module,exports){
// shim for using process in browser

var process = module.exports = {};
var queue = [];
var draining = false;

function drainQueue() {
    if (draining) {
        return;
    }
    draining = true;
    var currentQueue;
    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        var i = -1;
        while (++i < len) {
            currentQueue[i]();
        }
        len = queue.length;
    }
    draining = false;
}
process.nextTick = function (fun) {
    queue.push(fun);
    if (!draining) {
        setTimeout(drainQueue, 0);
    }
};

process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

// TODO(shtylman)
process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };

},{}],"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/fuzzy/lib/fuzzy.js":[function(require,module,exports){
/*
 * Fuzzy
 * https://github.com/myork/fuzzy
 *
 * Copyright (c) 2012 Matt York
 * Licensed under the MIT license.
 */

(function() {

var root = this;

var fuzzy = {};

// Use in node or in browser
if (typeof exports !== 'undefined') {
  module.exports = fuzzy;
} else {
  root.fuzzy = fuzzy;
}

// Return all elements of `array` that have a fuzzy
// match against `pattern`.
fuzzy.simpleFilter = function(pattern, array) {
  return array.filter(function(string) {
    return fuzzy.test(pattern, string);
  });
};

// Does `pattern` fuzzy match `string`?
fuzzy.test = function(pattern, string) {
  return fuzzy.match(pattern, string) !== null;
};

// If `pattern` matches `string`, wrap each matching character
// in `opts.pre` and `opts.post`. If no match, return null
fuzzy.match = function(pattern, string, opts) {
  opts = opts || {};
  var patternIdx = 0
    , result = []
    , len = string.length
    , totalScore = 0
    , currScore = 0
    // prefix
    , pre = opts.pre || ''
    // suffix
    , post = opts.post || ''
    // String to compare against. This might be a lowercase version of the
    // raw string
    , compareString =  opts.caseSensitive && string || string.toLowerCase()
    , ch, compareChar;

  pattern = opts.caseSensitive && pattern || pattern.toLowerCase();

  // For each character in the string, either add it to the result
  // or wrap in template if its the next string in the pattern
  for(var idx = 0; idx < len; idx++) {
    ch = string[idx];
    if(compareString[idx] === pattern[patternIdx]) {
      ch = pre + ch + post;
      patternIdx += 1;

      // consecutive characters should increase the score more than linearly
      currScore += 1 + currScore;
    } else {
      currScore = 0;
    }
    totalScore += currScore;
    result[result.length] = ch;
  }

  // return rendered string if we have a match for every char
  if(patternIdx === pattern.length) {
    return {rendered: result.join(''), score: totalScore};
  }

  return null;
};

// The normal entry point. Filters `arr` for matches against `pattern`.
// It returns an array with matching values of the type:
//
//     [{
//         string:   '<b>lah' // The rendered string
//       , index:    2        // The index of the element in `arr`
//       , original: 'blah'   // The original element in `arr`
//     }]
//
// `opts` is an optional argument bag. Details:
//
//    opts = {
//        // string to put before a matching character
//        pre:     '<b>'
//
//        // string to put after matching character
//      , post:    '</b>'
//
//        // Optional function. Input is an element from the passed in
//        // `arr`, output should be the string to test `pattern` against.
//        // In this example, if `arr = [{crying: 'koala'}]` we would return
//        // 'koala'.
//      , extract: function(arg) { return arg.crying; }
//    }
fuzzy.filter = function(pattern, arr, opts) {
  opts = opts || {};
  return arr
          .reduce(function(prev, element, idx, arr) {
            var str = element;
            if(opts.extract) {
              str = opts.extract(element);
            }
            var rendered = fuzzy.match(pattern, str, opts);
            if(rendered != null) {
              prev[prev.length] = {
                  string: rendered.rendered
                , score: rendered.score
                , index: idx
                , original: element
              };
            }
            return prev;
          }, [])

          // Sort by score. Browsers are inconsistent wrt stable/unstable
          // sorting, so force stable by using the index in the case of tie.
          // See http://ofb.net/~sethml/is-sort-stable.html
          .sort(function(a,b) {
            var compare = b.score - a.score;
            if(compare) return compare;
            return a.index - b.index;
          });
};


}());


},{}],"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/griddle-react/modules/customPaginationContainer.jsx.js":[function(require,module,exports){
/** @jsx React.DOM */

/*
   Griddle - Simple Grid Component for React
   https://github.com/DynamicTyped/Griddle
   Copyright (c) 2014 Ryan Lanciaux | DynamicTyped

   See License / Disclaimer https://raw.githubusercontent.com/DynamicTyped/Griddle/master/LICENSE
*/
var React = require('react');

var CustomPaginationContainer = React.createClass({displayName: "CustomPaginationContainer",
  getDefaultProps: function(){
    return{
      "maxPage": 0,
      "nextText": "",
      "previousText": "",
      "currentPage": 0,
      "customPagerComponent": {}
    }
  },
  render: function() {
    var that = this;

    if (typeof that.props.customPagerComponent !== 'function'){
      console.log("Couldn't find valid template.");
      return (React.createElement("div", null));
    }

    return (React.createElement(that.props.customPagerComponent, {maxPage: this.props.maxPage, nextText: this.props.nextText, previousText: this.props.previousText, currentPage: this.props.currentPage, setPage: this.props.setPage, previous: this.props.previous, next: this.props.next}));
  }
});

module.exports = CustomPaginationContainer;

},{"react":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/react.js"}],"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/griddle-react/modules/customRowComponentContainer.jsx.js":[function(require,module,exports){
/** @jsx React.DOM */

/*
   Griddle - Simple Grid Component for React
   https://github.com/DynamicTyped/Griddle
   Copyright (c) 2014 Ryan Lanciaux | DynamicTyped

   See License / Disclaimer https://raw.githubusercontent.com/DynamicTyped/Griddle/master/LICENSE
*/
var React = require('react');

var CustomRowComponentContainer = React.createClass({displayName: "CustomRowComponentContainer",
  getDefaultProps: function(){
    return{
      "data": [],
      "metadataColumns": [],
      "className": "",
      "customComponent": {}
    }
  },
  render: function() {
    var that = this;

    if (typeof that.props.customComponent !== 'function'){
      console.log("Couldn't find valid template.");
      return (React.createElement("div", {className: this.props.className}));
    }

    var nodes = this.props.data.map(function(row, index){
        return React.createElement(that.props.customComponent, {data: row, metadataColumns: that.props.metadataColumns, key: index})
    });

    var footer = this.props.showPager&&this.props.pagingContent;
    return (
      React.createElement("div", {className: this.props.className, style: this.props.style}, 
          nodes
      )
    );
  }
});

module.exports = CustomRowComponentContainer;

},{"react":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/react.js"}],"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/griddle-react/modules/gridFilter.jsx.js":[function(require,module,exports){
/*
   See License / Disclaimer https://raw.githubusercontent.com/DynamicTyped/Griddle/master/LICENSE
*/
var React = require('react');

var GridFilter = React.createClass({displayName: "GridFilter",
    getDefaultProps: function(){
      return {
        "placeholderText": ""
      }
    },
    handleChange: function(event){
        this.props.changeFilter(event.target.value);
    },
    render: function(){
        return React.createElement("div", {className: "row filter-container"}, React.createElement("input", {type: "text", name: "filter", placeholder: this.props.placeholderText, className: "form-control", onChange: this.handleChange}))
    }
});

module.exports = GridFilter;

},{"react":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/react.js"}],"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/griddle-react/modules/gridNoData.jsx.js":[function(require,module,exports){
/*
   See License / Disclaimer https://raw.githubusercontent.com/DynamicTyped/Griddle/master/LICENSE
*/
var React = require('react');

var GridNoData = React.createClass({displayName: "GridNoData",
    getDefaultProps: function(){
        return {
            "noDataMessage": "No Data"
        }
    },
    render: function(){
        var that = this;

        return(
            React.createElement("div", null, this.props.noDataMessage)
        );
    }
});

module.exports = GridNoData;

},{"react":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/react.js"}],"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/griddle-react/modules/gridPagination.jsx.js":[function(require,module,exports){
/*
   See License / Disclaimer https://raw.githubusercontent.com/DynamicTyped/Griddle/master/LICENSE
*/
var React = require('react');
var _ = require('underscore');

//needs props maxPage, currentPage, nextFunction, prevFunction
var GridPagination = React.createClass({displayName: "GridPagination",
    getDefaultProps: function(){
        return{
            "maxPage": 0,
            "nextText": "",
            "previousText": "",
            "currentPage": 0,
            "useGriddleStyles": true,
            "nextClassName": "griddle-next",
            "previousClassName": "griddle-previous",
            "nextIconComponent": null,
            "previousIconComponent": null
        }
    },
    pageChange: function(event){
        this.props.setPage(parseInt(event.target.value, 10)-1);
    },
    render: function(){
        var previous = "";
        var next = "";

        if(this.props.currentPage > 0){
            previous = React.createElement("button", {type: "button", onClick: this.props.previous, style: this.props.useGriddleStyles ? {"color": "#222", border: "none", background: "none", margin: "0 0 0 10px"} : null}, this.props.previousIconComponent, this.props.previousText)
        }

        if(this.props.currentPage !== (this.props.maxPage -1)){
            next = React.createElement("button", {type: "button", onClick: this.props.next, style: this.props.useGriddleStyles ? {"color":"#222", border: "none", background: "none", margin: "0 10px 0 0"} : null}, this.props.nextText, this.props.nextIconComponent)
        }

        var leftStyle = null;
        var middleStyle = null;
        var rightStyle = null;

        if(this.props.useGriddleStyles === true){
            var baseStyle = {
                "float": "left",
                minHeight: "1px",
                marginTop: "5px"
            };

            rightStyle = _.extend({textAlign:"right", width: "34%"}, baseStyle);
            middleStyle = _.extend({textAlign:"center", width: "33%"}, baseStyle);
            leftStyle = _.extend({ width: "33%"}, baseStyle)
        }

        var options = [];

        for(var i = 1; i<= this.props.maxPage; i++){
            options.push(React.createElement("option", {value: i, key: i}, i));
        }

        return (
            React.createElement("div", {style: this.props.useGriddleStyles ? { minHeight: "35px" } : null}, 
                React.createElement("div", {className: this.props.previousClassName, style: leftStyle}, previous), 
                React.createElement("div", {className: "griddle-page", style: middleStyle}, 
                    React.createElement("select", {value: this.props.currentPage+1, onChange: this.pageChange}, 
                        options
                    ), " / ", this.props.maxPage
                ), 
                React.createElement("div", {className: this.props.nextClassName, style: rightStyle}, next)
            )
        )
    }
})

module.exports = GridPagination;

},{"react":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/react.js","underscore":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/underscore/underscore.js"}],"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/griddle-react/modules/gridRow.jsx.js":[function(require,module,exports){
/*
   See License / Disclaimer https://raw.githubusercontent.com/DynamicTyped/Griddle/master/LICENSE
*/
var React = require('react');
var _ = require('underscore');

var GridRow = React.createClass({displayName: "GridRow",
    getDefaultProps: function(){
      return {
        "isChildRow": false,
        "showChildren": false,
        "data": {},
        "columns" : [],
        "metadataColumns": [],
        "hasChildren": false,
        "columnMetadata": null,
        "useGriddleStyles": true,
        "useGriddleIcons": true,
        "isSubGriddle": false,
        "parentRowCollapsedClassName": "parent-row",
        "parentRowExpandedClassName": "parent-row expanded",
        "parentRowCollapsedComponent": "▶",
        "parentRowExpandedComponent": "▼"
      }
    },
    handleClick: function(){
      this.props.toggleChildren();
    },
    render: function() {
        var that = this;
        var columnStyles = this.props.useGriddleStyles ?
          {
            padding: "5px",
            backgroundColor: "#FFF",
            borderTopColor: "#DDD",
            color: "#222"
          } : null;

        var data = _.pairs(this.props.columns.length === 0 ? this.props.data : _.pick(this.props.data, this.props.columns))

        var nodes = data.map(function(col, index) {
            var returnValue = null;
            var meta = _.findWhere(that.props.columnMetadata, {columnName: col[0]});

            //todo: Make this not as ridiculous looking
            firstColAppend = index === 0 && that.props.hasChildren && that.props.showChildren === false && that.props.useGriddleIcons ?
              React.createElement("span", {style: that.props.useGriddleStyles&&{fontSize: "10px", marginRight:"5px"}}, that.props.parentRowCollapsedComponent) :
              index === 0 && that.props.hasChildren && that.props.showChildren && that.props.useGriddleIcons ?
                React.createElement("span", {style: that.props.useGriddleStyles&&{fontSize: "10px"}}, that.props.parentRowExpandedComponent) : "";

            if(index === 0 && that.props.isChildRow && that.props.useGriddleStyles){
              columnStyles = _.extend(columnStyles, {paddingLeft:10})
            }


            if (that.props.columnMetadata !== null && that.props.columnMetadata.length > 0 && typeof meta !== "undefined"){
              var colData = (typeof meta === 'undefined' || typeof meta.customComponent === 'undefined' || meta.customComponent === null) ? col[1] : React.createElement(meta.customComponent, {data: col[1], rowData: that.props.data});
              returnValue = (meta == null ? returnValue : React.createElement("td", {onClick: that.props.hasChildren && that.handleClick, className: meta.cssClassName, key: index, style: columnStyles}, colData));
            }

            return returnValue || (React.createElement("td", {onClick: that.props.hasChildren && that.handleClick, key: index, style: columnStyles}, firstColAppend, col[1]));
        });

        //this is kind of hokey - make it better
        var className = "standard-row";


        if(that.props.isChildRow){
            className = "child-row";
        } else if (that.props.hasChildren){
            className = that.props.showChildren ? this.props.parentRowExpandedClassName : this.props.parentRowCollapsedClassName;
        }

        return (React.createElement("tr", {className: className}, nodes));
    }
});

module.exports = GridRow;

},{"react":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/react.js","underscore":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/underscore/underscore.js"}],"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/griddle-react/modules/gridRowContainer.jsx.js":[function(require,module,exports){
/*
   See License / Disclaimer https://raw.githubusercontent.com/DynamicTyped/Griddle/master/LICENSE
*/
var React = require('react');
var GridRow = require('./gridRow.jsx');

var GridRowContainer = React.createClass({displayName: "GridRowContainer",
    getDefaultProps: function(){
      return {
        "useGriddleStyles": true,
        "useGriddleIcons": true,
        "isSubGriddle": false,
        "columns" : [],
        "parentRowCollapsedClassName": "parent-row",
        "parentRowExpandedClassName": "parent-row expanded",
        "parentRowCollapsedComponent": "▶",
        "parentRowExpandedComponent": "▼"
      };
    },
    getInitialState: function(){
        return {
           "data": {
           },
           "metadataColumns": [],
           "showChildren":false
        }
    },
    componentWillReceiveProps: function(){
      this.setShowChildren(false);
    },
    toggleChildren: function(){
      this.setShowChildren(this.state.showChildren === false);
    },
    setShowChildren: function(visible){
      this.setState({
        showChildren: visible 
      });
    },
    render: function(){
        var that = this;

        if(typeof this.props.data === "undefined"){return (React.createElement("tbody", null));}
        var arr = [];

        arr.push(React.createElement(GridRow, {useGriddleStyles: this.props.useGriddleStyles, isSubGriddle: this.props.isSubGriddle, data: this.props.data, columns: this.props.columns, columnMetadata: this.props.columnMetadata, metadataColumns: that.props.metadataColumns, 
          hasChildren: that.props.hasChildren, toggleChildren: that.toggleChildren, showChildren: that.state.showChildren, key: that.props.uniqueId, useGriddleIcons: that.props.useGriddleIcons, 
          parentRowExpandedClassName: this.props.parentRowExpandedClassName, parentRowCollapsedClassName: this.props.parentRowCollapsedClassName, 
          parentRowExpandedComponent: this.props.parentRowExpandedComponent, parentRowCollapsedComponent: this.props.parentRowCollapsedComponent}));
          var children = null;

        if(that.state.showChildren){
            children =  that.props.hasChildren && this.props.data["children"].map(function(row, index){
                if(typeof row["children"] !== "undefined"){
                  return (React.createElement("tr", {style: {paddingLeft: 5}}, 
                            React.createElement("td", {colSpan: that.props.columns.length, className: "griddle-parent", style: that.props.useGriddleStyles&&{border: "none", "padding": "0 0 0 5px"}}, 
                              React.createElement(Griddle, {isSubGriddle: true, results: [row], columns: that.props.columns, tableClassName: that.props.tableClassName, parentRowExpandedClassName: that.props.parentRowExpandedClassName, 
                                parentRowCollapsedClassName: that.props.parentRowCollapsedClassName, 
                                showTableHeading: false, showPager: false, columnMetadata: that.props.columnMetadata, 
                                parentRowExpandedComponent: that.props.parentRowExpandedComponent, 
                                parentRowCollapsedComponent: that.props.parentRowCollapsedComponent})
                            )
                          ));
                }

                return React.createElement(GridRow, {useGriddleStyles: that.props.useGriddleStyles, isSubGriddle: that.props.isSubGriddle, data: row, columns: that.props.columns, metadataColumns: that.props.metadataColumns, isChildRow: true, columnMetadata: that.props.columnMetadata, key: _.uniqueId("grid_row")})
            });
        }

        return that.props.hasChildren === false ? arr[0] : React.createElement("tbody", null, that.state.showChildren ? arr.concat(children) : arr)
    }
});

module.exports = GridRowContainer;

},{"./gridRow.jsx":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/griddle-react/modules/gridRow.jsx.js","react":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/react.js"}],"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/griddle-react/modules/gridSettings.jsx.js":[function(require,module,exports){
/*
   See License / Disclaimer https://raw.githubusercontent.com/DynamicTyped/Griddle/master/LICENSE
*/
var React = require('react');
var _ = require('underscore');

var GridSettings = React.createClass({displayName: "GridSettings",
    getDefaultProps: function(){
        return {
            "columns": [],
            "columnMetadata": [],
            "selectedColumns": [],
            "settingsText": "",
            "maxRowsText": "",
            "resultsPerPage": 0,
            "enableToggleCustom": false,
            "useCustomComponent": false,
            "useGriddleStyles": true,
            "toggleCustomComponent": function(){}
        };
    },
    setPageSize: function(event){
        var value = parseInt(event.target.value, 10);
        this.props.setPageSize(value);
    },
    handleChange: function(event){
        if(event.target.checked === true && _.contains(this.props.selectedColumns, event.target.dataset.name) === false){
            this.props.selectedColumns.push(event.target.dataset.name);
            this.props.setColumns(this.props.selectedColumns);
        } else {
            /* redraw with the selected columns minus the one just unchecked */
            this.props.setColumns(_.without(this.props.selectedColumns, event.target.dataset.name));
        }
    },
    render: function(){
        var that = this;

        var nodes = [];
        //don't show column selector if we're on a custom component
        if (that.props.useCustomComponent === false){
            nodes = this.props.columns.map(function(col, index){
                var checked = _.contains(that.props.selectedColumns, col);
                //check column metadata -- if this one is locked make it disabled and don't put an onChange event
                var meta  = _.findWhere(that.props.columnMetadata, {columnName: col});
                var displayName = col; 

                if (typeof meta !== "undefined" && typeof meta.displayName !== "undefined" && meta.displayName != null) {
                  displayName = meta.displayName;
                }

                if(typeof meta !== "undefined" && meta != null && meta.locked){
                    return React.createElement("div", {className: "column checkbox"}, React.createElement("label", null, React.createElement("input", {type: "checkbox", disabled: true, name: "check", checked: checked, "data-name": col}), displayName))
                } else if(typeof meta !== "undefined" && meta != null && typeof meta.visible !== "undefined" && meta.visible === false){
                    return null; 
                }
                return React.createElement("div", {className: "griddle-column-selection checkbox", style: that.props.useGriddleStyles ? { "float": "left", width: "20%"} : null}, React.createElement("label", null, React.createElement("input", {type: "checkbox", name: "check", onChange: that.handleChange, checked: checked, "data-name": col}), displayName))
            });
        }

        var toggleCustom = that.props.enableToggleCustom ?
                (React.createElement("div", {className: "form-group"}, 
                    React.createElement("label", {htmlFor: "maxRows"}, React.createElement("input", {type: "checkbox", checked: this.props.useCustomComponent, onChange: this.props.toggleCustomComponent}), " ", this.props.enableCustomFormatText)
                ))
                : "";

        var setPageSize = this.props.showSetPageSize ? (React.createElement("div", null, 
                    React.createElement("label", {htmlFor: "maxRows"}, this.props.maxRowsText, ":", 
                        React.createElement("select", {onChange: this.setPageSize, value: this.props.resultsPerPage}, 
                            React.createElement("option", {value: "5"}, "5"), 
                            React.createElement("option", {value: "10"}, "10"), 
                            React.createElement("option", {value: "25"}, "25"), 
                            React.createElement("option", {value: "50"}, "50"), 
                            React.createElement("option", {value: "100"}, "100")
                        )
                    )
            )) : "";


        return (React.createElement("div", {className: "griddle-settings", style: this.props.useGriddleStyles ? { backgroundColor: "#FFF", border: "1px solid #DDD", color: "#222", padding: "10px", marginBottom: "10px"} : null}, 
                React.createElement("h6", null, this.props.settingsText), 
                React.createElement("div", {className: "griddle-columns", style: this.props.useGriddleStyles ? { clear: "both", display: "table", width: "100%", borderBottom: "1px solid #EDEDED", marginBottom: "10px"} : null}, 
                    nodes
                ), 
                setPageSize, 
                toggleCustom
            ));
    }
});

module.exports = GridSettings;

},{"react":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/react.js","underscore":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/underscore/underscore.js"}],"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/griddle-react/modules/gridTable.jsx.js":[function(require,module,exports){
/*
   See License / Disclaimer https://raw.githubusercontent.com/DynamicTyped/Griddle/master/LICENSE
*/
var React = require('react');
var GridTitle = require('./gridTitle.jsx');
var GridRowContainer = require('./gridRowContainer.jsx');
var _ = require('underscore');

var GridTable = React.createClass({displayName: "GridTable",
  getDefaultProps: function(){
    return{
      "data": [],
      "columns": [],
      "metadataColumns": [],
      "className": "",
      "enableInfiniteScroll": false,
      "nextPage": null,
      "hasMorePages": false,
      "useFixedHeader": false,
      "useFixedLayout": true,
      "infiniteScrollSpacerHeight": null,
      "bodyHeight": null,
      "tableHeading": "",
      "useGriddleStyles": true,
      "useGriddleIcons": true,
      "isSubGriddle": false,
      "sortAscendingClassName": "sort-ascending",
      "sortDescendingClassName": "sort-descending",
      "parentRowCollapsedClassName": "parent-row",
      "parentRowExpandedClassName": "parent-row expanded",
      "sortAscendingComponent": " ▲",
      "sortDescendingComponent": " ▼",
      "parentRowCollapsedComponent": "▶",
      "parentRowExpandedComponent": "▼",
      "externalLoadingComponent": null,
      "externalIsLoading": false,
      "enableSort": true
    }
  },
  componentDidMount: function() {
    // After the initial render, see if we need to load additional pages.
    this.gridScroll();
  },
  componentDidUpdate: function(prevProps, prevState) {
    // After the subsequent renders, see if we need to load additional pages.
    this.gridScroll();
  },
  gridScroll: function(){
    if (this.props.enableInfiniteScroll && !this.props.externalIsLoading) {
      // If the scroll height is greater than the current amount of rows displayed, update the page.
      var scrollable = this.refs.scrollable.getDOMNode();
      var scrollTop = scrollable.scrollTop
      var scrollHeight = scrollable.scrollHeight;
      var clientHeight = scrollable.clientHeight;

      // Determine the diff by subtracting the amount scrolled by the total height, taking into consideratoin
      // the spacer's height.
      var scrollHeightDiff = scrollHeight - (scrollTop + clientHeight) - this.props.infiniteScrollSpacerHeight;

      // Make sure that we load results a little before reaching the bottom.
      var compareHeight = scrollHeightDiff * 0.8;

      if (compareHeight <= this.props.infiniteScrollSpacerHeight) {
        this.props.nextPage();
      }
    }
  },
  render: function() {
    var that = this;
    //figure out if we need to wrap the group in one tbody or many
    var anyHasChildren = false;

    var nodes = null;

    // If the data is still being loaded, don't build the nodes unless this is an infinite scroll table.
    if (!this.props.externalIsLoading || this.props.enableInfiniteScroll) {
      nodes = this.props.data.map(function(row, index){
          var hasChildren = (typeof row["children"] !== "undefined") && row["children"].length > 0;

          //at least one item in the group has children.
          if (hasChildren) { anyHasChildren = hasChildren; }

          return (React.createElement(GridRowContainer, {useGriddleStyles: that.props.useGriddleStyles, isSubGriddle: that.props.isSubGriddle, 
            sortAscendingClassName: that.props.sortAscendingClassName, sortDescendingClassName: that.props.sortDescendingClassName, 
            parentRowExpandedClassName: that.props.parentRowExpandedClassName, parentRowCollapsedClassName: that.props.parentRowCollapsedClassName, 
            parentRowExpandedComponent: that.props.parentRowExpandedComponent, parentRowCollapsedComponent: that.props.parentRowCollapsedComponent, 
            data: row, metadataColumns: that.props.metadataColumns, columnMetadata: that.props.columnMetadata, key: index, columns: that.props.columns, 
            uniqueId: _.uniqueId("grid_row"), hasChildren: hasChildren, tableClassName: that.props.className}))
      });
    }

    var gridStyle = null;
    var loadingContent = null;
    var tableStyle = {
      width: "100%"
    };

    if(this.props.useFixedLayout){
      tableStyle.tableLayout = "fixed";
    }

    var infiniteScrollSpacerRow = null;
    if (this.props.enableInfiniteScroll) {
      // If we're enabling infinite scrolling, we'll want to include the max height of the grid body + allow scrolling.
      gridStyle = {
        "position": "relative",
        "overflowY": "scroll",
        "height": this.props.bodyHeight + "px",
        "width": "100%"
      };

      // Only add the spacer row if the height is defined.
      if (this.props.infiniteScrollSpacerHeight && this.props.hasMorePages) {
        var spacerStyle = {
          "height": this.props.infiniteScrollSpacerHeight + "px"
        };

        infiniteScrollSpacerRow = React.createElement("tr", {style: spacerStyle});
      }
    }

    // If we're currently loading, populate the loading content
    if (this.props.externalIsLoading) {
      var defaultLoadingStyle = null;
      var defaultColSpan = null;

      if (this.props.useGriddleStyles) {
        defaultLoadingStyle = {
          textAlign: "center",
          paddingBottom: "40px"
        };

        defaultColSpan = this.props.columns.length;
      }

      var loadingComponent = this.props.externalLoadingComponent ?
        (React.createElement(this.props.externalLoadingComponent, null)) :
        (React.createElement("div", null, "Loading..."));

      loadingContent = (React.createElement("tbody", null, React.createElement("tr", null, React.createElement("td", {style: defaultLoadingStyle, colSpan: defaultColSpan}, loadingComponent))));
    }

    //construct the table heading component
    var tableHeading = (this.props.showTableHeading ?
        React.createElement(GridTitle, {columns: this.props.columns, useGriddleStyles: this.props.useGriddleStyles, useGriddleIcons: this.props.useGriddleIcons, 
          changeSort: this.props.changeSort, sortColumn: this.props.sortColumn, sortAscending: this.props.sortAscending, 
          sortAscendingClassName: this.props.sortAscendingClassName, sortDescendingClassName: this.props.sortDescendingClassName, 
          sortAscendingComponent: this.props.sortAscendingComponent, sortDescendingComponent: this.props.sortDescendingComponent, 
          columnMetadata: this.props.columnMetadata, enableSort: this.props.enableSort})
        : "");

    //check to see if any of the rows have children... if they don't wrap everything in a tbody so the browser doesn't auto do this
    if (!anyHasChildren){
      nodes = React.createElement("tbody", null, nodes, infiniteScrollSpacerRow)
    }

    var pagingContent = "";
    if(this.props.showPager){
      var pagingStyles = this.props.useGriddleStyles ?
        {
          "padding" : "0",
          backgroundColor: "#EDEDED",
          border: "0",
          color: "#222"
        }
        : null;

      pagingContent = (React.createElement("tbody", null, React.createElement("tr", null, 
          React.createElement("td", {colSpan: this.props.columns.length, style: pagingStyles, className: "footer-container"}, 
            this.props.pagingContent
          )
        )))
    }

    // If we have a fixed header, split into two tables.
    if (this.props.useFixedHeader){
      if (this.props.useGriddleStyles) {
        tableStyle.tableLayout = "fixed";
      }

      return React.createElement("div", null, 
              React.createElement("table", {className: this.props.className, style: (this.props.useGriddleStyles&&tableStyle)||null}, 
                tableHeading
              ), 
              React.createElement("div", {ref: "scrollable", onScroll: this.gridScroll, style: gridStyle}, 
                React.createElement("table", {className: this.props.className, style: (this.props.useGriddleStyles&&tableStyle)||null}, 
                    nodes, 
                    loadingContent, 
                    pagingContent
                )
              )
            );
    }

    return  React.createElement("div", {ref: "scrollable", onScroll: this.gridScroll, style: gridStyle}, 
              React.createElement("table", {className: this.props.className, style: (this.props.useGriddleStyles&&tableStyle)||null}, 
                  tableHeading, 
                  nodes, 
                  loadingContent, 
                  pagingContent
              )
            )
    }
});

module.exports = GridTable;

},{"./gridRowContainer.jsx":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/griddle-react/modules/gridRowContainer.jsx.js","./gridTitle.jsx":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/griddle-react/modules/gridTitle.jsx.js","react":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/react.js","underscore":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/underscore/underscore.js"}],"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/griddle-react/modules/gridTitle.jsx.js":[function(require,module,exports){
/*
   See License / Disclaimer https://raw.githubusercontent.com/DynamicTyped/Griddle/master/LICENSE
*/
var React = require('react');
var _ = require('underscore');

var GridTitle = React.createClass({displayName: "GridTitle",
    getDefaultProps: function(){
        return {
           "columns":[],
           "sortColumn": "",
           "sortAscending": true,
           "headerStyle": null,
           "useGriddleStyles": true,
           "usGriddleIcons": true,
           "sortAscendingClassName": "sort-ascending",
           "sortDescendingClassName": "sort-descending",
           "sortAscendingComponent": " ▲",
           "sortDescendingComponent": " ▼",
           "enableSort": true,  
           "changeSort": null
        }
    },
    sort: function(event){
        this.props.changeSort(event.target.dataset.title||event.target.parentElement.dataset.title);
    },
    getMetadata: function(columnName, columnMetadata){
      return columnMetadata !== null ? 
         _.findWhere(columnMetadata, {columnName: columnName}) : 
         null;
    },
    isSortable: function(enableSort, meta){
      var metaIsValid = typeof meta !== "undefined" && meta !== null; 
        
      return metaIsValid ? (meta.hasOwnProperty("sortable") && (meta.sortable !== null)) ? 
        enableSort && meta.sortable : 
        enableSort : enableSort;
    },
    render: function(){
        var that = this;

        var nodes = this.props.columns.map(function(col, index){
            var columnSort = "";
            var sortComponent = null;
            var titleStyles = null;

            if(that.props.sortColumn == col && that.props.sortAscending){
                columnSort = that.props.sortAscendingClassName;
                sortComponent = that.props.useGriddleIcons && that.props.sortAscendingComponent;
            }  else if (that.props.sortColumn == col && that.props.sortAscending === false){
                columnSort += that.props.sortDescendingClassName;
                sortComponent = that.props.useGriddleIcons && that.props.sortDescendingComponent;
            }

            var displayName = col;

            var meta = that.getMetadata(col, that.props.columnMetadata); 
            var columnIsSortable = that.isSortable(that.props.enableSort, meta); 

            columnSort = meta == null ? columnSort : (columnSort && (columnSort + " ")||columnSort) + meta.cssClassName;
            if (typeof meta !== "undefined" && typeof meta.displayName !== "undefined" && meta.displayName != null) {
                displayName = meta.displayName;
            }

            if (that.props.useGriddleStyles){
              titleStyles = {
                backgroundColor: "#EDEDEF",
                border: "0",
                borderBottom: "1px solid #DDD",
                color: "#222",
                padding: "5px",
                cursor: columnIsSortable ? "pointer" : "default"
              }
            }

            return (React.createElement("th", {onClick: columnIsSortable ? that.sort : null, "data-title": col, className: columnSort, key: displayName, style: titleStyles}, displayName, sortComponent));
        });


        return(
            React.createElement("thead", null, 
                React.createElement("tr", {style: this.titleStyles}, 
                    nodes
                )
            )
        );
    }
});

module.exports = GridTitle;

},{"react":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/react.js","underscore":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/underscore/underscore.js"}],"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/griddle-react/modules/griddle.jsx.js":[function(require,module,exports){
/*
   Griddle - Simple Grid Component for React
   https://github.com/DynamicTyped/Griddle
   Copyright (c) 2014 Ryan Lanciaux | DynamicTyped

   See License / Disclaimer https://raw.githubusercontent.com/DynamicTyped/Griddle/master/LICENSE
*/
var React = require('react');
var GridTable = require('./gridTable.jsx');
var GridFilter = require('./gridFilter.jsx');
var GridPagination = require('./gridPagination.jsx');
var GridSettings = require('./gridSettings.jsx');
var GridNoData = require('./gridNoData.jsx');
var CustomRowComponentContainer = require('./customRowComponentContainer.jsx');
var CustomPaginationContainer = require('./customPaginationContainer.jsx');
var _ = require('underscore');

var Griddle = React.createClass({displayName: "Griddle",
    getDefaultProps: function() {
        return{
            "columns": [],
            "columnMetadata": [],
            "resultsPerPage":5,
            "results": [], // Used if all results are already loaded.
            "initialSort": "",
            "initialSortAscending": true,
            "gridClassName":"",
            "tableClassName":"",
            "customRowComponentClassName":"",
            "settingsText": "Settings",
            "filterPlaceholderText": "Filter Results",
            "nextText": "Next",
            "previousText": "Previous",
            "maxRowsText": "Rows per page",
            "enableCustomFormatText": "Enable Custom Formatting",
            //this column will determine which column holds subgrid data
            //it will be passed through with the data object but will not be rendered
            "childrenColumnName": "children",
            //Any column in this list will be treated as metadata and will be passed through with the data but won't be rendered
            "metadataColumns": [],
            "showFilter": false,
            "showSettings": false,
            "useCustomRowComponent": false,
            "useCustomGridComponent": false,
            "useCustomPagerComponent": false,
            "useGriddleStyles": true,
            "useGriddleIcons": true,
            "customRowComponent": null,
            "customGridComponent": null,
            "customPagerComponent": {},
            "enableToggleCustom":false,
            "noDataMessage":"There is no data to display.",
            "customNoDataComponent": null,
            "showTableHeading":true,
            "showPager":true,
            "useFixedHeader":false,
            "useExternal": false,
            "externalSetPage": null,
            "externalChangeSort": null,
            "externalSetFilter": null,
            "externalSetPageSize":null,
            "externalMaxPage":null,
            "externalCurrentPage": null,
            "externalSortColumn": null,
            "externalSortAscending": true,
            "externalLoadingComponent": null,
            "externalIsLoading": false,
            "enableInfiniteScroll": false,
            "bodyHeight": null,
            "infiniteScrollSpacerHeight": 50,
            "useFixedLayout": true,
            "isSubGriddle": false,
            "enableSort": true,
            /* css class names */
            "sortAscendingClassName": "sort-ascending",
            "sortDescendingClassName": "sort-descending",
            "parentRowCollapsedClassName": "parent-row",
            "parentRowExpandedClassName": "parent-row expanded",
            "settingsToggleClassName": "settings",
            "nextClassName": "griddle-next",
            "previousClassName": "griddle-previous",
            /* icon components */
            "sortAscendingComponent": " ▲",
            "sortDescendingComponent": " ▼",
            "parentRowCollapsedComponent": "▶",
            "parentRowExpandedComponent": "▼",
            "settingsIconComponent": "",
            "nextIconComponent": "",
            "previousIconComponent":""
        };
    },
    /* if we have a filter display the max page and results accordingly */
    setFilter: function(filter) {
        if(this.props.useExternal) {
            this.props.externalSetFilter(filter);
            return;
        }

        var that = this,
        updatedState = {
            page: 0,
            filter: filter
        };

        // Obtain the state results.
       updatedState.filteredResults = _.filter(this.props.results,
       function(item) {
            var arr = _.values(item);
            for(var i = 0; i < arr.length; i++){
               if ((arr[i]||"").toString().toLowerCase().indexOf(filter.toLowerCase()) >= 0){
                return true;
               }
            }

            return false;
        });

        // Update the max page.
        updatedState.maxPage = that.getMaxPage(updatedState.filteredResults);

        //if filter is null or undefined reset the filter.
        if (_.isUndefined(filter) || _.isNull(filter) || _.isEmpty(filter)){
            updatedState.filter = filter;
            updatedState.filteredResults = null;
        }

        // Set the state.
        that.setState(updatedState);
    },
    setPageSize: function(size){
        if(this.props.useExternal) {
            this.props.externalSetPageSize(size);
            return;
        }

        //make this better.
        this.props.resultsPerPage = size;
        this.setMaxPage();
    },
    toggleColumnChooser: function(){
        this.setState({
            showColumnChooser: !this.state.showColumnChooser
        });
    },
    toggleCustomComponent: function(){
        if(this.state.customComponentType === "grid"){
            this.setProps({
                useCustomGridComponent: !this.props.useCustomGridComponent
            });
        } else if(this.state.customComponentType === "row"){
            this.setProps({
                useCustomRowComponent: !this.props.useCustomRowComponent
            });
        }
    },
    getMaxPage: function(results, totalResults){
        if(this.props.useExternal){
          return this.props.externalMaxPage;
        }

        if (!totalResults) {
          totalResults = (results||this.getCurrentResults()).length;
        }
        var maxPage = Math.ceil(totalResults / this.props.resultsPerPage);
        return maxPage;
    },
    setMaxPage: function(results){
        var maxPage = this.getMaxPage(results);
        //re-render if we have new max page value
        if (this.state.maxPage !== maxPage){
          this.setState({page: 0, maxPage: maxPage, filteredColumns: this.props.columns });
        }
    },
    setPage: function(number) {
        if(this.props.useExternal) {
            this.props.externalSetPage(number);
            return;
        }

        //check page size and move the filteredResults to pageSize * pageNumber
        if (number * this.props.resultsPerPage <= this.props.resultsPerPage * this.state.maxPage) {
            var that = this,
                state = {
                    page: number
                };

                that.setState(state);
        }
    },
    getMetadataColumns: function(){
        var meta = _.map(_.where(this.props.columnMetadata, {visible: false}), function(item){ return item.columnName});
        if(meta.indexOf(this.props.childrenColumnName) < 0){
           meta.push(this.props.childrenColumnName);
        }
        return meta.concat(this.props.metadataColumns); 
    },
    getColumns: function(){
        var that = this;
        var results = this.getCurrentResults();

        //if we don't have any data don't mess with this
        if (results === undefined || results.length === 0){ return [];}

        var columns = this.state.filteredColumns;
        var meta = this.getMetadataColumns(); 

        //if we didn't set default or filter
        if (columns.length === 0){
            columns =  _.keys(_.omit(results[0], meta));
        }

        columns = _.difference(columns, meta); 

        columns = _.sortBy(columns, function(item){
            var metaItem = _.findWhere(that.props.columnMetadata, {columnName: item});

            if (typeof metaItem === 'undefined' || metaItem === null || isNaN(metaItem.order)){
                return 100;
            }

            return metaItem.order;
        });

        return columns;
    },
    setColumns: function(columns){
        columns = _.isArray(columns) ? columns : [columns];
        this.setState({
            filteredColumns: columns
        });
    },
    nextPage: function() {
        currentPage = this.getCurrentPage();
        if (currentPage < this.getCurrentMaxPage() - 1) { this.setPage(currentPage + 1); }
    },
    previousPage: function() {
      currentPage = this.getCurrentPage();
        if (currentPage > 0) { this.setPage(currentPage - 1); }
    },
    changeSort: function(sort){
        if(this.props.enableSort === false){ return; }
        if(this.props.useExternal) {
            this.props.externalChangeSort(sort, this.props.externalSortColumn === sort ? !this.props.externalSortAscending : true);
            return;
        }

        var that = this,
            state = {
                page:0,
                sortColumn: sort,
                sortAscending: true
            };

        // If this is the same column, reverse the sort.
        if(this.state.sortColumn == sort){
            state.sortAscending = !this.state.sortAscending;
        }

        this.setState(state);
    },
    componentWillReceiveProps: function(nextProps) {
        this.setMaxPage(nextProps.results);
    },
    getInitialState: function() {
        var state =  {
            maxPage: 0,
            page: 0,
            filteredResults: null,
            filteredColumns: [],
            filter: "",
            sortColumn: this.props.initialSort,
            sortAscending: this.props.initialSortAscending,
            showColumnChooser: false
        };

        return state;
    },
    componentWillMount: function() {
        this.verifyExternal();
        this.verifyCustom();
        this.setMaxPage();
        //don't like the magic strings
        if(this.props.useCustomGridComponent === true){
            this.setState({
                 customComponentType: "grid"
            });
        } else if(this.props.useCustomRowComponent === true){
            this.setState({
                customComponentType: "row"
            });
        } else {
          this.setState({
            filteredColumns: this.props.columns
          })
        }

    },
    //todo: clean these verify methods up
    verifyExternal: function(){
        if(this.props.useExternal === true){
            //hooray for big ugly nested if
            if(this.props.externalSetPage === null){
                console.error("useExternal is set to true but there is no externalSetPage function specified.");
            }

            if(this.props.externalChangeSort === null){
                console.error("useExternal is set to true but there is no externalChangeSort function specified.");
            }

            if(this.props.externalSetFilter === null){
                console.error("useExternal is set to true but there is no externalSetFilter function specified.");
            }

            if(this.props.externalSetPageSize === null){
                console.error("useExternal is set to true but there is no externalSetPageSize function specified.");
            }

            if(this.props.externalMaxPage === null){
                console.error("useExternal is set to true but externalMaxPage is not set.");
            }

            if(this.props.externalCurrentPage === null){
                console.error("useExternal is set to true but externalCurrentPage is not set. Griddle will not page correctly without that property when using external data.");
            }
        }
    },
    verifyCustom: function(){
        if(this.props.useCustomGridComponent === true && this.props.customGridComponent === null){
            console.error("useCustomGridComponent is set to true but no custom component was specified.")
        }
        if (this.props.useCustomRowComponent === true && this.props.customRowComponent === null){
            console.error("useCustomRowComponent is set to true but no custom component was specified.")
        }
        if(this.props.useCustomGridComponent === true && this.props.useCustomRowComponent === true){
            console.error("Cannot currently use both customGridComponent and customRowComponent.");
        }
    },
    getDataForRender: function(data, cols, pageList){
        var that = this;
            //get the correct page size
            if(this.state.sortColumn !== "" || this.props.initialSort !== ""){
                data = _.sortBy(data, function(item){
                    return item[that.state.sortColumn||that.props.initialSort];
                });

                if(this.state.sortAscending === false){
                    data.reverse();
                }
            }

            var currentPage = this.getCurrentPage();

            if (!this.props.useExternal && pageList && (this.props.resultsPerPage * (currentPage+1) <= this.props.resultsPerPage * this.state.maxPage) && (currentPage >= 0)) {
                if (this.isInfiniteScrollEnabled()) {
                  // If we're doing infinite scroll, grab all results up to the current page.
                  data = _.first(data, (currentPage + 1) * this.props.resultsPerPage);
                } else {
                  //the 'rest' is grabbing the whole array from index on and the 'initial' is getting the first n results
                  var rest = _.rest(data, currentPage * this.props.resultsPerPage);
                  data = _.initial(rest, rest.length-this.props.resultsPerPage);
                }
            }
        var meta = [].concat(this.props.metadataColumns);
        if (meta.indexOf(this.props.childrenColumnName) < 0){
            meta.push(this.props.childrenColumnName);
        }
        var transformedData = [];

        for(var i = 0; i<data.length; i++){
            var mappedData = data[i];

            if(typeof mappedData[that.props.childrenColumnName] !== "undefined" && mappedData[that.props.childrenColumnName].length > 0){
                //internally we're going to use children instead of whatever it is so we don't have to pass the custom name around
                mappedData["children"] = that.getDataForRender(mappedData[that.props.childrenColumnName], cols, false);

                if(that.props.childrenColumnName !== "children") { delete mappedData[that.props.childrenColumnName]; }
            }

            transformedData.push(mappedData);
        }
        return transformedData;
    },
    //this is the current results
    getCurrentResults: function(){
      return this.state.filteredResults || this.props.results;
    },
    getCurrentPage: function(){
      return this.props.externalCurrentPage||this.state.page;
    },
    getCurrentSort: function(){
        return this.props.useExternal ? this.props.externalSortColumn : this.state.sortColumn;
    },
    getCurrentSortAscending: function(){
        return this.props.useExternal ? this.props.externalSortAscending : this.state.sortAscending;
    },
    getCurrentMaxPage: function(){
        return this.props.useExternal ? this.props.externalMaxPage : this.state.maxPage;
    },
    isInfiniteScrollEnabled: function(){
      // If a custom pager is included, don't allow for infinite scrolling.
      if (this.props.useCustomPagerComponent) {
        return false;
      }

      // Otherwise, send back the property.
      return this.props.enableInfiniteScroll;
    },
    getClearFixStyles: function(){
        return {
            clear: "both",
            display: "table",
            width: "100%"
        };
    },
    getSettingsStyles: function(){
       return {
            "float": "left",
            width: "50%",
            textAlign: "right"
        }; 
    },
    getFilterStyles: function(){
        return {
            "float": "left",
            width: "50%",
            textAlign: "left",
            color: "#222",
            minHeight: "1px"
        };
    },
    getFilter: function(){
     return ((this.props.showFilter && this.props.useCustomGridComponent === false) ? 
        React.createElement(GridFilter, {changeFilter: this.setFilter, placeholderText: this.props.filterPlaceholderText}) : 
        "");
    },
    getSettings: function(){
        return (this.props.showSettings ? 
            React.createElement("button", {type: "button", className: this.props.settingsToggleClassName, onClick: this.toggleColumnChooser, 
                style: this.props.useGriddleStyles ? { background: "none", border: "none", padding: 0, margin: 0, fontSize: 14} : null}, 
                    this.props.settingsText, this.props.settingsIconComponent
            ) : 
            "");
    },
    getTopSection: function(filter, settings){
        if (this.props.showFilter === false && this.props.showSettings === false){
            return "";
        }

        var filterStyles = null,
            settingsStyles = null,
            topContainerStyles = null;

        if(this.props.useGriddleStyles){
            filterStyles = this.getFilterStyles();
            settingsStyles= this.getSettingsStyles();

            topContainerStyles = this.getClearFixStyles();
        }

       return (
        React.createElement("div", {className: "top-section", style: topContainerStyles}, 
            React.createElement("div", {className: "griddle-filter", style: filterStyles}, 
               filter
            ), 
            React.createElement("div", {className: "griddle-settings-toggle", style: settingsStyles}, 
                settings
            )
        ));
    },
    getPagingSection: function(currentPage, maxPage){
        if ((this.props.showPager && !this.isInfiniteScrollEnabled() && !this.props.useCustomGridComponent) === false) {
            return "";
        }

        return (
          React.createElement("div", {className: "griddle-footer"}, 
              this.props.useCustomPagerComponent ?
                  React.createElement(CustomPaginationContainer, {next: this.nextPage, previous: this.previousPage, currentPage: currentPage, maxPage: maxPage, setPage: this.setPage, nextText: this.props.nextText, previousText: this.props.previousText, customPagerComponent: this.props.customPagerComponent}) :
                  React.createElement(GridPagination, {useGriddleStyles: this.props.useGriddleStyles, next: this.nextPage, previous: this.previousPage, nextClassName: this.props.nextClassName, nextIconComponent: this.props.nextIconComponent, previousClassName: this.props.previousClassName, previousIconComponent: this.props.previousIconComponent, currentPage: currentPage, maxPage: maxPage, setPage: this.setPage, nextText: this.props.nextText, previousText: this.props.previousText})
              
          )
        );
    },
    getColumnSelectorSection: function(keys, cols){
        return this.state.showColumnChooser ? (
            React.createElement(GridSettings, {columns: keys, selectedColumns: cols, setColumns: this.setColumns, settingsText: this.props.settingsText, 
             settingsIconComponent: this.props.settingsIconComponent, maxRowsText: this.props.maxRowsText, setPageSize: this.setPageSize, 
             showSetPageSize: !this.props.useCustomGridComponent, resultsPerPage: this.props.resultsPerPage, enableToggleCustom: this.props.enableToggleCustom, 
             toggleCustomComponent: this.toggleCustomComponent, useCustomComponent: this.props.useCustomRowComponent || this.props.useCustomGridComponent, 
             useGriddleStyles: this.props.useGriddleStyles, enableCustomFormatText: this.props.enableCustomFormatText, columnMetadata: this.props.columnMetadata})
        ) : "";
    },
    getCustomGridSection: function(){
        return React.createElement(this.props.customGridComponent, {data: this.props.results, className: this.props.customGridComponentClassName})
    },
    getCustomRowSection: function(data, cols, meta, pagingContent){
        return React.createElement("div", null, React.createElement(CustomRowComponentContainer, {data: data, columns: cols, metadataColumns: meta, 
            className: this.props.customRowComponentClassName, customComponent: this.props.customRowComponent, 
            style: this.getClearFixStyles()}), this.props.showPager&&pagingContent)
    },
    getStandardGridSection: function(data, cols, meta, pagingContent, hasMorePages){
        return (React.createElement("div", {className: "griddle-body"}, React.createElement(GridTable, {useGriddleStyles: this.props.useGriddleStyles, isSubGriddle: this.props.isSubGriddle, 
              useGriddleIcons: this.props.useGriddleIcons, useFixedLayout: this.props.useFixedLayout, columnMetadata: this.props.columnMetadata, 
              showPager: this.props.showPager, pagingContent: pagingContent, data: data, columns: cols, metadataColumns: meta, className: this.props.tableClassName, 
              enableInfiniteScroll: this.isInfiniteScrollEnabled(), enableSort: this.props.enableSort, nextPage: this.nextPage, changeSort: this.changeSort, sortColumn: this.getCurrentSort(), 
              sortAscending: this.getCurrentSortAscending(), showTableHeading: this.props.showTableHeading, useFixedHeader: this.props.useFixedHeader, 
              sortAscendingClassName: this.props.sortAscendingClassName, sortDescendingClassName: this.props.sortDescendingClassName, 
              parentRowCollapsedClassName: this.props.parentRowCollapsedClassName, parentRowExpandedClassName: this.props.parentRowExpandedClassName, 
              sortAscendingComponent: this.props.sortAscendingComponent, sortDescendingComponent: this.props.sortDescendingComponent, 
              parentRowCollapsedComponent: this.props.parentRowCollapsedComponent, parentRowExpandedComponent: this.props.parentRowExpandedComponent, 
              bodyHeight: this.props.bodyHeight, infiniteScrollSpacerHeight: this.props.infiniteScrollSpacerHeight, externalLoadingComponent: this.props.externalLoadingComponent, 
              externalIsLoading: this.props.externalIsLoading, hasMorePages: hasMorePages})))
    },
    getContentSection: function(data, cols, meta, pagingContent, hasMorePages){
        if(this.props.useCustomGridComponent && this.props.customGridComponent !== null){
           return this.getCustomGridSection();
        } else if(this.props.useCustomRowComponent){
            return this.getCustomRowSection(data, cols, meta, pagingContent);
        } else {
            return this.getStandardGridSection(data, cols, meta, pagingContent, hasMorePages);
        }
    },
    getNoDataSection: function(gridClassName, topSection){
        var myReturn = null;
        if (this.props.customNoDataComponent != null) {
            myReturn = (React.createElement("div", {className: gridClassName}, React.createElement(this.props.customNoDataComponent, null)));

            return myReturn
        }

        myReturn = (React.createElement("div", {className: gridClassName}, 
                topSection, 
                React.createElement(GridNoData, {noDataMessage: this.props.noDataMessage})
            ));
        return myReturn;
    },
    shouldShowNoDataSection: function(results){
        return (this.props.useExternal === false && (typeof results === 'undefined' || results.length === 0 )) || 
            (this.props.useExternal === true && this.props.externalIsLoading === false && results.length === 0)
    },
    render: function() {
        var that = this,
        results = this.getCurrentResults();  // Attempt to assign to the filtered results, if we have any.

        var headerTableClassName = this.props.tableClassName + " table-header";

        //figure out if we want to show the filter section
        var filter = this.getFilter();
        var settings = this.getSettings();

        //if we have neither filter or settings don't need to render this stuff
        var topSection = this.getTopSection(filter, settings);

        var keys = [];
        var cols = this.getColumns();

        //figure out which columns are displayed and show only those
        var data = this.getDataForRender(results, cols, true);

        //don't repeat this -- it's happening in getColumns and getDataForRender too...
        var meta = this.props.metadataColumns;
        if(meta.indexOf(this.props.childrenColumnName) < 0){
            meta.push(this.props.childrenColumnName);
        }

        // Grab the column keys from the first results
        keys = _.keys(_.omit(results[0], meta));

        // Grab the current and max page values.
        var currentPage = this.getCurrentPage();
        var maxPage = this.getCurrentMaxPage();

        // Determine if we need to enable infinite scrolling on the table.
        var hasMorePages = (currentPage + 1) < maxPage;

        // Grab the paging content if it's to be displayed
        var pagingContent = this.getPagingSection(currentPage, maxPage);

        var resultContent = this.getContentSection(data, cols, meta, pagingContent, hasMorePages);

        var columnSelector = this.getColumnSelectorSection(keys, cols);

        var gridClassName = this.props.gridClassName.length > 0 ? "griddle " + this.props.gridClassName : "griddle";
        //add custom to the class name so we can style it differently
        gridClassName += this.props.useCustomRowComponent ? " griddle-custom" : "";

        if (this.shouldShowNoDataSection(results)) {
            return this.getNoDataSection(gridClassName, topSection);
        }

        return (
            React.createElement("div", {className: gridClassName}, 
                topSection, 
                columnSelector, 
                React.createElement("div", {className: "griddle-container", style: this.props.useGriddleStyles&&!this.props.isSubGriddle? { border: "1px solid #DDD"} : null}, 
                    resultContent
                )
            )
        );

    }
});

module.exports = Griddle;

},{"./customPaginationContainer.jsx":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/griddle-react/modules/customPaginationContainer.jsx.js","./customRowComponentContainer.jsx":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/griddle-react/modules/customRowComponentContainer.jsx.js","./gridFilter.jsx":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/griddle-react/modules/gridFilter.jsx.js","./gridNoData.jsx":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/griddle-react/modules/gridNoData.jsx.js","./gridPagination.jsx":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/griddle-react/modules/gridPagination.jsx.js","./gridSettings.jsx":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/griddle-react/modules/gridSettings.jsx.js","./gridTable.jsx":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/griddle-react/modules/gridTable.jsx.js","react":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/react.js","underscore":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/underscore/underscore.js"}],"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/moment/moment.js":[function(require,module,exports){
(function (global){
//! moment.js
//! version : 2.9.0
//! authors : Tim Wood, Iskren Chernev, Moment.js contributors
//! license : MIT
//! momentjs.com

(function (undefined) {
    /************************************
        Constants
    ************************************/

    var moment,
        VERSION = '2.9.0',
        // the global-scope this is NOT the global object in Node.js
        globalScope = (typeof global !== 'undefined' && (typeof window === 'undefined' || window === global.window)) ? global : this,
        oldGlobalMoment,
        round = Math.round,
        hasOwnProperty = Object.prototype.hasOwnProperty,
        i,

        YEAR = 0,
        MONTH = 1,
        DATE = 2,
        HOUR = 3,
        MINUTE = 4,
        SECOND = 5,
        MILLISECOND = 6,

        // internal storage for locale config files
        locales = {},

        // extra moment internal properties (plugins register props here)
        momentProperties = [],

        // check for nodeJS
        hasModule = (typeof module !== 'undefined' && module && module.exports),

        // ASP.NET json date format regex
        aspNetJsonRegex = /^\/?Date\((\-?\d+)/i,
        aspNetTimeSpanJsonRegex = /(\-)?(?:(\d*)\.)?(\d+)\:(\d+)(?:\:(\d+)\.?(\d{3})?)?/,

        // from http://docs.closure-library.googlecode.com/git/closure_goog_date_date.js.source.html
        // somewhat more in line with 4.4.3.2 2004 spec, but allows decimal anywhere
        isoDurationRegex = /^(-)?P(?:(?:([0-9,.]*)Y)?(?:([0-9,.]*)M)?(?:([0-9,.]*)D)?(?:T(?:([0-9,.]*)H)?(?:([0-9,.]*)M)?(?:([0-9,.]*)S)?)?|([0-9,.]*)W)$/,

        // format tokens
        formattingTokens = /(\[[^\[]*\])|(\\)?(Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Q|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|mm?|ss?|S{1,4}|x|X|zz?|ZZ?|.)/g,
        localFormattingTokens = /(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g,

        // parsing token regexes
        parseTokenOneOrTwoDigits = /\d\d?/, // 0 - 99
        parseTokenOneToThreeDigits = /\d{1,3}/, // 0 - 999
        parseTokenOneToFourDigits = /\d{1,4}/, // 0 - 9999
        parseTokenOneToSixDigits = /[+\-]?\d{1,6}/, // -999,999 - 999,999
        parseTokenDigits = /\d+/, // nonzero number of digits
        parseTokenWord = /[0-9]*['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]+|[\u0600-\u06FF\/]+(\s*?[\u0600-\u06FF]+){1,2}/i, // any word (or two) characters or numbers including two/three word month in arabic.
        parseTokenTimezone = /Z|[\+\-]\d\d:?\d\d/gi, // +00:00 -00:00 +0000 -0000 or Z
        parseTokenT = /T/i, // T (ISO separator)
        parseTokenOffsetMs = /[\+\-]?\d+/, // 1234567890123
        parseTokenTimestampMs = /[\+\-]?\d+(\.\d{1,3})?/, // 123456789 123456789.123

        //strict parsing regexes
        parseTokenOneDigit = /\d/, // 0 - 9
        parseTokenTwoDigits = /\d\d/, // 00 - 99
        parseTokenThreeDigits = /\d{3}/, // 000 - 999
        parseTokenFourDigits = /\d{4}/, // 0000 - 9999
        parseTokenSixDigits = /[+-]?\d{6}/, // -999,999 - 999,999
        parseTokenSignedNumber = /[+-]?\d+/, // -inf - inf

        // iso 8601 regex
        // 0000-00-00 0000-W00 or 0000-W00-0 + T + 00 or 00:00 or 00:00:00 or 00:00:00.000 + +00:00 or +0000 or +00)
        isoRegex = /^\s*(?:[+-]\d{6}|\d{4})-(?:(\d\d-\d\d)|(W\d\d$)|(W\d\d-\d)|(\d\d\d))((T| )(\d\d(:\d\d(:\d\d(\.\d+)?)?)?)?([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/,

        isoFormat = 'YYYY-MM-DDTHH:mm:ssZ',

        isoDates = [
            ['YYYYYY-MM-DD', /[+-]\d{6}-\d{2}-\d{2}/],
            ['YYYY-MM-DD', /\d{4}-\d{2}-\d{2}/],
            ['GGGG-[W]WW-E', /\d{4}-W\d{2}-\d/],
            ['GGGG-[W]WW', /\d{4}-W\d{2}/],
            ['YYYY-DDD', /\d{4}-\d{3}/]
        ],

        // iso time formats and regexes
        isoTimes = [
            ['HH:mm:ss.SSSS', /(T| )\d\d:\d\d:\d\d\.\d+/],
            ['HH:mm:ss', /(T| )\d\d:\d\d:\d\d/],
            ['HH:mm', /(T| )\d\d:\d\d/],
            ['HH', /(T| )\d\d/]
        ],

        // timezone chunker '+10:00' > ['10', '00'] or '-1530' > ['-', '15', '30']
        parseTimezoneChunker = /([\+\-]|\d\d)/gi,

        // getter and setter names
        proxyGettersAndSetters = 'Date|Hours|Minutes|Seconds|Milliseconds'.split('|'),
        unitMillisecondFactors = {
            'Milliseconds' : 1,
            'Seconds' : 1e3,
            'Minutes' : 6e4,
            'Hours' : 36e5,
            'Days' : 864e5,
            'Months' : 2592e6,
            'Years' : 31536e6
        },

        unitAliases = {
            ms : 'millisecond',
            s : 'second',
            m : 'minute',
            h : 'hour',
            d : 'day',
            D : 'date',
            w : 'week',
            W : 'isoWeek',
            M : 'month',
            Q : 'quarter',
            y : 'year',
            DDD : 'dayOfYear',
            e : 'weekday',
            E : 'isoWeekday',
            gg: 'weekYear',
            GG: 'isoWeekYear'
        },

        camelFunctions = {
            dayofyear : 'dayOfYear',
            isoweekday : 'isoWeekday',
            isoweek : 'isoWeek',
            weekyear : 'weekYear',
            isoweekyear : 'isoWeekYear'
        },

        // format function strings
        formatFunctions = {},

        // default relative time thresholds
        relativeTimeThresholds = {
            s: 45,  // seconds to minute
            m: 45,  // minutes to hour
            h: 22,  // hours to day
            d: 26,  // days to month
            M: 11   // months to year
        },

        // tokens to ordinalize and pad
        ordinalizeTokens = 'DDD w W M D d'.split(' '),
        paddedTokens = 'M D H h m s w W'.split(' '),

        formatTokenFunctions = {
            M    : function () {
                return this.month() + 1;
            },
            MMM  : function (format) {
                return this.localeData().monthsShort(this, format);
            },
            MMMM : function (format) {
                return this.localeData().months(this, format);
            },
            D    : function () {
                return this.date();
            },
            DDD  : function () {
                return this.dayOfYear();
            },
            d    : function () {
                return this.day();
            },
            dd   : function (format) {
                return this.localeData().weekdaysMin(this, format);
            },
            ddd  : function (format) {
                return this.localeData().weekdaysShort(this, format);
            },
            dddd : function (format) {
                return this.localeData().weekdays(this, format);
            },
            w    : function () {
                return this.week();
            },
            W    : function () {
                return this.isoWeek();
            },
            YY   : function () {
                return leftZeroFill(this.year() % 100, 2);
            },
            YYYY : function () {
                return leftZeroFill(this.year(), 4);
            },
            YYYYY : function () {
                return leftZeroFill(this.year(), 5);
            },
            YYYYYY : function () {
                var y = this.year(), sign = y >= 0 ? '+' : '-';
                return sign + leftZeroFill(Math.abs(y), 6);
            },
            gg   : function () {
                return leftZeroFill(this.weekYear() % 100, 2);
            },
            gggg : function () {
                return leftZeroFill(this.weekYear(), 4);
            },
            ggggg : function () {
                return leftZeroFill(this.weekYear(), 5);
            },
            GG   : function () {
                return leftZeroFill(this.isoWeekYear() % 100, 2);
            },
            GGGG : function () {
                return leftZeroFill(this.isoWeekYear(), 4);
            },
            GGGGG : function () {
                return leftZeroFill(this.isoWeekYear(), 5);
            },
            e : function () {
                return this.weekday();
            },
            E : function () {
                return this.isoWeekday();
            },
            a    : function () {
                return this.localeData().meridiem(this.hours(), this.minutes(), true);
            },
            A    : function () {
                return this.localeData().meridiem(this.hours(), this.minutes(), false);
            },
            H    : function () {
                return this.hours();
            },
            h    : function () {
                return this.hours() % 12 || 12;
            },
            m    : function () {
                return this.minutes();
            },
            s    : function () {
                return this.seconds();
            },
            S    : function () {
                return toInt(this.milliseconds() / 100);
            },
            SS   : function () {
                return leftZeroFill(toInt(this.milliseconds() / 10), 2);
            },
            SSS  : function () {
                return leftZeroFill(this.milliseconds(), 3);
            },
            SSSS : function () {
                return leftZeroFill(this.milliseconds(), 3);
            },
            Z    : function () {
                var a = this.utcOffset(),
                    b = '+';
                if (a < 0) {
                    a = -a;
                    b = '-';
                }
                return b + leftZeroFill(toInt(a / 60), 2) + ':' + leftZeroFill(toInt(a) % 60, 2);
            },
            ZZ   : function () {
                var a = this.utcOffset(),
                    b = '+';
                if (a < 0) {
                    a = -a;
                    b = '-';
                }
                return b + leftZeroFill(toInt(a / 60), 2) + leftZeroFill(toInt(a) % 60, 2);
            },
            z : function () {
                return this.zoneAbbr();
            },
            zz : function () {
                return this.zoneName();
            },
            x    : function () {
                return this.valueOf();
            },
            X    : function () {
                return this.unix();
            },
            Q : function () {
                return this.quarter();
            }
        },

        deprecations = {},

        lists = ['months', 'monthsShort', 'weekdays', 'weekdaysShort', 'weekdaysMin'],

        updateInProgress = false;

    // Pick the first defined of two or three arguments. dfl comes from
    // default.
    function dfl(a, b, c) {
        switch (arguments.length) {
            case 2: return a != null ? a : b;
            case 3: return a != null ? a : b != null ? b : c;
            default: throw new Error('Implement me');
        }
    }

    function hasOwnProp(a, b) {
        return hasOwnProperty.call(a, b);
    }

    function defaultParsingFlags() {
        // We need to deep clone this object, and es5 standard is not very
        // helpful.
        return {
            empty : false,
            unusedTokens : [],
            unusedInput : [],
            overflow : -2,
            charsLeftOver : 0,
            nullInput : false,
            invalidMonth : null,
            invalidFormat : false,
            userInvalidated : false,
            iso: false
        };
    }

    function printMsg(msg) {
        if (moment.suppressDeprecationWarnings === false &&
                typeof console !== 'undefined' && console.warn) {
            console.warn('Deprecation warning: ' + msg);
        }
    }

    function deprecate(msg, fn) {
        var firstTime = true;
        return extend(function () {
            if (firstTime) {
                printMsg(msg);
                firstTime = false;
            }
            return fn.apply(this, arguments);
        }, fn);
    }

    function deprecateSimple(name, msg) {
        if (!deprecations[name]) {
            printMsg(msg);
            deprecations[name] = true;
        }
    }

    function padToken(func, count) {
        return function (a) {
            return leftZeroFill(func.call(this, a), count);
        };
    }
    function ordinalizeToken(func, period) {
        return function (a) {
            return this.localeData().ordinal(func.call(this, a), period);
        };
    }

    function monthDiff(a, b) {
        // difference in months
        var wholeMonthDiff = ((b.year() - a.year()) * 12) + (b.month() - a.month()),
            // b is in (anchor - 1 month, anchor + 1 month)
            anchor = a.clone().add(wholeMonthDiff, 'months'),
            anchor2, adjust;

        if (b - anchor < 0) {
            anchor2 = a.clone().add(wholeMonthDiff - 1, 'months');
            // linear across the month
            adjust = (b - anchor) / (anchor - anchor2);
        } else {
            anchor2 = a.clone().add(wholeMonthDiff + 1, 'months');
            // linear across the month
            adjust = (b - anchor) / (anchor2 - anchor);
        }

        return -(wholeMonthDiff + adjust);
    }

    while (ordinalizeTokens.length) {
        i = ordinalizeTokens.pop();
        formatTokenFunctions[i + 'o'] = ordinalizeToken(formatTokenFunctions[i], i);
    }
    while (paddedTokens.length) {
        i = paddedTokens.pop();
        formatTokenFunctions[i + i] = padToken(formatTokenFunctions[i], 2);
    }
    formatTokenFunctions.DDDD = padToken(formatTokenFunctions.DDD, 3);


    function meridiemFixWrap(locale, hour, meridiem) {
        var isPm;

        if (meridiem == null) {
            // nothing to do
            return hour;
        }
        if (locale.meridiemHour != null) {
            return locale.meridiemHour(hour, meridiem);
        } else if (locale.isPM != null) {
            // Fallback
            isPm = locale.isPM(meridiem);
            if (isPm && hour < 12) {
                hour += 12;
            }
            if (!isPm && hour === 12) {
                hour = 0;
            }
            return hour;
        } else {
            // thie is not supposed to happen
            return hour;
        }
    }

    /************************************
        Constructors
    ************************************/

    function Locale() {
    }

    // Moment prototype object
    function Moment(config, skipOverflow) {
        if (skipOverflow !== false) {
            checkOverflow(config);
        }
        copyConfig(this, config);
        this._d = new Date(+config._d);
        // Prevent infinite loop in case updateOffset creates new moment
        // objects.
        if (updateInProgress === false) {
            updateInProgress = true;
            moment.updateOffset(this);
            updateInProgress = false;
        }
    }

    // Duration Constructor
    function Duration(duration) {
        var normalizedInput = normalizeObjectUnits(duration),
            years = normalizedInput.year || 0,
            quarters = normalizedInput.quarter || 0,
            months = normalizedInput.month || 0,
            weeks = normalizedInput.week || 0,
            days = normalizedInput.day || 0,
            hours = normalizedInput.hour || 0,
            minutes = normalizedInput.minute || 0,
            seconds = normalizedInput.second || 0,
            milliseconds = normalizedInput.millisecond || 0;

        // representation for dateAddRemove
        this._milliseconds = +milliseconds +
            seconds * 1e3 + // 1000
            minutes * 6e4 + // 1000 * 60
            hours * 36e5; // 1000 * 60 * 60
        // Because of dateAddRemove treats 24 hours as different from a
        // day when working around DST, we need to store them separately
        this._days = +days +
            weeks * 7;
        // It is impossible translate months into days without knowing
        // which months you are are talking about, so we have to store
        // it separately.
        this._months = +months +
            quarters * 3 +
            years * 12;

        this._data = {};

        this._locale = moment.localeData();

        this._bubble();
    }

    /************************************
        Helpers
    ************************************/


    function extend(a, b) {
        for (var i in b) {
            if (hasOwnProp(b, i)) {
                a[i] = b[i];
            }
        }

        if (hasOwnProp(b, 'toString')) {
            a.toString = b.toString;
        }

        if (hasOwnProp(b, 'valueOf')) {
            a.valueOf = b.valueOf;
        }

        return a;
    }

    function copyConfig(to, from) {
        var i, prop, val;

        if (typeof from._isAMomentObject !== 'undefined') {
            to._isAMomentObject = from._isAMomentObject;
        }
        if (typeof from._i !== 'undefined') {
            to._i = from._i;
        }
        if (typeof from._f !== 'undefined') {
            to._f = from._f;
        }
        if (typeof from._l !== 'undefined') {
            to._l = from._l;
        }
        if (typeof from._strict !== 'undefined') {
            to._strict = from._strict;
        }
        if (typeof from._tzm !== 'undefined') {
            to._tzm = from._tzm;
        }
        if (typeof from._isUTC !== 'undefined') {
            to._isUTC = from._isUTC;
        }
        if (typeof from._offset !== 'undefined') {
            to._offset = from._offset;
        }
        if (typeof from._pf !== 'undefined') {
            to._pf = from._pf;
        }
        if (typeof from._locale !== 'undefined') {
            to._locale = from._locale;
        }

        if (momentProperties.length > 0) {
            for (i in momentProperties) {
                prop = momentProperties[i];
                val = from[prop];
                if (typeof val !== 'undefined') {
                    to[prop] = val;
                }
            }
        }

        return to;
    }

    function absRound(number) {
        if (number < 0) {
            return Math.ceil(number);
        } else {
            return Math.floor(number);
        }
    }

    // left zero fill a number
    // see http://jsperf.com/left-zero-filling for performance comparison
    function leftZeroFill(number, targetLength, forceSign) {
        var output = '' + Math.abs(number),
            sign = number >= 0;

        while (output.length < targetLength) {
            output = '0' + output;
        }
        return (sign ? (forceSign ? '+' : '') : '-') + output;
    }

    function positiveMomentsDifference(base, other) {
        var res = {milliseconds: 0, months: 0};

        res.months = other.month() - base.month() +
            (other.year() - base.year()) * 12;
        if (base.clone().add(res.months, 'M').isAfter(other)) {
            --res.months;
        }

        res.milliseconds = +other - +(base.clone().add(res.months, 'M'));

        return res;
    }

    function momentsDifference(base, other) {
        var res;
        other = makeAs(other, base);
        if (base.isBefore(other)) {
            res = positiveMomentsDifference(base, other);
        } else {
            res = positiveMomentsDifference(other, base);
            res.milliseconds = -res.milliseconds;
            res.months = -res.months;
        }

        return res;
    }

    // TODO: remove 'name' arg after deprecation is removed
    function createAdder(direction, name) {
        return function (val, period) {
            var dur, tmp;
            //invert the arguments, but complain about it
            if (period !== null && !isNaN(+period)) {
                deprecateSimple(name, 'moment().' + name  + '(period, number) is deprecated. Please use moment().' + name + '(number, period).');
                tmp = val; val = period; period = tmp;
            }

            val = typeof val === 'string' ? +val : val;
            dur = moment.duration(val, period);
            addOrSubtractDurationFromMoment(this, dur, direction);
            return this;
        };
    }

    function addOrSubtractDurationFromMoment(mom, duration, isAdding, updateOffset) {
        var milliseconds = duration._milliseconds,
            days = duration._days,
            months = duration._months;
        updateOffset = updateOffset == null ? true : updateOffset;

        if (milliseconds) {
            mom._d.setTime(+mom._d + milliseconds * isAdding);
        }
        if (days) {
            rawSetter(mom, 'Date', rawGetter(mom, 'Date') + days * isAdding);
        }
        if (months) {
            rawMonthSetter(mom, rawGetter(mom, 'Month') + months * isAdding);
        }
        if (updateOffset) {
            moment.updateOffset(mom, days || months);
        }
    }

    // check if is an array
    function isArray(input) {
        return Object.prototype.toString.call(input) === '[object Array]';
    }

    function isDate(input) {
        return Object.prototype.toString.call(input) === '[object Date]' ||
            input instanceof Date;
    }

    // compare two arrays, return the number of differences
    function compareArrays(array1, array2, dontConvert) {
        var len = Math.min(array1.length, array2.length),
            lengthDiff = Math.abs(array1.length - array2.length),
            diffs = 0,
            i;
        for (i = 0; i < len; i++) {
            if ((dontConvert && array1[i] !== array2[i]) ||
                (!dontConvert && toInt(array1[i]) !== toInt(array2[i]))) {
                diffs++;
            }
        }
        return diffs + lengthDiff;
    }

    function normalizeUnits(units) {
        if (units) {
            var lowered = units.toLowerCase().replace(/(.)s$/, '$1');
            units = unitAliases[units] || camelFunctions[lowered] || lowered;
        }
        return units;
    }

    function normalizeObjectUnits(inputObject) {
        var normalizedInput = {},
            normalizedProp,
            prop;

        for (prop in inputObject) {
            if (hasOwnProp(inputObject, prop)) {
                normalizedProp = normalizeUnits(prop);
                if (normalizedProp) {
                    normalizedInput[normalizedProp] = inputObject[prop];
                }
            }
        }

        return normalizedInput;
    }

    function makeList(field) {
        var count, setter;

        if (field.indexOf('week') === 0) {
            count = 7;
            setter = 'day';
        }
        else if (field.indexOf('month') === 0) {
            count = 12;
            setter = 'month';
        }
        else {
            return;
        }

        moment[field] = function (format, index) {
            var i, getter,
                method = moment._locale[field],
                results = [];

            if (typeof format === 'number') {
                index = format;
                format = undefined;
            }

            getter = function (i) {
                var m = moment().utc().set(setter, i);
                return method.call(moment._locale, m, format || '');
            };

            if (index != null) {
                return getter(index);
            }
            else {
                for (i = 0; i < count; i++) {
                    results.push(getter(i));
                }
                return results;
            }
        };
    }

    function toInt(argumentForCoercion) {
        var coercedNumber = +argumentForCoercion,
            value = 0;

        if (coercedNumber !== 0 && isFinite(coercedNumber)) {
            if (coercedNumber >= 0) {
                value = Math.floor(coercedNumber);
            } else {
                value = Math.ceil(coercedNumber);
            }
        }

        return value;
    }

    function daysInMonth(year, month) {
        return new Date(Date.UTC(year, month + 1, 0)).getUTCDate();
    }

    function weeksInYear(year, dow, doy) {
        return weekOfYear(moment([year, 11, 31 + dow - doy]), dow, doy).week;
    }

    function daysInYear(year) {
        return isLeapYear(year) ? 366 : 365;
    }

    function isLeapYear(year) {
        return (year % 4 === 0 && year % 100 !== 0) || year % 400 === 0;
    }

    function checkOverflow(m) {
        var overflow;
        if (m._a && m._pf.overflow === -2) {
            overflow =
                m._a[MONTH] < 0 || m._a[MONTH] > 11 ? MONTH :
                m._a[DATE] < 1 || m._a[DATE] > daysInMonth(m._a[YEAR], m._a[MONTH]) ? DATE :
                m._a[HOUR] < 0 || m._a[HOUR] > 24 ||
                    (m._a[HOUR] === 24 && (m._a[MINUTE] !== 0 ||
                                           m._a[SECOND] !== 0 ||
                                           m._a[MILLISECOND] !== 0)) ? HOUR :
                m._a[MINUTE] < 0 || m._a[MINUTE] > 59 ? MINUTE :
                m._a[SECOND] < 0 || m._a[SECOND] > 59 ? SECOND :
                m._a[MILLISECOND] < 0 || m._a[MILLISECOND] > 999 ? MILLISECOND :
                -1;

            if (m._pf._overflowDayOfYear && (overflow < YEAR || overflow > DATE)) {
                overflow = DATE;
            }

            m._pf.overflow = overflow;
        }
    }

    function isValid(m) {
        if (m._isValid == null) {
            m._isValid = !isNaN(m._d.getTime()) &&
                m._pf.overflow < 0 &&
                !m._pf.empty &&
                !m._pf.invalidMonth &&
                !m._pf.nullInput &&
                !m._pf.invalidFormat &&
                !m._pf.userInvalidated;

            if (m._strict) {
                m._isValid = m._isValid &&
                    m._pf.charsLeftOver === 0 &&
                    m._pf.unusedTokens.length === 0 &&
                    m._pf.bigHour === undefined;
            }
        }
        return m._isValid;
    }

    function normalizeLocale(key) {
        return key ? key.toLowerCase().replace('_', '-') : key;
    }

    // pick the locale from the array
    // try ['en-au', 'en-gb'] as 'en-au', 'en-gb', 'en', as in move through the list trying each
    // substring from most specific to least, but move to the next array item if it's a more specific variant than the current root
    function chooseLocale(names) {
        var i = 0, j, next, locale, split;

        while (i < names.length) {
            split = normalizeLocale(names[i]).split('-');
            j = split.length;
            next = normalizeLocale(names[i + 1]);
            next = next ? next.split('-') : null;
            while (j > 0) {
                locale = loadLocale(split.slice(0, j).join('-'));
                if (locale) {
                    return locale;
                }
                if (next && next.length >= j && compareArrays(split, next, true) >= j - 1) {
                    //the next array item is better than a shallower substring of this one
                    break;
                }
                j--;
            }
            i++;
        }
        return null;
    }

    function loadLocale(name) {
        var oldLocale = null;
        if (!locales[name] && hasModule) {
            try {
                oldLocale = moment.locale();
                require('./locale/' + name);
                // because defineLocale currently also sets the global locale, we want to undo that for lazy loaded locales
                moment.locale(oldLocale);
            } catch (e) { }
        }
        return locales[name];
    }

    // Return a moment from input, that is local/utc/utcOffset equivalent to
    // model.
    function makeAs(input, model) {
        var res, diff;
        if (model._isUTC) {
            res = model.clone();
            diff = (moment.isMoment(input) || isDate(input) ?
                    +input : +moment(input)) - (+res);
            // Use low-level api, because this fn is low-level api.
            res._d.setTime(+res._d + diff);
            moment.updateOffset(res, false);
            return res;
        } else {
            return moment(input).local();
        }
    }

    /************************************
        Locale
    ************************************/


    extend(Locale.prototype, {

        set : function (config) {
            var prop, i;
            for (i in config) {
                prop = config[i];
                if (typeof prop === 'function') {
                    this[i] = prop;
                } else {
                    this['_' + i] = prop;
                }
            }
            // Lenient ordinal parsing accepts just a number in addition to
            // number + (possibly) stuff coming from _ordinalParseLenient.
            this._ordinalParseLenient = new RegExp(this._ordinalParse.source + '|' + /\d{1,2}/.source);
        },

        _months : 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_'),
        months : function (m) {
            return this._months[m.month()];
        },

        _monthsShort : 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
        monthsShort : function (m) {
            return this._monthsShort[m.month()];
        },

        monthsParse : function (monthName, format, strict) {
            var i, mom, regex;

            if (!this._monthsParse) {
                this._monthsParse = [];
                this._longMonthsParse = [];
                this._shortMonthsParse = [];
            }

            for (i = 0; i < 12; i++) {
                // make the regex if we don't have it already
                mom = moment.utc([2000, i]);
                if (strict && !this._longMonthsParse[i]) {
                    this._longMonthsParse[i] = new RegExp('^' + this.months(mom, '').replace('.', '') + '$', 'i');
                    this._shortMonthsParse[i] = new RegExp('^' + this.monthsShort(mom, '').replace('.', '') + '$', 'i');
                }
                if (!strict && !this._monthsParse[i]) {
                    regex = '^' + this.months(mom, '') + '|^' + this.monthsShort(mom, '');
                    this._monthsParse[i] = new RegExp(regex.replace('.', ''), 'i');
                }
                // test the regex
                if (strict && format === 'MMMM' && this._longMonthsParse[i].test(monthName)) {
                    return i;
                } else if (strict && format === 'MMM' && this._shortMonthsParse[i].test(monthName)) {
                    return i;
                } else if (!strict && this._monthsParse[i].test(monthName)) {
                    return i;
                }
            }
        },

        _weekdays : 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_'),
        weekdays : function (m) {
            return this._weekdays[m.day()];
        },

        _weekdaysShort : 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
        weekdaysShort : function (m) {
            return this._weekdaysShort[m.day()];
        },

        _weekdaysMin : 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
        weekdaysMin : function (m) {
            return this._weekdaysMin[m.day()];
        },

        weekdaysParse : function (weekdayName) {
            var i, mom, regex;

            if (!this._weekdaysParse) {
                this._weekdaysParse = [];
            }

            for (i = 0; i < 7; i++) {
                // make the regex if we don't have it already
                if (!this._weekdaysParse[i]) {
                    mom = moment([2000, 1]).day(i);
                    regex = '^' + this.weekdays(mom, '') + '|^' + this.weekdaysShort(mom, '') + '|^' + this.weekdaysMin(mom, '');
                    this._weekdaysParse[i] = new RegExp(regex.replace('.', ''), 'i');
                }
                // test the regex
                if (this._weekdaysParse[i].test(weekdayName)) {
                    return i;
                }
            }
        },

        _longDateFormat : {
            LTS : 'h:mm:ss A',
            LT : 'h:mm A',
            L : 'MM/DD/YYYY',
            LL : 'MMMM D, YYYY',
            LLL : 'MMMM D, YYYY LT',
            LLLL : 'dddd, MMMM D, YYYY LT'
        },
        longDateFormat : function (key) {
            var output = this._longDateFormat[key];
            if (!output && this._longDateFormat[key.toUpperCase()]) {
                output = this._longDateFormat[key.toUpperCase()].replace(/MMMM|MM|DD|dddd/g, function (val) {
                    return val.slice(1);
                });
                this._longDateFormat[key] = output;
            }
            return output;
        },

        isPM : function (input) {
            // IE8 Quirks Mode & IE7 Standards Mode do not allow accessing strings like arrays
            // Using charAt should be more compatible.
            return ((input + '').toLowerCase().charAt(0) === 'p');
        },

        _meridiemParse : /[ap]\.?m?\.?/i,
        meridiem : function (hours, minutes, isLower) {
            if (hours > 11) {
                return isLower ? 'pm' : 'PM';
            } else {
                return isLower ? 'am' : 'AM';
            }
        },


        _calendar : {
            sameDay : '[Today at] LT',
            nextDay : '[Tomorrow at] LT',
            nextWeek : 'dddd [at] LT',
            lastDay : '[Yesterday at] LT',
            lastWeek : '[Last] dddd [at] LT',
            sameElse : 'L'
        },
        calendar : function (key, mom, now) {
            var output = this._calendar[key];
            return typeof output === 'function' ? output.apply(mom, [now]) : output;
        },

        _relativeTime : {
            future : 'in %s',
            past : '%s ago',
            s : 'a few seconds',
            m : 'a minute',
            mm : '%d minutes',
            h : 'an hour',
            hh : '%d hours',
            d : 'a day',
            dd : '%d days',
            M : 'a month',
            MM : '%d months',
            y : 'a year',
            yy : '%d years'
        },

        relativeTime : function (number, withoutSuffix, string, isFuture) {
            var output = this._relativeTime[string];
            return (typeof output === 'function') ?
                output(number, withoutSuffix, string, isFuture) :
                output.replace(/%d/i, number);
        },

        pastFuture : function (diff, output) {
            var format = this._relativeTime[diff > 0 ? 'future' : 'past'];
            return typeof format === 'function' ? format(output) : format.replace(/%s/i, output);
        },

        ordinal : function (number) {
            return this._ordinal.replace('%d', number);
        },
        _ordinal : '%d',
        _ordinalParse : /\d{1,2}/,

        preparse : function (string) {
            return string;
        },

        postformat : function (string) {
            return string;
        },

        week : function (mom) {
            return weekOfYear(mom, this._week.dow, this._week.doy).week;
        },

        _week : {
            dow : 0, // Sunday is the first day of the week.
            doy : 6  // The week that contains Jan 1st is the first week of the year.
        },

        firstDayOfWeek : function () {
            return this._week.dow;
        },

        firstDayOfYear : function () {
            return this._week.doy;
        },

        _invalidDate: 'Invalid date',
        invalidDate: function () {
            return this._invalidDate;
        }
    });

    /************************************
        Formatting
    ************************************/


    function removeFormattingTokens(input) {
        if (input.match(/\[[\s\S]/)) {
            return input.replace(/^\[|\]$/g, '');
        }
        return input.replace(/\\/g, '');
    }

    function makeFormatFunction(format) {
        var array = format.match(formattingTokens), i, length;

        for (i = 0, length = array.length; i < length; i++) {
            if (formatTokenFunctions[array[i]]) {
                array[i] = formatTokenFunctions[array[i]];
            } else {
                array[i] = removeFormattingTokens(array[i]);
            }
        }

        return function (mom) {
            var output = '';
            for (i = 0; i < length; i++) {
                output += array[i] instanceof Function ? array[i].call(mom, format) : array[i];
            }
            return output;
        };
    }

    // format date using native date object
    function formatMoment(m, format) {
        if (!m.isValid()) {
            return m.localeData().invalidDate();
        }

        format = expandFormat(format, m.localeData());

        if (!formatFunctions[format]) {
            formatFunctions[format] = makeFormatFunction(format);
        }

        return formatFunctions[format](m);
    }

    function expandFormat(format, locale) {
        var i = 5;

        function replaceLongDateFormatTokens(input) {
            return locale.longDateFormat(input) || input;
        }

        localFormattingTokens.lastIndex = 0;
        while (i >= 0 && localFormattingTokens.test(format)) {
            format = format.replace(localFormattingTokens, replaceLongDateFormatTokens);
            localFormattingTokens.lastIndex = 0;
            i -= 1;
        }

        return format;
    }


    /************************************
        Parsing
    ************************************/


    // get the regex to find the next token
    function getParseRegexForToken(token, config) {
        var a, strict = config._strict;
        switch (token) {
        case 'Q':
            return parseTokenOneDigit;
        case 'DDDD':
            return parseTokenThreeDigits;
        case 'YYYY':
        case 'GGGG':
        case 'gggg':
            return strict ? parseTokenFourDigits : parseTokenOneToFourDigits;
        case 'Y':
        case 'G':
        case 'g':
            return parseTokenSignedNumber;
        case 'YYYYYY':
        case 'YYYYY':
        case 'GGGGG':
        case 'ggggg':
            return strict ? parseTokenSixDigits : parseTokenOneToSixDigits;
        case 'S':
            if (strict) {
                return parseTokenOneDigit;
            }
            /* falls through */
        case 'SS':
            if (strict) {
                return parseTokenTwoDigits;
            }
            /* falls through */
        case 'SSS':
            if (strict) {
                return parseTokenThreeDigits;
            }
            /* falls through */
        case 'DDD':
            return parseTokenOneToThreeDigits;
        case 'MMM':
        case 'MMMM':
        case 'dd':
        case 'ddd':
        case 'dddd':
            return parseTokenWord;
        case 'a':
        case 'A':
            return config._locale._meridiemParse;
        case 'x':
            return parseTokenOffsetMs;
        case 'X':
            return parseTokenTimestampMs;
        case 'Z':
        case 'ZZ':
            return parseTokenTimezone;
        case 'T':
            return parseTokenT;
        case 'SSSS':
            return parseTokenDigits;
        case 'MM':
        case 'DD':
        case 'YY':
        case 'GG':
        case 'gg':
        case 'HH':
        case 'hh':
        case 'mm':
        case 'ss':
        case 'ww':
        case 'WW':
            return strict ? parseTokenTwoDigits : parseTokenOneOrTwoDigits;
        case 'M':
        case 'D':
        case 'd':
        case 'H':
        case 'h':
        case 'm':
        case 's':
        case 'w':
        case 'W':
        case 'e':
        case 'E':
            return parseTokenOneOrTwoDigits;
        case 'Do':
            return strict ? config._locale._ordinalParse : config._locale._ordinalParseLenient;
        default :
            a = new RegExp(regexpEscape(unescapeFormat(token.replace('\\', '')), 'i'));
            return a;
        }
    }

    function utcOffsetFromString(string) {
        string = string || '';
        var possibleTzMatches = (string.match(parseTokenTimezone) || []),
            tzChunk = possibleTzMatches[possibleTzMatches.length - 1] || [],
            parts = (tzChunk + '').match(parseTimezoneChunker) || ['-', 0, 0],
            minutes = +(parts[1] * 60) + toInt(parts[2]);

        return parts[0] === '+' ? minutes : -minutes;
    }

    // function to convert string input to date
    function addTimeToArrayFromToken(token, input, config) {
        var a, datePartArray = config._a;

        switch (token) {
        // QUARTER
        case 'Q':
            if (input != null) {
                datePartArray[MONTH] = (toInt(input) - 1) * 3;
            }
            break;
        // MONTH
        case 'M' : // fall through to MM
        case 'MM' :
            if (input != null) {
                datePartArray[MONTH] = toInt(input) - 1;
            }
            break;
        case 'MMM' : // fall through to MMMM
        case 'MMMM' :
            a = config._locale.monthsParse(input, token, config._strict);
            // if we didn't find a month name, mark the date as invalid.
            if (a != null) {
                datePartArray[MONTH] = a;
            } else {
                config._pf.invalidMonth = input;
            }
            break;
        // DAY OF MONTH
        case 'D' : // fall through to DD
        case 'DD' :
            if (input != null) {
                datePartArray[DATE] = toInt(input);
            }
            break;
        case 'Do' :
            if (input != null) {
                datePartArray[DATE] = toInt(parseInt(
                            input.match(/\d{1,2}/)[0], 10));
            }
            break;
        // DAY OF YEAR
        case 'DDD' : // fall through to DDDD
        case 'DDDD' :
            if (input != null) {
                config._dayOfYear = toInt(input);
            }

            break;
        // YEAR
        case 'YY' :
            datePartArray[YEAR] = moment.parseTwoDigitYear(input);
            break;
        case 'YYYY' :
        case 'YYYYY' :
        case 'YYYYYY' :
            datePartArray[YEAR] = toInt(input);
            break;
        // AM / PM
        case 'a' : // fall through to A
        case 'A' :
            config._meridiem = input;
            // config._isPm = config._locale.isPM(input);
            break;
        // HOUR
        case 'h' : // fall through to hh
        case 'hh' :
            config._pf.bigHour = true;
            /* falls through */
        case 'H' : // fall through to HH
        case 'HH' :
            datePartArray[HOUR] = toInt(input);
            break;
        // MINUTE
        case 'm' : // fall through to mm
        case 'mm' :
            datePartArray[MINUTE] = toInt(input);
            break;
        // SECOND
        case 's' : // fall through to ss
        case 'ss' :
            datePartArray[SECOND] = toInt(input);
            break;
        // MILLISECOND
        case 'S' :
        case 'SS' :
        case 'SSS' :
        case 'SSSS' :
            datePartArray[MILLISECOND] = toInt(('0.' + input) * 1000);
            break;
        // UNIX OFFSET (MILLISECONDS)
        case 'x':
            config._d = new Date(toInt(input));
            break;
        // UNIX TIMESTAMP WITH MS
        case 'X':
            config._d = new Date(parseFloat(input) * 1000);
            break;
        // TIMEZONE
        case 'Z' : // fall through to ZZ
        case 'ZZ' :
            config._useUTC = true;
            config._tzm = utcOffsetFromString(input);
            break;
        // WEEKDAY - human
        case 'dd':
        case 'ddd':
        case 'dddd':
            a = config._locale.weekdaysParse(input);
            // if we didn't get a weekday name, mark the date as invalid
            if (a != null) {
                config._w = config._w || {};
                config._w['d'] = a;
            } else {
                config._pf.invalidWeekday = input;
            }
            break;
        // WEEK, WEEK DAY - numeric
        case 'w':
        case 'ww':
        case 'W':
        case 'WW':
        case 'd':
        case 'e':
        case 'E':
            token = token.substr(0, 1);
            /* falls through */
        case 'gggg':
        case 'GGGG':
        case 'GGGGG':
            token = token.substr(0, 2);
            if (input) {
                config._w = config._w || {};
                config._w[token] = toInt(input);
            }
            break;
        case 'gg':
        case 'GG':
            config._w = config._w || {};
            config._w[token] = moment.parseTwoDigitYear(input);
        }
    }

    function dayOfYearFromWeekInfo(config) {
        var w, weekYear, week, weekday, dow, doy, temp;

        w = config._w;
        if (w.GG != null || w.W != null || w.E != null) {
            dow = 1;
            doy = 4;

            // TODO: We need to take the current isoWeekYear, but that depends on
            // how we interpret now (local, utc, fixed offset). So create
            // a now version of current config (take local/utc/offset flags, and
            // create now).
            weekYear = dfl(w.GG, config._a[YEAR], weekOfYear(moment(), 1, 4).year);
            week = dfl(w.W, 1);
            weekday = dfl(w.E, 1);
        } else {
            dow = config._locale._week.dow;
            doy = config._locale._week.doy;

            weekYear = dfl(w.gg, config._a[YEAR], weekOfYear(moment(), dow, doy).year);
            week = dfl(w.w, 1);

            if (w.d != null) {
                // weekday -- low day numbers are considered next week
                weekday = w.d;
                if (weekday < dow) {
                    ++week;
                }
            } else if (w.e != null) {
                // local weekday -- counting starts from begining of week
                weekday = w.e + dow;
            } else {
                // default to begining of week
                weekday = dow;
            }
        }
        temp = dayOfYearFromWeeks(weekYear, week, weekday, doy, dow);

        config._a[YEAR] = temp.year;
        config._dayOfYear = temp.dayOfYear;
    }

    // convert an array to a date.
    // the array should mirror the parameters below
    // note: all values past the year are optional and will default to the lowest possible value.
    // [year, month, day , hour, minute, second, millisecond]
    function dateFromConfig(config) {
        var i, date, input = [], currentDate, yearToUse;

        if (config._d) {
            return;
        }

        currentDate = currentDateArray(config);

        //compute day of the year from weeks and weekdays
        if (config._w && config._a[DATE] == null && config._a[MONTH] == null) {
            dayOfYearFromWeekInfo(config);
        }

        //if the day of the year is set, figure out what it is
        if (config._dayOfYear) {
            yearToUse = dfl(config._a[YEAR], currentDate[YEAR]);

            if (config._dayOfYear > daysInYear(yearToUse)) {
                config._pf._overflowDayOfYear = true;
            }

            date = makeUTCDate(yearToUse, 0, config._dayOfYear);
            config._a[MONTH] = date.getUTCMonth();
            config._a[DATE] = date.getUTCDate();
        }

        // Default to current date.
        // * if no year, month, day of month are given, default to today
        // * if day of month is given, default month and year
        // * if month is given, default only year
        // * if year is given, don't default anything
        for (i = 0; i < 3 && config._a[i] == null; ++i) {
            config._a[i] = input[i] = currentDate[i];
        }

        // Zero out whatever was not defaulted, including time
        for (; i < 7; i++) {
            config._a[i] = input[i] = (config._a[i] == null) ? (i === 2 ? 1 : 0) : config._a[i];
        }

        // Check for 24:00:00.000
        if (config._a[HOUR] === 24 &&
                config._a[MINUTE] === 0 &&
                config._a[SECOND] === 0 &&
                config._a[MILLISECOND] === 0) {
            config._nextDay = true;
            config._a[HOUR] = 0;
        }

        config._d = (config._useUTC ? makeUTCDate : makeDate).apply(null, input);
        // Apply timezone offset from input. The actual utcOffset can be changed
        // with parseZone.
        if (config._tzm != null) {
            config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);
        }

        if (config._nextDay) {
            config._a[HOUR] = 24;
        }
    }

    function dateFromObject(config) {
        var normalizedInput;

        if (config._d) {
            return;
        }

        normalizedInput = normalizeObjectUnits(config._i);
        config._a = [
            normalizedInput.year,
            normalizedInput.month,
            normalizedInput.day || normalizedInput.date,
            normalizedInput.hour,
            normalizedInput.minute,
            normalizedInput.second,
            normalizedInput.millisecond
        ];

        dateFromConfig(config);
    }

    function currentDateArray(config) {
        var now = new Date();
        if (config._useUTC) {
            return [
                now.getUTCFullYear(),
                now.getUTCMonth(),
                now.getUTCDate()
            ];
        } else {
            return [now.getFullYear(), now.getMonth(), now.getDate()];
        }
    }

    // date from string and format string
    function makeDateFromStringAndFormat(config) {
        if (config._f === moment.ISO_8601) {
            parseISO(config);
            return;
        }

        config._a = [];
        config._pf.empty = true;

        // This array is used to make a Date, either with `new Date` or `Date.UTC`
        var string = '' + config._i,
            i, parsedInput, tokens, token, skipped,
            stringLength = string.length,
            totalParsedInputLength = 0;

        tokens = expandFormat(config._f, config._locale).match(formattingTokens) || [];

        for (i = 0; i < tokens.length; i++) {
            token = tokens[i];
            parsedInput = (string.match(getParseRegexForToken(token, config)) || [])[0];
            if (parsedInput) {
                skipped = string.substr(0, string.indexOf(parsedInput));
                if (skipped.length > 0) {
                    config._pf.unusedInput.push(skipped);
                }
                string = string.slice(string.indexOf(parsedInput) + parsedInput.length);
                totalParsedInputLength += parsedInput.length;
            }
            // don't parse if it's not a known token
            if (formatTokenFunctions[token]) {
                if (parsedInput) {
                    config._pf.empty = false;
                }
                else {
                    config._pf.unusedTokens.push(token);
                }
                addTimeToArrayFromToken(token, parsedInput, config);
            }
            else if (config._strict && !parsedInput) {
                config._pf.unusedTokens.push(token);
            }
        }

        // add remaining unparsed input length to the string
        config._pf.charsLeftOver = stringLength - totalParsedInputLength;
        if (string.length > 0) {
            config._pf.unusedInput.push(string);
        }

        // clear _12h flag if hour is <= 12
        if (config._pf.bigHour === true && config._a[HOUR] <= 12) {
            config._pf.bigHour = undefined;
        }
        // handle meridiem
        config._a[HOUR] = meridiemFixWrap(config._locale, config._a[HOUR],
                config._meridiem);
        dateFromConfig(config);
        checkOverflow(config);
    }

    function unescapeFormat(s) {
        return s.replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g, function (matched, p1, p2, p3, p4) {
            return p1 || p2 || p3 || p4;
        });
    }

    // Code from http://stackoverflow.com/questions/3561493/is-there-a-regexp-escape-function-in-javascript
    function regexpEscape(s) {
        return s.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&');
    }

    // date from string and array of format strings
    function makeDateFromStringAndArray(config) {
        var tempConfig,
            bestMoment,

            scoreToBeat,
            i,
            currentScore;

        if (config._f.length === 0) {
            config._pf.invalidFormat = true;
            config._d = new Date(NaN);
            return;
        }

        for (i = 0; i < config._f.length; i++) {
            currentScore = 0;
            tempConfig = copyConfig({}, config);
            if (config._useUTC != null) {
                tempConfig._useUTC = config._useUTC;
            }
            tempConfig._pf = defaultParsingFlags();
            tempConfig._f = config._f[i];
            makeDateFromStringAndFormat(tempConfig);

            if (!isValid(tempConfig)) {
                continue;
            }

            // if there is any input that was not parsed add a penalty for that format
            currentScore += tempConfig._pf.charsLeftOver;

            //or tokens
            currentScore += tempConfig._pf.unusedTokens.length * 10;

            tempConfig._pf.score = currentScore;

            if (scoreToBeat == null || currentScore < scoreToBeat) {
                scoreToBeat = currentScore;
                bestMoment = tempConfig;
            }
        }

        extend(config, bestMoment || tempConfig);
    }

    // date from iso format
    function parseISO(config) {
        var i, l,
            string = config._i,
            match = isoRegex.exec(string);

        if (match) {
            config._pf.iso = true;
            for (i = 0, l = isoDates.length; i < l; i++) {
                if (isoDates[i][1].exec(string)) {
                    // match[5] should be 'T' or undefined
                    config._f = isoDates[i][0] + (match[6] || ' ');
                    break;
                }
            }
            for (i = 0, l = isoTimes.length; i < l; i++) {
                if (isoTimes[i][1].exec(string)) {
                    config._f += isoTimes[i][0];
                    break;
                }
            }
            if (string.match(parseTokenTimezone)) {
                config._f += 'Z';
            }
            makeDateFromStringAndFormat(config);
        } else {
            config._isValid = false;
        }
    }

    // date from iso format or fallback
    function makeDateFromString(config) {
        parseISO(config);
        if (config._isValid === false) {
            delete config._isValid;
            moment.createFromInputFallback(config);
        }
    }

    function map(arr, fn) {
        var res = [], i;
        for (i = 0; i < arr.length; ++i) {
            res.push(fn(arr[i], i));
        }
        return res;
    }

    function makeDateFromInput(config) {
        var input = config._i, matched;
        if (input === undefined) {
            config._d = new Date();
        } else if (isDate(input)) {
            config._d = new Date(+input);
        } else if ((matched = aspNetJsonRegex.exec(input)) !== null) {
            config._d = new Date(+matched[1]);
        } else if (typeof input === 'string') {
            makeDateFromString(config);
        } else if (isArray(input)) {
            config._a = map(input.slice(0), function (obj) {
                return parseInt(obj, 10);
            });
            dateFromConfig(config);
        } else if (typeof(input) === 'object') {
            dateFromObject(config);
        } else if (typeof(input) === 'number') {
            // from milliseconds
            config._d = new Date(input);
        } else {
            moment.createFromInputFallback(config);
        }
    }

    function makeDate(y, m, d, h, M, s, ms) {
        //can't just apply() to create a date:
        //http://stackoverflow.com/questions/181348/instantiating-a-javascript-object-by-calling-prototype-constructor-apply
        var date = new Date(y, m, d, h, M, s, ms);

        //the date constructor doesn't accept years < 1970
        if (y < 1970) {
            date.setFullYear(y);
        }
        return date;
    }

    function makeUTCDate(y) {
        var date = new Date(Date.UTC.apply(null, arguments));
        if (y < 1970) {
            date.setUTCFullYear(y);
        }
        return date;
    }

    function parseWeekday(input, locale) {
        if (typeof input === 'string') {
            if (!isNaN(input)) {
                input = parseInt(input, 10);
            }
            else {
                input = locale.weekdaysParse(input);
                if (typeof input !== 'number') {
                    return null;
                }
            }
        }
        return input;
    }

    /************************************
        Relative Time
    ************************************/


    // helper function for moment.fn.from, moment.fn.fromNow, and moment.duration.fn.humanize
    function substituteTimeAgo(string, number, withoutSuffix, isFuture, locale) {
        return locale.relativeTime(number || 1, !!withoutSuffix, string, isFuture);
    }

    function relativeTime(posNegDuration, withoutSuffix, locale) {
        var duration = moment.duration(posNegDuration).abs(),
            seconds = round(duration.as('s')),
            minutes = round(duration.as('m')),
            hours = round(duration.as('h')),
            days = round(duration.as('d')),
            months = round(duration.as('M')),
            years = round(duration.as('y')),

            args = seconds < relativeTimeThresholds.s && ['s', seconds] ||
                minutes === 1 && ['m'] ||
                minutes < relativeTimeThresholds.m && ['mm', minutes] ||
                hours === 1 && ['h'] ||
                hours < relativeTimeThresholds.h && ['hh', hours] ||
                days === 1 && ['d'] ||
                days < relativeTimeThresholds.d && ['dd', days] ||
                months === 1 && ['M'] ||
                months < relativeTimeThresholds.M && ['MM', months] ||
                years === 1 && ['y'] || ['yy', years];

        args[2] = withoutSuffix;
        args[3] = +posNegDuration > 0;
        args[4] = locale;
        return substituteTimeAgo.apply({}, args);
    }


    /************************************
        Week of Year
    ************************************/


    // firstDayOfWeek       0 = sun, 6 = sat
    //                      the day of the week that starts the week
    //                      (usually sunday or monday)
    // firstDayOfWeekOfYear 0 = sun, 6 = sat
    //                      the first week is the week that contains the first
    //                      of this day of the week
    //                      (eg. ISO weeks use thursday (4))
    function weekOfYear(mom, firstDayOfWeek, firstDayOfWeekOfYear) {
        var end = firstDayOfWeekOfYear - firstDayOfWeek,
            daysToDayOfWeek = firstDayOfWeekOfYear - mom.day(),
            adjustedMoment;


        if (daysToDayOfWeek > end) {
            daysToDayOfWeek -= 7;
        }

        if (daysToDayOfWeek < end - 7) {
            daysToDayOfWeek += 7;
        }

        adjustedMoment = moment(mom).add(daysToDayOfWeek, 'd');
        return {
            week: Math.ceil(adjustedMoment.dayOfYear() / 7),
            year: adjustedMoment.year()
        };
    }

    //http://en.wikipedia.org/wiki/ISO_week_date#Calculating_a_date_given_the_year.2C_week_number_and_weekday
    function dayOfYearFromWeeks(year, week, weekday, firstDayOfWeekOfYear, firstDayOfWeek) {
        var d = makeUTCDate(year, 0, 1).getUTCDay(), daysToAdd, dayOfYear;

        d = d === 0 ? 7 : d;
        weekday = weekday != null ? weekday : firstDayOfWeek;
        daysToAdd = firstDayOfWeek - d + (d > firstDayOfWeekOfYear ? 7 : 0) - (d < firstDayOfWeek ? 7 : 0);
        dayOfYear = 7 * (week - 1) + (weekday - firstDayOfWeek) + daysToAdd + 1;

        return {
            year: dayOfYear > 0 ? year : year - 1,
            dayOfYear: dayOfYear > 0 ?  dayOfYear : daysInYear(year - 1) + dayOfYear
        };
    }

    /************************************
        Top Level Functions
    ************************************/

    function makeMoment(config) {
        var input = config._i,
            format = config._f,
            res;

        config._locale = config._locale || moment.localeData(config._l);

        if (input === null || (format === undefined && input === '')) {
            return moment.invalid({nullInput: true});
        }

        if (typeof input === 'string') {
            config._i = input = config._locale.preparse(input);
        }

        if (moment.isMoment(input)) {
            return new Moment(input, true);
        } else if (format) {
            if (isArray(format)) {
                makeDateFromStringAndArray(config);
            } else {
                makeDateFromStringAndFormat(config);
            }
        } else {
            makeDateFromInput(config);
        }

        res = new Moment(config);
        if (res._nextDay) {
            // Adding is smart enough around DST
            res.add(1, 'd');
            res._nextDay = undefined;
        }

        return res;
    }

    moment = function (input, format, locale, strict) {
        var c;

        if (typeof(locale) === 'boolean') {
            strict = locale;
            locale = undefined;
        }
        // object construction must be done this way.
        // https://github.com/moment/moment/issues/1423
        c = {};
        c._isAMomentObject = true;
        c._i = input;
        c._f = format;
        c._l = locale;
        c._strict = strict;
        c._isUTC = false;
        c._pf = defaultParsingFlags();

        return makeMoment(c);
    };

    moment.suppressDeprecationWarnings = false;

    moment.createFromInputFallback = deprecate(
        'moment construction falls back to js Date. This is ' +
        'discouraged and will be removed in upcoming major ' +
        'release. Please refer to ' +
        'https://github.com/moment/moment/issues/1407 for more info.',
        function (config) {
            config._d = new Date(config._i + (config._useUTC ? ' UTC' : ''));
        }
    );

    // Pick a moment m from moments so that m[fn](other) is true for all
    // other. This relies on the function fn to be transitive.
    //
    // moments should either be an array of moment objects or an array, whose
    // first element is an array of moment objects.
    function pickBy(fn, moments) {
        var res, i;
        if (moments.length === 1 && isArray(moments[0])) {
            moments = moments[0];
        }
        if (!moments.length) {
            return moment();
        }
        res = moments[0];
        for (i = 1; i < moments.length; ++i) {
            if (moments[i][fn](res)) {
                res = moments[i];
            }
        }
        return res;
    }

    moment.min = function () {
        var args = [].slice.call(arguments, 0);

        return pickBy('isBefore', args);
    };

    moment.max = function () {
        var args = [].slice.call(arguments, 0);

        return pickBy('isAfter', args);
    };

    // creating with utc
    moment.utc = function (input, format, locale, strict) {
        var c;

        if (typeof(locale) === 'boolean') {
            strict = locale;
            locale = undefined;
        }
        // object construction must be done this way.
        // https://github.com/moment/moment/issues/1423
        c = {};
        c._isAMomentObject = true;
        c._useUTC = true;
        c._isUTC = true;
        c._l = locale;
        c._i = input;
        c._f = format;
        c._strict = strict;
        c._pf = defaultParsingFlags();

        return makeMoment(c).utc();
    };

    // creating with unix timestamp (in seconds)
    moment.unix = function (input) {
        return moment(input * 1000);
    };

    // duration
    moment.duration = function (input, key) {
        var duration = input,
            // matching against regexp is expensive, do it on demand
            match = null,
            sign,
            ret,
            parseIso,
            diffRes;

        if (moment.isDuration(input)) {
            duration = {
                ms: input._milliseconds,
                d: input._days,
                M: input._months
            };
        } else if (typeof input === 'number') {
            duration = {};
            if (key) {
                duration[key] = input;
            } else {
                duration.milliseconds = input;
            }
        } else if (!!(match = aspNetTimeSpanJsonRegex.exec(input))) {
            sign = (match[1] === '-') ? -1 : 1;
            duration = {
                y: 0,
                d: toInt(match[DATE]) * sign,
                h: toInt(match[HOUR]) * sign,
                m: toInt(match[MINUTE]) * sign,
                s: toInt(match[SECOND]) * sign,
                ms: toInt(match[MILLISECOND]) * sign
            };
        } else if (!!(match = isoDurationRegex.exec(input))) {
            sign = (match[1] === '-') ? -1 : 1;
            parseIso = function (inp) {
                // We'd normally use ~~inp for this, but unfortunately it also
                // converts floats to ints.
                // inp may be undefined, so careful calling replace on it.
                var res = inp && parseFloat(inp.replace(',', '.'));
                // apply sign while we're at it
                return (isNaN(res) ? 0 : res) * sign;
            };
            duration = {
                y: parseIso(match[2]),
                M: parseIso(match[3]),
                d: parseIso(match[4]),
                h: parseIso(match[5]),
                m: parseIso(match[6]),
                s: parseIso(match[7]),
                w: parseIso(match[8])
            };
        } else if (duration == null) {// checks for null or undefined
            duration = {};
        } else if (typeof duration === 'object' &&
                ('from' in duration || 'to' in duration)) {
            diffRes = momentsDifference(moment(duration.from), moment(duration.to));

            duration = {};
            duration.ms = diffRes.milliseconds;
            duration.M = diffRes.months;
        }

        ret = new Duration(duration);

        if (moment.isDuration(input) && hasOwnProp(input, '_locale')) {
            ret._locale = input._locale;
        }

        return ret;
    };

    // version number
    moment.version = VERSION;

    // default format
    moment.defaultFormat = isoFormat;

    // constant that refers to the ISO standard
    moment.ISO_8601 = function () {};

    // Plugins that add properties should also add the key here (null value),
    // so we can properly clone ourselves.
    moment.momentProperties = momentProperties;

    // This function will be called whenever a moment is mutated.
    // It is intended to keep the offset in sync with the timezone.
    moment.updateOffset = function () {};

    // This function allows you to set a threshold for relative time strings
    moment.relativeTimeThreshold = function (threshold, limit) {
        if (relativeTimeThresholds[threshold] === undefined) {
            return false;
        }
        if (limit === undefined) {
            return relativeTimeThresholds[threshold];
        }
        relativeTimeThresholds[threshold] = limit;
        return true;
    };

    moment.lang = deprecate(
        'moment.lang is deprecated. Use moment.locale instead.',
        function (key, value) {
            return moment.locale(key, value);
        }
    );

    // This function will load locale and then set the global locale.  If
    // no arguments are passed in, it will simply return the current global
    // locale key.
    moment.locale = function (key, values) {
        var data;
        if (key) {
            if (typeof(values) !== 'undefined') {
                data = moment.defineLocale(key, values);
            }
            else {
                data = moment.localeData(key);
            }

            if (data) {
                moment.duration._locale = moment._locale = data;
            }
        }

        return moment._locale._abbr;
    };

    moment.defineLocale = function (name, values) {
        if (values !== null) {
            values.abbr = name;
            if (!locales[name]) {
                locales[name] = new Locale();
            }
            locales[name].set(values);

            // backwards compat for now: also set the locale
            moment.locale(name);

            return locales[name];
        } else {
            // useful for testing
            delete locales[name];
            return null;
        }
    };

    moment.langData = deprecate(
        'moment.langData is deprecated. Use moment.localeData instead.',
        function (key) {
            return moment.localeData(key);
        }
    );

    // returns locale data
    moment.localeData = function (key) {
        var locale;

        if (key && key._locale && key._locale._abbr) {
            key = key._locale._abbr;
        }

        if (!key) {
            return moment._locale;
        }

        if (!isArray(key)) {
            //short-circuit everything else
            locale = loadLocale(key);
            if (locale) {
                return locale;
            }
            key = [key];
        }

        return chooseLocale(key);
    };

    // compare moment object
    moment.isMoment = function (obj) {
        return obj instanceof Moment ||
            (obj != null && hasOwnProp(obj, '_isAMomentObject'));
    };

    // for typechecking Duration objects
    moment.isDuration = function (obj) {
        return obj instanceof Duration;
    };

    for (i = lists.length - 1; i >= 0; --i) {
        makeList(lists[i]);
    }

    moment.normalizeUnits = function (units) {
        return normalizeUnits(units);
    };

    moment.invalid = function (flags) {
        var m = moment.utc(NaN);
        if (flags != null) {
            extend(m._pf, flags);
        }
        else {
            m._pf.userInvalidated = true;
        }

        return m;
    };

    moment.parseZone = function () {
        return moment.apply(null, arguments).parseZone();
    };

    moment.parseTwoDigitYear = function (input) {
        return toInt(input) + (toInt(input) > 68 ? 1900 : 2000);
    };

    moment.isDate = isDate;

    /************************************
        Moment Prototype
    ************************************/


    extend(moment.fn = Moment.prototype, {

        clone : function () {
            return moment(this);
        },

        valueOf : function () {
            return +this._d - ((this._offset || 0) * 60000);
        },

        unix : function () {
            return Math.floor(+this / 1000);
        },

        toString : function () {
            return this.clone().locale('en').format('ddd MMM DD YYYY HH:mm:ss [GMT]ZZ');
        },

        toDate : function () {
            return this._offset ? new Date(+this) : this._d;
        },

        toISOString : function () {
            var m = moment(this).utc();
            if (0 < m.year() && m.year() <= 9999) {
                if ('function' === typeof Date.prototype.toISOString) {
                    // native implementation is ~50x faster, use it when we can
                    return this.toDate().toISOString();
                } else {
                    return formatMoment(m, 'YYYY-MM-DD[T]HH:mm:ss.SSS[Z]');
                }
            } else {
                return formatMoment(m, 'YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]');
            }
        },

        toArray : function () {
            var m = this;
            return [
                m.year(),
                m.month(),
                m.date(),
                m.hours(),
                m.minutes(),
                m.seconds(),
                m.milliseconds()
            ];
        },

        isValid : function () {
            return isValid(this);
        },

        isDSTShifted : function () {
            if (this._a) {
                return this.isValid() && compareArrays(this._a, (this._isUTC ? moment.utc(this._a) : moment(this._a)).toArray()) > 0;
            }

            return false;
        },

        parsingFlags : function () {
            return extend({}, this._pf);
        },

        invalidAt: function () {
            return this._pf.overflow;
        },

        utc : function (keepLocalTime) {
            return this.utcOffset(0, keepLocalTime);
        },

        local : function (keepLocalTime) {
            if (this._isUTC) {
                this.utcOffset(0, keepLocalTime);
                this._isUTC = false;

                if (keepLocalTime) {
                    this.subtract(this._dateUtcOffset(), 'm');
                }
            }
            return this;
        },

        format : function (inputString) {
            var output = formatMoment(this, inputString || moment.defaultFormat);
            return this.localeData().postformat(output);
        },

        add : createAdder(1, 'add'),

        subtract : createAdder(-1, 'subtract'),

        diff : function (input, units, asFloat) {
            var that = makeAs(input, this),
                zoneDiff = (that.utcOffset() - this.utcOffset()) * 6e4,
                anchor, diff, output, daysAdjust;

            units = normalizeUnits(units);

            if (units === 'year' || units === 'month' || units === 'quarter') {
                output = monthDiff(this, that);
                if (units === 'quarter') {
                    output = output / 3;
                } else if (units === 'year') {
                    output = output / 12;
                }
            } else {
                diff = this - that;
                output = units === 'second' ? diff / 1e3 : // 1000
                    units === 'minute' ? diff / 6e4 : // 1000 * 60
                    units === 'hour' ? diff / 36e5 : // 1000 * 60 * 60
                    units === 'day' ? (diff - zoneDiff) / 864e5 : // 1000 * 60 * 60 * 24, negate dst
                    units === 'week' ? (diff - zoneDiff) / 6048e5 : // 1000 * 60 * 60 * 24 * 7, negate dst
                    diff;
            }
            return asFloat ? output : absRound(output);
        },

        from : function (time, withoutSuffix) {
            return moment.duration({to: this, from: time}).locale(this.locale()).humanize(!withoutSuffix);
        },

        fromNow : function (withoutSuffix) {
            return this.from(moment(), withoutSuffix);
        },

        calendar : function (time) {
            // We want to compare the start of today, vs this.
            // Getting start-of-today depends on whether we're locat/utc/offset
            // or not.
            var now = time || moment(),
                sod = makeAs(now, this).startOf('day'),
                diff = this.diff(sod, 'days', true),
                format = diff < -6 ? 'sameElse' :
                    diff < -1 ? 'lastWeek' :
                    diff < 0 ? 'lastDay' :
                    diff < 1 ? 'sameDay' :
                    diff < 2 ? 'nextDay' :
                    diff < 7 ? 'nextWeek' : 'sameElse';
            return this.format(this.localeData().calendar(format, this, moment(now)));
        },

        isLeapYear : function () {
            return isLeapYear(this.year());
        },

        isDST : function () {
            return (this.utcOffset() > this.clone().month(0).utcOffset() ||
                this.utcOffset() > this.clone().month(5).utcOffset());
        },

        day : function (input) {
            var day = this._isUTC ? this._d.getUTCDay() : this._d.getDay();
            if (input != null) {
                input = parseWeekday(input, this.localeData());
                return this.add(input - day, 'd');
            } else {
                return day;
            }
        },

        month : makeAccessor('Month', true),

        startOf : function (units) {
            units = normalizeUnits(units);
            // the following switch intentionally omits break keywords
            // to utilize falling through the cases.
            switch (units) {
            case 'year':
                this.month(0);
                /* falls through */
            case 'quarter':
            case 'month':
                this.date(1);
                /* falls through */
            case 'week':
            case 'isoWeek':
            case 'day':
                this.hours(0);
                /* falls through */
            case 'hour':
                this.minutes(0);
                /* falls through */
            case 'minute':
                this.seconds(0);
                /* falls through */
            case 'second':
                this.milliseconds(0);
                /* falls through */
            }

            // weeks are a special case
            if (units === 'week') {
                this.weekday(0);
            } else if (units === 'isoWeek') {
                this.isoWeekday(1);
            }

            // quarters are also special
            if (units === 'quarter') {
                this.month(Math.floor(this.month() / 3) * 3);
            }

            return this;
        },

        endOf: function (units) {
            units = normalizeUnits(units);
            if (units === undefined || units === 'millisecond') {
                return this;
            }
            return this.startOf(units).add(1, (units === 'isoWeek' ? 'week' : units)).subtract(1, 'ms');
        },

        isAfter: function (input, units) {
            var inputMs;
            units = normalizeUnits(typeof units !== 'undefined' ? units : 'millisecond');
            if (units === 'millisecond') {
                input = moment.isMoment(input) ? input : moment(input);
                return +this > +input;
            } else {
                inputMs = moment.isMoment(input) ? +input : +moment(input);
                return inputMs < +this.clone().startOf(units);
            }
        },

        isBefore: function (input, units) {
            var inputMs;
            units = normalizeUnits(typeof units !== 'undefined' ? units : 'millisecond');
            if (units === 'millisecond') {
                input = moment.isMoment(input) ? input : moment(input);
                return +this < +input;
            } else {
                inputMs = moment.isMoment(input) ? +input : +moment(input);
                return +this.clone().endOf(units) < inputMs;
            }
        },

        isBetween: function (from, to, units) {
            return this.isAfter(from, units) && this.isBefore(to, units);
        },

        isSame: function (input, units) {
            var inputMs;
            units = normalizeUnits(units || 'millisecond');
            if (units === 'millisecond') {
                input = moment.isMoment(input) ? input : moment(input);
                return +this === +input;
            } else {
                inputMs = +moment(input);
                return +(this.clone().startOf(units)) <= inputMs && inputMs <= +(this.clone().endOf(units));
            }
        },

        min: deprecate(
                 'moment().min is deprecated, use moment.min instead. https://github.com/moment/moment/issues/1548',
                 function (other) {
                     other = moment.apply(null, arguments);
                     return other < this ? this : other;
                 }
         ),

        max: deprecate(
                'moment().max is deprecated, use moment.max instead. https://github.com/moment/moment/issues/1548',
                function (other) {
                    other = moment.apply(null, arguments);
                    return other > this ? this : other;
                }
        ),

        zone : deprecate(
                'moment().zone is deprecated, use moment().utcOffset instead. ' +
                'https://github.com/moment/moment/issues/1779',
                function (input, keepLocalTime) {
                    if (input != null) {
                        if (typeof input !== 'string') {
                            input = -input;
                        }

                        this.utcOffset(input, keepLocalTime);

                        return this;
                    } else {
                        return -this.utcOffset();
                    }
                }
        ),

        // keepLocalTime = true means only change the timezone, without
        // affecting the local hour. So 5:31:26 +0300 --[utcOffset(2, true)]-->
        // 5:31:26 +0200 It is possible that 5:31:26 doesn't exist with offset
        // +0200, so we adjust the time as needed, to be valid.
        //
        // Keeping the time actually adds/subtracts (one hour)
        // from the actual represented time. That is why we call updateOffset
        // a second time. In case it wants us to change the offset again
        // _changeInProgress == true case, then we have to adjust, because
        // there is no such time in the given timezone.
        utcOffset : function (input, keepLocalTime) {
            var offset = this._offset || 0,
                localAdjust;
            if (input != null) {
                if (typeof input === 'string') {
                    input = utcOffsetFromString(input);
                }
                if (Math.abs(input) < 16) {
                    input = input * 60;
                }
                if (!this._isUTC && keepLocalTime) {
                    localAdjust = this._dateUtcOffset();
                }
                this._offset = input;
                this._isUTC = true;
                if (localAdjust != null) {
                    this.add(localAdjust, 'm');
                }
                if (offset !== input) {
                    if (!keepLocalTime || this._changeInProgress) {
                        addOrSubtractDurationFromMoment(this,
                                moment.duration(input - offset, 'm'), 1, false);
                    } else if (!this._changeInProgress) {
                        this._changeInProgress = true;
                        moment.updateOffset(this, true);
                        this._changeInProgress = null;
                    }
                }

                return this;
            } else {
                return this._isUTC ? offset : this._dateUtcOffset();
            }
        },

        isLocal : function () {
            return !this._isUTC;
        },

        isUtcOffset : function () {
            return this._isUTC;
        },

        isUtc : function () {
            return this._isUTC && this._offset === 0;
        },

        zoneAbbr : function () {
            return this._isUTC ? 'UTC' : '';
        },

        zoneName : function () {
            return this._isUTC ? 'Coordinated Universal Time' : '';
        },

        parseZone : function () {
            if (this._tzm) {
                this.utcOffset(this._tzm);
            } else if (typeof this._i === 'string') {
                this.utcOffset(utcOffsetFromString(this._i));
            }
            return this;
        },

        hasAlignedHourOffset : function (input) {
            if (!input) {
                input = 0;
            }
            else {
                input = moment(input).utcOffset();
            }

            return (this.utcOffset() - input) % 60 === 0;
        },

        daysInMonth : function () {
            return daysInMonth(this.year(), this.month());
        },

        dayOfYear : function (input) {
            var dayOfYear = round((moment(this).startOf('day') - moment(this).startOf('year')) / 864e5) + 1;
            return input == null ? dayOfYear : this.add((input - dayOfYear), 'd');
        },

        quarter : function (input) {
            return input == null ? Math.ceil((this.month() + 1) / 3) : this.month((input - 1) * 3 + this.month() % 3);
        },

        weekYear : function (input) {
            var year = weekOfYear(this, this.localeData()._week.dow, this.localeData()._week.doy).year;
            return input == null ? year : this.add((input - year), 'y');
        },

        isoWeekYear : function (input) {
            var year = weekOfYear(this, 1, 4).year;
            return input == null ? year : this.add((input - year), 'y');
        },

        week : function (input) {
            var week = this.localeData().week(this);
            return input == null ? week : this.add((input - week) * 7, 'd');
        },

        isoWeek : function (input) {
            var week = weekOfYear(this, 1, 4).week;
            return input == null ? week : this.add((input - week) * 7, 'd');
        },

        weekday : function (input) {
            var weekday = (this.day() + 7 - this.localeData()._week.dow) % 7;
            return input == null ? weekday : this.add(input - weekday, 'd');
        },

        isoWeekday : function (input) {
            // behaves the same as moment#day except
            // as a getter, returns 7 instead of 0 (1-7 range instead of 0-6)
            // as a setter, sunday should belong to the previous week.
            return input == null ? this.day() || 7 : this.day(this.day() % 7 ? input : input - 7);
        },

        isoWeeksInYear : function () {
            return weeksInYear(this.year(), 1, 4);
        },

        weeksInYear : function () {
            var weekInfo = this.localeData()._week;
            return weeksInYear(this.year(), weekInfo.dow, weekInfo.doy);
        },

        get : function (units) {
            units = normalizeUnits(units);
            return this[units]();
        },

        set : function (units, value) {
            var unit;
            if (typeof units === 'object') {
                for (unit in units) {
                    this.set(unit, units[unit]);
                }
            }
            else {
                units = normalizeUnits(units);
                if (typeof this[units] === 'function') {
                    this[units](value);
                }
            }
            return this;
        },

        // If passed a locale key, it will set the locale for this
        // instance.  Otherwise, it will return the locale configuration
        // variables for this instance.
        locale : function (key) {
            var newLocaleData;

            if (key === undefined) {
                return this._locale._abbr;
            } else {
                newLocaleData = moment.localeData(key);
                if (newLocaleData != null) {
                    this._locale = newLocaleData;
                }
                return this;
            }
        },

        lang : deprecate(
            'moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.',
            function (key) {
                if (key === undefined) {
                    return this.localeData();
                } else {
                    return this.locale(key);
                }
            }
        ),

        localeData : function () {
            return this._locale;
        },

        _dateUtcOffset : function () {
            // On Firefox.24 Date#getTimezoneOffset returns a floating point.
            // https://github.com/moment/moment/pull/1871
            return -Math.round(this._d.getTimezoneOffset() / 15) * 15;
        }

    });

    function rawMonthSetter(mom, value) {
        var dayOfMonth;

        // TODO: Move this out of here!
        if (typeof value === 'string') {
            value = mom.localeData().monthsParse(value);
            // TODO: Another silent failure?
            if (typeof value !== 'number') {
                return mom;
            }
        }

        dayOfMonth = Math.min(mom.date(),
                daysInMonth(mom.year(), value));
        mom._d['set' + (mom._isUTC ? 'UTC' : '') + 'Month'](value, dayOfMonth);
        return mom;
    }

    function rawGetter(mom, unit) {
        return mom._d['get' + (mom._isUTC ? 'UTC' : '') + unit]();
    }

    function rawSetter(mom, unit, value) {
        if (unit === 'Month') {
            return rawMonthSetter(mom, value);
        } else {
            return mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](value);
        }
    }

    function makeAccessor(unit, keepTime) {
        return function (value) {
            if (value != null) {
                rawSetter(this, unit, value);
                moment.updateOffset(this, keepTime);
                return this;
            } else {
                return rawGetter(this, unit);
            }
        };
    }

    moment.fn.millisecond = moment.fn.milliseconds = makeAccessor('Milliseconds', false);
    moment.fn.second = moment.fn.seconds = makeAccessor('Seconds', false);
    moment.fn.minute = moment.fn.minutes = makeAccessor('Minutes', false);
    // Setting the hour should keep the time, because the user explicitly
    // specified which hour he wants. So trying to maintain the same hour (in
    // a new timezone) makes sense. Adding/subtracting hours does not follow
    // this rule.
    moment.fn.hour = moment.fn.hours = makeAccessor('Hours', true);
    // moment.fn.month is defined separately
    moment.fn.date = makeAccessor('Date', true);
    moment.fn.dates = deprecate('dates accessor is deprecated. Use date instead.', makeAccessor('Date', true));
    moment.fn.year = makeAccessor('FullYear', true);
    moment.fn.years = deprecate('years accessor is deprecated. Use year instead.', makeAccessor('FullYear', true));

    // add plural methods
    moment.fn.days = moment.fn.day;
    moment.fn.months = moment.fn.month;
    moment.fn.weeks = moment.fn.week;
    moment.fn.isoWeeks = moment.fn.isoWeek;
    moment.fn.quarters = moment.fn.quarter;

    // add aliased format methods
    moment.fn.toJSON = moment.fn.toISOString;

    // alias isUtc for dev-friendliness
    moment.fn.isUTC = moment.fn.isUtc;

    /************************************
        Duration Prototype
    ************************************/


    function daysToYears (days) {
        // 400 years have 146097 days (taking into account leap year rules)
        return days * 400 / 146097;
    }

    function yearsToDays (years) {
        // years * 365 + absRound(years / 4) -
        //     absRound(years / 100) + absRound(years / 400);
        return years * 146097 / 400;
    }

    extend(moment.duration.fn = Duration.prototype, {

        _bubble : function () {
            var milliseconds = this._milliseconds,
                days = this._days,
                months = this._months,
                data = this._data,
                seconds, minutes, hours, years = 0;

            // The following code bubbles up values, see the tests for
            // examples of what that means.
            data.milliseconds = milliseconds % 1000;

            seconds = absRound(milliseconds / 1000);
            data.seconds = seconds % 60;

            minutes = absRound(seconds / 60);
            data.minutes = minutes % 60;

            hours = absRound(minutes / 60);
            data.hours = hours % 24;

            days += absRound(hours / 24);

            // Accurately convert days to years, assume start from year 0.
            years = absRound(daysToYears(days));
            days -= absRound(yearsToDays(years));

            // 30 days to a month
            // TODO (iskren): Use anchor date (like 1st Jan) to compute this.
            months += absRound(days / 30);
            days %= 30;

            // 12 months -> 1 year
            years += absRound(months / 12);
            months %= 12;

            data.days = days;
            data.months = months;
            data.years = years;
        },

        abs : function () {
            this._milliseconds = Math.abs(this._milliseconds);
            this._days = Math.abs(this._days);
            this._months = Math.abs(this._months);

            this._data.milliseconds = Math.abs(this._data.milliseconds);
            this._data.seconds = Math.abs(this._data.seconds);
            this._data.minutes = Math.abs(this._data.minutes);
            this._data.hours = Math.abs(this._data.hours);
            this._data.months = Math.abs(this._data.months);
            this._data.years = Math.abs(this._data.years);

            return this;
        },

        weeks : function () {
            return absRound(this.days() / 7);
        },

        valueOf : function () {
            return this._milliseconds +
              this._days * 864e5 +
              (this._months % 12) * 2592e6 +
              toInt(this._months / 12) * 31536e6;
        },

        humanize : function (withSuffix) {
            var output = relativeTime(this, !withSuffix, this.localeData());

            if (withSuffix) {
                output = this.localeData().pastFuture(+this, output);
            }

            return this.localeData().postformat(output);
        },

        add : function (input, val) {
            // supports only 2.0-style add(1, 's') or add(moment)
            var dur = moment.duration(input, val);

            this._milliseconds += dur._milliseconds;
            this._days += dur._days;
            this._months += dur._months;

            this._bubble();

            return this;
        },

        subtract : function (input, val) {
            var dur = moment.duration(input, val);

            this._milliseconds -= dur._milliseconds;
            this._days -= dur._days;
            this._months -= dur._months;

            this._bubble();

            return this;
        },

        get : function (units) {
            units = normalizeUnits(units);
            return this[units.toLowerCase() + 's']();
        },

        as : function (units) {
            var days, months;
            units = normalizeUnits(units);

            if (units === 'month' || units === 'year') {
                days = this._days + this._milliseconds / 864e5;
                months = this._months + daysToYears(days) * 12;
                return units === 'month' ? months : months / 12;
            } else {
                // handle milliseconds separately because of floating point math errors (issue #1867)
                days = this._days + Math.round(yearsToDays(this._months / 12));
                switch (units) {
                    case 'week': return days / 7 + this._milliseconds / 6048e5;
                    case 'day': return days + this._milliseconds / 864e5;
                    case 'hour': return days * 24 + this._milliseconds / 36e5;
                    case 'minute': return days * 24 * 60 + this._milliseconds / 6e4;
                    case 'second': return days * 24 * 60 * 60 + this._milliseconds / 1000;
                    // Math.floor prevents floating point math errors here
                    case 'millisecond': return Math.floor(days * 24 * 60 * 60 * 1000) + this._milliseconds;
                    default: throw new Error('Unknown unit ' + units);
                }
            }
        },

        lang : moment.fn.lang,
        locale : moment.fn.locale,

        toIsoString : deprecate(
            'toIsoString() is deprecated. Please use toISOString() instead ' +
            '(notice the capitals)',
            function () {
                return this.toISOString();
            }
        ),

        toISOString : function () {
            // inspired by https://github.com/dordille/moment-isoduration/blob/master/moment.isoduration.js
            var years = Math.abs(this.years()),
                months = Math.abs(this.months()),
                days = Math.abs(this.days()),
                hours = Math.abs(this.hours()),
                minutes = Math.abs(this.minutes()),
                seconds = Math.abs(this.seconds() + this.milliseconds() / 1000);

            if (!this.asSeconds()) {
                // this is the same as C#'s (Noda) and python (isodate)...
                // but not other JS (goog.date)
                return 'P0D';
            }

            return (this.asSeconds() < 0 ? '-' : '') +
                'P' +
                (years ? years + 'Y' : '') +
                (months ? months + 'M' : '') +
                (days ? days + 'D' : '') +
                ((hours || minutes || seconds) ? 'T' : '') +
                (hours ? hours + 'H' : '') +
                (minutes ? minutes + 'M' : '') +
                (seconds ? seconds + 'S' : '');
        },

        localeData : function () {
            return this._locale;
        },

        toJSON : function () {
            return this.toISOString();
        }
    });

    moment.duration.fn.toString = moment.duration.fn.toISOString;

    function makeDurationGetter(name) {
        moment.duration.fn[name] = function () {
            return this._data[name];
        };
    }

    for (i in unitMillisecondFactors) {
        if (hasOwnProp(unitMillisecondFactors, i)) {
            makeDurationGetter(i.toLowerCase());
        }
    }

    moment.duration.fn.asMilliseconds = function () {
        return this.as('ms');
    };
    moment.duration.fn.asSeconds = function () {
        return this.as('s');
    };
    moment.duration.fn.asMinutes = function () {
        return this.as('m');
    };
    moment.duration.fn.asHours = function () {
        return this.as('h');
    };
    moment.duration.fn.asDays = function () {
        return this.as('d');
    };
    moment.duration.fn.asWeeks = function () {
        return this.as('weeks');
    };
    moment.duration.fn.asMonths = function () {
        return this.as('M');
    };
    moment.duration.fn.asYears = function () {
        return this.as('y');
    };

    /************************************
        Default Locale
    ************************************/


    // Set default locale, other locale will inherit from English.
    moment.locale('en', {
        ordinalParse: /\d{1,2}(th|st|nd|rd)/,
        ordinal : function (number) {
            var b = number % 10,
                output = (toInt(number % 100 / 10) === 1) ? 'th' :
                (b === 1) ? 'st' :
                (b === 2) ? 'nd' :
                (b === 3) ? 'rd' : 'th';
            return number + output;
        }
    });

    /* EMBED_LOCALES */

    /************************************
        Exposing Moment
    ************************************/

    function makeGlobal(shouldDeprecate) {
        /*global ender:false */
        if (typeof ender !== 'undefined') {
            return;
        }
        oldGlobalMoment = globalScope.moment;
        if (shouldDeprecate) {
            globalScope.moment = deprecate(
                    'Accessing Moment through the global scope is ' +
                    'deprecated, and will be removed in an upcoming ' +
                    'release.',
                    moment);
        } else {
            globalScope.moment = moment;
        }
    }

    // CommonJS module is defined
    if (hasModule) {
        module.exports = moment;
    } else if (typeof define === 'function' && define.amd) {
        define(function (require, exports, module) {
            if (module.config && module.config() && module.config().noGlobal === true) {
                // release the global variable
                globalScope.moment = oldGlobalMoment;
            }

            return moment;
        });
        makeGlobal(true);
    } else {
        makeGlobal();
    }
}).call(this);

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react-onclickoutside/index.js":[function(require,module,exports){
/**
 * A mixin for handling (effectively) onClickOutside for React components.
 * Note that we're not intercepting any events in this approach, and we're
 * not using double events for capturing and discarding in layers or wrappers.
 *
 * The idea is that components define function
 *
 *   onClickOutside: function() { ... }
 *
 * If no such function is defined, an error will be thrown, as this means
 * either it still needs to be written, or the component should not be using
 * this mixing since it will not exhibit onClickOutside behaviour.
 *
 */
(function (root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define([], factory);
  } else if (typeof exports === 'object') {
    // Node. Note that this does not work with strict
    // CommonJS, but only CommonJS-like environments
    // that support module.exports
    module.exports = factory();
  } else {
    // Browser globals (root is window)
    root.OnClickOutside = factory();
  }
}(this, function () {
  "use strict";

  // Use a parallel array because we can't use
  // objects as keys, they get toString-coerced
  var registeredComponents = [];
  var handlers = [];

  return {
    componentDidMount: function() {
      if(!this.handleClickOutside)
        throw new Error("Component lacks a handleClickOutside(event) function for processing outside click events.");

      var fn = (function(localNode, eventHandler) {
        return function(evt) {
          var source = evt.target;
          var found = false;
          // If source=local then this event came from "somewhere"
          // inside and should be ignored. We could handle this with
          // a layered approach, too, but that requires going back to
          // thinking in terms of Dom node nesting, running counter
          // to React's "you shouldn't care about the DOM" philosophy.
          while(source.parentNode) {
            found = (source === localNode);
            if(found) return;
            source = source.parentNode;
          }
          eventHandler(evt);
        }
      }(this.getDOMNode(), this.handleClickOutside));

      document.addEventListener("mousedown", fn);
      document.addEventListener("touchstart", fn);

      var pos = registeredComponents.length;
      registeredComponents.push(this);
      handlers[pos] = fn;
    },

    componentWillUnmount: function() {
      var pos = registeredComponents.indexOf(this);
      if( pos>-1) {
        var fn = handlers[pos];
        if (fn) {
          document.removeEventListener("mousedown", fn);
          document.removeEventListener("touchstart", fn);
        }
      }
    }
  };

}));

},{}],"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/addons.js":[function(require,module,exports){
module.exports = require('./lib/ReactWithAddons');

},{"./lib/ReactWithAddons":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ReactWithAddons.js"}],"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/AutoFocusMixin.js":[function(require,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule AutoFocusMixin
 * @typechecks static-only
 */

"use strict";

var focusNode = require("./focusNode");

var AutoFocusMixin = {
  componentDidMount: function() {
    if (this.props.autoFocus) {
      focusNode(this.getDOMNode());
    }
  }
};

module.exports = AutoFocusMixin;

},{"./focusNode":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/focusNode.js"}],"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/BeforeInputEventPlugin.js":[function(require,module,exports){
/**
 * Copyright 2013 Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule BeforeInputEventPlugin
 * @typechecks static-only
 */

"use strict";

var EventConstants = require("./EventConstants");
var EventPropagators = require("./EventPropagators");
var ExecutionEnvironment = require("./ExecutionEnvironment");
var SyntheticInputEvent = require("./SyntheticInputEvent");

var keyOf = require("./keyOf");

var canUseTextInputEvent = (
  ExecutionEnvironment.canUseDOM &&
  'TextEvent' in window &&
  !('documentMode' in document || isPresto())
);

/**
 * Opera <= 12 includes TextEvent in window, but does not fire
 * text input events. Rely on keypress instead.
 */
function isPresto() {
  var opera = window.opera;
  return (
    typeof opera === 'object' &&
    typeof opera.version === 'function' &&
    parseInt(opera.version(), 10) <= 12
  );
}

var SPACEBAR_CODE = 32;
var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);

var topLevelTypes = EventConstants.topLevelTypes;

// Events and their corresponding property names.
var eventTypes = {
  beforeInput: {
    phasedRegistrationNames: {
      bubbled: keyOf({onBeforeInput: null}),
      captured: keyOf({onBeforeInputCapture: null})
    },
    dependencies: [
      topLevelTypes.topCompositionEnd,
      topLevelTypes.topKeyPress,
      topLevelTypes.topTextInput,
      topLevelTypes.topPaste
    ]
  }
};

// Track characters inserted via keypress and composition events.
var fallbackChars = null;

// Track whether we've ever handled a keypress on the space key.
var hasSpaceKeypress = false;

/**
 * Return whether a native keypress event is assumed to be a command.
 * This is required because Firefox fires `keypress` events for key commands
 * (cut, copy, select-all, etc.) even though no character is inserted.
 */
function isKeypressCommand(nativeEvent) {
  return (
    (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) &&
    // ctrlKey && altKey is equivalent to AltGr, and is not a command.
    !(nativeEvent.ctrlKey && nativeEvent.altKey)
  );
}

/**
 * Create an `onBeforeInput` event to match
 * http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105/#events-inputevents.
 *
 * This event plugin is based on the native `textInput` event
 * available in Chrome, Safari, Opera, and IE. This event fires after
 * `onKeyPress` and `onCompositionEnd`, but before `onInput`.
 *
 * `beforeInput` is spec'd but not implemented in any browsers, and
 * the `input` event does not provide any useful information about what has
 * actually been added, contrary to the spec. Thus, `textInput` is the best
 * available event to identify the characters that have actually been inserted
 * into the target node.
 */
var BeforeInputEventPlugin = {

  eventTypes: eventTypes,

  /**
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {DOMEventTarget} topLevelTarget The listening component root node.
   * @param {string} topLevelTargetID ID of `topLevelTarget`.
   * @param {object} nativeEvent Native browser event.
   * @return {*} An accumulation of synthetic events.
   * @see {EventPluginHub.extractEvents}
   */
  extractEvents: function(
      topLevelType,
      topLevelTarget,
      topLevelTargetID,
      nativeEvent) {

    var chars;

    if (canUseTextInputEvent) {
      switch (topLevelType) {
        case topLevelTypes.topKeyPress:
          /**
           * If native `textInput` events are available, our goal is to make
           * use of them. However, there is a special case: the spacebar key.
           * In Webkit, preventing default on a spacebar `textInput` event
           * cancels character insertion, but it *also* causes the browser
           * to fall back to its default spacebar behavior of scrolling the
           * page.
           *
           * Tracking at:
           * https://code.google.com/p/chromium/issues/detail?id=355103
           *
           * To avoid this issue, use the keypress event as if no `textInput`
           * event is available.
           */
          var which = nativeEvent.which;
          if (which !== SPACEBAR_CODE) {
            return;
          }

          hasSpaceKeypress = true;
          chars = SPACEBAR_CHAR;
          break;

        case topLevelTypes.topTextInput:
          // Record the characters to be added to the DOM.
          chars = nativeEvent.data;

          // If it's a spacebar character, assume that we have already handled
          // it at the keypress level and bail immediately. Android Chrome
          // doesn't give us keycodes, so we need to blacklist it.
          if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {
            return;
          }

          // Otherwise, carry on.
          break;

        default:
          // For other native event types, do nothing.
          return;
      }
    } else {
      switch (topLevelType) {
        case topLevelTypes.topPaste:
          // If a paste event occurs after a keypress, throw out the input
          // chars. Paste events should not lead to BeforeInput events.
          fallbackChars = null;
          break;
        case topLevelTypes.topKeyPress:
          /**
           * As of v27, Firefox may fire keypress events even when no character
           * will be inserted. A few possibilities:
           *
           * - `which` is `0`. Arrow keys, Esc key, etc.
           *
           * - `which` is the pressed key code, but no char is available.
           *   Ex: 'AltGr + d` in Polish. There is no modified character for
           *   this key combination and no character is inserted into the
           *   document, but FF fires the keypress for char code `100` anyway.
           *   No `input` event will occur.
           *
           * - `which` is the pressed key code, but a command combination is
           *   being used. Ex: `Cmd+C`. No character is inserted, and no
           *   `input` event will occur.
           */
          if (nativeEvent.which && !isKeypressCommand(nativeEvent)) {
            fallbackChars = String.fromCharCode(nativeEvent.which);
          }
          break;
        case topLevelTypes.topCompositionEnd:
          fallbackChars = nativeEvent.data;
          break;
      }

      // If no changes have occurred to the fallback string, no relevant
      // event has fired and we're done.
      if (fallbackChars === null) {
        return;
      }

      chars = fallbackChars;
    }

    // If no characters are being inserted, no BeforeInput event should
    // be fired.
    if (!chars) {
      return;
    }

    var event = SyntheticInputEvent.getPooled(
      eventTypes.beforeInput,
      topLevelTargetID,
      nativeEvent
    );

    event.data = chars;
    fallbackChars = null;
    EventPropagators.accumulateTwoPhaseDispatches(event);
    return event;
  }
};

module.exports = BeforeInputEventPlugin;

},{"./EventConstants":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/EventConstants.js","./EventPropagators":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/EventPropagators.js","./ExecutionEnvironment":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ExecutionEnvironment.js","./SyntheticInputEvent":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/SyntheticInputEvent.js","./keyOf":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/keyOf.js"}],"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/CSSCore.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule CSSCore
 * @typechecks
 */

var invariant = require("./invariant");

/**
 * The CSSCore module specifies the API (and implements most of the methods)
 * that should be used when dealing with the display of elements (via their
 * CSS classes and visibility on screen. It is an API focused on mutating the
 * display and not reading it as no logical state should be encoded in the
 * display of elements.
 */

var CSSCore = {

  /**
   * Adds the class passed in to the element if it doesn't already have it.
   *
   * @param {DOMElement} element the element to set the class on
   * @param {string} className the CSS className
   * @return {DOMElement} the element passed in
   */
  addClass: function(element, className) {
    ("production" !== process.env.NODE_ENV ? invariant(
      !/\s/.test(className),
      'CSSCore.addClass takes only a single class name. "%s" contains ' +
      'multiple classes.', className
    ) : invariant(!/\s/.test(className)));

    if (className) {
      if (element.classList) {
        element.classList.add(className);
      } else if (!CSSCore.hasClass(element, className)) {
        element.className = element.className + ' ' + className;
      }
    }
    return element;
  },

  /**
   * Removes the class passed in from the element
   *
   * @param {DOMElement} element the element to set the class on
   * @param {string} className the CSS className
   * @return {DOMElement} the element passed in
   */
  removeClass: function(element, className) {
    ("production" !== process.env.NODE_ENV ? invariant(
      !/\s/.test(className),
      'CSSCore.removeClass takes only a single class name. "%s" contains ' +
      'multiple classes.', className
    ) : invariant(!/\s/.test(className)));

    if (className) {
      if (element.classList) {
        element.classList.remove(className);
      } else if (CSSCore.hasClass(element, className)) {
        element.className = element.className
          .replace(new RegExp('(^|\\s)' + className + '(?:\\s|$)', 'g'), '$1')
          .replace(/\s+/g, ' ') // multiple spaces to one
          .replace(/^\s*|\s*$/g, ''); // trim the ends
      }
    }
    return element;
  },

  /**
   * Helper to add or remove a class from an element based on a condition.
   *
   * @param {DOMElement} element the element to set the class on
   * @param {string} className the CSS className
   * @param {*} bool condition to whether to add or remove the class
   * @return {DOMElement} the element passed in
   */
  conditionClass: function(element, className, bool) {
    return (bool ? CSSCore.addClass : CSSCore.removeClass)(element, className);
  },

  /**
   * Tests whether the element has the class specified.
   *
   * @param {DOMNode|DOMWindow} element the element to set the class on
   * @param {string} className the CSS className
   * @return {boolean} true if the element has the class, false if not
   */
  hasClass: function(element, className) {
    ("production" !== process.env.NODE_ENV ? invariant(
      !/\s/.test(className),
      'CSS.hasClass takes only a single class name.'
    ) : invariant(!/\s/.test(className)));
    if (element.classList) {
      return !!className && element.classList.contains(className);
    }
    return (' ' + element.className + ' ').indexOf(' ' + className + ' ') > -1;
  }

};

module.exports = CSSCore;

}).call(this,require('_process'))

},{"./invariant":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/invariant.js","_process":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/browserify/node_modules/process/browser.js"}],"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/CSSProperty.js":[function(require,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule CSSProperty
 */

"use strict";

/**
 * CSS properties which accept numbers but are not in units of "px".
 */
var isUnitlessNumber = {
  columnCount: true,
  flex: true,
  flexGrow: true,
  flexShrink: true,
  fontWeight: true,
  lineClamp: true,
  lineHeight: true,
  opacity: true,
  order: true,
  orphans: true,
  widows: true,
  zIndex: true,
  zoom: true,

  // SVG-related properties
  fillOpacity: true,
  strokeOpacity: true
};

/**
 * @param {string} prefix vendor-specific prefix, eg: Webkit
 * @param {string} key style name, eg: transitionDuration
 * @return {string} style name prefixed with `prefix`, properly camelCased, eg:
 * WebkitTransitionDuration
 */
function prefixKey(prefix, key) {
  return prefix + key.charAt(0).toUpperCase() + key.substring(1);
}

/**
 * Support style names that may come passed in prefixed by adding permutations
 * of vendor prefixes.
 */
var prefixes = ['Webkit', 'ms', 'Moz', 'O'];

// Using Object.keys here, or else the vanilla for-in loop makes IE8 go into an
// infinite loop, because it iterates over the newly added props too.
Object.keys(isUnitlessNumber).forEach(function(prop) {
  prefixes.forEach(function(prefix) {
    isUnitlessNumber[prefixKey(prefix, prop)] = isUnitlessNumber[prop];
  });
});

/**
 * Most style properties can be unset by doing .style[prop] = '' but IE8
 * doesn't like doing that with shorthand properties so for the properties that
 * IE8 breaks on, which are listed here, we instead unset each of the
 * individual properties. See http://bugs.jquery.com/ticket/12385.
 * The 4-value 'clock' properties like margin, padding, border-width seem to
 * behave without any problems. Curiously, list-style works too without any
 * special prodding.
 */
var shorthandPropertyExpansions = {
  background: {
    backgroundImage: true,
    backgroundPosition: true,
    backgroundRepeat: true,
    backgroundColor: true
  },
  border: {
    borderWidth: true,
    borderStyle: true,
    borderColor: true
  },
  borderBottom: {
    borderBottomWidth: true,
    borderBottomStyle: true,
    borderBottomColor: true
  },
  borderLeft: {
    borderLeftWidth: true,
    borderLeftStyle: true,
    borderLeftColor: true
  },
  borderRight: {
    borderRightWidth: true,
    borderRightStyle: true,
    borderRightColor: true
  },
  borderTop: {
    borderTopWidth: true,
    borderTopStyle: true,
    borderTopColor: true
  },
  font: {
    fontStyle: true,
    fontVariant: true,
    fontWeight: true,
    fontSize: true,
    lineHeight: true,
    fontFamily: true
  }
};

var CSSProperty = {
  isUnitlessNumber: isUnitlessNumber,
  shorthandPropertyExpansions: shorthandPropertyExpansions
};

module.exports = CSSProperty;

},{}],"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/CSSPropertyOperations.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule CSSPropertyOperations
 * @typechecks static-only
 */

"use strict";

var CSSProperty = require("./CSSProperty");
var ExecutionEnvironment = require("./ExecutionEnvironment");

var camelizeStyleName = require("./camelizeStyleName");
var dangerousStyleValue = require("./dangerousStyleValue");
var hyphenateStyleName = require("./hyphenateStyleName");
var memoizeStringOnly = require("./memoizeStringOnly");
var warning = require("./warning");

var processStyleName = memoizeStringOnly(function(styleName) {
  return hyphenateStyleName(styleName);
});

var styleFloatAccessor = 'cssFloat';
if (ExecutionEnvironment.canUseDOM) {
  // IE8 only supports accessing cssFloat (standard) as styleFloat
  if (document.documentElement.style.cssFloat === undefined) {
    styleFloatAccessor = 'styleFloat';
  }
}

if ("production" !== process.env.NODE_ENV) {
  var warnedStyleNames = {};

  var warnHyphenatedStyleName = function(name) {
    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
      return;
    }

    warnedStyleNames[name] = true;
    ("production" !== process.env.NODE_ENV ? warning(
      false,
      'Unsupported style property ' + name + '. Did you mean ' +
      camelizeStyleName(name) + '?'
    ) : null);
  };
}

/**
 * Operations for dealing with CSS properties.
 */
var CSSPropertyOperations = {

  /**
   * Serializes a mapping of style properties for use as inline styles:
   *
   *   > createMarkupForStyles({width: '200px', height: 0})
   *   "width:200px;height:0;"
   *
   * Undefined values are ignored so that declarative programming is easier.
   * The result should be HTML-escaped before insertion into the DOM.
   *
   * @param {object} styles
   * @return {?string}
   */
  createMarkupForStyles: function(styles) {
    var serialized = '';
    for (var styleName in styles) {
      if (!styles.hasOwnProperty(styleName)) {
        continue;
      }
      if ("production" !== process.env.NODE_ENV) {
        if (styleName.indexOf('-') > -1) {
          warnHyphenatedStyleName(styleName);
        }
      }
      var styleValue = styles[styleName];
      if (styleValue != null) {
        serialized += processStyleName(styleName) + ':';
        serialized += dangerousStyleValue(styleName, styleValue) + ';';
      }
    }
    return serialized || null;
  },

  /**
   * Sets the value for multiple styles on a node.  If a value is specified as
   * '' (empty string), the corresponding style property will be unset.
   *
   * @param {DOMElement} node
   * @param {object} styles
   */
  setValueForStyles: function(node, styles) {
    var style = node.style;
    for (var styleName in styles) {
      if (!styles.hasOwnProperty(styleName)) {
        continue;
      }
      if ("production" !== process.env.NODE_ENV) {
        if (styleName.indexOf('-') > -1) {
          warnHyphenatedStyleName(styleName);
        }
      }
      var styleValue = dangerousStyleValue(styleName, styles[styleName]);
      if (styleName === 'float') {
        styleName = styleFloatAccessor;
      }
      if (styleValue) {
        style[styleName] = styleValue;
      } else {
        var expansion = CSSProperty.shorthandPropertyExpansions[styleName];
        if (expansion) {
          // Shorthand property that IE8 won't like unsetting, so unset each
          // component to placate it
          for (var individualStyleName in expansion) {
            style[individualStyleName] = '';
          }
        } else {
          style[styleName] = '';
        }
      }
    }
  }

};

module.exports = CSSPropertyOperations;

}).call(this,require('_process'))

},{"./CSSProperty":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/CSSProperty.js","./ExecutionEnvironment":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ExecutionEnvironment.js","./camelizeStyleName":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/camelizeStyleName.js","./dangerousStyleValue":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/dangerousStyleValue.js","./hyphenateStyleName":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/hyphenateStyleName.js","./memoizeStringOnly":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/memoizeStringOnly.js","./warning":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/warning.js","_process":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/browserify/node_modules/process/browser.js"}],"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/CallbackQueue.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule CallbackQueue
 */

"use strict";

var PooledClass = require("./PooledClass");

var assign = require("./Object.assign");
var invariant = require("./invariant");

/**
 * A specialized pseudo-event module to help keep track of components waiting to
 * be notified when their DOM representations are available for use.
 *
 * This implements `PooledClass`, so you should never need to instantiate this.
 * Instead, use `CallbackQueue.getPooled()`.
 *
 * @class ReactMountReady
 * @implements PooledClass
 * @internal
 */
function CallbackQueue() {
  this._callbacks = null;
  this._contexts = null;
}

assign(CallbackQueue.prototype, {

  /**
   * Enqueues a callback to be invoked when `notifyAll` is invoked.
   *
   * @param {function} callback Invoked when `notifyAll` is invoked.
   * @param {?object} context Context to call `callback` with.
   * @internal
   */
  enqueue: function(callback, context) {
    this._callbacks = this._callbacks || [];
    this._contexts = this._contexts || [];
    this._callbacks.push(callback);
    this._contexts.push(context);
  },

  /**
   * Invokes all enqueued callbacks and clears the queue. This is invoked after
   * the DOM representation of a component has been created or updated.
   *
   * @internal
   */
  notifyAll: function() {
    var callbacks = this._callbacks;
    var contexts = this._contexts;
    if (callbacks) {
      ("production" !== process.env.NODE_ENV ? invariant(
        callbacks.length === contexts.length,
        "Mismatched list of contexts in callback queue"
      ) : invariant(callbacks.length === contexts.length));
      this._callbacks = null;
      this._contexts = null;
      for (var i = 0, l = callbacks.length; i < l; i++) {
        callbacks[i].call(contexts[i]);
      }
      callbacks.length = 0;
      contexts.length = 0;
    }
  },

  /**
   * Resets the internal queue.
   *
   * @internal
   */
  reset: function() {
    this._callbacks = null;
    this._contexts = null;
  },

  /**
   * `PooledClass` looks for this.
   */
  destructor: function() {
    this.reset();
  }

});

PooledClass.addPoolingTo(CallbackQueue);

module.exports = CallbackQueue;

}).call(this,require('_process'))

},{"./Object.assign":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/Object.assign.js","./PooledClass":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/PooledClass.js","./invariant":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/invariant.js","_process":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/browserify/node_modules/process/browser.js"}],"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ChangeEventPlugin.js":[function(require,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ChangeEventPlugin
 */

"use strict";

var EventConstants = require("./EventConstants");
var EventPluginHub = require("./EventPluginHub");
var EventPropagators = require("./EventPropagators");
var ExecutionEnvironment = require("./ExecutionEnvironment");
var ReactUpdates = require("./ReactUpdates");
var SyntheticEvent = require("./SyntheticEvent");

var isEventSupported = require("./isEventSupported");
var isTextInputElement = require("./isTextInputElement");
var keyOf = require("./keyOf");

var topLevelTypes = EventConstants.topLevelTypes;

var eventTypes = {
  change: {
    phasedRegistrationNames: {
      bubbled: keyOf({onChange: null}),
      captured: keyOf({onChangeCapture: null})
    },
    dependencies: [
      topLevelTypes.topBlur,
      topLevelTypes.topChange,
      topLevelTypes.topClick,
      topLevelTypes.topFocus,
      topLevelTypes.topInput,
      topLevelTypes.topKeyDown,
      topLevelTypes.topKeyUp,
      topLevelTypes.topSelectionChange
    ]
  }
};

/**
 * For IE shims
 */
var activeElement = null;
var activeElementID = null;
var activeElementValue = null;
var activeElementValueProp = null;

/**
 * SECTION: handle `change` event
 */
function shouldUseChangeEvent(elem) {
  return (
    elem.nodeName === 'SELECT' ||
    (elem.nodeName === 'INPUT' && elem.type === 'file')
  );
}

var doesChangeEventBubble = false;
if (ExecutionEnvironment.canUseDOM) {
  // See `handleChange` comment below
  doesChangeEventBubble = isEventSupported('change') && (
    !('documentMode' in document) || document.documentMode > 8
  );
}

function manualDispatchChangeEvent(nativeEvent) {
  var event = SyntheticEvent.getPooled(
    eventTypes.change,
    activeElementID,
    nativeEvent
  );
  EventPropagators.accumulateTwoPhaseDispatches(event);

  // If change and propertychange bubbled, we'd just bind to it like all the
  // other events and have it go through ReactBrowserEventEmitter. Since it
  // doesn't, we manually listen for the events and so we have to enqueue and
  // process the abstract event manually.
  //
  // Batching is necessary here in order to ensure that all event handlers run
  // before the next rerender (including event handlers attached to ancestor
  // elements instead of directly on the input). Without this, controlled
  // components don't work properly in conjunction with event bubbling because
  // the component is rerendered and the value reverted before all the event
  // handlers can run. See https://github.com/facebook/react/issues/708.
  ReactUpdates.batchedUpdates(runEventInBatch, event);
}

function runEventInBatch(event) {
  EventPluginHub.enqueueEvents(event);
  EventPluginHub.processEventQueue();
}

function startWatchingForChangeEventIE8(target, targetID) {
  activeElement = target;
  activeElementID = targetID;
  activeElement.attachEvent('onchange', manualDispatchChangeEvent);
}

function stopWatchingForChangeEventIE8() {
  if (!activeElement) {
    return;
  }
  activeElement.detachEvent('onchange', manualDispatchChangeEvent);
  activeElement = null;
  activeElementID = null;
}

function getTargetIDForChangeEvent(
    topLevelType,
    topLevelTarget,
    topLevelTargetID) {
  if (topLevelType === topLevelTypes.topChange) {
    return topLevelTargetID;
  }
}
function handleEventsForChangeEventIE8(
    topLevelType,
    topLevelTarget,
    topLevelTargetID) {
  if (topLevelType === topLevelTypes.topFocus) {
    // stopWatching() should be a noop here but we call it just in case we
    // missed a blur event somehow.
    stopWatchingForChangeEventIE8();
    startWatchingForChangeEventIE8(topLevelTarget, topLevelTargetID);
  } else if (topLevelType === topLevelTypes.topBlur) {
    stopWatchingForChangeEventIE8();
  }
}


/**
 * SECTION: handle `input` event
 */
var isInputEventSupported = false;
if (ExecutionEnvironment.canUseDOM) {
  // IE9 claims to support the input event but fails to trigger it when
  // deleting text, so we ignore its input events
  isInputEventSupported = isEventSupported('input') && (
    !('documentMode' in document) || document.documentMode > 9
  );
}

/**
 * (For old IE.) Replacement getter/setter for the `value` property that gets
 * set on the active element.
 */
var newValueProp =  {
  get: function() {
    return activeElementValueProp.get.call(this);
  },
  set: function(val) {
    // Cast to a string so we can do equality checks.
    activeElementValue = '' + val;
    activeElementValueProp.set.call(this, val);
  }
};

/**
 * (For old IE.) Starts tracking propertychange events on the passed-in element
 * and override the value property so that we can distinguish user events from
 * value changes in JS.
 */
function startWatchingForValueChange(target, targetID) {
  activeElement = target;
  activeElementID = targetID;
  activeElementValue = target.value;
  activeElementValueProp = Object.getOwnPropertyDescriptor(
    target.constructor.prototype,
    'value'
  );

  Object.defineProperty(activeElement, 'value', newValueProp);
  activeElement.attachEvent('onpropertychange', handlePropertyChange);
}

/**
 * (For old IE.) Removes the event listeners from the currently-tracked element,
 * if any exists.
 */
function stopWatchingForValueChange() {
  if (!activeElement) {
    return;
  }

  // delete restores the original property definition
  delete activeElement.value;
  activeElement.detachEvent('onpropertychange', handlePropertyChange);

  activeElement = null;
  activeElementID = null;
  activeElementValue = null;
  activeElementValueProp = null;
}

/**
 * (For old IE.) Handles a propertychange event, sending a `change` event if
 * the value of the active element has changed.
 */
function handlePropertyChange(nativeEvent) {
  if (nativeEvent.propertyName !== 'value') {
    return;
  }
  var value = nativeEvent.srcElement.value;
  if (value === activeElementValue) {
    return;
  }
  activeElementValue = value;

  manualDispatchChangeEvent(nativeEvent);
}

/**
 * If a `change` event should be fired, returns the target's ID.
 */
function getTargetIDForInputEvent(
    topLevelType,
    topLevelTarget,
    topLevelTargetID) {
  if (topLevelType === topLevelTypes.topInput) {
    // In modern browsers (i.e., not IE8 or IE9), the input event is exactly
    // what we want so fall through here and trigger an abstract event
    return topLevelTargetID;
  }
}

// For IE8 and IE9.
function handleEventsForInputEventIE(
    topLevelType,
    topLevelTarget,
    topLevelTargetID) {
  if (topLevelType === topLevelTypes.topFocus) {
    // In IE8, we can capture almost all .value changes by adding a
    // propertychange handler and looking for events with propertyName
    // equal to 'value'
    // In IE9, propertychange fires for most input events but is buggy and
    // doesn't fire when text is deleted, but conveniently, selectionchange
    // appears to fire in all of the remaining cases so we catch those and
    // forward the event if the value has changed
    // In either case, we don't want to call the event handler if the value
    // is changed from JS so we redefine a setter for `.value` that updates
    // our activeElementValue variable, allowing us to ignore those changes
    //
    // stopWatching() should be a noop here but we call it just in case we
    // missed a blur event somehow.
    stopWatchingForValueChange();
    startWatchingForValueChange(topLevelTarget, topLevelTargetID);
  } else if (topLevelType === topLevelTypes.topBlur) {
    stopWatchingForValueChange();
  }
}

// For IE8 and IE9.
function getTargetIDForInputEventIE(
    topLevelType,
    topLevelTarget,
    topLevelTargetID) {
  if (topLevelType === topLevelTypes.topSelectionChange ||
      topLevelType === topLevelTypes.topKeyUp ||
      topLevelType === topLevelTypes.topKeyDown) {
    // On the selectionchange event, the target is just document which isn't
    // helpful for us so just check activeElement instead.
    //
    // 99% of the time, keydown and keyup aren't necessary. IE8 fails to fire
    // propertychange on the first input event after setting `value` from a
    // script and fires only keydown, keypress, keyup. Catching keyup usually
    // gets it and catching keydown lets us fire an event for the first
    // keystroke if user does a key repeat (it'll be a little delayed: right
    // before the second keystroke). Other input methods (e.g., paste) seem to
    // fire selectionchange normally.
    if (activeElement && activeElement.value !== activeElementValue) {
      activeElementValue = activeElement.value;
      return activeElementID;
    }
  }
}


/**
 * SECTION: handle `click` event
 */
function shouldUseClickEvent(elem) {
  // Use the `click` event to detect changes to checkbox and radio inputs.
  // This approach works across all browsers, whereas `change` does not fire
  // until `blur` in IE8.
  return (
    elem.nodeName === 'INPUT' &&
    (elem.type === 'checkbox' || elem.type === 'radio')
  );
}

function getTargetIDForClickEvent(
    topLevelType,
    topLevelTarget,
    topLevelTargetID) {
  if (topLevelType === topLevelTypes.topClick) {
    return topLevelTargetID;
  }
}

/**
 * This plugin creates an `onChange` event that normalizes change events
 * across form elements. This event fires at a time when it's possible to
 * change the element's value without seeing a flicker.
 *
 * Supported elements are:
 * - input (see `isTextInputElement`)
 * - textarea
 * - select
 */
var ChangeEventPlugin = {

  eventTypes: eventTypes,

  /**
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {DOMEventTarget} topLevelTarget The listening component root node.
   * @param {string} topLevelTargetID ID of `topLevelTarget`.
   * @param {object} nativeEvent Native browser event.
   * @return {*} An accumulation of synthetic events.
   * @see {EventPluginHub.extractEvents}
   */
  extractEvents: function(
      topLevelType,
      topLevelTarget,
      topLevelTargetID,
      nativeEvent) {

    var getTargetIDFunc, handleEventFunc;
    if (shouldUseChangeEvent(topLevelTarget)) {
      if (doesChangeEventBubble) {
        getTargetIDFunc = getTargetIDForChangeEvent;
      } else {
        handleEventFunc = handleEventsForChangeEventIE8;
      }
    } else if (isTextInputElement(topLevelTarget)) {
      if (isInputEventSupported) {
        getTargetIDFunc = getTargetIDForInputEvent;
      } else {
        getTargetIDFunc = getTargetIDForInputEventIE;
        handleEventFunc = handleEventsForInputEventIE;
      }
    } else if (shouldUseClickEvent(topLevelTarget)) {
      getTargetIDFunc = getTargetIDForClickEvent;
    }

    if (getTargetIDFunc) {
      var targetID = getTargetIDFunc(
        topLevelType,
        topLevelTarget,
        topLevelTargetID
      );
      if (targetID) {
        var event = SyntheticEvent.getPooled(
          eventTypes.change,
          targetID,
          nativeEvent
        );
        EventPropagators.accumulateTwoPhaseDispatches(event);
        return event;
      }
    }

    if (handleEventFunc) {
      handleEventFunc(
        topLevelType,
        topLevelTarget,
        topLevelTargetID
      );
    }
  }

};

module.exports = ChangeEventPlugin;

},{"./EventConstants":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/EventConstants.js","./EventPluginHub":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/EventPluginHub.js","./EventPropagators":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/EventPropagators.js","./ExecutionEnvironment":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ExecutionEnvironment.js","./ReactUpdates":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ReactUpdates.js","./SyntheticEvent":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/SyntheticEvent.js","./isEventSupported":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/isEventSupported.js","./isTextInputElement":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/isTextInputElement.js","./keyOf":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/keyOf.js"}],"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ClientReactRootIndex.js":[function(require,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ClientReactRootIndex
 * @typechecks
 */

"use strict";

var nextReactRootIndex = 0;

var ClientReactRootIndex = {
  createReactRootIndex: function() {
    return nextReactRootIndex++;
  }
};

module.exports = ClientReactRootIndex;

},{}],"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/CompositionEventPlugin.js":[function(require,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule CompositionEventPlugin
 * @typechecks static-only
 */

"use strict";

var EventConstants = require("./EventConstants");
var EventPropagators = require("./EventPropagators");
var ExecutionEnvironment = require("./ExecutionEnvironment");
var ReactInputSelection = require("./ReactInputSelection");
var SyntheticCompositionEvent = require("./SyntheticCompositionEvent");

var getTextContentAccessor = require("./getTextContentAccessor");
var keyOf = require("./keyOf");

var END_KEYCODES = [9, 13, 27, 32]; // Tab, Return, Esc, Space
var START_KEYCODE = 229;

var useCompositionEvent = (
  ExecutionEnvironment.canUseDOM &&
  'CompositionEvent' in window
);

// In IE9+, we have access to composition events, but the data supplied
// by the native compositionend event may be incorrect. In Korean, for example,
// the compositionend event contains only one character regardless of
// how many characters have been composed since compositionstart.
// We therefore use the fallback data while still using the native
// events as triggers.
var useFallbackData = (
  !useCompositionEvent ||
  (
    'documentMode' in document &&
    document.documentMode > 8 &&
    document.documentMode <= 11
  )
);

var topLevelTypes = EventConstants.topLevelTypes;
var currentComposition = null;

// Events and their corresponding property names.
var eventTypes = {
  compositionEnd: {
    phasedRegistrationNames: {
      bubbled: keyOf({onCompositionEnd: null}),
      captured: keyOf({onCompositionEndCapture: null})
    },
    dependencies: [
      topLevelTypes.topBlur,
      topLevelTypes.topCompositionEnd,
      topLevelTypes.topKeyDown,
      topLevelTypes.topKeyPress,
      topLevelTypes.topKeyUp,
      topLevelTypes.topMouseDown
    ]
  },
  compositionStart: {
    phasedRegistrationNames: {
      bubbled: keyOf({onCompositionStart: null}),
      captured: keyOf({onCompositionStartCapture: null})
    },
    dependencies: [
      topLevelTypes.topBlur,
      topLevelTypes.topCompositionStart,
      topLevelTypes.topKeyDown,
      topLevelTypes.topKeyPress,
      topLevelTypes.topKeyUp,
      topLevelTypes.topMouseDown
    ]
  },
  compositionUpdate: {
    phasedRegistrationNames: {
      bubbled: keyOf({onCompositionUpdate: null}),
      captured: keyOf({onCompositionUpdateCapture: null})
    },
    dependencies: [
      topLevelTypes.topBlur,
      topLevelTypes.topCompositionUpdate,
      topLevelTypes.topKeyDown,
      topLevelTypes.topKeyPress,
      topLevelTypes.topKeyUp,
      topLevelTypes.topMouseDown
    ]
  }
};

/**
 * Translate native top level events into event types.
 *
 * @param {string} topLevelType
 * @return {object}
 */
function getCompositionEventType(topLevelType) {
  switch (topLevelType) {
    case topLevelTypes.topCompositionStart:
      return eventTypes.compositionStart;
    case topLevelTypes.topCompositionEnd:
      return eventTypes.compositionEnd;
    case topLevelTypes.topCompositionUpdate:
      return eventTypes.compositionUpdate;
  }
}

/**
 * Does our fallback best-guess model think this event signifies that
 * composition has begun?
 *
 * @param {string} topLevelType
 * @param {object} nativeEvent
 * @return {boolean}
 */
function isFallbackStart(topLevelType, nativeEvent) {
  return (
    topLevelType === topLevelTypes.topKeyDown &&
    nativeEvent.keyCode === START_KEYCODE
  );
}

/**
 * Does our fallback mode think that this event is the end of composition?
 *
 * @param {string} topLevelType
 * @param {object} nativeEvent
 * @return {boolean}
 */
function isFallbackEnd(topLevelType, nativeEvent) {
  switch (topLevelType) {
    case topLevelTypes.topKeyUp:
      // Command keys insert or clear IME input.
      return (END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1);
    case topLevelTypes.topKeyDown:
      // Expect IME keyCode on each keydown. If we get any other
      // code we must have exited earlier.
      return (nativeEvent.keyCode !== START_KEYCODE);
    case topLevelTypes.topKeyPress:
    case topLevelTypes.topMouseDown:
    case topLevelTypes.topBlur:
      // Events are not possible without cancelling IME.
      return true;
    default:
      return false;
  }
}

/**
 * Helper class stores information about selection and document state
 * so we can figure out what changed at a later date.
 *
 * @param {DOMEventTarget} root
 */
function FallbackCompositionState(root) {
  this.root = root;
  this.startSelection = ReactInputSelection.getSelection(root);
  this.startValue = this.getText();
}

/**
 * Get current text of input.
 *
 * @return {string}
 */
FallbackCompositionState.prototype.getText = function() {
  return this.root.value || this.root[getTextContentAccessor()];
};

/**
 * Text that has changed since the start of composition.
 *
 * @return {string}
 */
FallbackCompositionState.prototype.getData = function() {
  var endValue = this.getText();
  var prefixLength = this.startSelection.start;
  var suffixLength = this.startValue.length - this.startSelection.end;

  return endValue.substr(
    prefixLength,
    endValue.length - suffixLength - prefixLength
  );
};

/**
 * This plugin creates `onCompositionStart`, `onCompositionUpdate` and
 * `onCompositionEnd` events on inputs, textareas and contentEditable
 * nodes.
 */
var CompositionEventPlugin = {

  eventTypes: eventTypes,

  /**
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {DOMEventTarget} topLevelTarget The listening component root node.
   * @param {string} topLevelTargetID ID of `topLevelTarget`.
   * @param {object} nativeEvent Native browser event.
   * @return {*} An accumulation of synthetic events.
   * @see {EventPluginHub.extractEvents}
   */
  extractEvents: function(
      topLevelType,
      topLevelTarget,
      topLevelTargetID,
      nativeEvent) {

    var eventType;
    var data;

    if (useCompositionEvent) {
      eventType = getCompositionEventType(topLevelType);
    } else if (!currentComposition) {
      if (isFallbackStart(topLevelType, nativeEvent)) {
        eventType = eventTypes.compositionStart;
      }
    } else if (isFallbackEnd(topLevelType, nativeEvent)) {
      eventType = eventTypes.compositionEnd;
    }

    if (useFallbackData) {
      // The current composition is stored statically and must not be
      // overwritten while composition continues.
      if (!currentComposition && eventType === eventTypes.compositionStart) {
        currentComposition = new FallbackCompositionState(topLevelTarget);
      } else if (eventType === eventTypes.compositionEnd) {
        if (currentComposition) {
          data = currentComposition.getData();
          currentComposition = null;
        }
      }
    }

    if (eventType) {
      var event = SyntheticCompositionEvent.getPooled(
        eventType,
        topLevelTargetID,
        nativeEvent
      );
      if (data) {
        // Inject data generated from fallback path into the synthetic event.
        // This matches the property of native CompositionEventInterface.
        event.data = data;
      }
      EventPropagators.accumulateTwoPhaseDispatches(event);
      return event;
    }
  }
};

module.exports = CompositionEventPlugin;

},{"./EventConstants":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/EventConstants.js","./EventPropagators":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/EventPropagators.js","./ExecutionEnvironment":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ExecutionEnvironment.js","./ReactInputSelection":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ReactInputSelection.js","./SyntheticCompositionEvent":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/SyntheticCompositionEvent.js","./getTextContentAccessor":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/getTextContentAccessor.js","./keyOf":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/keyOf.js"}],"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/DOMChildrenOperations.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule DOMChildrenOperations
 * @typechecks static-only
 */

"use strict";

var Danger = require("./Danger");
var ReactMultiChildUpdateTypes = require("./ReactMultiChildUpdateTypes");

var getTextContentAccessor = require("./getTextContentAccessor");
var invariant = require("./invariant");

/**
 * The DOM property to use when setting text content.
 *
 * @type {string}
 * @private
 */
var textContentAccessor = getTextContentAccessor();

/**
 * Inserts `childNode` as a child of `parentNode` at the `index`.
 *
 * @param {DOMElement} parentNode Parent node in which to insert.
 * @param {DOMElement} childNode Child node to insert.
 * @param {number} index Index at which to insert the child.
 * @internal
 */
function insertChildAt(parentNode, childNode, index) {
  // By exploiting arrays returning `undefined` for an undefined index, we can
  // rely exclusively on `insertBefore(node, null)` instead of also using
  // `appendChild(node)`. However, using `undefined` is not allowed by all
  // browsers so we must replace it with `null`.
  parentNode.insertBefore(
    childNode,
    parentNode.childNodes[index] || null
  );
}

var updateTextContent;
if (textContentAccessor === 'textContent') {
  /**
   * Sets the text content of `node` to `text`.
   *
   * @param {DOMElement} node Node to change
   * @param {string} text New text content
   */
  updateTextContent = function(node, text) {
    node.textContent = text;
  };
} else {
  /**
   * Sets the text content of `node` to `text`.
   *
   * @param {DOMElement} node Node to change
   * @param {string} text New text content
   */
  updateTextContent = function(node, text) {
    // In order to preserve newlines correctly, we can't use .innerText to set
    // the contents (see #1080), so we empty the element then append a text node
    while (node.firstChild) {
      node.removeChild(node.firstChild);
    }
    if (text) {
      var doc = node.ownerDocument || document;
      node.appendChild(doc.createTextNode(text));
    }
  };
}

/**
 * Operations for updating with DOM children.
 */
var DOMChildrenOperations = {

  dangerouslyReplaceNodeWithMarkup: Danger.dangerouslyReplaceNodeWithMarkup,

  updateTextContent: updateTextContent,

  /**
   * Updates a component's children by processing a series of updates. The
   * update configurations are each expected to have a `parentNode` property.
   *
   * @param {array<object>} updates List of update configurations.
   * @param {array<string>} markupList List of markup strings.
   * @internal
   */
  processUpdates: function(updates, markupList) {
    var update;
    // Mapping from parent IDs to initial child orderings.
    var initialChildren = null;
    // List of children that will be moved or removed.
    var updatedChildren = null;

    for (var i = 0; update = updates[i]; i++) {
      if (update.type === ReactMultiChildUpdateTypes.MOVE_EXISTING ||
          update.type === ReactMultiChildUpdateTypes.REMOVE_NODE) {
        var updatedIndex = update.fromIndex;
        var updatedChild = update.parentNode.childNodes[updatedIndex];
        var parentID = update.parentID;

        ("production" !== process.env.NODE_ENV ? invariant(
          updatedChild,
          'processUpdates(): Unable to find child %s of element. This ' +
          'probably means the DOM was unexpectedly mutated (e.g., by the ' +
          'browser), usually due to forgetting a <tbody> when using tables, ' +
          'nesting tags like <form>, <p>, or <a>, or using non-SVG elements '+
          'in an <svg> parent. Try inspecting the child nodes of the element ' +
          'with React ID `%s`.',
          updatedIndex,
          parentID
        ) : invariant(updatedChild));

        initialChildren = initialChildren || {};
        initialChildren[parentID] = initialChildren[parentID] || [];
        initialChildren[parentID][updatedIndex] = updatedChild;

        updatedChildren = updatedChildren || [];
        updatedChildren.push(updatedChild);
      }
    }

    var renderedMarkup = Danger.dangerouslyRenderMarkup(markupList);

    // Remove updated children first so that `toIndex` is consistent.
    if (updatedChildren) {
      for (var j = 0; j < updatedChildren.length; j++) {
        updatedChildren[j].parentNode.removeChild(updatedChildren[j]);
      }
    }

    for (var k = 0; update = updates[k]; k++) {
      switch (update.type) {
        case ReactMultiChildUpdateTypes.INSERT_MARKUP:
          insertChildAt(
            update.parentNode,
            renderedMarkup[update.markupIndex],
            update.toIndex
          );
          break;
        case ReactMultiChildUpdateTypes.MOVE_EXISTING:
          insertChildAt(
            update.parentNode,
            initialChildren[update.parentID][update.fromIndex],
            update.toIndex
          );
          break;
        case ReactMultiChildUpdateTypes.TEXT_CONTENT:
          updateTextContent(
            update.parentNode,
            update.textContent
          );
          break;
        case ReactMultiChildUpdateTypes.REMOVE_NODE:
          // Already removed by the for-loop above.
          break;
      }
    }
  }

};

module.exports = DOMChildrenOperations;

}).call(this,require('_process'))

},{"./Danger":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/Danger.js","./ReactMultiChildUpdateTypes":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ReactMultiChildUpdateTypes.js","./getTextContentAccessor":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/getTextContentAccessor.js","./invariant":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/invariant.js","_process":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/browserify/node_modules/process/browser.js"}],"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/DOMProperty.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule DOMProperty
 * @typechecks static-only
 */

/*jslint bitwise: true */

"use strict";

var invariant = require("./invariant");

function checkMask(value, bitmask) {
  return (value & bitmask) === bitmask;
}

var DOMPropertyInjection = {
  /**
   * Mapping from normalized, camelcased property names to a configuration that
   * specifies how the associated DOM property should be accessed or rendered.
   */
  MUST_USE_ATTRIBUTE: 0x1,
  MUST_USE_PROPERTY: 0x2,
  HAS_SIDE_EFFECTS: 0x4,
  HAS_BOOLEAN_VALUE: 0x8,
  HAS_NUMERIC_VALUE: 0x10,
  HAS_POSITIVE_NUMERIC_VALUE: 0x20 | 0x10,
  HAS_OVERLOADED_BOOLEAN_VALUE: 0x40,

  /**
   * Inject some specialized knowledge about the DOM. This takes a config object
   * with the following properties:
   *
   * isCustomAttribute: function that given an attribute name will return true
   * if it can be inserted into the DOM verbatim. Useful for data-* or aria-*
   * attributes where it's impossible to enumerate all of the possible
   * attribute names,
   *
   * Properties: object mapping DOM property name to one of the
   * DOMPropertyInjection constants or null. If your attribute isn't in here,
   * it won't get written to the DOM.
   *
   * DOMAttributeNames: object mapping React attribute name to the DOM
   * attribute name. Attribute names not specified use the **lowercase**
   * normalized name.
   *
   * DOMPropertyNames: similar to DOMAttributeNames but for DOM properties.
   * Property names not specified use the normalized name.
   *
   * DOMMutationMethods: Properties that require special mutation methods. If
   * `value` is undefined, the mutation method should unset the property.
   *
   * @param {object} domPropertyConfig the config as described above.
   */
  injectDOMPropertyConfig: function(domPropertyConfig) {
    var Properties = domPropertyConfig.Properties || {};
    var DOMAttributeNames = domPropertyConfig.DOMAttributeNames || {};
    var DOMPropertyNames = domPropertyConfig.DOMPropertyNames || {};
    var DOMMutationMethods = domPropertyConfig.DOMMutationMethods || {};

    if (domPropertyConfig.isCustomAttribute) {
      DOMProperty._isCustomAttributeFunctions.push(
        domPropertyConfig.isCustomAttribute
      );
    }

    for (var propName in Properties) {
      ("production" !== process.env.NODE_ENV ? invariant(
        !DOMProperty.isStandardName.hasOwnProperty(propName),
        'injectDOMPropertyConfig(...): You\'re trying to inject DOM property ' +
        '\'%s\' which has already been injected. You may be accidentally ' +
        'injecting the same DOM property config twice, or you may be ' +
        'injecting two configs that have conflicting property names.',
        propName
      ) : invariant(!DOMProperty.isStandardName.hasOwnProperty(propName)));

      DOMProperty.isStandardName[propName] = true;

      var lowerCased = propName.toLowerCase();
      DOMProperty.getPossibleStandardName[lowerCased] = propName;

      if (DOMAttributeNames.hasOwnProperty(propName)) {
        var attributeName = DOMAttributeNames[propName];
        DOMProperty.getPossibleStandardName[attributeName] = propName;
        DOMProperty.getAttributeName[propName] = attributeName;
      } else {
        DOMProperty.getAttributeName[propName] = lowerCased;
      }

      DOMProperty.getPropertyName[propName] =
        DOMPropertyNames.hasOwnProperty(propName) ?
          DOMPropertyNames[propName] :
          propName;

      if (DOMMutationMethods.hasOwnProperty(propName)) {
        DOMProperty.getMutationMethod[propName] = DOMMutationMethods[propName];
      } else {
        DOMProperty.getMutationMethod[propName] = null;
      }

      var propConfig = Properties[propName];
      DOMProperty.mustUseAttribute[propName] =
        checkMask(propConfig, DOMPropertyInjection.MUST_USE_ATTRIBUTE);
      DOMProperty.mustUseProperty[propName] =
        checkMask(propConfig, DOMPropertyInjection.MUST_USE_PROPERTY);
      DOMProperty.hasSideEffects[propName] =
        checkMask(propConfig, DOMPropertyInjection.HAS_SIDE_EFFECTS);
      DOMProperty.hasBooleanValue[propName] =
        checkMask(propConfig, DOMPropertyInjection.HAS_BOOLEAN_VALUE);
      DOMProperty.hasNumericValue[propName] =
        checkMask(propConfig, DOMPropertyInjection.HAS_NUMERIC_VALUE);
      DOMProperty.hasPositiveNumericValue[propName] =
        checkMask(propConfig, DOMPropertyInjection.HAS_POSITIVE_NUMERIC_VALUE);
      DOMProperty.hasOverloadedBooleanValue[propName] =
        checkMask(propConfig, DOMPropertyInjection.HAS_OVERLOADED_BOOLEAN_VALUE);

      ("production" !== process.env.NODE_ENV ? invariant(
        !DOMProperty.mustUseAttribute[propName] ||
          !DOMProperty.mustUseProperty[propName],
        'DOMProperty: Cannot require using both attribute and property: %s',
        propName
      ) : invariant(!DOMProperty.mustUseAttribute[propName] ||
        !DOMProperty.mustUseProperty[propName]));
      ("production" !== process.env.NODE_ENV ? invariant(
        DOMProperty.mustUseProperty[propName] ||
          !DOMProperty.hasSideEffects[propName],
        'DOMProperty: Properties that have side effects must use property: %s',
        propName
      ) : invariant(DOMProperty.mustUseProperty[propName] ||
        !DOMProperty.hasSideEffects[propName]));
      ("production" !== process.env.NODE_ENV ? invariant(
        !!DOMProperty.hasBooleanValue[propName] +
          !!DOMProperty.hasNumericValue[propName] +
          !!DOMProperty.hasOverloadedBooleanValue[propName] <= 1,
        'DOMProperty: Value can be one of boolean, overloaded boolean, or ' +
        'numeric value, but not a combination: %s',
        propName
      ) : invariant(!!DOMProperty.hasBooleanValue[propName] +
        !!DOMProperty.hasNumericValue[propName] +
        !!DOMProperty.hasOverloadedBooleanValue[propName] <= 1));
    }
  }
};
var defaultValueCache = {};

/**
 * DOMProperty exports lookup objects that can be used like functions:
 *
 *   > DOMProperty.isValid['id']
 *   true
 *   > DOMProperty.isValid['foobar']
 *   undefined
 *
 * Although this may be confusing, it performs better in general.
 *
 * @see http://jsperf.com/key-exists
 * @see http://jsperf.com/key-missing
 */
var DOMProperty = {

  ID_ATTRIBUTE_NAME: 'data-reactid',

  /**
   * Checks whether a property name is a standard property.
   * @type {Object}
   */
  isStandardName: {},

  /**
   * Mapping from lowercase property names to the properly cased version, used
   * to warn in the case of missing properties.
   * @type {Object}
   */
  getPossibleStandardName: {},

  /**
   * Mapping from normalized names to attribute names that differ. Attribute
   * names are used when rendering markup or with `*Attribute()`.
   * @type {Object}
   */
  getAttributeName: {},

  /**
   * Mapping from normalized names to properties on DOM node instances.
   * (This includes properties that mutate due to external factors.)
   * @type {Object}
   */
  getPropertyName: {},

  /**
   * Mapping from normalized names to mutation methods. This will only exist if
   * mutation cannot be set simply by the property or `setAttribute()`.
   * @type {Object}
   */
  getMutationMethod: {},

  /**
   * Whether the property must be accessed and mutated as an object property.
   * @type {Object}
   */
  mustUseAttribute: {},

  /**
   * Whether the property must be accessed and mutated using `*Attribute()`.
   * (This includes anything that fails `<propName> in <element>`.)
   * @type {Object}
   */
  mustUseProperty: {},

  /**
   * Whether or not setting a value causes side effects such as triggering
   * resources to be loaded or text selection changes. We must ensure that
   * the value is only set if it has changed.
   * @type {Object}
   */
  hasSideEffects: {},

  /**
   * Whether the property should be removed when set to a falsey value.
   * @type {Object}
   */
  hasBooleanValue: {},

  /**
   * Whether the property must be numeric or parse as a
   * numeric and should be removed when set to a falsey value.
   * @type {Object}
   */
  hasNumericValue: {},

  /**
   * Whether the property must be positive numeric or parse as a positive
   * numeric and should be removed when set to a falsey value.
   * @type {Object}
   */
  hasPositiveNumericValue: {},

  /**
   * Whether the property can be used as a flag as well as with a value. Removed
   * when strictly equal to false; present without a value when strictly equal
   * to true; present with a value otherwise.
   * @type {Object}
   */
  hasOverloadedBooleanValue: {},

  /**
   * All of the isCustomAttribute() functions that have been injected.
   */
  _isCustomAttributeFunctions: [],

  /**
   * Checks whether a property name is a custom attribute.
   * @method
   */
  isCustomAttribute: function(attributeName) {
    for (var i = 0; i < DOMProperty._isCustomAttributeFunctions.length; i++) {
      var isCustomAttributeFn = DOMProperty._isCustomAttributeFunctions[i];
      if (isCustomAttributeFn(attributeName)) {
        return true;
      }
    }
    return false;
  },

  /**
   * Returns the default property value for a DOM property (i.e., not an
   * attribute). Most default values are '' or false, but not all. Worse yet,
   * some (in particular, `type`) vary depending on the type of element.
   *
   * TODO: Is it better to grab all the possible properties when creating an
   * element to avoid having to create the same element twice?
   */
  getDefaultValueForProperty: function(nodeName, prop) {
    var nodeDefaults = defaultValueCache[nodeName];
    var testElement;
    if (!nodeDefaults) {
      defaultValueCache[nodeName] = nodeDefaults = {};
    }
    if (!(prop in nodeDefaults)) {
      testElement = document.createElement(nodeName);
      nodeDefaults[prop] = testElement[prop];
    }
    return nodeDefaults[prop];
  },

  injection: DOMPropertyInjection
};

module.exports = DOMProperty;

}).call(this,require('_process'))

},{"./invariant":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/invariant.js","_process":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/browserify/node_modules/process/browser.js"}],"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/DOMPropertyOperations.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule DOMPropertyOperations
 * @typechecks static-only
 */

"use strict";

var DOMProperty = require("./DOMProperty");

var escapeTextForBrowser = require("./escapeTextForBrowser");
var memoizeStringOnly = require("./memoizeStringOnly");
var warning = require("./warning");

function shouldIgnoreValue(name, value) {
  return value == null ||
    (DOMProperty.hasBooleanValue[name] && !value) ||
    (DOMProperty.hasNumericValue[name] && isNaN(value)) ||
    (DOMProperty.hasPositiveNumericValue[name] && (value < 1)) ||
    (DOMProperty.hasOverloadedBooleanValue[name] && value === false);
}

var processAttributeNameAndPrefix = memoizeStringOnly(function(name) {
  return escapeTextForBrowser(name) + '="';
});

if ("production" !== process.env.NODE_ENV) {
  var reactProps = {
    children: true,
    dangerouslySetInnerHTML: true,
    key: true,
    ref: true
  };
  var warnedProperties = {};

  var warnUnknownProperty = function(name) {
    if (reactProps.hasOwnProperty(name) && reactProps[name] ||
        warnedProperties.hasOwnProperty(name) && warnedProperties[name]) {
      return;
    }

    warnedProperties[name] = true;
    var lowerCasedName = name.toLowerCase();

    // data-* attributes should be lowercase; suggest the lowercase version
    var standardName = (
      DOMProperty.isCustomAttribute(lowerCasedName) ?
        lowerCasedName :
      DOMProperty.getPossibleStandardName.hasOwnProperty(lowerCasedName) ?
        DOMProperty.getPossibleStandardName[lowerCasedName] :
        null
    );

    // For now, only warn when we have a suggested correction. This prevents
    // logging too much when using transferPropsTo.
    ("production" !== process.env.NODE_ENV ? warning(
      standardName == null,
      'Unknown DOM property ' + name + '. Did you mean ' + standardName + '?'
    ) : null);

  };
}

/**
 * Operations for dealing with DOM properties.
 */
var DOMPropertyOperations = {

  /**
   * Creates markup for the ID property.
   *
   * @param {string} id Unescaped ID.
   * @return {string} Markup string.
   */
  createMarkupForID: function(id) {
    return processAttributeNameAndPrefix(DOMProperty.ID_ATTRIBUTE_NAME) +
      escapeTextForBrowser(id) + '"';
  },

  /**
   * Creates markup for a property.
   *
   * @param {string} name
   * @param {*} value
   * @return {?string} Markup string, or null if the property was invalid.
   */
  createMarkupForProperty: function(name, value) {
    if (DOMProperty.isStandardName.hasOwnProperty(name) &&
        DOMProperty.isStandardName[name]) {
      if (shouldIgnoreValue(name, value)) {
        return '';
      }
      var attributeName = DOMProperty.getAttributeName[name];
      if (DOMProperty.hasBooleanValue[name] ||
          (DOMProperty.hasOverloadedBooleanValue[name] && value === true)) {
        return escapeTextForBrowser(attributeName);
      }
      return processAttributeNameAndPrefix(attributeName) +
        escapeTextForBrowser(value) + '"';
    } else if (DOMProperty.isCustomAttribute(name)) {
      if (value == null) {
        return '';
      }
      return processAttributeNameAndPrefix(name) +
        escapeTextForBrowser(value) + '"';
    } else if ("production" !== process.env.NODE_ENV) {
      warnUnknownProperty(name);
    }
    return null;
  },

  /**
   * Sets the value for a property on a node.
   *
   * @param {DOMElement} node
   * @param {string} name
   * @param {*} value
   */
  setValueForProperty: function(node, name, value) {
    if (DOMProperty.isStandardName.hasOwnProperty(name) &&
        DOMProperty.isStandardName[name]) {
      var mutationMethod = DOMProperty.getMutationMethod[name];
      if (mutationMethod) {
        mutationMethod(node, value);
      } else if (shouldIgnoreValue(name, value)) {
        this.deleteValueForProperty(node, name);
      } else if (DOMProperty.mustUseAttribute[name]) {
        // `setAttribute` with objects becomes only `[object]` in IE8/9,
        // ('' + value) makes it output the correct toString()-value.
        node.setAttribute(DOMProperty.getAttributeName[name], '' + value);
      } else {
        var propName = DOMProperty.getPropertyName[name];
        // Must explicitly cast values for HAS_SIDE_EFFECTS-properties to the
        // property type before comparing; only `value` does and is string.
        if (!DOMProperty.hasSideEffects[name] ||
            ('' + node[propName]) !== ('' + value)) {
          // Contrary to `setAttribute`, object properties are properly
          // `toString`ed by IE8/9.
          node[propName] = value;
        }
      }
    } else if (DOMProperty.isCustomAttribute(name)) {
      if (value == null) {
        node.removeAttribute(name);
      } else {
        node.setAttribute(name, '' + value);
      }
    } else if ("production" !== process.env.NODE_ENV) {
      warnUnknownProperty(name);
    }
  },

  /**
   * Deletes the value for a property on a node.
   *
   * @param {DOMElement} node
   * @param {string} name
   */
  deleteValueForProperty: function(node, name) {
    if (DOMProperty.isStandardName.hasOwnProperty(name) &&
        DOMProperty.isStandardName[name]) {
      var mutationMethod = DOMProperty.getMutationMethod[name];
      if (mutationMethod) {
        mutationMethod(node, undefined);
      } else if (DOMProperty.mustUseAttribute[name]) {
        node.removeAttribute(DOMProperty.getAttributeName[name]);
      } else {
        var propName = DOMProperty.getPropertyName[name];
        var defaultValue = DOMProperty.getDefaultValueForProperty(
          node.nodeName,
          propName
        );
        if (!DOMProperty.hasSideEffects[name] ||
            ('' + node[propName]) !== defaultValue) {
          node[propName] = defaultValue;
        }
      }
    } else if (DOMProperty.isCustomAttribute(name)) {
      node.removeAttribute(name);
    } else if ("production" !== process.env.NODE_ENV) {
      warnUnknownProperty(name);
    }
  }

};

module.exports = DOMPropertyOperations;

}).call(this,require('_process'))

},{"./DOMProperty":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/DOMProperty.js","./escapeTextForBrowser":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/escapeTextForBrowser.js","./memoizeStringOnly":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/memoizeStringOnly.js","./warning":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/warning.js","_process":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/browserify/node_modules/process/browser.js"}],"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/Danger.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule Danger
 * @typechecks static-only
 */

/*jslint evil: true, sub: true */

"use strict";

var ExecutionEnvironment = require("./ExecutionEnvironment");

var createNodesFromMarkup = require("./createNodesFromMarkup");
var emptyFunction = require("./emptyFunction");
var getMarkupWrap = require("./getMarkupWrap");
var invariant = require("./invariant");

var OPEN_TAG_NAME_EXP = /^(<[^ \/>]+)/;
var RESULT_INDEX_ATTR = 'data-danger-index';

/**
 * Extracts the `nodeName` from a string of markup.
 *
 * NOTE: Extracting the `nodeName` does not require a regular expression match
 * because we make assumptions about React-generated markup (i.e. there are no
 * spaces surrounding the opening tag and there is at least one attribute).
 *
 * @param {string} markup String of markup.
 * @return {string} Node name of the supplied markup.
 * @see http://jsperf.com/extract-nodename
 */
function getNodeName(markup) {
  return markup.substring(1, markup.indexOf(' '));
}

var Danger = {

  /**
   * Renders markup into an array of nodes. The markup is expected to render
   * into a list of root nodes. Also, the length of `resultList` and
   * `markupList` should be the same.
   *
   * @param {array<string>} markupList List of markup strings to render.
   * @return {array<DOMElement>} List of rendered nodes.
   * @internal
   */
  dangerouslyRenderMarkup: function(markupList) {
    ("production" !== process.env.NODE_ENV ? invariant(
      ExecutionEnvironment.canUseDOM,
      'dangerouslyRenderMarkup(...): Cannot render markup in a worker ' +
      'thread. Make sure `window` and `document` are available globally ' +
      'before requiring React when unit testing or use ' +
      'React.renderToString for server rendering.'
    ) : invariant(ExecutionEnvironment.canUseDOM));
    var nodeName;
    var markupByNodeName = {};
    // Group markup by `nodeName` if a wrap is necessary, else by '*'.
    for (var i = 0; i < markupList.length; i++) {
      ("production" !== process.env.NODE_ENV ? invariant(
        markupList[i],
        'dangerouslyRenderMarkup(...): Missing markup.'
      ) : invariant(markupList[i]));
      nodeName = getNodeName(markupList[i]);
      nodeName = getMarkupWrap(nodeName) ? nodeName : '*';
      markupByNodeName[nodeName] = markupByNodeName[nodeName] || [];
      markupByNodeName[nodeName][i] = markupList[i];
    }
    var resultList = [];
    var resultListAssignmentCount = 0;
    for (nodeName in markupByNodeName) {
      if (!markupByNodeName.hasOwnProperty(nodeName)) {
        continue;
      }
      var markupListByNodeName = markupByNodeName[nodeName];

      // This for-in loop skips the holes of the sparse array. The order of
      // iteration should follow the order of assignment, which happens to match
      // numerical index order, but we don't rely on that.
      for (var resultIndex in markupListByNodeName) {
        if (markupListByNodeName.hasOwnProperty(resultIndex)) {
          var markup = markupListByNodeName[resultIndex];

          // Push the requested markup with an additional RESULT_INDEX_ATTR
          // attribute.  If the markup does not start with a < character, it
          // will be discarded below (with an appropriate console.error).
          markupListByNodeName[resultIndex] = markup.replace(
            OPEN_TAG_NAME_EXP,
            // This index will be parsed back out below.
            '$1 ' + RESULT_INDEX_ATTR + '="' + resultIndex + '" '
          );
        }
      }

      // Render each group of markup with similar wrapping `nodeName`.
      var renderNodes = createNodesFromMarkup(
        markupListByNodeName.join(''),
        emptyFunction // Do nothing special with <script> tags.
      );

      for (i = 0; i < renderNodes.length; ++i) {
        var renderNode = renderNodes[i];
        if (renderNode.hasAttribute &&
            renderNode.hasAttribute(RESULT_INDEX_ATTR)) {

          resultIndex = +renderNode.getAttribute(RESULT_INDEX_ATTR);
          renderNode.removeAttribute(RESULT_INDEX_ATTR);

          ("production" !== process.env.NODE_ENV ? invariant(
            !resultList.hasOwnProperty(resultIndex),
            'Danger: Assigning to an already-occupied result index.'
          ) : invariant(!resultList.hasOwnProperty(resultIndex)));

          resultList[resultIndex] = renderNode;

          // This should match resultList.length and markupList.length when
          // we're done.
          resultListAssignmentCount += 1;

        } else if ("production" !== process.env.NODE_ENV) {
          console.error(
            "Danger: Discarding unexpected node:",
            renderNode
          );
        }
      }
    }

    // Although resultList was populated out of order, it should now be a dense
    // array.
    ("production" !== process.env.NODE_ENV ? invariant(
      resultListAssignmentCount === resultList.length,
      'Danger: Did not assign to every index of resultList.'
    ) : invariant(resultListAssignmentCount === resultList.length));

    ("production" !== process.env.NODE_ENV ? invariant(
      resultList.length === markupList.length,
      'Danger: Expected markup to render %s nodes, but rendered %s.',
      markupList.length,
      resultList.length
    ) : invariant(resultList.length === markupList.length));

    return resultList;
  },

  /**
   * Replaces a node with a string of markup at its current position within its
   * parent. The markup must render into a single root node.
   *
   * @param {DOMElement} oldChild Child node to replace.
   * @param {string} markup Markup to render in place of the child node.
   * @internal
   */
  dangerouslyReplaceNodeWithMarkup: function(oldChild, markup) {
    ("production" !== process.env.NODE_ENV ? invariant(
      ExecutionEnvironment.canUseDOM,
      'dangerouslyReplaceNodeWithMarkup(...): Cannot render markup in a ' +
      'worker thread. Make sure `window` and `document` are available ' +
      'globally before requiring React when unit testing or use ' +
      'React.renderToString for server rendering.'
    ) : invariant(ExecutionEnvironment.canUseDOM));
    ("production" !== process.env.NODE_ENV ? invariant(markup, 'dangerouslyReplaceNodeWithMarkup(...): Missing markup.') : invariant(markup));
    ("production" !== process.env.NODE_ENV ? invariant(
      oldChild.tagName.toLowerCase() !== 'html',
      'dangerouslyReplaceNodeWithMarkup(...): Cannot replace markup of the ' +
      '<html> node. This is because browser quirks make this unreliable ' +
      'and/or slow. If you want to render to the root you must use ' +
      'server rendering. See renderComponentToString().'
    ) : invariant(oldChild.tagName.toLowerCase() !== 'html'));

    var newChild = createNodesFromMarkup(markup, emptyFunction)[0];
    oldChild.parentNode.replaceChild(newChild, oldChild);
  }

};

module.exports = Danger;

}).call(this,require('_process'))

},{"./ExecutionEnvironment":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ExecutionEnvironment.js","./createNodesFromMarkup":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/createNodesFromMarkup.js","./emptyFunction":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/emptyFunction.js","./getMarkupWrap":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/getMarkupWrap.js","./invariant":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/invariant.js","_process":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/browserify/node_modules/process/browser.js"}],"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/DefaultEventPluginOrder.js":[function(require,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule DefaultEventPluginOrder
 */

"use strict";

 var keyOf = require("./keyOf");

/**
 * Module that is injectable into `EventPluginHub`, that specifies a
 * deterministic ordering of `EventPlugin`s. A convenient way to reason about
 * plugins, without having to package every one of them. This is better than
 * having plugins be ordered in the same order that they are injected because
 * that ordering would be influenced by the packaging order.
 * `ResponderEventPlugin` must occur before `SimpleEventPlugin` so that
 * preventing default on events is convenient in `SimpleEventPlugin` handlers.
 */
var DefaultEventPluginOrder = [
  keyOf({ResponderEventPlugin: null}),
  keyOf({SimpleEventPlugin: null}),
  keyOf({TapEventPlugin: null}),
  keyOf({EnterLeaveEventPlugin: null}),
  keyOf({ChangeEventPlugin: null}),
  keyOf({SelectEventPlugin: null}),
  keyOf({CompositionEventPlugin: null}),
  keyOf({BeforeInputEventPlugin: null}),
  keyOf({AnalyticsEventPlugin: null}),
  keyOf({MobileSafariClickEventPlugin: null})
];

module.exports = DefaultEventPluginOrder;

},{"./keyOf":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/keyOf.js"}],"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/EnterLeaveEventPlugin.js":[function(require,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule EnterLeaveEventPlugin
 * @typechecks static-only
 */

"use strict";

var EventConstants = require("./EventConstants");
var EventPropagators = require("./EventPropagators");
var SyntheticMouseEvent = require("./SyntheticMouseEvent");

var ReactMount = require("./ReactMount");
var keyOf = require("./keyOf");

var topLevelTypes = EventConstants.topLevelTypes;
var getFirstReactDOM = ReactMount.getFirstReactDOM;

var eventTypes = {
  mouseEnter: {
    registrationName: keyOf({onMouseEnter: null}),
    dependencies: [
      topLevelTypes.topMouseOut,
      topLevelTypes.topMouseOver
    ]
  },
  mouseLeave: {
    registrationName: keyOf({onMouseLeave: null}),
    dependencies: [
      topLevelTypes.topMouseOut,
      topLevelTypes.topMouseOver
    ]
  }
};

var extractedEvents = [null, null];

var EnterLeaveEventPlugin = {

  eventTypes: eventTypes,

  /**
   * For almost every interaction we care about, there will be both a top-level
   * `mouseover` and `mouseout` event that occurs. Only use `mouseout` so that
   * we do not extract duplicate events. However, moving the mouse into the
   * browser from outside will not fire a `mouseout` event. In this case, we use
   * the `mouseover` top-level event.
   *
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {DOMEventTarget} topLevelTarget The listening component root node.
   * @param {string} topLevelTargetID ID of `topLevelTarget`.
   * @param {object} nativeEvent Native browser event.
   * @return {*} An accumulation of synthetic events.
   * @see {EventPluginHub.extractEvents}
   */
  extractEvents: function(
      topLevelType,
      topLevelTarget,
      topLevelTargetID,
      nativeEvent) {
    if (topLevelType === topLevelTypes.topMouseOver &&
        (nativeEvent.relatedTarget || nativeEvent.fromElement)) {
      return null;
    }
    if (topLevelType !== topLevelTypes.topMouseOut &&
        topLevelType !== topLevelTypes.topMouseOver) {
      // Must not be a mouse in or mouse out - ignoring.
      return null;
    }

    var win;
    if (topLevelTarget.window === topLevelTarget) {
      // `topLevelTarget` is probably a window object.
      win = topLevelTarget;
    } else {
      // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
      var doc = topLevelTarget.ownerDocument;
      if (doc) {
        win = doc.defaultView || doc.parentWindow;
      } else {
        win = window;
      }
    }

    var from, to;
    if (topLevelType === topLevelTypes.topMouseOut) {
      from = topLevelTarget;
      to =
        getFirstReactDOM(nativeEvent.relatedTarget || nativeEvent.toElement) ||
        win;
    } else {
      from = win;
      to = topLevelTarget;
    }

    if (from === to) {
      // Nothing pertains to our managed components.
      return null;
    }

    var fromID = from ? ReactMount.getID(from) : '';
    var toID = to ? ReactMount.getID(to) : '';

    var leave = SyntheticMouseEvent.getPooled(
      eventTypes.mouseLeave,
      fromID,
      nativeEvent
    );
    leave.type = 'mouseleave';
    leave.target = from;
    leave.relatedTarget = to;

    var enter = SyntheticMouseEvent.getPooled(
      eventTypes.mouseEnter,
      toID,
      nativeEvent
    );
    enter.type = 'mouseenter';
    enter.target = to;
    enter.relatedTarget = from;

    EventPropagators.accumulateEnterLeaveDispatches(leave, enter, fromID, toID);

    extractedEvents[0] = leave;
    extractedEvents[1] = enter;

    return extractedEvents;
  }

};

module.exports = EnterLeaveEventPlugin;

},{"./EventConstants":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/EventConstants.js","./EventPropagators":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/EventPropagators.js","./ReactMount":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ReactMount.js","./SyntheticMouseEvent":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/SyntheticMouseEvent.js","./keyOf":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/keyOf.js"}],"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/EventConstants.js":[function(require,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule EventConstants
 */

"use strict";

var keyMirror = require("./keyMirror");

var PropagationPhases = keyMirror({bubbled: null, captured: null});

/**
 * Types of raw signals from the browser caught at the top level.
 */
var topLevelTypes = keyMirror({
  topBlur: null,
  topChange: null,
  topClick: null,
  topCompositionEnd: null,
  topCompositionStart: null,
  topCompositionUpdate: null,
  topContextMenu: null,
  topCopy: null,
  topCut: null,
  topDoubleClick: null,
  topDrag: null,
  topDragEnd: null,
  topDragEnter: null,
  topDragExit: null,
  topDragLeave: null,
  topDragOver: null,
  topDragStart: null,
  topDrop: null,
  topError: null,
  topFocus: null,
  topInput: null,
  topKeyDown: null,
  topKeyPress: null,
  topKeyUp: null,
  topLoad: null,
  topMouseDown: null,
  topMouseMove: null,
  topMouseOut: null,
  topMouseOver: null,
  topMouseUp: null,
  topPaste: null,
  topReset: null,
  topScroll: null,
  topSelectionChange: null,
  topSubmit: null,
  topTextInput: null,
  topTouchCancel: null,
  topTouchEnd: null,
  topTouchMove: null,
  topTouchStart: null,
  topWheel: null
});

var EventConstants = {
  topLevelTypes: topLevelTypes,
  PropagationPhases: PropagationPhases
};

module.exports = EventConstants;

},{"./keyMirror":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/keyMirror.js"}],"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/EventListener.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule EventListener
 * @typechecks
 */

var emptyFunction = require("./emptyFunction");

/**
 * Upstream version of event listener. Does not take into account specific
 * nature of platform.
 */
var EventListener = {
  /**
   * Listen to DOM events during the bubble phase.
   *
   * @param {DOMEventTarget} target DOM element to register listener on.
   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.
   * @param {function} callback Callback function.
   * @return {object} Object with a `remove` method.
   */
  listen: function(target, eventType, callback) {
    if (target.addEventListener) {
      target.addEventListener(eventType, callback, false);
      return {
        remove: function() {
          target.removeEventListener(eventType, callback, false);
        }
      };
    } else if (target.attachEvent) {
      target.attachEvent('on' + eventType, callback);
      return {
        remove: function() {
          target.detachEvent('on' + eventType, callback);
        }
      };
    }
  },

  /**
   * Listen to DOM events during the capture phase.
   *
   * @param {DOMEventTarget} target DOM element to register listener on.
   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.
   * @param {function} callback Callback function.
   * @return {object} Object with a `remove` method.
   */
  capture: function(target, eventType, callback) {
    if (!target.addEventListener) {
      if ("production" !== process.env.NODE_ENV) {
        console.error(
          'Attempted to listen to events during the capture phase on a ' +
          'browser that does not support the capture phase. Your application ' +
          'will not receive some events.'
        );
      }
      return {
        remove: emptyFunction
      };
    } else {
      target.addEventListener(eventType, callback, true);
      return {
        remove: function() {
          target.removeEventListener(eventType, callback, true);
        }
      };
    }
  },

  registerDefault: function() {}
};

module.exports = EventListener;

}).call(this,require('_process'))

},{"./emptyFunction":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/emptyFunction.js","_process":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/browserify/node_modules/process/browser.js"}],"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/EventPluginHub.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule EventPluginHub
 */

"use strict";

var EventPluginRegistry = require("./EventPluginRegistry");
var EventPluginUtils = require("./EventPluginUtils");

var accumulateInto = require("./accumulateInto");
var forEachAccumulated = require("./forEachAccumulated");
var invariant = require("./invariant");

/**
 * Internal store for event listeners
 */
var listenerBank = {};

/**
 * Internal queue of events that have accumulated their dispatches and are
 * waiting to have their dispatches executed.
 */
var eventQueue = null;

/**
 * Dispatches an event and releases it back into the pool, unless persistent.
 *
 * @param {?object} event Synthetic event to be dispatched.
 * @private
 */
var executeDispatchesAndRelease = function(event) {
  if (event) {
    var executeDispatch = EventPluginUtils.executeDispatch;
    // Plugins can provide custom behavior when dispatching events.
    var PluginModule = EventPluginRegistry.getPluginModuleForEvent(event);
    if (PluginModule && PluginModule.executeDispatch) {
      executeDispatch = PluginModule.executeDispatch;
    }
    EventPluginUtils.executeDispatchesInOrder(event, executeDispatch);

    if (!event.isPersistent()) {
      event.constructor.release(event);
    }
  }
};

/**
 * - `InstanceHandle`: [required] Module that performs logical traversals of DOM
 *   hierarchy given ids of the logical DOM elements involved.
 */
var InstanceHandle = null;

function validateInstanceHandle() {
  var invalid = !InstanceHandle||
    !InstanceHandle.traverseTwoPhase ||
    !InstanceHandle.traverseEnterLeave;
  if (invalid) {
    throw new Error('InstanceHandle not injected before use!');
  }
}

/**
 * This is a unified interface for event plugins to be installed and configured.
 *
 * Event plugins can implement the following properties:
 *
 *   `extractEvents` {function(string, DOMEventTarget, string, object): *}
 *     Required. When a top-level event is fired, this method is expected to
 *     extract synthetic events that will in turn be queued and dispatched.
 *
 *   `eventTypes` {object}
 *     Optional, plugins that fire events must publish a mapping of registration
 *     names that are used to register listeners. Values of this mapping must
 *     be objects that contain `registrationName` or `phasedRegistrationNames`.
 *
 *   `executeDispatch` {function(object, function, string)}
 *     Optional, allows plugins to override how an event gets dispatched. By
 *     default, the listener is simply invoked.
 *
 * Each plugin that is injected into `EventsPluginHub` is immediately operable.
 *
 * @public
 */
var EventPluginHub = {

  /**
   * Methods for injecting dependencies.
   */
  injection: {

    /**
     * @param {object} InjectedMount
     * @public
     */
    injectMount: EventPluginUtils.injection.injectMount,

    /**
     * @param {object} InjectedInstanceHandle
     * @public
     */
    injectInstanceHandle: function(InjectedInstanceHandle) {
      InstanceHandle = InjectedInstanceHandle;
      if ("production" !== process.env.NODE_ENV) {
        validateInstanceHandle();
      }
    },

    getInstanceHandle: function() {
      if ("production" !== process.env.NODE_ENV) {
        validateInstanceHandle();
      }
      return InstanceHandle;
    },

    /**
     * @param {array} InjectedEventPluginOrder
     * @public
     */
    injectEventPluginOrder: EventPluginRegistry.injectEventPluginOrder,

    /**
     * @param {object} injectedNamesToPlugins Map from names to plugin modules.
     */
    injectEventPluginsByName: EventPluginRegistry.injectEventPluginsByName

  },

  eventNameDispatchConfigs: EventPluginRegistry.eventNameDispatchConfigs,

  registrationNameModules: EventPluginRegistry.registrationNameModules,

  /**
   * Stores `listener` at `listenerBank[registrationName][id]`. Is idempotent.
   *
   * @param {string} id ID of the DOM element.
   * @param {string} registrationName Name of listener (e.g. `onClick`).
   * @param {?function} listener The callback to store.
   */
  putListener: function(id, registrationName, listener) {
    ("production" !== process.env.NODE_ENV ? invariant(
      !listener || typeof listener === 'function',
      'Expected %s listener to be a function, instead got type %s',
      registrationName, typeof listener
    ) : invariant(!listener || typeof listener === 'function'));

    var bankForRegistrationName =
      listenerBank[registrationName] || (listenerBank[registrationName] = {});
    bankForRegistrationName[id] = listener;
  },

  /**
   * @param {string} id ID of the DOM element.
   * @param {string} registrationName Name of listener (e.g. `onClick`).
   * @return {?function} The stored callback.
   */
  getListener: function(id, registrationName) {
    var bankForRegistrationName = listenerBank[registrationName];
    return bankForRegistrationName && bankForRegistrationName[id];
  },

  /**
   * Deletes a listener from the registration bank.
   *
   * @param {string} id ID of the DOM element.
   * @param {string} registrationName Name of listener (e.g. `onClick`).
   */
  deleteListener: function(id, registrationName) {
    var bankForRegistrationName = listenerBank[registrationName];
    if (bankForRegistrationName) {
      delete bankForRegistrationName[id];
    }
  },

  /**
   * Deletes all listeners for the DOM element with the supplied ID.
   *
   * @param {string} id ID of the DOM element.
   */
  deleteAllListeners: function(id) {
    for (var registrationName in listenerBank) {
      delete listenerBank[registrationName][id];
    }
  },

  /**
   * Allows registered plugins an opportunity to extract events from top-level
   * native browser events.
   *
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {DOMEventTarget} topLevelTarget The listening component root node.
   * @param {string} topLevelTargetID ID of `topLevelTarget`.
   * @param {object} nativeEvent Native browser event.
   * @return {*} An accumulation of synthetic events.
   * @internal
   */
  extractEvents: function(
      topLevelType,
      topLevelTarget,
      topLevelTargetID,
      nativeEvent) {
    var events;
    var plugins = EventPluginRegistry.plugins;
    for (var i = 0, l = plugins.length; i < l; i++) {
      // Not every plugin in the ordering may be loaded at runtime.
      var possiblePlugin = plugins[i];
      if (possiblePlugin) {
        var extractedEvents = possiblePlugin.extractEvents(
          topLevelType,
          topLevelTarget,
          topLevelTargetID,
          nativeEvent
        );
        if (extractedEvents) {
          events = accumulateInto(events, extractedEvents);
        }
      }
    }
    return events;
  },

  /**
   * Enqueues a synthetic event that should be dispatched when
   * `processEventQueue` is invoked.
   *
   * @param {*} events An accumulation of synthetic events.
   * @internal
   */
  enqueueEvents: function(events) {
    if (events) {
      eventQueue = accumulateInto(eventQueue, events);
    }
  },

  /**
   * Dispatches all synthetic events on the event queue.
   *
   * @internal
   */
  processEventQueue: function() {
    // Set `eventQueue` to null before processing it so that we can tell if more
    // events get enqueued while processing.
    var processingEventQueue = eventQueue;
    eventQueue = null;
    forEachAccumulated(processingEventQueue, executeDispatchesAndRelease);
    ("production" !== process.env.NODE_ENV ? invariant(
      !eventQueue,
      'processEventQueue(): Additional events were enqueued while processing ' +
      'an event queue. Support for this has not yet been implemented.'
    ) : invariant(!eventQueue));
  },

  /**
   * These are needed for tests only. Do not use!
   */
  __purge: function() {
    listenerBank = {};
  },

  __getListenerBank: function() {
    return listenerBank;
  }

};

module.exports = EventPluginHub;

}).call(this,require('_process'))

},{"./EventPluginRegistry":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/EventPluginRegistry.js","./EventPluginUtils":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/EventPluginUtils.js","./accumulateInto":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/accumulateInto.js","./forEachAccumulated":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/forEachAccumulated.js","./invariant":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/invariant.js","_process":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/browserify/node_modules/process/browser.js"}],"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/EventPluginRegistry.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule EventPluginRegistry
 * @typechecks static-only
 */

"use strict";

var invariant = require("./invariant");

/**
 * Injectable ordering of event plugins.
 */
var EventPluginOrder = null;

/**
 * Injectable mapping from names to event plugin modules.
 */
var namesToPlugins = {};

/**
 * Recomputes the plugin list using the injected plugins and plugin ordering.
 *
 * @private
 */
function recomputePluginOrdering() {
  if (!EventPluginOrder) {
    // Wait until an `EventPluginOrder` is injected.
    return;
  }
  for (var pluginName in namesToPlugins) {
    var PluginModule = namesToPlugins[pluginName];
    var pluginIndex = EventPluginOrder.indexOf(pluginName);
    ("production" !== process.env.NODE_ENV ? invariant(
      pluginIndex > -1,
      'EventPluginRegistry: Cannot inject event plugins that do not exist in ' +
      'the plugin ordering, `%s`.',
      pluginName
    ) : invariant(pluginIndex > -1));
    if (EventPluginRegistry.plugins[pluginIndex]) {
      continue;
    }
    ("production" !== process.env.NODE_ENV ? invariant(
      PluginModule.extractEvents,
      'EventPluginRegistry: Event plugins must implement an `extractEvents` ' +
      'method, but `%s` does not.',
      pluginName
    ) : invariant(PluginModule.extractEvents));
    EventPluginRegistry.plugins[pluginIndex] = PluginModule;
    var publishedEvents = PluginModule.eventTypes;
    for (var eventName in publishedEvents) {
      ("production" !== process.env.NODE_ENV ? invariant(
        publishEventForPlugin(
          publishedEvents[eventName],
          PluginModule,
          eventName
        ),
        'EventPluginRegistry: Failed to publish event `%s` for plugin `%s`.',
        eventName,
        pluginName
      ) : invariant(publishEventForPlugin(
        publishedEvents[eventName],
        PluginModule,
        eventName
      )));
    }
  }
}

/**
 * Publishes an event so that it can be dispatched by the supplied plugin.
 *
 * @param {object} dispatchConfig Dispatch configuration for the event.
 * @param {object} PluginModule Plugin publishing the event.
 * @return {boolean} True if the event was successfully published.
 * @private
 */
function publishEventForPlugin(dispatchConfig, PluginModule, eventName) {
  ("production" !== process.env.NODE_ENV ? invariant(
    !EventPluginRegistry.eventNameDispatchConfigs.hasOwnProperty(eventName),
    'EventPluginHub: More than one plugin attempted to publish the same ' +
    'event name, `%s`.',
    eventName
  ) : invariant(!EventPluginRegistry.eventNameDispatchConfigs.hasOwnProperty(eventName)));
  EventPluginRegistry.eventNameDispatchConfigs[eventName] = dispatchConfig;

  var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;
  if (phasedRegistrationNames) {
    for (var phaseName in phasedRegistrationNames) {
      if (phasedRegistrationNames.hasOwnProperty(phaseName)) {
        var phasedRegistrationName = phasedRegistrationNames[phaseName];
        publishRegistrationName(
          phasedRegistrationName,
          PluginModule,
          eventName
        );
      }
    }
    return true;
  } else if (dispatchConfig.registrationName) {
    publishRegistrationName(
      dispatchConfig.registrationName,
      PluginModule,
      eventName
    );
    return true;
  }
  return false;
}

/**
 * Publishes a registration name that is used to identify dispatched events and
 * can be used with `EventPluginHub.putListener` to register listeners.
 *
 * @param {string} registrationName Registration name to add.
 * @param {object} PluginModule Plugin publishing the event.
 * @private
 */
function publishRegistrationName(registrationName, PluginModule, eventName) {
  ("production" !== process.env.NODE_ENV ? invariant(
    !EventPluginRegistry.registrationNameModules[registrationName],
    'EventPluginHub: More than one plugin attempted to publish the same ' +
    'registration name, `%s`.',
    registrationName
  ) : invariant(!EventPluginRegistry.registrationNameModules[registrationName]));
  EventPluginRegistry.registrationNameModules[registrationName] = PluginModule;
  EventPluginRegistry.registrationNameDependencies[registrationName] =
    PluginModule.eventTypes[eventName].dependencies;
}

/**
 * Registers plugins so that they can extract and dispatch events.
 *
 * @see {EventPluginHub}
 */
var EventPluginRegistry = {

  /**
   * Ordered list of injected plugins.
   */
  plugins: [],

  /**
   * Mapping from event name to dispatch config
   */
  eventNameDispatchConfigs: {},

  /**
   * Mapping from registration name to plugin module
   */
  registrationNameModules: {},

  /**
   * Mapping from registration name to event name
   */
  registrationNameDependencies: {},

  /**
   * Injects an ordering of plugins (by plugin name). This allows the ordering
   * to be decoupled from injection of the actual plugins so that ordering is
   * always deterministic regardless of packaging, on-the-fly injection, etc.
   *
   * @param {array} InjectedEventPluginOrder
   * @internal
   * @see {EventPluginHub.injection.injectEventPluginOrder}
   */
  injectEventPluginOrder: function(InjectedEventPluginOrder) {
    ("production" !== process.env.NODE_ENV ? invariant(
      !EventPluginOrder,
      'EventPluginRegistry: Cannot inject event plugin ordering more than ' +
      'once. You are likely trying to load more than one copy of React.'
    ) : invariant(!EventPluginOrder));
    // Clone the ordering so it cannot be dynamically mutated.
    EventPluginOrder = Array.prototype.slice.call(InjectedEventPluginOrder);
    recomputePluginOrdering();
  },

  /**
   * Injects plugins to be used by `EventPluginHub`. The plugin names must be
   * in the ordering injected by `injectEventPluginOrder`.
   *
   * Plugins can be injected as part of page initialization or on-the-fly.
   *
   * @param {object} injectedNamesToPlugins Map from names to plugin modules.
   * @internal
   * @see {EventPluginHub.injection.injectEventPluginsByName}
   */
  injectEventPluginsByName: function(injectedNamesToPlugins) {
    var isOrderingDirty = false;
    for (var pluginName in injectedNamesToPlugins) {
      if (!injectedNamesToPlugins.hasOwnProperty(pluginName)) {
        continue;
      }
      var PluginModule = injectedNamesToPlugins[pluginName];
      if (!namesToPlugins.hasOwnProperty(pluginName) ||
          namesToPlugins[pluginName] !== PluginModule) {
        ("production" !== process.env.NODE_ENV ? invariant(
          !namesToPlugins[pluginName],
          'EventPluginRegistry: Cannot inject two different event plugins ' +
          'using the same name, `%s`.',
          pluginName
        ) : invariant(!namesToPlugins[pluginName]));
        namesToPlugins[pluginName] = PluginModule;
        isOrderingDirty = true;
      }
    }
    if (isOrderingDirty) {
      recomputePluginOrdering();
    }
  },

  /**
   * Looks up the plugin for the supplied event.
   *
   * @param {object} event A synthetic event.
   * @return {?object} The plugin that created the supplied event.
   * @internal
   */
  getPluginModuleForEvent: function(event) {
    var dispatchConfig = event.dispatchConfig;
    if (dispatchConfig.registrationName) {
      return EventPluginRegistry.registrationNameModules[
        dispatchConfig.registrationName
      ] || null;
    }
    for (var phase in dispatchConfig.phasedRegistrationNames) {
      if (!dispatchConfig.phasedRegistrationNames.hasOwnProperty(phase)) {
        continue;
      }
      var PluginModule = EventPluginRegistry.registrationNameModules[
        dispatchConfig.phasedRegistrationNames[phase]
      ];
      if (PluginModule) {
        return PluginModule;
      }
    }
    return null;
  },

  /**
   * Exposed for unit testing.
   * @private
   */
  _resetEventPlugins: function() {
    EventPluginOrder = null;
    for (var pluginName in namesToPlugins) {
      if (namesToPlugins.hasOwnProperty(pluginName)) {
        delete namesToPlugins[pluginName];
      }
    }
    EventPluginRegistry.plugins.length = 0;

    var eventNameDispatchConfigs = EventPluginRegistry.eventNameDispatchConfigs;
    for (var eventName in eventNameDispatchConfigs) {
      if (eventNameDispatchConfigs.hasOwnProperty(eventName)) {
        delete eventNameDispatchConfigs[eventName];
      }
    }

    var registrationNameModules = EventPluginRegistry.registrationNameModules;
    for (var registrationName in registrationNameModules) {
      if (registrationNameModules.hasOwnProperty(registrationName)) {
        delete registrationNameModules[registrationName];
      }
    }
  }

};

module.exports = EventPluginRegistry;

}).call(this,require('_process'))

},{"./invariant":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/invariant.js","_process":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/browserify/node_modules/process/browser.js"}],"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/EventPluginUtils.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule EventPluginUtils
 */

"use strict";

var EventConstants = require("./EventConstants");

var invariant = require("./invariant");

/**
 * Injected dependencies:
 */

/**
 * - `Mount`: [required] Module that can convert between React dom IDs and
 *   actual node references.
 */
var injection = {
  Mount: null,
  injectMount: function(InjectedMount) {
    injection.Mount = InjectedMount;
    if ("production" !== process.env.NODE_ENV) {
      ("production" !== process.env.NODE_ENV ? invariant(
        InjectedMount && InjectedMount.getNode,
        'EventPluginUtils.injection.injectMount(...): Injected Mount module ' +
        'is missing getNode.'
      ) : invariant(InjectedMount && InjectedMount.getNode));
    }
  }
};

var topLevelTypes = EventConstants.topLevelTypes;

function isEndish(topLevelType) {
  return topLevelType === topLevelTypes.topMouseUp ||
         topLevelType === topLevelTypes.topTouchEnd ||
         topLevelType === topLevelTypes.topTouchCancel;
}

function isMoveish(topLevelType) {
  return topLevelType === topLevelTypes.topMouseMove ||
         topLevelType === topLevelTypes.topTouchMove;
}
function isStartish(topLevelType) {
  return topLevelType === topLevelTypes.topMouseDown ||
         topLevelType === topLevelTypes.topTouchStart;
}


var validateEventDispatches;
if ("production" !== process.env.NODE_ENV) {
  validateEventDispatches = function(event) {
    var dispatchListeners = event._dispatchListeners;
    var dispatchIDs = event._dispatchIDs;

    var listenersIsArr = Array.isArray(dispatchListeners);
    var idsIsArr = Array.isArray(dispatchIDs);
    var IDsLen = idsIsArr ? dispatchIDs.length : dispatchIDs ? 1 : 0;
    var listenersLen = listenersIsArr ?
      dispatchListeners.length :
      dispatchListeners ? 1 : 0;

    ("production" !== process.env.NODE_ENV ? invariant(
      idsIsArr === listenersIsArr && IDsLen === listenersLen,
      'EventPluginUtils: Invalid `event`.'
    ) : invariant(idsIsArr === listenersIsArr && IDsLen === listenersLen));
  };
}

/**
 * Invokes `cb(event, listener, id)`. Avoids using call if no scope is
 * provided. The `(listener,id)` pair effectively forms the "dispatch" but are
 * kept separate to conserve memory.
 */
function forEachEventDispatch(event, cb) {
  var dispatchListeners = event._dispatchListeners;
  var dispatchIDs = event._dispatchIDs;
  if ("production" !== process.env.NODE_ENV) {
    validateEventDispatches(event);
  }
  if (Array.isArray(dispatchListeners)) {
    for (var i = 0; i < dispatchListeners.length; i++) {
      if (event.isPropagationStopped()) {
        break;
      }
      // Listeners and IDs are two parallel arrays that are always in sync.
      cb(event, dispatchListeners[i], dispatchIDs[i]);
    }
  } else if (dispatchListeners) {
    cb(event, dispatchListeners, dispatchIDs);
  }
}

/**
 * Default implementation of PluginModule.executeDispatch().
 * @param {SyntheticEvent} SyntheticEvent to handle
 * @param {function} Application-level callback
 * @param {string} domID DOM id to pass to the callback.
 */
function executeDispatch(event, listener, domID) {
  event.currentTarget = injection.Mount.getNode(domID);
  var returnValue = listener(event, domID);
  event.currentTarget = null;
  return returnValue;
}

/**
 * Standard/simple iteration through an event's collected dispatches.
 */
function executeDispatchesInOrder(event, executeDispatch) {
  forEachEventDispatch(event, executeDispatch);
  event._dispatchListeners = null;
  event._dispatchIDs = null;
}

/**
 * Standard/simple iteration through an event's collected dispatches, but stops
 * at the first dispatch execution returning true, and returns that id.
 *
 * @return id of the first dispatch execution who's listener returns true, or
 * null if no listener returned true.
 */
function executeDispatchesInOrderStopAtTrueImpl(event) {
  var dispatchListeners = event._dispatchListeners;
  var dispatchIDs = event._dispatchIDs;
  if ("production" !== process.env.NODE_ENV) {
    validateEventDispatches(event);
  }
  if (Array.isArray(dispatchListeners)) {
    for (var i = 0; i < dispatchListeners.length; i++) {
      if (event.isPropagationStopped()) {
        break;
      }
      // Listeners and IDs are two parallel arrays that are always in sync.
      if (dispatchListeners[i](event, dispatchIDs[i])) {
        return dispatchIDs[i];
      }
    }
  } else if (dispatchListeners) {
    if (dispatchListeners(event, dispatchIDs)) {
      return dispatchIDs;
    }
  }
  return null;
}

/**
 * @see executeDispatchesInOrderStopAtTrueImpl
 */
function executeDispatchesInOrderStopAtTrue(event) {
  var ret = executeDispatchesInOrderStopAtTrueImpl(event);
  event._dispatchIDs = null;
  event._dispatchListeners = null;
  return ret;
}

/**
 * Execution of a "direct" dispatch - there must be at most one dispatch
 * accumulated on the event or it is considered an error. It doesn't really make
 * sense for an event with multiple dispatches (bubbled) to keep track of the
 * return values at each dispatch execution, but it does tend to make sense when
 * dealing with "direct" dispatches.
 *
 * @return The return value of executing the single dispatch.
 */
function executeDirectDispatch(event) {
  if ("production" !== process.env.NODE_ENV) {
    validateEventDispatches(event);
  }
  var dispatchListener = event._dispatchListeners;
  var dispatchID = event._dispatchIDs;
  ("production" !== process.env.NODE_ENV ? invariant(
    !Array.isArray(dispatchListener),
    'executeDirectDispatch(...): Invalid `event`.'
  ) : invariant(!Array.isArray(dispatchListener)));
  var res = dispatchListener ?
    dispatchListener(event, dispatchID) :
    null;
  event._dispatchListeners = null;
  event._dispatchIDs = null;
  return res;
}

/**
 * @param {SyntheticEvent} event
 * @return {bool} True iff number of dispatches accumulated is greater than 0.
 */
function hasDispatches(event) {
  return !!event._dispatchListeners;
}

/**
 * General utilities that are useful in creating custom Event Plugins.
 */
var EventPluginUtils = {
  isEndish: isEndish,
  isMoveish: isMoveish,
  isStartish: isStartish,

  executeDirectDispatch: executeDirectDispatch,
  executeDispatch: executeDispatch,
  executeDispatchesInOrder: executeDispatchesInOrder,
  executeDispatchesInOrderStopAtTrue: executeDispatchesInOrderStopAtTrue,
  hasDispatches: hasDispatches,
  injection: injection,
  useTouchEvents: false
};

module.exports = EventPluginUtils;

}).call(this,require('_process'))

},{"./EventConstants":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/EventConstants.js","./invariant":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/invariant.js","_process":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/browserify/node_modules/process/browser.js"}],"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/EventPropagators.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule EventPropagators
 */

"use strict";

var EventConstants = require("./EventConstants");
var EventPluginHub = require("./EventPluginHub");

var accumulateInto = require("./accumulateInto");
var forEachAccumulated = require("./forEachAccumulated");

var PropagationPhases = EventConstants.PropagationPhases;
var getListener = EventPluginHub.getListener;

/**
 * Some event types have a notion of different registration names for different
 * "phases" of propagation. This finds listeners by a given phase.
 */
function listenerAtPhase(id, event, propagationPhase) {
  var registrationName =
    event.dispatchConfig.phasedRegistrationNames[propagationPhase];
  return getListener(id, registrationName);
}

/**
 * Tags a `SyntheticEvent` with dispatched listeners. Creating this function
 * here, allows us to not have to bind or create functions for each event.
 * Mutating the event's members allows us to not have to create a wrapping
 * "dispatch" object that pairs the event with the listener.
 */
function accumulateDirectionalDispatches(domID, upwards, event) {
  if ("production" !== process.env.NODE_ENV) {
    if (!domID) {
      throw new Error('Dispatching id must not be null');
    }
  }
  var phase = upwards ? PropagationPhases.bubbled : PropagationPhases.captured;
  var listener = listenerAtPhase(domID, event, phase);
  if (listener) {
    event._dispatchListeners =
      accumulateInto(event._dispatchListeners, listener);
    event._dispatchIDs = accumulateInto(event._dispatchIDs, domID);
  }
}

/**
 * Collect dispatches (must be entirely collected before dispatching - see unit
 * tests). Lazily allocate the array to conserve memory.  We must loop through
 * each event and perform the traversal for each one. We can not perform a
 * single traversal for the entire collection of events because each event may
 * have a different target.
 */
function accumulateTwoPhaseDispatchesSingle(event) {
  if (event && event.dispatchConfig.phasedRegistrationNames) {
    EventPluginHub.injection.getInstanceHandle().traverseTwoPhase(
      event.dispatchMarker,
      accumulateDirectionalDispatches,
      event
    );
  }
}


/**
 * Accumulates without regard to direction, does not look for phased
 * registration names. Same as `accumulateDirectDispatchesSingle` but without
 * requiring that the `dispatchMarker` be the same as the dispatched ID.
 */
function accumulateDispatches(id, ignoredDirection, event) {
  if (event && event.dispatchConfig.registrationName) {
    var registrationName = event.dispatchConfig.registrationName;
    var listener = getListener(id, registrationName);
    if (listener) {
      event._dispatchListeners =
        accumulateInto(event._dispatchListeners, listener);
      event._dispatchIDs = accumulateInto(event._dispatchIDs, id);
    }
  }
}

/**
 * Accumulates dispatches on an `SyntheticEvent`, but only for the
 * `dispatchMarker`.
 * @param {SyntheticEvent} event
 */
function accumulateDirectDispatchesSingle(event) {
  if (event && event.dispatchConfig.registrationName) {
    accumulateDispatches(event.dispatchMarker, null, event);
  }
}

function accumulateTwoPhaseDispatches(events) {
  forEachAccumulated(events, accumulateTwoPhaseDispatchesSingle);
}

function accumulateEnterLeaveDispatches(leave, enter, fromID, toID) {
  EventPluginHub.injection.getInstanceHandle().traverseEnterLeave(
    fromID,
    toID,
    accumulateDispatches,
    leave,
    enter
  );
}


function accumulateDirectDispatches(events) {
  forEachAccumulated(events, accumulateDirectDispatchesSingle);
}



/**
 * A small set of propagation patterns, each of which will accept a small amount
 * of information, and generate a set of "dispatch ready event objects" - which
 * are sets of events that have already been annotated with a set of dispatched
 * listener functions/ids. The API is designed this way to discourage these
 * propagation strategies from actually executing the dispatches, since we
 * always want to collect the entire set of dispatches before executing event a
 * single one.
 *
 * @constructor EventPropagators
 */
var EventPropagators = {
  accumulateTwoPhaseDispatches: accumulateTwoPhaseDispatches,
  accumulateDirectDispatches: accumulateDirectDispatches,
  accumulateEnterLeaveDispatches: accumulateEnterLeaveDispatches
};

module.exports = EventPropagators;

}).call(this,require('_process'))

},{"./EventConstants":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/EventConstants.js","./EventPluginHub":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/EventPluginHub.js","./accumulateInto":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/accumulateInto.js","./forEachAccumulated":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/forEachAccumulated.js","_process":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/browserify/node_modules/process/browser.js"}],"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ExecutionEnvironment.js":[function(require,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ExecutionEnvironment
 */

/*jslint evil: true */

"use strict";

var canUseDOM = !!(
  typeof window !== 'undefined' &&
  window.document &&
  window.document.createElement
);

/**
 * Simple, lightweight module assisting with the detection and context of
 * Worker. Helps avoid circular dependencies and allows code to reason about
 * whether or not they are in a Worker, even if they never include the main
 * `ReactWorker` dependency.
 */
var ExecutionEnvironment = {

  canUseDOM: canUseDOM,

  canUseWorkers: typeof Worker !== 'undefined',

  canUseEventListeners:
    canUseDOM && !!(window.addEventListener || window.attachEvent),

  canUseViewport: canUseDOM && !!window.screen,

  isInWorker: !canUseDOM // For now, this is true - might change in the future.

};

module.exports = ExecutionEnvironment;

},{}],"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/HTMLDOMPropertyConfig.js":[function(require,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule HTMLDOMPropertyConfig
 */

/*jslint bitwise: true*/

"use strict";

var DOMProperty = require("./DOMProperty");
var ExecutionEnvironment = require("./ExecutionEnvironment");

var MUST_USE_ATTRIBUTE = DOMProperty.injection.MUST_USE_ATTRIBUTE;
var MUST_USE_PROPERTY = DOMProperty.injection.MUST_USE_PROPERTY;
var HAS_BOOLEAN_VALUE = DOMProperty.injection.HAS_BOOLEAN_VALUE;
var HAS_SIDE_EFFECTS = DOMProperty.injection.HAS_SIDE_EFFECTS;
var HAS_NUMERIC_VALUE = DOMProperty.injection.HAS_NUMERIC_VALUE;
var HAS_POSITIVE_NUMERIC_VALUE =
  DOMProperty.injection.HAS_POSITIVE_NUMERIC_VALUE;
var HAS_OVERLOADED_BOOLEAN_VALUE =
  DOMProperty.injection.HAS_OVERLOADED_BOOLEAN_VALUE;

var hasSVG;
if (ExecutionEnvironment.canUseDOM) {
  var implementation = document.implementation;
  hasSVG = (
    implementation &&
    implementation.hasFeature &&
    implementation.hasFeature(
      'http://www.w3.org/TR/SVG11/feature#BasicStructure',
      '1.1'
    )
  );
}


var HTMLDOMPropertyConfig = {
  isCustomAttribute: RegExp.prototype.test.bind(
    /^(data|aria)-[a-z_][a-z\d_.\-]*$/
  ),
  Properties: {
    /**
     * Standard Properties
     */
    accept: null,
    acceptCharset: null,
    accessKey: null,
    action: null,
    allowFullScreen: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
    allowTransparency: MUST_USE_ATTRIBUTE,
    alt: null,
    async: HAS_BOOLEAN_VALUE,
    autoComplete: null,
    // autoFocus is polyfilled/normalized by AutoFocusMixin
    // autoFocus: HAS_BOOLEAN_VALUE,
    autoPlay: HAS_BOOLEAN_VALUE,
    cellPadding: null,
    cellSpacing: null,
    charSet: MUST_USE_ATTRIBUTE,
    checked: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    classID: MUST_USE_ATTRIBUTE,
    // To set className on SVG elements, it's necessary to use .setAttribute;
    // this works on HTML elements too in all browsers except IE8. Conveniently,
    // IE8 doesn't support SVG and so we can simply use the attribute in
    // browsers that support SVG and the property in browsers that don't,
    // regardless of whether the element is HTML or SVG.
    className: hasSVG ? MUST_USE_ATTRIBUTE : MUST_USE_PROPERTY,
    cols: MUST_USE_ATTRIBUTE | HAS_POSITIVE_NUMERIC_VALUE,
    colSpan: null,
    content: null,
    contentEditable: null,
    contextMenu: MUST_USE_ATTRIBUTE,
    controls: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    coords: null,
    crossOrigin: null,
    data: null, // For `<object />` acts as `src`.
    dateTime: MUST_USE_ATTRIBUTE,
    defer: HAS_BOOLEAN_VALUE,
    dir: null,
    disabled: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
    download: HAS_OVERLOADED_BOOLEAN_VALUE,
    draggable: null,
    encType: null,
    form: MUST_USE_ATTRIBUTE,
    formAction: MUST_USE_ATTRIBUTE,
    formEncType: MUST_USE_ATTRIBUTE,
    formMethod: MUST_USE_ATTRIBUTE,
    formNoValidate: HAS_BOOLEAN_VALUE,
    formTarget: MUST_USE_ATTRIBUTE,
    frameBorder: MUST_USE_ATTRIBUTE,
    height: MUST_USE_ATTRIBUTE,
    hidden: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
    href: null,
    hrefLang: null,
    htmlFor: null,
    httpEquiv: null,
    icon: null,
    id: MUST_USE_PROPERTY,
    label: null,
    lang: null,
    list: MUST_USE_ATTRIBUTE,
    loop: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    manifest: MUST_USE_ATTRIBUTE,
    marginHeight: null,
    marginWidth: null,
    max: null,
    maxLength: MUST_USE_ATTRIBUTE,
    media: MUST_USE_ATTRIBUTE,
    mediaGroup: null,
    method: null,
    min: null,
    multiple: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    muted: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    name: null,
    noValidate: HAS_BOOLEAN_VALUE,
    open: null,
    pattern: null,
    placeholder: null,
    poster: null,
    preload: null,
    radioGroup: null,
    readOnly: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    rel: null,
    required: HAS_BOOLEAN_VALUE,
    role: MUST_USE_ATTRIBUTE,
    rows: MUST_USE_ATTRIBUTE | HAS_POSITIVE_NUMERIC_VALUE,
    rowSpan: null,
    sandbox: null,
    scope: null,
    scrolling: null,
    seamless: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
    selected: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    shape: null,
    size: MUST_USE_ATTRIBUTE | HAS_POSITIVE_NUMERIC_VALUE,
    sizes: MUST_USE_ATTRIBUTE,
    span: HAS_POSITIVE_NUMERIC_VALUE,
    spellCheck: null,
    src: null,
    srcDoc: MUST_USE_PROPERTY,
    srcSet: MUST_USE_ATTRIBUTE,
    start: HAS_NUMERIC_VALUE,
    step: null,
    style: null,
    tabIndex: null,
    target: null,
    title: null,
    type: null,
    useMap: null,
    value: MUST_USE_PROPERTY | HAS_SIDE_EFFECTS,
    width: MUST_USE_ATTRIBUTE,
    wmode: MUST_USE_ATTRIBUTE,

    /**
     * Non-standard Properties
     */
    autoCapitalize: null, // Supported in Mobile Safari for keyboard hints
    autoCorrect: null, // Supported in Mobile Safari for keyboard hints
    itemProp: MUST_USE_ATTRIBUTE, // Microdata: http://schema.org/docs/gs.html
    itemScope: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE, // Microdata: http://schema.org/docs/gs.html
    itemType: MUST_USE_ATTRIBUTE, // Microdata: http://schema.org/docs/gs.html
    property: null // Supports OG in meta tags
  },
  DOMAttributeNames: {
    acceptCharset: 'accept-charset',
    className: 'class',
    htmlFor: 'for',
    httpEquiv: 'http-equiv'
  },
  DOMPropertyNames: {
    autoCapitalize: 'autocapitalize',
    autoComplete: 'autocomplete',
    autoCorrect: 'autocorrect',
    autoFocus: 'autofocus',
    autoPlay: 'autoplay',
    encType: 'enctype',
    hrefLang: 'hreflang',
    radioGroup: 'radiogroup',
    spellCheck: 'spellcheck',
    srcDoc: 'srcdoc',
    srcSet: 'srcset'
  }
};

module.exports = HTMLDOMPropertyConfig;

},{"./DOMProperty":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/DOMProperty.js","./ExecutionEnvironment":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ExecutionEnvironment.js"}],"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/LinkedStateMixin.js":[function(require,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule LinkedStateMixin
 * @typechecks static-only
 */

"use strict";

var ReactLink = require("./ReactLink");
var ReactStateSetters = require("./ReactStateSetters");

/**
 * A simple mixin around ReactLink.forState().
 */
var LinkedStateMixin = {
  /**
   * Create a ReactLink that's linked to part of this component's state. The
   * ReactLink will have the current value of this.state[key] and will call
   * setState() when a change is requested.
   *
   * @param {string} key state key to update. Note: you may want to use keyOf()
   * if you're using Google Closure Compiler advanced mode.
   * @return {ReactLink} ReactLink instance linking to the state.
   */
  linkState: function(key) {
    return new ReactLink(
      this.state[key],
      ReactStateSetters.createStateKeySetter(this, key)
    );
  }
};

module.exports = LinkedStateMixin;

},{"./ReactLink":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ReactLink.js","./ReactStateSetters":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ReactStateSetters.js"}],"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/LinkedValueUtils.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule LinkedValueUtils
 * @typechecks static-only
 */

"use strict";

var ReactPropTypes = require("./ReactPropTypes");

var invariant = require("./invariant");

var hasReadOnlyValue = {
  'button': true,
  'checkbox': true,
  'image': true,
  'hidden': true,
  'radio': true,
  'reset': true,
  'submit': true
};

function _assertSingleLink(input) {
  ("production" !== process.env.NODE_ENV ? invariant(
    input.props.checkedLink == null || input.props.valueLink == null,
    'Cannot provide a checkedLink and a valueLink. If you want to use ' +
    'checkedLink, you probably don\'t want to use valueLink and vice versa.'
  ) : invariant(input.props.checkedLink == null || input.props.valueLink == null));
}
function _assertValueLink(input) {
  _assertSingleLink(input);
  ("production" !== process.env.NODE_ENV ? invariant(
    input.props.value == null && input.props.onChange == null,
    'Cannot provide a valueLink and a value or onChange event. If you want ' +
    'to use value or onChange, you probably don\'t want to use valueLink.'
  ) : invariant(input.props.value == null && input.props.onChange == null));
}

function _assertCheckedLink(input) {
  _assertSingleLink(input);
  ("production" !== process.env.NODE_ENV ? invariant(
    input.props.checked == null && input.props.onChange == null,
    'Cannot provide a checkedLink and a checked property or onChange event. ' +
    'If you want to use checked or onChange, you probably don\'t want to ' +
    'use checkedLink'
  ) : invariant(input.props.checked == null && input.props.onChange == null));
}

/**
 * @param {SyntheticEvent} e change event to handle
 */
function _handleLinkedValueChange(e) {
  /*jshint validthis:true */
  this.props.valueLink.requestChange(e.target.value);
}

/**
  * @param {SyntheticEvent} e change event to handle
  */
function _handleLinkedCheckChange(e) {
  /*jshint validthis:true */
  this.props.checkedLink.requestChange(e.target.checked);
}

/**
 * Provide a linked `value` attribute for controlled forms. You should not use
 * this outside of the ReactDOM controlled form components.
 */
var LinkedValueUtils = {
  Mixin: {
    propTypes: {
      value: function(props, propName, componentName) {
        if (!props[propName] ||
            hasReadOnlyValue[props.type] ||
            props.onChange ||
            props.readOnly ||
            props.disabled) {
          return;
        }
        return new Error(
          'You provided a `value` prop to a form field without an ' +
          '`onChange` handler. This will render a read-only field. If ' +
          'the field should be mutable use `defaultValue`. Otherwise, ' +
          'set either `onChange` or `readOnly`.'
        );
      },
      checked: function(props, propName, componentName) {
        if (!props[propName] ||
            props.onChange ||
            props.readOnly ||
            props.disabled) {
          return;
        }
        return new Error(
          'You provided a `checked` prop to a form field without an ' +
          '`onChange` handler. This will render a read-only field. If ' +
          'the field should be mutable use `defaultChecked`. Otherwise, ' +
          'set either `onChange` or `readOnly`.'
        );
      },
      onChange: ReactPropTypes.func
    }
  },

  /**
   * @param {ReactComponent} input Form component
   * @return {*} current value of the input either from value prop or link.
   */
  getValue: function(input) {
    if (input.props.valueLink) {
      _assertValueLink(input);
      return input.props.valueLink.value;
    }
    return input.props.value;
  },

  /**
   * @param {ReactComponent} input Form component
   * @return {*} current checked status of the input either from checked prop
   *             or link.
   */
  getChecked: function(input) {
    if (input.props.checkedLink) {
      _assertCheckedLink(input);
      return input.props.checkedLink.value;
    }
    return input.props.checked;
  },

  /**
   * @param {ReactComponent} input Form component
   * @return {function} change callback either from onChange prop or link.
   */
  getOnChange: function(input) {
    if (input.props.valueLink) {
      _assertValueLink(input);
      return _handleLinkedValueChange;
    } else if (input.props.checkedLink) {
      _assertCheckedLink(input);
      return _handleLinkedCheckChange;
    }
    return input.props.onChange;
  }
};

module.exports = LinkedValueUtils;

}).call(this,require('_process'))

},{"./ReactPropTypes":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ReactPropTypes.js","./invariant":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/invariant.js","_process":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/browserify/node_modules/process/browser.js"}],"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/LocalEventTrapMixin.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule LocalEventTrapMixin
 */

"use strict";

var ReactBrowserEventEmitter = require("./ReactBrowserEventEmitter");

var accumulateInto = require("./accumulateInto");
var forEachAccumulated = require("./forEachAccumulated");
var invariant = require("./invariant");

function remove(event) {
  event.remove();
}

var LocalEventTrapMixin = {
  trapBubbledEvent:function(topLevelType, handlerBaseName) {
    ("production" !== process.env.NODE_ENV ? invariant(this.isMounted(), 'Must be mounted to trap events') : invariant(this.isMounted()));
    var listener = ReactBrowserEventEmitter.trapBubbledEvent(
      topLevelType,
      handlerBaseName,
      this.getDOMNode()
    );
    this._localEventListeners =
      accumulateInto(this._localEventListeners, listener);
  },

  // trapCapturedEvent would look nearly identical. We don't implement that
  // method because it isn't currently needed.

  componentWillUnmount:function() {
    if (this._localEventListeners) {
      forEachAccumulated(this._localEventListeners, remove);
    }
  }
};

module.exports = LocalEventTrapMixin;

}).call(this,require('_process'))

},{"./ReactBrowserEventEmitter":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ReactBrowserEventEmitter.js","./accumulateInto":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/accumulateInto.js","./forEachAccumulated":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/forEachAccumulated.js","./invariant":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/invariant.js","_process":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/browserify/node_modules/process/browser.js"}],"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/MobileSafariClickEventPlugin.js":[function(require,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule MobileSafariClickEventPlugin
 * @typechecks static-only
 */

"use strict";

var EventConstants = require("./EventConstants");

var emptyFunction = require("./emptyFunction");

var topLevelTypes = EventConstants.topLevelTypes;

/**
 * Mobile Safari does not fire properly bubble click events on non-interactive
 * elements, which means delegated click listeners do not fire. The workaround
 * for this bug involves attaching an empty click listener on the target node.
 *
 * This particular plugin works around the bug by attaching an empty click
 * listener on `touchstart` (which does fire on every element).
 */
var MobileSafariClickEventPlugin = {

  eventTypes: null,

  /**
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {DOMEventTarget} topLevelTarget The listening component root node.
   * @param {string} topLevelTargetID ID of `topLevelTarget`.
   * @param {object} nativeEvent Native browser event.
   * @return {*} An accumulation of synthetic events.
   * @see {EventPluginHub.extractEvents}
   */
  extractEvents: function(
      topLevelType,
      topLevelTarget,
      topLevelTargetID,
      nativeEvent) {
    if (topLevelType === topLevelTypes.topTouchStart) {
      var target = nativeEvent.target;
      if (target && !target.onclick) {
        target.onclick = emptyFunction;
      }
    }
  }

};

module.exports = MobileSafariClickEventPlugin;

},{"./EventConstants":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/EventConstants.js","./emptyFunction":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/emptyFunction.js"}],"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/Object.assign.js":[function(require,module,exports){
/**
 * Copyright 2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule Object.assign
 */

// https://people.mozilla.org/~jorendorff/es6-draft.html#sec-object.assign

function assign(target, sources) {
  if (target == null) {
    throw new TypeError('Object.assign target cannot be null or undefined');
  }

  var to = Object(target);
  var hasOwnProperty = Object.prototype.hasOwnProperty;

  for (var nextIndex = 1; nextIndex < arguments.length; nextIndex++) {
    var nextSource = arguments[nextIndex];
    if (nextSource == null) {
      continue;
    }

    var from = Object(nextSource);

    // We don't currently support accessors nor proxies. Therefore this
    // copy cannot throw. If we ever supported this then we must handle
    // exceptions and side-effects. We don't support symbols so they won't
    // be transferred.

    for (var key in from) {
      if (hasOwnProperty.call(from, key)) {
        to[key] = from[key];
      }
    }
  }

  return to;
};

module.exports = assign;

},{}],"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/PooledClass.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule PooledClass
 */

"use strict";

var invariant = require("./invariant");

/**
 * Static poolers. Several custom versions for each potential number of
 * arguments. A completely generic pooler is easy to implement, but would
 * require accessing the `arguments` object. In each of these, `this` refers to
 * the Class itself, not an instance. If any others are needed, simply add them
 * here, or in their own files.
 */
var oneArgumentPooler = function(copyFieldsFrom) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, copyFieldsFrom);
    return instance;
  } else {
    return new Klass(copyFieldsFrom);
  }
};

var twoArgumentPooler = function(a1, a2) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, a1, a2);
    return instance;
  } else {
    return new Klass(a1, a2);
  }
};

var threeArgumentPooler = function(a1, a2, a3) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, a1, a2, a3);
    return instance;
  } else {
    return new Klass(a1, a2, a3);
  }
};

var fiveArgumentPooler = function(a1, a2, a3, a4, a5) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, a1, a2, a3, a4, a5);
    return instance;
  } else {
    return new Klass(a1, a2, a3, a4, a5);
  }
};

var standardReleaser = function(instance) {
  var Klass = this;
  ("production" !== process.env.NODE_ENV ? invariant(
    instance instanceof Klass,
    'Trying to release an instance into a pool of a different type.'
  ) : invariant(instance instanceof Klass));
  if (instance.destructor) {
    instance.destructor();
  }
  if (Klass.instancePool.length < Klass.poolSize) {
    Klass.instancePool.push(instance);
  }
};

var DEFAULT_POOL_SIZE = 10;
var DEFAULT_POOLER = oneArgumentPooler;

/**
 * Augments `CopyConstructor` to be a poolable class, augmenting only the class
 * itself (statically) not adding any prototypical fields. Any CopyConstructor
 * you give this may have a `poolSize` property, and will look for a
 * prototypical `destructor` on instances (optional).
 *
 * @param {Function} CopyConstructor Constructor that can be used to reset.
 * @param {Function} pooler Customizable pooler.
 */
var addPoolingTo = function(CopyConstructor, pooler) {
  var NewKlass = CopyConstructor;
  NewKlass.instancePool = [];
  NewKlass.getPooled = pooler || DEFAULT_POOLER;
  if (!NewKlass.poolSize) {
    NewKlass.poolSize = DEFAULT_POOL_SIZE;
  }
  NewKlass.release = standardReleaser;
  return NewKlass;
};

var PooledClass = {
  addPoolingTo: addPoolingTo,
  oneArgumentPooler: oneArgumentPooler,
  twoArgumentPooler: twoArgumentPooler,
  threeArgumentPooler: threeArgumentPooler,
  fiveArgumentPooler: fiveArgumentPooler
};

module.exports = PooledClass;

}).call(this,require('_process'))

},{"./invariant":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/invariant.js","_process":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/browserify/node_modules/process/browser.js"}],"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/React.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule React
 */

"use strict";

var DOMPropertyOperations = require("./DOMPropertyOperations");
var EventPluginUtils = require("./EventPluginUtils");
var ReactChildren = require("./ReactChildren");
var ReactComponent = require("./ReactComponent");
var ReactCompositeComponent = require("./ReactCompositeComponent");
var ReactContext = require("./ReactContext");
var ReactCurrentOwner = require("./ReactCurrentOwner");
var ReactElement = require("./ReactElement");
var ReactElementValidator = require("./ReactElementValidator");
var ReactDOM = require("./ReactDOM");
var ReactDOMComponent = require("./ReactDOMComponent");
var ReactDefaultInjection = require("./ReactDefaultInjection");
var ReactInstanceHandles = require("./ReactInstanceHandles");
var ReactLegacyElement = require("./ReactLegacyElement");
var ReactMount = require("./ReactMount");
var ReactMultiChild = require("./ReactMultiChild");
var ReactPerf = require("./ReactPerf");
var ReactPropTypes = require("./ReactPropTypes");
var ReactServerRendering = require("./ReactServerRendering");
var ReactTextComponent = require("./ReactTextComponent");

var assign = require("./Object.assign");
var deprecated = require("./deprecated");
var onlyChild = require("./onlyChild");

ReactDefaultInjection.inject();

var createElement = ReactElement.createElement;
var createFactory = ReactElement.createFactory;

if ("production" !== process.env.NODE_ENV) {
  createElement = ReactElementValidator.createElement;
  createFactory = ReactElementValidator.createFactory;
}

// TODO: Drop legacy elements once classes no longer export these factories
createElement = ReactLegacyElement.wrapCreateElement(
  createElement
);
createFactory = ReactLegacyElement.wrapCreateFactory(
  createFactory
);

var render = ReactPerf.measure('React', 'render', ReactMount.render);

var React = {
  Children: {
    map: ReactChildren.map,
    forEach: ReactChildren.forEach,
    count: ReactChildren.count,
    only: onlyChild
  },
  DOM: ReactDOM,
  PropTypes: ReactPropTypes,
  initializeTouchEvents: function(shouldUseTouch) {
    EventPluginUtils.useTouchEvents = shouldUseTouch;
  },
  createClass: ReactCompositeComponent.createClass,
  createElement: createElement,
  createFactory: createFactory,
  constructAndRenderComponent: ReactMount.constructAndRenderComponent,
  constructAndRenderComponentByID: ReactMount.constructAndRenderComponentByID,
  render: render,
  renderToString: ReactServerRendering.renderToString,
  renderToStaticMarkup: ReactServerRendering.renderToStaticMarkup,
  unmountComponentAtNode: ReactMount.unmountComponentAtNode,
  isValidClass: ReactLegacyElement.isValidClass,
  isValidElement: ReactElement.isValidElement,
  withContext: ReactContext.withContext,

  // Hook for JSX spread, don't use this for anything else.
  __spread: assign,

  // Deprecations (remove for 0.13)
  renderComponent: deprecated(
    'React',
    'renderComponent',
    'render',
    this,
    render
  ),
  renderComponentToString: deprecated(
    'React',
    'renderComponentToString',
    'renderToString',
    this,
    ReactServerRendering.renderToString
  ),
  renderComponentToStaticMarkup: deprecated(
    'React',
    'renderComponentToStaticMarkup',
    'renderToStaticMarkup',
    this,
    ReactServerRendering.renderToStaticMarkup
  ),
  isValidComponent: deprecated(
    'React',
    'isValidComponent',
    'isValidElement',
    this,
    ReactElement.isValidElement
  )
};

// Inject the runtime into a devtools global hook regardless of browser.
// Allows for debugging when the hook is injected on the page.
if (
  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' &&
  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.inject === 'function') {
  __REACT_DEVTOOLS_GLOBAL_HOOK__.inject({
    Component: ReactComponent,
    CurrentOwner: ReactCurrentOwner,
    DOMComponent: ReactDOMComponent,
    DOMPropertyOperations: DOMPropertyOperations,
    InstanceHandles: ReactInstanceHandles,
    Mount: ReactMount,
    MultiChild: ReactMultiChild,
    TextComponent: ReactTextComponent
  });
}

if ("production" !== process.env.NODE_ENV) {
  var ExecutionEnvironment = require("./ExecutionEnvironment");
  if (ExecutionEnvironment.canUseDOM && window.top === window.self) {

    // If we're in Chrome, look for the devtools marker and provide a download
    // link if not installed.
    if (navigator.userAgent.indexOf('Chrome') > -1) {
      if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined') {
        console.debug(
          'Download the React DevTools for a better development experience: ' +
          'http://fb.me/react-devtools'
        );
      }
    }

    var expectedFeatures = [
      // shims
      Array.isArray,
      Array.prototype.every,
      Array.prototype.forEach,
      Array.prototype.indexOf,
      Array.prototype.map,
      Date.now,
      Function.prototype.bind,
      Object.keys,
      String.prototype.split,
      String.prototype.trim,

      // shams
      Object.create,
      Object.freeze
    ];

    for (var i = 0; i < expectedFeatures.length; i++) {
      if (!expectedFeatures[i]) {
        console.error(
          'One or more ES5 shim/shams expected by React are not available: ' +
          'http://fb.me/react-warning-polyfills'
        );
        break;
      }
    }
  }
}

// Version exists only in the open-source version of React, not in Facebook's
// internal version.
React.version = '0.12.2';

module.exports = React;

}).call(this,require('_process'))

},{"./DOMPropertyOperations":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/DOMPropertyOperations.js","./EventPluginUtils":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/EventPluginUtils.js","./ExecutionEnvironment":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ExecutionEnvironment.js","./Object.assign":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/Object.assign.js","./ReactChildren":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ReactChildren.js","./ReactComponent":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ReactComponent.js","./ReactCompositeComponent":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ReactCompositeComponent.js","./ReactContext":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ReactContext.js","./ReactCurrentOwner":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ReactCurrentOwner.js","./ReactDOM":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ReactDOM.js","./ReactDOMComponent":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ReactDOMComponent.js","./ReactDefaultInjection":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ReactDefaultInjection.js","./ReactElement":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ReactElement.js","./ReactElementValidator":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ReactElementValidator.js","./ReactInstanceHandles":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ReactInstanceHandles.js","./ReactLegacyElement":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ReactLegacyElement.js","./ReactMount":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ReactMount.js","./ReactMultiChild":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ReactMultiChild.js","./ReactPerf":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ReactPerf.js","./ReactPropTypes":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ReactPropTypes.js","./ReactServerRendering":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ReactServerRendering.js","./ReactTextComponent":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ReactTextComponent.js","./deprecated":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/deprecated.js","./onlyChild":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/onlyChild.js","_process":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/browserify/node_modules/process/browser.js"}],"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ReactBrowserComponentMixin.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactBrowserComponentMixin
 */

"use strict";

var ReactEmptyComponent = require("./ReactEmptyComponent");
var ReactMount = require("./ReactMount");

var invariant = require("./invariant");

var ReactBrowserComponentMixin = {
  /**
   * Returns the DOM node rendered by this component.
   *
   * @return {DOMElement} The root node of this component.
   * @final
   * @protected
   */
  getDOMNode: function() {
    ("production" !== process.env.NODE_ENV ? invariant(
      this.isMounted(),
      'getDOMNode(): A component must be mounted to have a DOM node.'
    ) : invariant(this.isMounted()));
    if (ReactEmptyComponent.isNullComponentID(this._rootNodeID)) {
      return null;
    }
    return ReactMount.getNode(this._rootNodeID);
  }
};

module.exports = ReactBrowserComponentMixin;

}).call(this,require('_process'))

},{"./ReactEmptyComponent":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ReactEmptyComponent.js","./ReactMount":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ReactMount.js","./invariant":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/invariant.js","_process":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/browserify/node_modules/process/browser.js"}],"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ReactBrowserEventEmitter.js":[function(require,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactBrowserEventEmitter
 * @typechecks static-only
 */

"use strict";

var EventConstants = require("./EventConstants");
var EventPluginHub = require("./EventPluginHub");
var EventPluginRegistry = require("./EventPluginRegistry");
var ReactEventEmitterMixin = require("./ReactEventEmitterMixin");
var ViewportMetrics = require("./ViewportMetrics");

var assign = require("./Object.assign");
var isEventSupported = require("./isEventSupported");

/**
 * Summary of `ReactBrowserEventEmitter` event handling:
 *
 *  - Top-level delegation is used to trap most native browser events. This
 *    may only occur in the main thread and is the responsibility of
 *    ReactEventListener, which is injected and can therefore support pluggable
 *    event sources. This is the only work that occurs in the main thread.
 *
 *  - We normalize and de-duplicate events to account for browser quirks. This
 *    may be done in the worker thread.
 *
 *  - Forward these native events (with the associated top-level type used to
 *    trap it) to `EventPluginHub`, which in turn will ask plugins if they want
 *    to extract any synthetic events.
 *
 *  - The `EventPluginHub` will then process each event by annotating them with
 *    "dispatches", a sequence of listeners and IDs that care about that event.
 *
 *  - The `EventPluginHub` then dispatches the events.
 *
 * Overview of React and the event system:
 *
 * +------------+    .
 * |    DOM     |    .
 * +------------+    .
 *       |           .
 *       v           .
 * +------------+    .
 * | ReactEvent |    .
 * |  Listener  |    .
 * +------------+    .                         +-----------+
 *       |           .               +--------+|SimpleEvent|
 *       |           .               |         |Plugin     |
 * +-----|------+    .               v         +-----------+
 * |     |      |    .    +--------------+                    +------------+
 * |     +-----------.--->|EventPluginHub|                    |    Event   |
 * |            |    .    |              |     +-----------+  | Propagators|
 * | ReactEvent |    .    |              |     |TapEvent   |  |------------|
 * |  Emitter   |    .    |              |<---+|Plugin     |  |other plugin|
 * |            |    .    |              |     +-----------+  |  utilities |
 * |     +-----------.--->|              |                    +------------+
 * |     |      |    .    +--------------+
 * +-----|------+    .                ^        +-----------+
 *       |           .                |        |Enter/Leave|
 *       +           .                +-------+|Plugin     |
 * +-------------+   .                         +-----------+
 * | application |   .
 * |-------------|   .
 * |             |   .
 * |             |   .
 * +-------------+   .
 *                   .
 *    React Core     .  General Purpose Event Plugin System
 */

var alreadyListeningTo = {};
var isMonitoringScrollValue = false;
var reactTopListenersCounter = 0;

// For events like 'submit' which don't consistently bubble (which we trap at a
// lower node than `document`), binding at `document` would cause duplicate
// events so we don't include them here
var topEventMapping = {
  topBlur: 'blur',
  topChange: 'change',
  topClick: 'click',
  topCompositionEnd: 'compositionend',
  topCompositionStart: 'compositionstart',
  topCompositionUpdate: 'compositionupdate',
  topContextMenu: 'contextmenu',
  topCopy: 'copy',
  topCut: 'cut',
  topDoubleClick: 'dblclick',
  topDrag: 'drag',
  topDragEnd: 'dragend',
  topDragEnter: 'dragenter',
  topDragExit: 'dragexit',
  topDragLeave: 'dragleave',
  topDragOver: 'dragover',
  topDragStart: 'dragstart',
  topDrop: 'drop',
  topFocus: 'focus',
  topInput: 'input',
  topKeyDown: 'keydown',
  topKeyPress: 'keypress',
  topKeyUp: 'keyup',
  topMouseDown: 'mousedown',
  topMouseMove: 'mousemove',
  topMouseOut: 'mouseout',
  topMouseOver: 'mouseover',
  topMouseUp: 'mouseup',
  topPaste: 'paste',
  topScroll: 'scroll',
  topSelectionChange: 'selectionchange',
  topTextInput: 'textInput',
  topTouchCancel: 'touchcancel',
  topTouchEnd: 'touchend',
  topTouchMove: 'touchmove',
  topTouchStart: 'touchstart',
  topWheel: 'wheel'
};

/**
 * To ensure no conflicts with other potential React instances on the page
 */
var topListenersIDKey = "_reactListenersID" + String(Math.random()).slice(2);

function getListeningForDocument(mountAt) {
  // In IE8, `mountAt` is a host object and doesn't have `hasOwnProperty`
  // directly.
  if (!Object.prototype.hasOwnProperty.call(mountAt, topListenersIDKey)) {
    mountAt[topListenersIDKey] = reactTopListenersCounter++;
    alreadyListeningTo[mountAt[topListenersIDKey]] = {};
  }
  return alreadyListeningTo[mountAt[topListenersIDKey]];
}

/**
 * `ReactBrowserEventEmitter` is used to attach top-level event listeners. For
 * example:
 *
 *   ReactBrowserEventEmitter.putListener('myID', 'onClick', myFunction);
 *
 * This would allocate a "registration" of `('onClick', myFunction)` on 'myID'.
 *
 * @internal
 */
var ReactBrowserEventEmitter = assign({}, ReactEventEmitterMixin, {

  /**
   * Injectable event backend
   */
  ReactEventListener: null,

  injection: {
    /**
     * @param {object} ReactEventListener
     */
    injectReactEventListener: function(ReactEventListener) {
      ReactEventListener.setHandleTopLevel(
        ReactBrowserEventEmitter.handleTopLevel
      );
      ReactBrowserEventEmitter.ReactEventListener = ReactEventListener;
    }
  },

  /**
   * Sets whether or not any created callbacks should be enabled.
   *
   * @param {boolean} enabled True if callbacks should be enabled.
   */
  setEnabled: function(enabled) {
    if (ReactBrowserEventEmitter.ReactEventListener) {
      ReactBrowserEventEmitter.ReactEventListener.setEnabled(enabled);
    }
  },

  /**
   * @return {boolean} True if callbacks are enabled.
   */
  isEnabled: function() {
    return !!(
      ReactBrowserEventEmitter.ReactEventListener &&
      ReactBrowserEventEmitter.ReactEventListener.isEnabled()
    );
  },

  /**
   * We listen for bubbled touch events on the document object.
   *
   * Firefox v8.01 (and possibly others) exhibited strange behavior when
   * mounting `onmousemove` events at some node that was not the document
   * element. The symptoms were that if your mouse is not moving over something
   * contained within that mount point (for example on the background) the
   * top-level listeners for `onmousemove` won't be called. However, if you
   * register the `mousemove` on the document object, then it will of course
   * catch all `mousemove`s. This along with iOS quirks, justifies restricting
   * top-level listeners to the document object only, at least for these
   * movement types of events and possibly all events.
   *
   * @see http://www.quirksmode.org/blog/archives/2010/09/click_event_del.html
   *
   * Also, `keyup`/`keypress`/`keydown` do not bubble to the window on IE, but
   * they bubble to document.
   *
   * @param {string} registrationName Name of listener (e.g. `onClick`).
   * @param {object} contentDocumentHandle Document which owns the container
   */
  listenTo: function(registrationName, contentDocumentHandle) {
    var mountAt = contentDocumentHandle;
    var isListening = getListeningForDocument(mountAt);
    var dependencies = EventPluginRegistry.
      registrationNameDependencies[registrationName];

    var topLevelTypes = EventConstants.topLevelTypes;
    for (var i = 0, l = dependencies.length; i < l; i++) {
      var dependency = dependencies[i];
      if (!(
            isListening.hasOwnProperty(dependency) &&
            isListening[dependency]
          )) {
        if (dependency === topLevelTypes.topWheel) {
          if (isEventSupported('wheel')) {
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
              topLevelTypes.topWheel,
              'wheel',
              mountAt
            );
          } else if (isEventSupported('mousewheel')) {
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
              topLevelTypes.topWheel,
              'mousewheel',
              mountAt
            );
          } else {
            // Firefox needs to capture a different mouse scroll event.
            // @see http://www.quirksmode.org/dom/events/tests/scroll.html
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
              topLevelTypes.topWheel,
              'DOMMouseScroll',
              mountAt
            );
          }
        } else if (dependency === topLevelTypes.topScroll) {

          if (isEventSupported('scroll', true)) {
            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(
              topLevelTypes.topScroll,
              'scroll',
              mountAt
            );
          } else {
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
              topLevelTypes.topScroll,
              'scroll',
              ReactBrowserEventEmitter.ReactEventListener.WINDOW_HANDLE
            );
          }
        } else if (dependency === topLevelTypes.topFocus ||
            dependency === topLevelTypes.topBlur) {

          if (isEventSupported('focus', true)) {
            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(
              topLevelTypes.topFocus,
              'focus',
              mountAt
            );
            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(
              topLevelTypes.topBlur,
              'blur',
              mountAt
            );
          } else if (isEventSupported('focusin')) {
            // IE has `focusin` and `focusout` events which bubble.
            // @see http://www.quirksmode.org/blog/archives/2008/04/delegating_the.html
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
              topLevelTypes.topFocus,
              'focusin',
              mountAt
            );
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
              topLevelTypes.topBlur,
              'focusout',
              mountAt
            );
          }

          // to make sure blur and focus event listeners are only attached once
          isListening[topLevelTypes.topBlur] = true;
          isListening[topLevelTypes.topFocus] = true;
        } else if (topEventMapping.hasOwnProperty(dependency)) {
          ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
            dependency,
            topEventMapping[dependency],
            mountAt
          );
        }

        isListening[dependency] = true;
      }
    }
  },

  trapBubbledEvent: function(topLevelType, handlerBaseName, handle) {
    return ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
      topLevelType,
      handlerBaseName,
      handle
    );
  },

  trapCapturedEvent: function(topLevelType, handlerBaseName, handle) {
    return ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(
      topLevelType,
      handlerBaseName,
      handle
    );
  },

  /**
   * Listens to window scroll and resize events. We cache scroll values so that
   * application code can access them without triggering reflows.
   *
   * NOTE: Scroll events do not bubble.
   *
   * @see http://www.quirksmode.org/dom/events/scroll.html
   */
  ensureScrollValueMonitoring: function(){
    if (!isMonitoringScrollValue) {
      var refresh = ViewportMetrics.refreshScrollValues;
      ReactBrowserEventEmitter.ReactEventListener.monitorScrollValue(refresh);
      isMonitoringScrollValue = true;
    }
  },

  eventNameDispatchConfigs: EventPluginHub.eventNameDispatchConfigs,

  registrationNameModules: EventPluginHub.registrationNameModules,

  putListener: EventPluginHub.putListener,

  getListener: EventPluginHub.getListener,

  deleteListener: EventPluginHub.deleteListener,

  deleteAllListeners: EventPluginHub.deleteAllListeners

});

module.exports = ReactBrowserEventEmitter;

},{"./EventConstants":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/EventConstants.js","./EventPluginHub":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/EventPluginHub.js","./EventPluginRegistry":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/EventPluginRegistry.js","./Object.assign":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/Object.assign.js","./ReactEventEmitterMixin":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ReactEventEmitterMixin.js","./ViewportMetrics":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ViewportMetrics.js","./isEventSupported":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/isEventSupported.js"}],"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ReactCSSTransitionGroup.js":[function(require,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @typechecks
 * @providesModule ReactCSSTransitionGroup
 */

"use strict";

var React = require("./React");

var assign = require("./Object.assign");

var ReactTransitionGroup = React.createFactory(
  require("./ReactTransitionGroup")
);
var ReactCSSTransitionGroupChild = React.createFactory(
  require("./ReactCSSTransitionGroupChild")
);

var ReactCSSTransitionGroup = React.createClass({
  displayName: 'ReactCSSTransitionGroup',

  propTypes: {
    transitionName: React.PropTypes.string.isRequired,
    transitionEnter: React.PropTypes.bool,
    transitionLeave: React.PropTypes.bool
  },

  getDefaultProps: function() {
    return {
      transitionEnter: true,
      transitionLeave: true
    };
  },

  _wrapChild: function(child) {
    // We need to provide this childFactory so that
    // ReactCSSTransitionGroupChild can receive updates to name, enter, and
    // leave while it is leaving.
    return ReactCSSTransitionGroupChild(
      {
        name: this.props.transitionName,
        enter: this.props.transitionEnter,
        leave: this.props.transitionLeave
      },
      child
    );
  },

  render: function() {
    return (
      ReactTransitionGroup(
        assign({}, this.props, {childFactory: this._wrapChild})
      )
    );
  }
});

module.exports = ReactCSSTransitionGroup;

},{"./Object.assign":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/Object.assign.js","./React":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/React.js","./ReactCSSTransitionGroupChild":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ReactCSSTransitionGroupChild.js","./ReactTransitionGroup":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ReactTransitionGroup.js"}],"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ReactCSSTransitionGroupChild.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @typechecks
 * @providesModule ReactCSSTransitionGroupChild
 */

"use strict";

var React = require("./React");

var CSSCore = require("./CSSCore");
var ReactTransitionEvents = require("./ReactTransitionEvents");

var onlyChild = require("./onlyChild");

// We don't remove the element from the DOM until we receive an animationend or
// transitionend event. If the user screws up and forgets to add an animation
// their node will be stuck in the DOM forever, so we detect if an animation
// does not start and if it doesn't, we just call the end listener immediately.
var TICK = 17;
var NO_EVENT_TIMEOUT = 5000;

var noEventListener = null;


if ("production" !== process.env.NODE_ENV) {
  noEventListener = function() {
    console.warn(
      'transition(): tried to perform an animation without ' +
      'an animationend or transitionend event after timeout (' +
      NO_EVENT_TIMEOUT + 'ms). You should either disable this ' +
      'transition in JS or add a CSS animation/transition.'
    );
  };
}

var ReactCSSTransitionGroupChild = React.createClass({
  displayName: 'ReactCSSTransitionGroupChild',

  transition: function(animationType, finishCallback) {
    var node = this.getDOMNode();
    var className = this.props.name + '-' + animationType;
    var activeClassName = className + '-active';
    var noEventTimeout = null;

    var endListener = function(e) {
      if (e && e.target !== node) {
        return;
      }
      if ("production" !== process.env.NODE_ENV) {
        clearTimeout(noEventTimeout);
      }

      CSSCore.removeClass(node, className);
      CSSCore.removeClass(node, activeClassName);

      ReactTransitionEvents.removeEndEventListener(node, endListener);

      // Usually this optional callback is used for informing an owner of
      // a leave animation and telling it to remove the child.
      finishCallback && finishCallback();
    };

    ReactTransitionEvents.addEndEventListener(node, endListener);

    CSSCore.addClass(node, className);

    // Need to do this to actually trigger a transition.
    this.queueClass(activeClassName);

    if ("production" !== process.env.NODE_ENV) {
      noEventTimeout = setTimeout(noEventListener, NO_EVENT_TIMEOUT);
    }
  },

  queueClass: function(className) {
    this.classNameQueue.push(className);

    if (!this.timeout) {
      this.timeout = setTimeout(this.flushClassNameQueue, TICK);
    }
  },

  flushClassNameQueue: function() {
    if (this.isMounted()) {
      this.classNameQueue.forEach(
        CSSCore.addClass.bind(CSSCore, this.getDOMNode())
      );
    }
    this.classNameQueue.length = 0;
    this.timeout = null;
  },

  componentWillMount: function() {
    this.classNameQueue = [];
  },

  componentWillUnmount: function() {
    if (this.timeout) {
      clearTimeout(this.timeout);
    }
  },

  componentWillEnter: function(done) {
    if (this.props.enter) {
      this.transition('enter', done);
    } else {
      done();
    }
  },

  componentWillLeave: function(done) {
    if (this.props.leave) {
      this.transition('leave', done);
    } else {
      done();
    }
  },

  render: function() {
    return onlyChild(this.props.children);
  }
});

module.exports = ReactCSSTransitionGroupChild;

}).call(this,require('_process'))

},{"./CSSCore":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/CSSCore.js","./React":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/React.js","./ReactTransitionEvents":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ReactTransitionEvents.js","./onlyChild":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/onlyChild.js","_process":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/browserify/node_modules/process/browser.js"}],"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ReactChildren.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactChildren
 */

"use strict";

var PooledClass = require("./PooledClass");

var traverseAllChildren = require("./traverseAllChildren");
var warning = require("./warning");

var twoArgumentPooler = PooledClass.twoArgumentPooler;
var threeArgumentPooler = PooledClass.threeArgumentPooler;

/**
 * PooledClass representing the bookkeeping associated with performing a child
 * traversal. Allows avoiding binding callbacks.
 *
 * @constructor ForEachBookKeeping
 * @param {!function} forEachFunction Function to perform traversal with.
 * @param {?*} forEachContext Context to perform context with.
 */
function ForEachBookKeeping(forEachFunction, forEachContext) {
  this.forEachFunction = forEachFunction;
  this.forEachContext = forEachContext;
}
PooledClass.addPoolingTo(ForEachBookKeeping, twoArgumentPooler);

function forEachSingleChild(traverseContext, child, name, i) {
  var forEachBookKeeping = traverseContext;
  forEachBookKeeping.forEachFunction.call(
    forEachBookKeeping.forEachContext, child, i);
}

/**
 * Iterates through children that are typically specified as `props.children`.
 *
 * The provided forEachFunc(child, index) will be called for each
 * leaf child.
 *
 * @param {?*} children Children tree container.
 * @param {function(*, int)} forEachFunc.
 * @param {*} forEachContext Context for forEachContext.
 */
function forEachChildren(children, forEachFunc, forEachContext) {
  if (children == null) {
    return children;
  }

  var traverseContext =
    ForEachBookKeeping.getPooled(forEachFunc, forEachContext);
  traverseAllChildren(children, forEachSingleChild, traverseContext);
  ForEachBookKeeping.release(traverseContext);
}

/**
 * PooledClass representing the bookkeeping associated with performing a child
 * mapping. Allows avoiding binding callbacks.
 *
 * @constructor MapBookKeeping
 * @param {!*} mapResult Object containing the ordered map of results.
 * @param {!function} mapFunction Function to perform mapping with.
 * @param {?*} mapContext Context to perform mapping with.
 */
function MapBookKeeping(mapResult, mapFunction, mapContext) {
  this.mapResult = mapResult;
  this.mapFunction = mapFunction;
  this.mapContext = mapContext;
}
PooledClass.addPoolingTo(MapBookKeeping, threeArgumentPooler);

function mapSingleChildIntoContext(traverseContext, child, name, i) {
  var mapBookKeeping = traverseContext;
  var mapResult = mapBookKeeping.mapResult;

  var keyUnique = !mapResult.hasOwnProperty(name);
  ("production" !== process.env.NODE_ENV ? warning(
    keyUnique,
    'ReactChildren.map(...): Encountered two children with the same key, ' +
    '`%s`. Child keys must be unique; when two children share a key, only ' +
    'the first child will be used.',
    name
  ) : null);

  if (keyUnique) {
    var mappedChild =
      mapBookKeeping.mapFunction.call(mapBookKeeping.mapContext, child, i);
    mapResult[name] = mappedChild;
  }
}

/**
 * Maps children that are typically specified as `props.children`.
 *
 * The provided mapFunction(child, key, index) will be called for each
 * leaf child.
 *
 * TODO: This may likely break any calls to `ReactChildren.map` that were
 * previously relying on the fact that we guarded against null children.
 *
 * @param {?*} children Children tree container.
 * @param {function(*, int)} mapFunction.
 * @param {*} mapContext Context for mapFunction.
 * @return {object} Object containing the ordered map of results.
 */
function mapChildren(children, func, context) {
  if (children == null) {
    return children;
  }

  var mapResult = {};
  var traverseContext = MapBookKeeping.getPooled(mapResult, func, context);
  traverseAllChildren(children, mapSingleChildIntoContext, traverseContext);
  MapBookKeeping.release(traverseContext);
  return mapResult;
}

function forEachSingleChildDummy(traverseContext, child, name, i) {
  return null;
}

/**
 * Count the number of children that are typically specified as
 * `props.children`.
 *
 * @param {?*} children Children tree container.
 * @return {number} The number of children.
 */
function countChildren(children, context) {
  return traverseAllChildren(children, forEachSingleChildDummy, null);
}

var ReactChildren = {
  forEach: forEachChildren,
  map: mapChildren,
  count: countChildren
};

module.exports = ReactChildren;

}).call(this,require('_process'))

},{"./PooledClass":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/PooledClass.js","./traverseAllChildren":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/traverseAllChildren.js","./warning":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/warning.js","_process":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/browserify/node_modules/process/browser.js"}],"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ReactComponent.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactComponent
 */

"use strict";

var ReactElement = require("./ReactElement");
var ReactOwner = require("./ReactOwner");
var ReactUpdates = require("./ReactUpdates");

var assign = require("./Object.assign");
var invariant = require("./invariant");
var keyMirror = require("./keyMirror");

/**
 * Every React component is in one of these life cycles.
 */
var ComponentLifeCycle = keyMirror({
  /**
   * Mounted components have a DOM node representation and are capable of
   * receiving new props.
   */
  MOUNTED: null,
  /**
   * Unmounted components are inactive and cannot receive new props.
   */
  UNMOUNTED: null
});

var injected = false;

/**
 * Optionally injectable environment dependent cleanup hook. (server vs.
 * browser etc). Example: A browser system caches DOM nodes based on component
 * ID and must remove that cache entry when this instance is unmounted.
 *
 * @private
 */
var unmountIDFromEnvironment = null;

/**
 * The "image" of a component tree, is the platform specific (typically
 * serialized) data that represents a tree of lower level UI building blocks.
 * On the web, this "image" is HTML markup which describes a construction of
 * low level `div` and `span` nodes. Other platforms may have different
 * encoding of this "image". This must be injected.
 *
 * @private
 */
var mountImageIntoNode = null;

/**
 * Components are the basic units of composition in React.
 *
 * Every component accepts a set of keyed input parameters known as "props" that
 * are initialized by the constructor. Once a component is mounted, the props
 * can be mutated using `setProps` or `replaceProps`.
 *
 * Every component is capable of the following operations:
 *
 *   `mountComponent`
 *     Initializes the component, renders markup, and registers event listeners.
 *
 *   `receiveComponent`
 *     Updates the rendered DOM nodes to match the given component.
 *
 *   `unmountComponent`
 *     Releases any resources allocated by this component.
 *
 * Components can also be "owned" by other components. Being owned by another
 * component means being constructed by that component. This is different from
 * being the child of a component, which means having a DOM representation that
 * is a child of the DOM representation of that component.
 *
 * @class ReactComponent
 */
var ReactComponent = {

  injection: {
    injectEnvironment: function(ReactComponentEnvironment) {
      ("production" !== process.env.NODE_ENV ? invariant(
        !injected,
        'ReactComponent: injectEnvironment() can only be called once.'
      ) : invariant(!injected));
      mountImageIntoNode = ReactComponentEnvironment.mountImageIntoNode;
      unmountIDFromEnvironment =
        ReactComponentEnvironment.unmountIDFromEnvironment;
      ReactComponent.BackendIDOperations =
        ReactComponentEnvironment.BackendIDOperations;
      injected = true;
    }
  },

  /**
   * @internal
   */
  LifeCycle: ComponentLifeCycle,

  /**
   * Injected module that provides ability to mutate individual properties.
   * Injected into the base class because many different subclasses need access
   * to this.
   *
   * @internal
   */
  BackendIDOperations: null,

  /**
   * Base functionality for every ReactComponent constructor. Mixed into the
   * `ReactComponent` prototype, but exposed statically for easy access.
   *
   * @lends {ReactComponent.prototype}
   */
  Mixin: {

    /**
     * Checks whether or not this component is mounted.
     *
     * @return {boolean} True if mounted, false otherwise.
     * @final
     * @protected
     */
    isMounted: function() {
      return this._lifeCycleState === ComponentLifeCycle.MOUNTED;
    },

    /**
     * Sets a subset of the props.
     *
     * @param {object} partialProps Subset of the next props.
     * @param {?function} callback Called after props are updated.
     * @final
     * @public
     */
    setProps: function(partialProps, callback) {
      // Merge with the pending element if it exists, otherwise with existing
      // element props.
      var element = this._pendingElement || this._currentElement;
      this.replaceProps(
        assign({}, element.props, partialProps),
        callback
      );
    },

    /**
     * Replaces all of the props.
     *
     * @param {object} props New props.
     * @param {?function} callback Called after props are updated.
     * @final
     * @public
     */
    replaceProps: function(props, callback) {
      ("production" !== process.env.NODE_ENV ? invariant(
        this.isMounted(),
        'replaceProps(...): Can only update a mounted component.'
      ) : invariant(this.isMounted()));
      ("production" !== process.env.NODE_ENV ? invariant(
        this._mountDepth === 0,
        'replaceProps(...): You called `setProps` or `replaceProps` on a ' +
        'component with a parent. This is an anti-pattern since props will ' +
        'get reactively updated when rendered. Instead, change the owner\'s ' +
        '`render` method to pass the correct value as props to the component ' +
        'where it is created.'
      ) : invariant(this._mountDepth === 0));
      // This is a deoptimized path. We optimize for always having a element.
      // This creates an extra internal element.
      this._pendingElement = ReactElement.cloneAndReplaceProps(
        this._pendingElement || this._currentElement,
        props
      );
      ReactUpdates.enqueueUpdate(this, callback);
    },

    /**
     * Schedule a partial update to the props. Only used for internal testing.
     *
     * @param {object} partialProps Subset of the next props.
     * @param {?function} callback Called after props are updated.
     * @final
     * @internal
     */
    _setPropsInternal: function(partialProps, callback) {
      // This is a deoptimized path. We optimize for always having a element.
      // This creates an extra internal element.
      var element = this._pendingElement || this._currentElement;
      this._pendingElement = ReactElement.cloneAndReplaceProps(
        element,
        assign({}, element.props, partialProps)
      );
      ReactUpdates.enqueueUpdate(this, callback);
    },

    /**
     * Base constructor for all React components.
     *
     * Subclasses that override this method should make sure to invoke
     * `ReactComponent.Mixin.construct.call(this, ...)`.
     *
     * @param {ReactElement} element
     * @internal
     */
    construct: function(element) {
      // This is the public exposed props object after it has been processed
      // with default props. The element's props represents the true internal
      // state of the props.
      this.props = element.props;
      // Record the component responsible for creating this component.
      // This is accessible through the element but we maintain an extra
      // field for compatibility with devtools and as a way to make an
      // incremental update. TODO: Consider deprecating this field.
      this._owner = element._owner;

      // All components start unmounted.
      this._lifeCycleState = ComponentLifeCycle.UNMOUNTED;

      // See ReactUpdates.
      this._pendingCallbacks = null;

      // We keep the old element and a reference to the pending element
      // to track updates.
      this._currentElement = element;
      this._pendingElement = null;
    },

    /**
     * Initializes the component, renders markup, and registers event listeners.
     *
     * NOTE: This does not insert any nodes into the DOM.
     *
     * Subclasses that override this method should make sure to invoke
     * `ReactComponent.Mixin.mountComponent.call(this, ...)`.
     *
     * @param {string} rootID DOM ID of the root node.
     * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
     * @param {number} mountDepth number of components in the owner hierarchy.
     * @return {?string} Rendered markup to be inserted into the DOM.
     * @internal
     */
    mountComponent: function(rootID, transaction, mountDepth) {
      ("production" !== process.env.NODE_ENV ? invariant(
        !this.isMounted(),
        'mountComponent(%s, ...): Can only mount an unmounted component. ' +
        'Make sure to avoid storing components between renders or reusing a ' +
        'single component instance in multiple places.',
        rootID
      ) : invariant(!this.isMounted()));
      var ref = this._currentElement.ref;
      if (ref != null) {
        var owner = this._currentElement._owner;
        ReactOwner.addComponentAsRefTo(this, ref, owner);
      }
      this._rootNodeID = rootID;
      this._lifeCycleState = ComponentLifeCycle.MOUNTED;
      this._mountDepth = mountDepth;
      // Effectively: return '';
    },

    /**
     * Releases any resources allocated by `mountComponent`.
     *
     * NOTE: This does not remove any nodes from the DOM.
     *
     * Subclasses that override this method should make sure to invoke
     * `ReactComponent.Mixin.unmountComponent.call(this)`.
     *
     * @internal
     */
    unmountComponent: function() {
      ("production" !== process.env.NODE_ENV ? invariant(
        this.isMounted(),
        'unmountComponent(): Can only unmount a mounted component.'
      ) : invariant(this.isMounted()));
      var ref = this._currentElement.ref;
      if (ref != null) {
        ReactOwner.removeComponentAsRefFrom(this, ref, this._owner);
      }
      unmountIDFromEnvironment(this._rootNodeID);
      this._rootNodeID = null;
      this._lifeCycleState = ComponentLifeCycle.UNMOUNTED;
    },

    /**
     * Given a new instance of this component, updates the rendered DOM nodes
     * as if that instance was rendered instead.
     *
     * Subclasses that override this method should make sure to invoke
     * `ReactComponent.Mixin.receiveComponent.call(this, ...)`.
     *
     * @param {object} nextComponent Next set of properties.
     * @param {ReactReconcileTransaction} transaction
     * @internal
     */
    receiveComponent: function(nextElement, transaction) {
      ("production" !== process.env.NODE_ENV ? invariant(
        this.isMounted(),
        'receiveComponent(...): Can only update a mounted component.'
      ) : invariant(this.isMounted()));
      this._pendingElement = nextElement;
      this.performUpdateIfNecessary(transaction);
    },

    /**
     * If `_pendingElement` is set, update the component.
     *
     * @param {ReactReconcileTransaction} transaction
     * @internal
     */
    performUpdateIfNecessary: function(transaction) {
      if (this._pendingElement == null) {
        return;
      }
      var prevElement = this._currentElement;
      var nextElement = this._pendingElement;
      this._currentElement = nextElement;
      this.props = nextElement.props;
      this._owner = nextElement._owner;
      this._pendingElement = null;
      this.updateComponent(transaction, prevElement);
    },

    /**
     * Updates the component's currently mounted representation.
     *
     * @param {ReactReconcileTransaction} transaction
     * @param {object} prevElement
     * @internal
     */
    updateComponent: function(transaction, prevElement) {
      var nextElement = this._currentElement;

      // If either the owner or a `ref` has changed, make sure the newest owner
      // has stored a reference to `this`, and the previous owner (if different)
      // has forgotten the reference to `this`. We use the element instead
      // of the public this.props because the post processing cannot determine
      // a ref. The ref conceptually lives on the element.

      // TODO: Should this even be possible? The owner cannot change because
      // it's forbidden by shouldUpdateReactComponent. The ref can change
      // if you swap the keys of but not the refs. Reconsider where this check
      // is made. It probably belongs where the key checking and
      // instantiateReactComponent is done.

      if (nextElement._owner !== prevElement._owner ||
          nextElement.ref !== prevElement.ref) {
        if (prevElement.ref != null) {
          ReactOwner.removeComponentAsRefFrom(
            this, prevElement.ref, prevElement._owner
          );
        }
        // Correct, even if the owner is the same, and only the ref has changed.
        if (nextElement.ref != null) {
          ReactOwner.addComponentAsRefTo(
            this,
            nextElement.ref,
            nextElement._owner
          );
        }
      }
    },

    /**
     * Mounts this component and inserts it into the DOM.
     *
     * @param {string} rootID DOM ID of the root node.
     * @param {DOMElement} container DOM element to mount into.
     * @param {boolean} shouldReuseMarkup If true, do not insert markup
     * @final
     * @internal
     * @see {ReactMount.render}
     */
    mountComponentIntoNode: function(rootID, container, shouldReuseMarkup) {
      var transaction = ReactUpdates.ReactReconcileTransaction.getPooled();
      transaction.perform(
        this._mountComponentIntoNode,
        this,
        rootID,
        container,
        transaction,
        shouldReuseMarkup
      );
      ReactUpdates.ReactReconcileTransaction.release(transaction);
    },

    /**
     * @param {string} rootID DOM ID of the root node.
     * @param {DOMElement} container DOM element to mount into.
     * @param {ReactReconcileTransaction} transaction
     * @param {boolean} shouldReuseMarkup If true, do not insert markup
     * @final
     * @private
     */
    _mountComponentIntoNode: function(
        rootID,
        container,
        transaction,
        shouldReuseMarkup) {
      var markup = this.mountComponent(rootID, transaction, 0);
      mountImageIntoNode(markup, container, shouldReuseMarkup);
    },

    /**
     * Checks if this component is owned by the supplied `owner` component.
     *
     * @param {ReactComponent} owner Component to check.
     * @return {boolean} True if `owners` owns this component.
     * @final
     * @internal
     */
    isOwnedBy: function(owner) {
      return this._owner === owner;
    },

    /**
     * Gets another component, that shares the same owner as this one, by ref.
     *
     * @param {string} ref of a sibling Component.
     * @return {?ReactComponent} the actual sibling Component.
     * @final
     * @internal
     */
    getSiblingByRef: function(ref) {
      var owner = this._owner;
      if (!owner || !owner.refs) {
        return null;
      }
      return owner.refs[ref];
    }
  }
};

module.exports = ReactComponent;

}).call(this,require('_process'))

},{"./Object.assign":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/Object.assign.js","./ReactElement":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ReactElement.js","./ReactOwner":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ReactOwner.js","./ReactUpdates":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ReactUpdates.js","./invariant":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/invariant.js","./keyMirror":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/keyMirror.js","_process":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/browserify/node_modules/process/browser.js"}],"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ReactComponentBrowserEnvironment.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactComponentBrowserEnvironment
 */

/*jslint evil: true */

"use strict";

var ReactDOMIDOperations = require("./ReactDOMIDOperations");
var ReactMarkupChecksum = require("./ReactMarkupChecksum");
var ReactMount = require("./ReactMount");
var ReactPerf = require("./ReactPerf");
var ReactReconcileTransaction = require("./ReactReconcileTransaction");

var getReactRootElementInContainer = require("./getReactRootElementInContainer");
var invariant = require("./invariant");
var setInnerHTML = require("./setInnerHTML");


var ELEMENT_NODE_TYPE = 1;
var DOC_NODE_TYPE = 9;


/**
 * Abstracts away all functionality of `ReactComponent` requires knowledge of
 * the browser context.
 */
var ReactComponentBrowserEnvironment = {
  ReactReconcileTransaction: ReactReconcileTransaction,

  BackendIDOperations: ReactDOMIDOperations,

  /**
   * If a particular environment requires that some resources be cleaned up,
   * specify this in the injected Mixin. In the DOM, we would likely want to
   * purge any cached node ID lookups.
   *
   * @private
   */
  unmountIDFromEnvironment: function(rootNodeID) {
    ReactMount.purgeID(rootNodeID);
  },

  /**
   * @param {string} markup Markup string to place into the DOM Element.
   * @param {DOMElement} container DOM Element to insert markup into.
   * @param {boolean} shouldReuseMarkup Should reuse the existing markup in the
   * container if possible.
   */
  mountImageIntoNode: ReactPerf.measure(
    'ReactComponentBrowserEnvironment',
    'mountImageIntoNode',
    function(markup, container, shouldReuseMarkup) {
      ("production" !== process.env.NODE_ENV ? invariant(
        container && (
          container.nodeType === ELEMENT_NODE_TYPE ||
            container.nodeType === DOC_NODE_TYPE
        ),
        'mountComponentIntoNode(...): Target container is not valid.'
      ) : invariant(container && (
        container.nodeType === ELEMENT_NODE_TYPE ||
          container.nodeType === DOC_NODE_TYPE
      )));

      if (shouldReuseMarkup) {
        if (ReactMarkupChecksum.canReuseMarkup(
          markup,
          getReactRootElementInContainer(container))) {
          return;
        } else {
          ("production" !== process.env.NODE_ENV ? invariant(
            container.nodeType !== DOC_NODE_TYPE,
            'You\'re trying to render a component to the document using ' +
            'server rendering but the checksum was invalid. This usually ' +
            'means you rendered a different component type or props on ' +
            'the client from the one on the server, or your render() ' +
            'methods are impure. React cannot handle this case due to ' +
            'cross-browser quirks by rendering at the document root. You ' +
            'should look for environment dependent code in your components ' +
            'and ensure the props are the same client and server side.'
          ) : invariant(container.nodeType !== DOC_NODE_TYPE));

          if ("production" !== process.env.NODE_ENV) {
            console.warn(
              'React attempted to use reuse markup in a container but the ' +
              'checksum was invalid. This generally means that you are ' +
              'using server rendering and the markup generated on the ' +
              'server was not what the client was expecting. React injected ' +
              'new markup to compensate which works but you have lost many ' +
              'of the benefits of server rendering. Instead, figure out ' +
              'why the markup being generated is different on the client ' +
              'or server.'
            );
          }
        }
      }

      ("production" !== process.env.NODE_ENV ? invariant(
        container.nodeType !== DOC_NODE_TYPE,
        'You\'re trying to render a component to the document but ' +
          'you didn\'t use server rendering. We can\'t do this ' +
          'without using server rendering due to cross-browser quirks. ' +
          'See renderComponentToString() for server rendering.'
      ) : invariant(container.nodeType !== DOC_NODE_TYPE));

      setInnerHTML(container, markup);
    }
  )
};

module.exports = ReactComponentBrowserEnvironment;

}).call(this,require('_process'))

},{"./ReactDOMIDOperations":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ReactDOMIDOperations.js","./ReactMarkupChecksum":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ReactMarkupChecksum.js","./ReactMount":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ReactMount.js","./ReactPerf":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ReactPerf.js","./ReactReconcileTransaction":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ReactReconcileTransaction.js","./getReactRootElementInContainer":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/getReactRootElementInContainer.js","./invariant":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/invariant.js","./setInnerHTML":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/setInnerHTML.js","_process":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/browserify/node_modules/process/browser.js"}],"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ReactComponentWithPureRenderMixin.js":[function(require,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
* @providesModule ReactComponentWithPureRenderMixin
*/

"use strict";

var shallowEqual = require("./shallowEqual");

/**
 * If your React component's render function is "pure", e.g. it will render the
 * same result given the same props and state, provide this Mixin for a
 * considerable performance boost.
 *
 * Most React components have pure render functions.
 *
 * Example:
 *
 *   var ReactComponentWithPureRenderMixin =
 *     require('ReactComponentWithPureRenderMixin');
 *   React.createClass({
 *     mixins: [ReactComponentWithPureRenderMixin],
 *
 *     render: function() {
 *       return <div className={this.props.className}>foo</div>;
 *     }
 *   });
 *
 * Note: This only checks shallow equality for props and state. If these contain
 * complex data structures this mixin may have false-negatives for deeper
 * differences. Only mixin to components which have simple props and state, or
 * use `forceUpdate()` when you know deep data structures have changed.
 */
var ReactComponentWithPureRenderMixin = {
  shouldComponentUpdate: function(nextProps, nextState) {
    return !shallowEqual(this.props, nextProps) ||
           !shallowEqual(this.state, nextState);
  }
};

module.exports = ReactComponentWithPureRenderMixin;

},{"./shallowEqual":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/shallowEqual.js"}],"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ReactCompositeComponent.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactCompositeComponent
 */

"use strict";

var ReactComponent = require("./ReactComponent");
var ReactContext = require("./ReactContext");
var ReactCurrentOwner = require("./ReactCurrentOwner");
var ReactElement = require("./ReactElement");
var ReactElementValidator = require("./ReactElementValidator");
var ReactEmptyComponent = require("./ReactEmptyComponent");
var ReactErrorUtils = require("./ReactErrorUtils");
var ReactLegacyElement = require("./ReactLegacyElement");
var ReactOwner = require("./ReactOwner");
var ReactPerf = require("./ReactPerf");
var ReactPropTransferer = require("./ReactPropTransferer");
var ReactPropTypeLocations = require("./ReactPropTypeLocations");
var ReactPropTypeLocationNames = require("./ReactPropTypeLocationNames");
var ReactUpdates = require("./ReactUpdates");

var assign = require("./Object.assign");
var instantiateReactComponent = require("./instantiateReactComponent");
var invariant = require("./invariant");
var keyMirror = require("./keyMirror");
var keyOf = require("./keyOf");
var monitorCodeUse = require("./monitorCodeUse");
var mapObject = require("./mapObject");
var shouldUpdateReactComponent = require("./shouldUpdateReactComponent");
var warning = require("./warning");

var MIXINS_KEY = keyOf({mixins: null});

/**
 * Policies that describe methods in `ReactCompositeComponentInterface`.
 */
var SpecPolicy = keyMirror({
  /**
   * These methods may be defined only once by the class specification or mixin.
   */
  DEFINE_ONCE: null,
  /**
   * These methods may be defined by both the class specification and mixins.
   * Subsequent definitions will be chained. These methods must return void.
   */
  DEFINE_MANY: null,
  /**
   * These methods are overriding the base ReactCompositeComponent class.
   */
  OVERRIDE_BASE: null,
  /**
   * These methods are similar to DEFINE_MANY, except we assume they return
   * objects. We try to merge the keys of the return values of all the mixed in
   * functions. If there is a key conflict we throw.
   */
  DEFINE_MANY_MERGED: null
});


var injectedMixins = [];

/**
 * Composite components are higher-level components that compose other composite
 * or native components.
 *
 * To create a new type of `ReactCompositeComponent`, pass a specification of
 * your new class to `React.createClass`. The only requirement of your class
 * specification is that you implement a `render` method.
 *
 *   var MyComponent = React.createClass({
 *     render: function() {
 *       return <div>Hello World</div>;
 *     }
 *   });
 *
 * The class specification supports a specific protocol of methods that have
 * special meaning (e.g. `render`). See `ReactCompositeComponentInterface` for
 * more the comprehensive protocol. Any other properties and methods in the
 * class specification will available on the prototype.
 *
 * @interface ReactCompositeComponentInterface
 * @internal
 */
var ReactCompositeComponentInterface = {

  /**
   * An array of Mixin objects to include when defining your component.
   *
   * @type {array}
   * @optional
   */
  mixins: SpecPolicy.DEFINE_MANY,

  /**
   * An object containing properties and methods that should be defined on
   * the component's constructor instead of its prototype (static methods).
   *
   * @type {object}
   * @optional
   */
  statics: SpecPolicy.DEFINE_MANY,

  /**
   * Definition of prop types for this component.
   *
   * @type {object}
   * @optional
   */
  propTypes: SpecPolicy.DEFINE_MANY,

  /**
   * Definition of context types for this component.
   *
   * @type {object}
   * @optional
   */
  contextTypes: SpecPolicy.DEFINE_MANY,

  /**
   * Definition of context types this component sets for its children.
   *
   * @type {object}
   * @optional
   */
  childContextTypes: SpecPolicy.DEFINE_MANY,

  // ==== Definition methods ====

  /**
   * Invoked when the component is mounted. Values in the mapping will be set on
   * `this.props` if that prop is not specified (i.e. using an `in` check).
   *
   * This method is invoked before `getInitialState` and therefore cannot rely
   * on `this.state` or use `this.setState`.
   *
   * @return {object}
   * @optional
   */
  getDefaultProps: SpecPolicy.DEFINE_MANY_MERGED,

  /**
   * Invoked once before the component is mounted. The return value will be used
   * as the initial value of `this.state`.
   *
   *   getInitialState: function() {
   *     return {
   *       isOn: false,
   *       fooBaz: new BazFoo()
   *     }
   *   }
   *
   * @return {object}
   * @optional
   */
  getInitialState: SpecPolicy.DEFINE_MANY_MERGED,

  /**
   * @return {object}
   * @optional
   */
  getChildContext: SpecPolicy.DEFINE_MANY_MERGED,

  /**
   * Uses props from `this.props` and state from `this.state` to render the
   * structure of the component.
   *
   * No guarantees are made about when or how often this method is invoked, so
   * it must not have side effects.
   *
   *   render: function() {
   *     var name = this.props.name;
   *     return <div>Hello, {name}!</div>;
   *   }
   *
   * @return {ReactComponent}
   * @nosideeffects
   * @required
   */
  render: SpecPolicy.DEFINE_ONCE,



  // ==== Delegate methods ====

  /**
   * Invoked when the component is initially created and about to be mounted.
   * This may have side effects, but any external subscriptions or data created
   * by this method must be cleaned up in `componentWillUnmount`.
   *
   * @optional
   */
  componentWillMount: SpecPolicy.DEFINE_MANY,

  /**
   * Invoked when the component has been mounted and has a DOM representation.
   * However, there is no guarantee that the DOM node is in the document.
   *
   * Use this as an opportunity to operate on the DOM when the component has
   * been mounted (initialized and rendered) for the first time.
   *
   * @param {DOMElement} rootNode DOM element representing the component.
   * @optional
   */
  componentDidMount: SpecPolicy.DEFINE_MANY,

  /**
   * Invoked before the component receives new props.
   *
   * Use this as an opportunity to react to a prop transition by updating the
   * state using `this.setState`. Current props are accessed via `this.props`.
   *
   *   componentWillReceiveProps: function(nextProps, nextContext) {
   *     this.setState({
   *       likesIncreasing: nextProps.likeCount > this.props.likeCount
   *     });
   *   }
   *
   * NOTE: There is no equivalent `componentWillReceiveState`. An incoming prop
   * transition may cause a state change, but the opposite is not true. If you
   * need it, you are probably looking for `componentWillUpdate`.
   *
   * @param {object} nextProps
   * @optional
   */
  componentWillReceiveProps: SpecPolicy.DEFINE_MANY,

  /**
   * Invoked while deciding if the component should be updated as a result of
   * receiving new props, state and/or context.
   *
   * Use this as an opportunity to `return false` when you're certain that the
   * transition to the new props/state/context will not require a component
   * update.
   *
   *   shouldComponentUpdate: function(nextProps, nextState, nextContext) {
   *     return !equal(nextProps, this.props) ||
   *       !equal(nextState, this.state) ||
   *       !equal(nextContext, this.context);
   *   }
   *
   * @param {object} nextProps
   * @param {?object} nextState
   * @param {?object} nextContext
   * @return {boolean} True if the component should update.
   * @optional
   */
  shouldComponentUpdate: SpecPolicy.DEFINE_ONCE,

  /**
   * Invoked when the component is about to update due to a transition from
   * `this.props`, `this.state` and `this.context` to `nextProps`, `nextState`
   * and `nextContext`.
   *
   * Use this as an opportunity to perform preparation before an update occurs.
   *
   * NOTE: You **cannot** use `this.setState()` in this method.
   *
   * @param {object} nextProps
   * @param {?object} nextState
   * @param {?object} nextContext
   * @param {ReactReconcileTransaction} transaction
   * @optional
   */
  componentWillUpdate: SpecPolicy.DEFINE_MANY,

  /**
   * Invoked when the component's DOM representation has been updated.
   *
   * Use this as an opportunity to operate on the DOM when the component has
   * been updated.
   *
   * @param {object} prevProps
   * @param {?object} prevState
   * @param {?object} prevContext
   * @param {DOMElement} rootNode DOM element representing the component.
   * @optional
   */
  componentDidUpdate: SpecPolicy.DEFINE_MANY,

  /**
   * Invoked when the component is about to be removed from its parent and have
   * its DOM representation destroyed.
   *
   * Use this as an opportunity to deallocate any external resources.
   *
   * NOTE: There is no `componentDidUnmount` since your component will have been
   * destroyed by that point.
   *
   * @optional
   */
  componentWillUnmount: SpecPolicy.DEFINE_MANY,



  // ==== Advanced methods ====

  /**
   * Updates the component's currently mounted DOM representation.
   *
   * By default, this implements React's rendering and reconciliation algorithm.
   * Sophisticated clients may wish to override this.
   *
   * @param {ReactReconcileTransaction} transaction
   * @internal
   * @overridable
   */
  updateComponent: SpecPolicy.OVERRIDE_BASE

};

/**
 * Mapping from class specification keys to special processing functions.
 *
 * Although these are declared like instance properties in the specification
 * when defining classes using `React.createClass`, they are actually static
 * and are accessible on the constructor instead of the prototype. Despite
 * being static, they must be defined outside of the "statics" key under
 * which all other static methods are defined.
 */
var RESERVED_SPEC_KEYS = {
  displayName: function(Constructor, displayName) {
    Constructor.displayName = displayName;
  },
  mixins: function(Constructor, mixins) {
    if (mixins) {
      for (var i = 0; i < mixins.length; i++) {
        mixSpecIntoComponent(Constructor, mixins[i]);
      }
    }
  },
  childContextTypes: function(Constructor, childContextTypes) {
    validateTypeDef(
      Constructor,
      childContextTypes,
      ReactPropTypeLocations.childContext
    );
    Constructor.childContextTypes = assign(
      {},
      Constructor.childContextTypes,
      childContextTypes
    );
  },
  contextTypes: function(Constructor, contextTypes) {
    validateTypeDef(
      Constructor,
      contextTypes,
      ReactPropTypeLocations.context
    );
    Constructor.contextTypes = assign(
      {},
      Constructor.contextTypes,
      contextTypes
    );
  },
  /**
   * Special case getDefaultProps which should move into statics but requires
   * automatic merging.
   */
  getDefaultProps: function(Constructor, getDefaultProps) {
    if (Constructor.getDefaultProps) {
      Constructor.getDefaultProps = createMergedResultFunction(
        Constructor.getDefaultProps,
        getDefaultProps
      );
    } else {
      Constructor.getDefaultProps = getDefaultProps;
    }
  },
  propTypes: function(Constructor, propTypes) {
    validateTypeDef(
      Constructor,
      propTypes,
      ReactPropTypeLocations.prop
    );
    Constructor.propTypes = assign(
      {},
      Constructor.propTypes,
      propTypes
    );
  },
  statics: function(Constructor, statics) {
    mixStaticSpecIntoComponent(Constructor, statics);
  }
};

function getDeclarationErrorAddendum(component) {
  var owner = component._owner || null;
  if (owner && owner.constructor && owner.constructor.displayName) {
    return ' Check the render method of `' + owner.constructor.displayName +
      '`.';
  }
  return '';
}

function validateTypeDef(Constructor, typeDef, location) {
  for (var propName in typeDef) {
    if (typeDef.hasOwnProperty(propName)) {
      ("production" !== process.env.NODE_ENV ? invariant(
        typeof typeDef[propName] == 'function',
        '%s: %s type `%s` is invalid; it must be a function, usually from ' +
        'React.PropTypes.',
        Constructor.displayName || 'ReactCompositeComponent',
        ReactPropTypeLocationNames[location],
        propName
      ) : invariant(typeof typeDef[propName] == 'function'));
    }
  }
}

function validateMethodOverride(proto, name) {
  var specPolicy = ReactCompositeComponentInterface.hasOwnProperty(name) ?
    ReactCompositeComponentInterface[name] :
    null;

  // Disallow overriding of base class methods unless explicitly allowed.
  if (ReactCompositeComponentMixin.hasOwnProperty(name)) {
    ("production" !== process.env.NODE_ENV ? invariant(
      specPolicy === SpecPolicy.OVERRIDE_BASE,
      'ReactCompositeComponentInterface: You are attempting to override ' +
      '`%s` from your class specification. Ensure that your method names ' +
      'do not overlap with React methods.',
      name
    ) : invariant(specPolicy === SpecPolicy.OVERRIDE_BASE));
  }

  // Disallow defining methods more than once unless explicitly allowed.
  if (proto.hasOwnProperty(name)) {
    ("production" !== process.env.NODE_ENV ? invariant(
      specPolicy === SpecPolicy.DEFINE_MANY ||
      specPolicy === SpecPolicy.DEFINE_MANY_MERGED,
      'ReactCompositeComponentInterface: You are attempting to define ' +
      '`%s` on your component more than once. This conflict may be due ' +
      'to a mixin.',
      name
    ) : invariant(specPolicy === SpecPolicy.DEFINE_MANY ||
    specPolicy === SpecPolicy.DEFINE_MANY_MERGED));
  }
}

function validateLifeCycleOnReplaceState(instance) {
  var compositeLifeCycleState = instance._compositeLifeCycleState;
  ("production" !== process.env.NODE_ENV ? invariant(
    instance.isMounted() ||
      compositeLifeCycleState === CompositeLifeCycle.MOUNTING,
    'replaceState(...): Can only update a mounted or mounting component.'
  ) : invariant(instance.isMounted() ||
    compositeLifeCycleState === CompositeLifeCycle.MOUNTING));
  ("production" !== process.env.NODE_ENV ? invariant(
    ReactCurrentOwner.current == null,
    'replaceState(...): Cannot update during an existing state transition ' +
    '(such as within `render`). Render methods should be a pure function ' +
    'of props and state.'
  ) : invariant(ReactCurrentOwner.current == null));
  ("production" !== process.env.NODE_ENV ? invariant(compositeLifeCycleState !== CompositeLifeCycle.UNMOUNTING,
    'replaceState(...): Cannot update while unmounting component. This ' +
    'usually means you called setState() on an unmounted component.'
  ) : invariant(compositeLifeCycleState !== CompositeLifeCycle.UNMOUNTING));
}

/**
 * Mixin helper which handles policy validation and reserved
 * specification keys when building `ReactCompositeComponent` classses.
 */
function mixSpecIntoComponent(Constructor, spec) {
  if (!spec) {
    return;
  }

  ("production" !== process.env.NODE_ENV ? invariant(
    !ReactLegacyElement.isValidFactory(spec),
    'ReactCompositeComponent: You\'re attempting to ' +
    'use a component class as a mixin. Instead, just use a regular object.'
  ) : invariant(!ReactLegacyElement.isValidFactory(spec)));
  ("production" !== process.env.NODE_ENV ? invariant(
    !ReactElement.isValidElement(spec),
    'ReactCompositeComponent: You\'re attempting to ' +
    'use a component as a mixin. Instead, just use a regular object.'
  ) : invariant(!ReactElement.isValidElement(spec)));

  var proto = Constructor.prototype;

  // By handling mixins before any other properties, we ensure the same
  // chaining order is applied to methods with DEFINE_MANY policy, whether
  // mixins are listed before or after these methods in the spec.
  if (spec.hasOwnProperty(MIXINS_KEY)) {
    RESERVED_SPEC_KEYS.mixins(Constructor, spec.mixins);
  }

  for (var name in spec) {
    if (!spec.hasOwnProperty(name)) {
      continue;
    }

    if (name === MIXINS_KEY) {
      // We have already handled mixins in a special case above
      continue;
    }

    var property = spec[name];
    validateMethodOverride(proto, name);

    if (RESERVED_SPEC_KEYS.hasOwnProperty(name)) {
      RESERVED_SPEC_KEYS[name](Constructor, property);
    } else {
      // Setup methods on prototype:
      // The following member methods should not be automatically bound:
      // 1. Expected ReactCompositeComponent methods (in the "interface").
      // 2. Overridden methods (that were mixed in).
      var isCompositeComponentMethod =
        ReactCompositeComponentInterface.hasOwnProperty(name);
      var isAlreadyDefined = proto.hasOwnProperty(name);
      var markedDontBind = property && property.__reactDontBind;
      var isFunction = typeof property === 'function';
      var shouldAutoBind =
        isFunction &&
        !isCompositeComponentMethod &&
        !isAlreadyDefined &&
        !markedDontBind;

      if (shouldAutoBind) {
        if (!proto.__reactAutoBindMap) {
          proto.__reactAutoBindMap = {};
        }
        proto.__reactAutoBindMap[name] = property;
        proto[name] = property;
      } else {
        if (isAlreadyDefined) {
          var specPolicy = ReactCompositeComponentInterface[name];

          // These cases should already be caught by validateMethodOverride
          ("production" !== process.env.NODE_ENV ? invariant(
            isCompositeComponentMethod && (
              specPolicy === SpecPolicy.DEFINE_MANY_MERGED ||
              specPolicy === SpecPolicy.DEFINE_MANY
            ),
            'ReactCompositeComponent: Unexpected spec policy %s for key %s ' +
            'when mixing in component specs.',
            specPolicy,
            name
          ) : invariant(isCompositeComponentMethod && (
            specPolicy === SpecPolicy.DEFINE_MANY_MERGED ||
            specPolicy === SpecPolicy.DEFINE_MANY
          )));

          // For methods which are defined more than once, call the existing
          // methods before calling the new property, merging if appropriate.
          if (specPolicy === SpecPolicy.DEFINE_MANY_MERGED) {
            proto[name] = createMergedResultFunction(proto[name], property);
          } else if (specPolicy === SpecPolicy.DEFINE_MANY) {
            proto[name] = createChainedFunction(proto[name], property);
          }
        } else {
          proto[name] = property;
          if ("production" !== process.env.NODE_ENV) {
            // Add verbose displayName to the function, which helps when looking
            // at profiling tools.
            if (typeof property === 'function' && spec.displayName) {
              proto[name].displayName = spec.displayName + '_' + name;
            }
          }
        }
      }
    }
  }
}

function mixStaticSpecIntoComponent(Constructor, statics) {
  if (!statics) {
    return;
  }
  for (var name in statics) {
    var property = statics[name];
    if (!statics.hasOwnProperty(name)) {
      continue;
    }

    var isReserved = name in RESERVED_SPEC_KEYS;
    ("production" !== process.env.NODE_ENV ? invariant(
      !isReserved,
      'ReactCompositeComponent: You are attempting to define a reserved ' +
      'property, `%s`, that shouldn\'t be on the "statics" key. Define it ' +
      'as an instance property instead; it will still be accessible on the ' +
      'constructor.',
      name
    ) : invariant(!isReserved));

    var isInherited = name in Constructor;
    ("production" !== process.env.NODE_ENV ? invariant(
      !isInherited,
      'ReactCompositeComponent: You are attempting to define ' +
      '`%s` on your component more than once. This conflict may be ' +
      'due to a mixin.',
      name
    ) : invariant(!isInherited));
    Constructor[name] = property;
  }
}

/**
 * Merge two objects, but throw if both contain the same key.
 *
 * @param {object} one The first object, which is mutated.
 * @param {object} two The second object
 * @return {object} one after it has been mutated to contain everything in two.
 */
function mergeObjectsWithNoDuplicateKeys(one, two) {
  ("production" !== process.env.NODE_ENV ? invariant(
    one && two && typeof one === 'object' && typeof two === 'object',
    'mergeObjectsWithNoDuplicateKeys(): Cannot merge non-objects'
  ) : invariant(one && two && typeof one === 'object' && typeof two === 'object'));

  mapObject(two, function(value, key) {
    ("production" !== process.env.NODE_ENV ? invariant(
      one[key] === undefined,
      'mergeObjectsWithNoDuplicateKeys(): ' +
      'Tried to merge two objects with the same key: `%s`. This conflict ' +
      'may be due to a mixin; in particular, this may be caused by two ' +
      'getInitialState() or getDefaultProps() methods returning objects ' +
      'with clashing keys.',
      key
    ) : invariant(one[key] === undefined));
    one[key] = value;
  });
  return one;
}

/**
 * Creates a function that invokes two functions and merges their return values.
 *
 * @param {function} one Function to invoke first.
 * @param {function} two Function to invoke second.
 * @return {function} Function that invokes the two argument functions.
 * @private
 */
function createMergedResultFunction(one, two) {
  return function mergedResult() {
    var a = one.apply(this, arguments);
    var b = two.apply(this, arguments);
    if (a == null) {
      return b;
    } else if (b == null) {
      return a;
    }
    return mergeObjectsWithNoDuplicateKeys(a, b);
  };
}

/**
 * Creates a function that invokes two functions and ignores their return vales.
 *
 * @param {function} one Function to invoke first.
 * @param {function} two Function to invoke second.
 * @return {function} Function that invokes the two argument functions.
 * @private
 */
function createChainedFunction(one, two) {
  return function chainedFunction() {
    one.apply(this, arguments);
    two.apply(this, arguments);
  };
}

/**
 * `ReactCompositeComponent` maintains an auxiliary life cycle state in
 * `this._compositeLifeCycleState` (which can be null).
 *
 * This is different from the life cycle state maintained by `ReactComponent` in
 * `this._lifeCycleState`. The following diagram shows how the states overlap in
 * time. There are times when the CompositeLifeCycle is null - at those times it
 * is only meaningful to look at ComponentLifeCycle alone.
 *
 * Top Row: ReactComponent.ComponentLifeCycle
 * Low Row: ReactComponent.CompositeLifeCycle
 *
 * +-------+---------------------------------+--------+
 * |  UN   |             MOUNTED             |   UN   |
 * |MOUNTED|                                 | MOUNTED|
 * +-------+---------------------------------+--------+
 * |       ^--------+   +-------+   +--------^        |
 * |       |        |   |       |   |        |        |
 * |    0--|MOUNTING|-0-|RECEIVE|-0-|   UN   |--->0   |
 * |       |        |   |PROPS  |   |MOUNTING|        |
 * |       |        |   |       |   |        |        |
 * |       |        |   |       |   |        |        |
 * |       +--------+   +-------+   +--------+        |
 * |       |                                 |        |
 * +-------+---------------------------------+--------+
 */
var CompositeLifeCycle = keyMirror({
  /**
   * Components in the process of being mounted respond to state changes
   * differently.
   */
  MOUNTING: null,
  /**
   * Components in the process of being unmounted are guarded against state
   * changes.
   */
  UNMOUNTING: null,
  /**
   * Components that are mounted and receiving new props respond to state
   * changes differently.
   */
  RECEIVING_PROPS: null
});

/**
 * @lends {ReactCompositeComponent.prototype}
 */
var ReactCompositeComponentMixin = {

  /**
   * Base constructor for all composite component.
   *
   * @param {ReactElement} element
   * @final
   * @internal
   */
  construct: function(element) {
    // Children can be either an array or more than one argument
    ReactComponent.Mixin.construct.apply(this, arguments);
    ReactOwner.Mixin.construct.apply(this, arguments);

    this.state = null;
    this._pendingState = null;

    // This is the public post-processed context. The real context and pending
    // context lives on the element.
    this.context = null;

    this._compositeLifeCycleState = null;
  },

  /**
   * Checks whether or not this composite component is mounted.
   * @return {boolean} True if mounted, false otherwise.
   * @protected
   * @final
   */
  isMounted: function() {
    return ReactComponent.Mixin.isMounted.call(this) &&
      this._compositeLifeCycleState !== CompositeLifeCycle.MOUNTING;
  },

  /**
   * Initializes the component, renders markup, and registers event listeners.
   *
   * @param {string} rootID DOM ID of the root node.
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @param {number} mountDepth number of components in the owner hierarchy
   * @return {?string} Rendered markup to be inserted into the DOM.
   * @final
   * @internal
   */
  mountComponent: ReactPerf.measure(
    'ReactCompositeComponent',
    'mountComponent',
    function(rootID, transaction, mountDepth) {
      ReactComponent.Mixin.mountComponent.call(
        this,
        rootID,
        transaction,
        mountDepth
      );
      this._compositeLifeCycleState = CompositeLifeCycle.MOUNTING;

      if (this.__reactAutoBindMap) {
        this._bindAutoBindMethods();
      }

      this.context = this._processContext(this._currentElement._context);
      this.props = this._processProps(this.props);

      this.state = this.getInitialState ? this.getInitialState() : null;
      ("production" !== process.env.NODE_ENV ? invariant(
        typeof this.state === 'object' && !Array.isArray(this.state),
        '%s.getInitialState(): must return an object or null',
        this.constructor.displayName || 'ReactCompositeComponent'
      ) : invariant(typeof this.state === 'object' && !Array.isArray(this.state)));

      this._pendingState = null;
      this._pendingForceUpdate = false;

      if (this.componentWillMount) {
        this.componentWillMount();
        // When mounting, calls to `setState` by `componentWillMount` will set
        // `this._pendingState` without triggering a re-render.
        if (this._pendingState) {
          this.state = this._pendingState;
          this._pendingState = null;
        }
      }

      this._renderedComponent = instantiateReactComponent(
        this._renderValidatedComponent(),
        this._currentElement.type // The wrapping type
      );

      // Done with mounting, `setState` will now trigger UI changes.
      this._compositeLifeCycleState = null;
      var markup = this._renderedComponent.mountComponent(
        rootID,
        transaction,
        mountDepth + 1
      );
      if (this.componentDidMount) {
        transaction.getReactMountReady().enqueue(this.componentDidMount, this);
      }
      return markup;
    }
  ),

  /**
   * Releases any resources allocated by `mountComponent`.
   *
   * @final
   * @internal
   */
  unmountComponent: function() {
    this._compositeLifeCycleState = CompositeLifeCycle.UNMOUNTING;
    if (this.componentWillUnmount) {
      this.componentWillUnmount();
    }
    this._compositeLifeCycleState = null;

    this._renderedComponent.unmountComponent();
    this._renderedComponent = null;

    ReactComponent.Mixin.unmountComponent.call(this);

    // Some existing components rely on this.props even after they've been
    // destroyed (in event handlers).
    // TODO: this.props = null;
    // TODO: this.state = null;
  },

  /**
   * Sets a subset of the state. Always use this or `replaceState` to mutate
   * state. You should treat `this.state` as immutable.
   *
   * There is no guarantee that `this.state` will be immediately updated, so
   * accessing `this.state` after calling this method may return the old value.
   *
   * There is no guarantee that calls to `setState` will run synchronously,
   * as they may eventually be batched together.  You can provide an optional
   * callback that will be executed when the call to setState is actually
   * completed.
   *
   * @param {object} partialState Next partial state to be merged with state.
   * @param {?function} callback Called after state is updated.
   * @final
   * @protected
   */
  setState: function(partialState, callback) {
    ("production" !== process.env.NODE_ENV ? invariant(
      typeof partialState === 'object' || partialState == null,
      'setState(...): takes an object of state variables to update.'
    ) : invariant(typeof partialState === 'object' || partialState == null));
    if ("production" !== process.env.NODE_ENV){
      ("production" !== process.env.NODE_ENV ? warning(
        partialState != null,
        'setState(...): You passed an undefined or null state object; ' +
        'instead, use forceUpdate().'
      ) : null);
    }
    // Merge with `_pendingState` if it exists, otherwise with existing state.
    this.replaceState(
      assign({}, this._pendingState || this.state, partialState),
      callback
    );
  },

  /**
   * Replaces all of the state. Always use this or `setState` to mutate state.
   * You should treat `this.state` as immutable.
   *
   * There is no guarantee that `this.state` will be immediately updated, so
   * accessing `this.state` after calling this method may return the old value.
   *
   * @param {object} completeState Next state.
   * @param {?function} callback Called after state is updated.
   * @final
   * @protected
   */
  replaceState: function(completeState, callback) {
    validateLifeCycleOnReplaceState(this);
    this._pendingState = completeState;
    if (this._compositeLifeCycleState !== CompositeLifeCycle.MOUNTING) {
      // If we're in a componentWillMount handler, don't enqueue a rerender
      // because ReactUpdates assumes we're in a browser context (which is wrong
      // for server rendering) and we're about to do a render anyway.
      // TODO: The callback here is ignored when setState is called from
      // componentWillMount. Either fix it or disallow doing so completely in
      // favor of getInitialState.
      ReactUpdates.enqueueUpdate(this, callback);
    }
  },

  /**
   * Filters the context object to only contain keys specified in
   * `contextTypes`, and asserts that they are valid.
   *
   * @param {object} context
   * @return {?object}
   * @private
   */
  _processContext: function(context) {
    var maskedContext = null;
    var contextTypes = this.constructor.contextTypes;
    if (contextTypes) {
      maskedContext = {};
      for (var contextName in contextTypes) {
        maskedContext[contextName] = context[contextName];
      }
      if ("production" !== process.env.NODE_ENV) {
        this._checkPropTypes(
          contextTypes,
          maskedContext,
          ReactPropTypeLocations.context
        );
      }
    }
    return maskedContext;
  },

  /**
   * @param {object} currentContext
   * @return {object}
   * @private
   */
  _processChildContext: function(currentContext) {
    var childContext = this.getChildContext && this.getChildContext();
    var displayName = this.constructor.displayName || 'ReactCompositeComponent';
    if (childContext) {
      ("production" !== process.env.NODE_ENV ? invariant(
        typeof this.constructor.childContextTypes === 'object',
        '%s.getChildContext(): childContextTypes must be defined in order to ' +
        'use getChildContext().',
        displayName
      ) : invariant(typeof this.constructor.childContextTypes === 'object'));
      if ("production" !== process.env.NODE_ENV) {
        this._checkPropTypes(
          this.constructor.childContextTypes,
          childContext,
          ReactPropTypeLocations.childContext
        );
      }
      for (var name in childContext) {
        ("production" !== process.env.NODE_ENV ? invariant(
          name in this.constructor.childContextTypes,
          '%s.getChildContext(): key "%s" is not defined in childContextTypes.',
          displayName,
          name
        ) : invariant(name in this.constructor.childContextTypes));
      }
      return assign({}, currentContext, childContext);
    }
    return currentContext;
  },

  /**
   * Processes props by setting default values for unspecified props and
   * asserting that the props are valid. Does not mutate its argument; returns
   * a new props object with defaults merged in.
   *
   * @param {object} newProps
   * @return {object}
   * @private
   */
  _processProps: function(newProps) {
    if ("production" !== process.env.NODE_ENV) {
      var propTypes = this.constructor.propTypes;
      if (propTypes) {
        this._checkPropTypes(propTypes, newProps, ReactPropTypeLocations.prop);
      }
    }
    return newProps;
  },

  /**
   * Assert that the props are valid
   *
   * @param {object} propTypes Map of prop name to a ReactPropType
   * @param {object} props
   * @param {string} location e.g. "prop", "context", "child context"
   * @private
   */
  _checkPropTypes: function(propTypes, props, location) {
    // TODO: Stop validating prop types here and only use the element
    // validation.
    var componentName = this.constructor.displayName;
    for (var propName in propTypes) {
      if (propTypes.hasOwnProperty(propName)) {
        var error =
          propTypes[propName](props, propName, componentName, location);
        if (error instanceof Error) {
          // We may want to extend this logic for similar errors in
          // renderComponent calls, so I'm abstracting it away into
          // a function to minimize refactoring in the future
          var addendum = getDeclarationErrorAddendum(this);
          ("production" !== process.env.NODE_ENV ? warning(false, error.message + addendum) : null);
        }
      }
    }
  },

  /**
   * If any of `_pendingElement`, `_pendingState`, or `_pendingForceUpdate`
   * is set, update the component.
   *
   * @param {ReactReconcileTransaction} transaction
   * @internal
   */
  performUpdateIfNecessary: function(transaction) {
    var compositeLifeCycleState = this._compositeLifeCycleState;
    // Do not trigger a state transition if we are in the middle of mounting or
    // receiving props because both of those will already be doing this.
    if (compositeLifeCycleState === CompositeLifeCycle.MOUNTING ||
        compositeLifeCycleState === CompositeLifeCycle.RECEIVING_PROPS) {
      return;
    }

    if (this._pendingElement == null &&
        this._pendingState == null &&
        !this._pendingForceUpdate) {
      return;
    }

    var nextContext = this.context;
    var nextProps = this.props;
    var nextElement = this._currentElement;
    if (this._pendingElement != null) {
      nextElement = this._pendingElement;
      nextContext = this._processContext(nextElement._context);
      nextProps = this._processProps(nextElement.props);
      this._pendingElement = null;

      this._compositeLifeCycleState = CompositeLifeCycle.RECEIVING_PROPS;
      if (this.componentWillReceiveProps) {
        this.componentWillReceiveProps(nextProps, nextContext);
      }
    }

    this._compositeLifeCycleState = null;

    var nextState = this._pendingState || this.state;
    this._pendingState = null;

    var shouldUpdate =
      this._pendingForceUpdate ||
      !this.shouldComponentUpdate ||
      this.shouldComponentUpdate(nextProps, nextState, nextContext);

    if ("production" !== process.env.NODE_ENV) {
      if (typeof shouldUpdate === "undefined") {
        console.warn(
          (this.constructor.displayName || 'ReactCompositeComponent') +
          '.shouldComponentUpdate(): Returned undefined instead of a ' +
          'boolean value. Make sure to return true or false.'
        );
      }
    }

    if (shouldUpdate) {
      this._pendingForceUpdate = false;
      // Will set `this.props`, `this.state` and `this.context`.
      this._performComponentUpdate(
        nextElement,
        nextProps,
        nextState,
        nextContext,
        transaction
      );
    } else {
      // If it's determined that a component should not update, we still want
      // to set props and state.
      this._currentElement = nextElement;
      this.props = nextProps;
      this.state = nextState;
      this.context = nextContext;

      // Owner cannot change because shouldUpdateReactComponent doesn't allow
      // it. TODO: Remove this._owner completely.
      this._owner = nextElement._owner;
    }
  },

  /**
   * Merges new props and state, notifies delegate methods of update and
   * performs update.
   *
   * @param {ReactElement} nextElement Next element
   * @param {object} nextProps Next public object to set as properties.
   * @param {?object} nextState Next object to set as state.
   * @param {?object} nextContext Next public object to set as context.
   * @param {ReactReconcileTransaction} transaction
   * @private
   */
  _performComponentUpdate: function(
    nextElement,
    nextProps,
    nextState,
    nextContext,
    transaction
  ) {
    var prevElement = this._currentElement;
    var prevProps = this.props;
    var prevState = this.state;
    var prevContext = this.context;

    if (this.componentWillUpdate) {
      this.componentWillUpdate(nextProps, nextState, nextContext);
    }

    this._currentElement = nextElement;
    this.props = nextProps;
    this.state = nextState;
    this.context = nextContext;

    // Owner cannot change because shouldUpdateReactComponent doesn't allow
    // it. TODO: Remove this._owner completely.
    this._owner = nextElement._owner;

    this.updateComponent(
      transaction,
      prevElement
    );

    if (this.componentDidUpdate) {
      transaction.getReactMountReady().enqueue(
        this.componentDidUpdate.bind(this, prevProps, prevState, prevContext),
        this
      );
    }
  },

  receiveComponent: function(nextElement, transaction) {
    if (nextElement === this._currentElement &&
        nextElement._owner != null) {
      // Since elements are immutable after the owner is rendered,
      // we can do a cheap identity compare here to determine if this is a
      // superfluous reconcile. It's possible for state to be mutable but such
      // change should trigger an update of the owner which would recreate
      // the element. We explicitly check for the existence of an owner since
      // it's possible for a element created outside a composite to be
      // deeply mutated and reused.
      return;
    }

    ReactComponent.Mixin.receiveComponent.call(
      this,
      nextElement,
      transaction
    );
  },

  /**
   * Updates the component's currently mounted DOM representation.
   *
   * By default, this implements React's rendering and reconciliation algorithm.
   * Sophisticated clients may wish to override this.
   *
   * @param {ReactReconcileTransaction} transaction
   * @param {ReactElement} prevElement
   * @internal
   * @overridable
   */
  updateComponent: ReactPerf.measure(
    'ReactCompositeComponent',
    'updateComponent',
    function(transaction, prevParentElement) {
      ReactComponent.Mixin.updateComponent.call(
        this,
        transaction,
        prevParentElement
      );

      var prevComponentInstance = this._renderedComponent;
      var prevElement = prevComponentInstance._currentElement;
      var nextElement = this._renderValidatedComponent();
      if (shouldUpdateReactComponent(prevElement, nextElement)) {
        prevComponentInstance.receiveComponent(nextElement, transaction);
      } else {
        // These two IDs are actually the same! But nothing should rely on that.
        var thisID = this._rootNodeID;
        var prevComponentID = prevComponentInstance._rootNodeID;
        prevComponentInstance.unmountComponent();
        this._renderedComponent = instantiateReactComponent(
          nextElement,
          this._currentElement.type
        );
        var nextMarkup = this._renderedComponent.mountComponent(
          thisID,
          transaction,
          this._mountDepth + 1
        );
        ReactComponent.BackendIDOperations.dangerouslyReplaceNodeWithMarkupByID(
          prevComponentID,
          nextMarkup
        );
      }
    }
  ),

  /**
   * Forces an update. This should only be invoked when it is known with
   * certainty that we are **not** in a DOM transaction.
   *
   * You may want to call this when you know that some deeper aspect of the
   * component's state has changed but `setState` was not called.
   *
   * This will not invoke `shouldUpdateComponent`, but it will invoke
   * `componentWillUpdate` and `componentDidUpdate`.
   *
   * @param {?function} callback Called after update is complete.
   * @final
   * @protected
   */
  forceUpdate: function(callback) {
    var compositeLifeCycleState = this._compositeLifeCycleState;
    ("production" !== process.env.NODE_ENV ? invariant(
      this.isMounted() ||
        compositeLifeCycleState === CompositeLifeCycle.MOUNTING,
      'forceUpdate(...): Can only force an update on mounted or mounting ' +
        'components.'
    ) : invariant(this.isMounted() ||
      compositeLifeCycleState === CompositeLifeCycle.MOUNTING));
    ("production" !== process.env.NODE_ENV ? invariant(
      compositeLifeCycleState !== CompositeLifeCycle.UNMOUNTING &&
      ReactCurrentOwner.current == null,
      'forceUpdate(...): Cannot force an update while unmounting component ' +
      'or within a `render` function.'
    ) : invariant(compositeLifeCycleState !== CompositeLifeCycle.UNMOUNTING &&
    ReactCurrentOwner.current == null));
    this._pendingForceUpdate = true;
    ReactUpdates.enqueueUpdate(this, callback);
  },

  /**
   * @private
   */
  _renderValidatedComponent: ReactPerf.measure(
    'ReactCompositeComponent',
    '_renderValidatedComponent',
    function() {
      var renderedComponent;
      var previousContext = ReactContext.current;
      ReactContext.current = this._processChildContext(
        this._currentElement._context
      );
      ReactCurrentOwner.current = this;
      try {
        renderedComponent = this.render();
        if (renderedComponent === null || renderedComponent === false) {
          renderedComponent = ReactEmptyComponent.getEmptyComponent();
          ReactEmptyComponent.registerNullComponentID(this._rootNodeID);
        } else {
          ReactEmptyComponent.deregisterNullComponentID(this._rootNodeID);
        }
      } finally {
        ReactContext.current = previousContext;
        ReactCurrentOwner.current = null;
      }
      ("production" !== process.env.NODE_ENV ? invariant(
        ReactElement.isValidElement(renderedComponent),
        '%s.render(): A valid ReactComponent must be returned. You may have ' +
          'returned undefined, an array or some other invalid object.',
        this.constructor.displayName || 'ReactCompositeComponent'
      ) : invariant(ReactElement.isValidElement(renderedComponent)));
      return renderedComponent;
    }
  ),

  /**
   * @private
   */
  _bindAutoBindMethods: function() {
    for (var autoBindKey in this.__reactAutoBindMap) {
      if (!this.__reactAutoBindMap.hasOwnProperty(autoBindKey)) {
        continue;
      }
      var method = this.__reactAutoBindMap[autoBindKey];
      this[autoBindKey] = this._bindAutoBindMethod(ReactErrorUtils.guard(
        method,
        this.constructor.displayName + '.' + autoBindKey
      ));
    }
  },

  /**
   * Binds a method to the component.
   *
   * @param {function} method Method to be bound.
   * @private
   */
  _bindAutoBindMethod: function(method) {
    var component = this;
    var boundMethod = method.bind(component);
    if ("production" !== process.env.NODE_ENV) {
      boundMethod.__reactBoundContext = component;
      boundMethod.__reactBoundMethod = method;
      boundMethod.__reactBoundArguments = null;
      var componentName = component.constructor.displayName;
      var _bind = boundMethod.bind;
      boundMethod.bind = function(newThis ) {for (var args=[],$__0=1,$__1=arguments.length;$__0<$__1;$__0++) args.push(arguments[$__0]);
        // User is trying to bind() an autobound method; we effectively will
        // ignore the value of "this" that the user is trying to use, so
        // let's warn.
        if (newThis !== component && newThis !== null) {
          monitorCodeUse('react_bind_warning', { component: componentName });
          console.warn(
            'bind(): React component methods may only be bound to the ' +
            'component instance. See ' + componentName
          );
        } else if (!args.length) {
          monitorCodeUse('react_bind_warning', { component: componentName });
          console.warn(
            'bind(): You are binding a component method to the component. ' +
            'React does this for you automatically in a high-performance ' +
            'way, so you can safely remove this call. See ' + componentName
          );
          return boundMethod;
        }
        var reboundMethod = _bind.apply(boundMethod, arguments);
        reboundMethod.__reactBoundContext = component;
        reboundMethod.__reactBoundMethod = method;
        reboundMethod.__reactBoundArguments = args;
        return reboundMethod;
      };
    }
    return boundMethod;
  }
};

var ReactCompositeComponentBase = function() {};
assign(
  ReactCompositeComponentBase.prototype,
  ReactComponent.Mixin,
  ReactOwner.Mixin,
  ReactPropTransferer.Mixin,
  ReactCompositeComponentMixin
);

/**
 * Module for creating composite components.
 *
 * @class ReactCompositeComponent
 * @extends ReactComponent
 * @extends ReactOwner
 * @extends ReactPropTransferer
 */
var ReactCompositeComponent = {

  LifeCycle: CompositeLifeCycle,

  Base: ReactCompositeComponentBase,

  /**
   * Creates a composite component class given a class specification.
   *
   * @param {object} spec Class specification (which must define `render`).
   * @return {function} Component constructor function.
   * @public
   */
  createClass: function(spec) {
    var Constructor = function(props) {
      // This constructor is overridden by mocks. The argument is used
      // by mocks to assert on what gets mounted. This will later be used
      // by the stand-alone class implementation.
    };
    Constructor.prototype = new ReactCompositeComponentBase();
    Constructor.prototype.constructor = Constructor;

    injectedMixins.forEach(
      mixSpecIntoComponent.bind(null, Constructor)
    );

    mixSpecIntoComponent(Constructor, spec);

    // Initialize the defaultProps property after all mixins have been merged
    if (Constructor.getDefaultProps) {
      Constructor.defaultProps = Constructor.getDefaultProps();
    }

    ("production" !== process.env.NODE_ENV ? invariant(
      Constructor.prototype.render,
      'createClass(...): Class specification must implement a `render` method.'
    ) : invariant(Constructor.prototype.render));

    if ("production" !== process.env.NODE_ENV) {
      if (Constructor.prototype.componentShouldUpdate) {
        monitorCodeUse(
          'react_component_should_update_warning',
          { component: spec.displayName }
        );
        console.warn(
          (spec.displayName || 'A component') + ' has a method called ' +
          'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' +
          'The name is phrased as a question because the function is ' +
          'expected to return a value.'
         );
      }
    }

    // Reduce time spent doing lookups by setting these on the prototype.
    for (var methodName in ReactCompositeComponentInterface) {
      if (!Constructor.prototype[methodName]) {
        Constructor.prototype[methodName] = null;
      }
    }

    if ("production" !== process.env.NODE_ENV) {
      return ReactLegacyElement.wrapFactory(
        ReactElementValidator.createFactory(Constructor)
      );
    }
    return ReactLegacyElement.wrapFactory(
      ReactElement.createFactory(Constructor)
    );
  },

  injection: {
    injectMixin: function(mixin) {
      injectedMixins.push(mixin);
    }
  }
};

module.exports = ReactCompositeComponent;

}).call(this,require('_process'))

},{"./Object.assign":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/Object.assign.js","./ReactComponent":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ReactComponent.js","./ReactContext":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ReactContext.js","./ReactCurrentOwner":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ReactCurrentOwner.js","./ReactElement":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ReactElement.js","./ReactElementValidator":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ReactElementValidator.js","./ReactEmptyComponent":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ReactEmptyComponent.js","./ReactErrorUtils":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ReactErrorUtils.js","./ReactLegacyElement":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ReactLegacyElement.js","./ReactOwner":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ReactOwner.js","./ReactPerf":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ReactPerf.js","./ReactPropTransferer":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ReactPropTransferer.js","./ReactPropTypeLocationNames":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ReactPropTypeLocationNames.js","./ReactPropTypeLocations":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ReactPropTypeLocations.js","./ReactUpdates":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ReactUpdates.js","./instantiateReactComponent":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/instantiateReactComponent.js","./invariant":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/invariant.js","./keyMirror":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/keyMirror.js","./keyOf":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/keyOf.js","./mapObject":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/mapObject.js","./monitorCodeUse":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/monitorCodeUse.js","./shouldUpdateReactComponent":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/shouldUpdateReactComponent.js","./warning":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/warning.js","_process":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/browserify/node_modules/process/browser.js"}],"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ReactContext.js":[function(require,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactContext
 */

"use strict";

var assign = require("./Object.assign");

/**
 * Keeps track of the current context.
 *
 * The context is automatically passed down the component ownership hierarchy
 * and is accessible via `this.context` on ReactCompositeComponents.
 */
var ReactContext = {

  /**
   * @internal
   * @type {object}
   */
  current: {},

  /**
   * Temporarily extends the current context while executing scopedCallback.
   *
   * A typical use case might look like
   *
   *  render: function() {
   *    var children = ReactContext.withContext({foo: 'foo'}, () => (
   *
   *    ));
   *    return <div>{children}</div>;
   *  }
   *
   * @param {object} newContext New context to merge into the existing context
   * @param {function} scopedCallback Callback to run with the new context
   * @return {ReactComponent|array<ReactComponent>}
   */
  withContext: function(newContext, scopedCallback) {
    var result;
    var previousContext = ReactContext.current;
    ReactContext.current = assign({}, previousContext, newContext);
    try {
      result = scopedCallback();
    } finally {
      ReactContext.current = previousContext;
    }
    return result;
  }

};

module.exports = ReactContext;

},{"./Object.assign":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/Object.assign.js"}],"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ReactCurrentOwner.js":[function(require,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactCurrentOwner
 */

"use strict";

/**
 * Keeps track of the current owner.
 *
 * The current owner is the component who should own any components that are
 * currently being constructed.
 *
 * The depth indicate how many composite components are above this render level.
 */
var ReactCurrentOwner = {

  /**
   * @internal
   * @type {ReactComponent}
   */
  current: null

};

module.exports = ReactCurrentOwner;

},{}],"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ReactDOM.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOM
 * @typechecks static-only
 */

"use strict";

var ReactElement = require("./ReactElement");
var ReactElementValidator = require("./ReactElementValidator");
var ReactLegacyElement = require("./ReactLegacyElement");

var mapObject = require("./mapObject");

/**
 * Create a factory that creates HTML tag elements.
 *
 * @param {string} tag Tag name (e.g. `div`).
 * @private
 */
function createDOMFactory(tag) {
  if ("production" !== process.env.NODE_ENV) {
    return ReactLegacyElement.markNonLegacyFactory(
      ReactElementValidator.createFactory(tag)
    );
  }
  return ReactLegacyElement.markNonLegacyFactory(
    ReactElement.createFactory(tag)
  );
}

/**
 * Creates a mapping from supported HTML tags to `ReactDOMComponent` classes.
 * This is also accessible via `React.DOM`.
 *
 * @public
 */
var ReactDOM = mapObject({
  a: 'a',
  abbr: 'abbr',
  address: 'address',
  area: 'area',
  article: 'article',
  aside: 'aside',
  audio: 'audio',
  b: 'b',
  base: 'base',
  bdi: 'bdi',
  bdo: 'bdo',
  big: 'big',
  blockquote: 'blockquote',
  body: 'body',
  br: 'br',
  button: 'button',
  canvas: 'canvas',
  caption: 'caption',
  cite: 'cite',
  code: 'code',
  col: 'col',
  colgroup: 'colgroup',
  data: 'data',
  datalist: 'datalist',
  dd: 'dd',
  del: 'del',
  details: 'details',
  dfn: 'dfn',
  dialog: 'dialog',
  div: 'div',
  dl: 'dl',
  dt: 'dt',
  em: 'em',
  embed: 'embed',
  fieldset: 'fieldset',
  figcaption: 'figcaption',
  figure: 'figure',
  footer: 'footer',
  form: 'form',
  h1: 'h1',
  h2: 'h2',
  h3: 'h3',
  h4: 'h4',
  h5: 'h5',
  h6: 'h6',
  head: 'head',
  header: 'header',
  hr: 'hr',
  html: 'html',
  i: 'i',
  iframe: 'iframe',
  img: 'img',
  input: 'input',
  ins: 'ins',
  kbd: 'kbd',
  keygen: 'keygen',
  label: 'label',
  legend: 'legend',
  li: 'li',
  link: 'link',
  main: 'main',
  map: 'map',
  mark: 'mark',
  menu: 'menu',
  menuitem: 'menuitem',
  meta: 'meta',
  meter: 'meter',
  nav: 'nav',
  noscript: 'noscript',
  object: 'object',
  ol: 'ol',
  optgroup: 'optgroup',
  option: 'option',
  output: 'output',
  p: 'p',
  param: 'param',
  picture: 'picture',
  pre: 'pre',
  progress: 'progress',
  q: 'q',
  rp: 'rp',
  rt: 'rt',
  ruby: 'ruby',
  s: 's',
  samp: 'samp',
  script: 'script',
  section: 'section',
  select: 'select',
  small: 'small',
  source: 'source',
  span: 'span',
  strong: 'strong',
  style: 'style',
  sub: 'sub',
  summary: 'summary',
  sup: 'sup',
  table: 'table',
  tbody: 'tbody',
  td: 'td',
  textarea: 'textarea',
  tfoot: 'tfoot',
  th: 'th',
  thead: 'thead',
  time: 'time',
  title: 'title',
  tr: 'tr',
  track: 'track',
  u: 'u',
  ul: 'ul',
  'var': 'var',
  video: 'video',
  wbr: 'wbr',

  // SVG
  circle: 'circle',
  defs: 'defs',
  ellipse: 'ellipse',
  g: 'g',
  line: 'line',
  linearGradient: 'linearGradient',
  mask: 'mask',
  path: 'path',
  pattern: 'pattern',
  polygon: 'polygon',
  polyline: 'polyline',
  radialGradient: 'radialGradient',
  rect: 'rect',
  stop: 'stop',
  svg: 'svg',
  text: 'text',
  tspan: 'tspan'

}, createDOMFactory);

module.exports = ReactDOM;

}).call(this,require('_process'))

},{"./ReactElement":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ReactElement.js","./ReactElementValidator":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ReactElementValidator.js","./ReactLegacyElement":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ReactLegacyElement.js","./mapObject":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/mapObject.js","_process":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/browserify/node_modules/process/browser.js"}],"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ReactDOMButton.js":[function(require,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMButton
 */

"use strict";

var AutoFocusMixin = require("./AutoFocusMixin");
var ReactBrowserComponentMixin = require("./ReactBrowserComponentMixin");
var ReactCompositeComponent = require("./ReactCompositeComponent");
var ReactElement = require("./ReactElement");
var ReactDOM = require("./ReactDOM");

var keyMirror = require("./keyMirror");

// Store a reference to the <button> `ReactDOMComponent`. TODO: use string
var button = ReactElement.createFactory(ReactDOM.button.type);

var mouseListenerNames = keyMirror({
  onClick: true,
  onDoubleClick: true,
  onMouseDown: true,
  onMouseMove: true,
  onMouseUp: true,
  onClickCapture: true,
  onDoubleClickCapture: true,
  onMouseDownCapture: true,
  onMouseMoveCapture: true,
  onMouseUpCapture: true
});

/**
 * Implements a <button> native component that does not receive mouse events
 * when `disabled` is set.
 */
var ReactDOMButton = ReactCompositeComponent.createClass({
  displayName: 'ReactDOMButton',

  mixins: [AutoFocusMixin, ReactBrowserComponentMixin],

  render: function() {
    var props = {};

    // Copy the props; except the mouse listeners if we're disabled
    for (var key in this.props) {
      if (this.props.hasOwnProperty(key) &&
          (!this.props.disabled || !mouseListenerNames[key])) {
        props[key] = this.props[key];
      }
    }

    return button(props, this.props.children);
  }

});

module.exports = ReactDOMButton;

},{"./AutoFocusMixin":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/AutoFocusMixin.js","./ReactBrowserComponentMixin":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ReactBrowserComponentMixin.js","./ReactCompositeComponent":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ReactCompositeComponent.js","./ReactDOM":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ReactDOM.js","./ReactElement":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ReactElement.js","./keyMirror":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/keyMirror.js"}],"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ReactDOMComponent.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMComponent
 * @typechecks static-only
 */

"use strict";

var CSSPropertyOperations = require("./CSSPropertyOperations");
var DOMProperty = require("./DOMProperty");
var DOMPropertyOperations = require("./DOMPropertyOperations");
var ReactBrowserComponentMixin = require("./ReactBrowserComponentMixin");
var ReactComponent = require("./ReactComponent");
var ReactBrowserEventEmitter = require("./ReactBrowserEventEmitter");
var ReactMount = require("./ReactMount");
var ReactMultiChild = require("./ReactMultiChild");
var ReactPerf = require("./ReactPerf");

var assign = require("./Object.assign");
var escapeTextForBrowser = require("./escapeTextForBrowser");
var invariant = require("./invariant");
var isEventSupported = require("./isEventSupported");
var keyOf = require("./keyOf");
var monitorCodeUse = require("./monitorCodeUse");

var deleteListener = ReactBrowserEventEmitter.deleteListener;
var listenTo = ReactBrowserEventEmitter.listenTo;
var registrationNameModules = ReactBrowserEventEmitter.registrationNameModules;

// For quickly matching children type, to test if can be treated as content.
var CONTENT_TYPES = {'string': true, 'number': true};

var STYLE = keyOf({style: null});

var ELEMENT_NODE_TYPE = 1;

/**
 * @param {?object} props
 */
function assertValidProps(props) {
  if (!props) {
    return;
  }
  // Note the use of `==` which checks for null or undefined.
  ("production" !== process.env.NODE_ENV ? invariant(
    props.children == null || props.dangerouslySetInnerHTML == null,
    'Can only set one of `children` or `props.dangerouslySetInnerHTML`.'
  ) : invariant(props.children == null || props.dangerouslySetInnerHTML == null));
  if ("production" !== process.env.NODE_ENV) {
    if (props.contentEditable && props.children != null) {
      console.warn(
        'A component is `contentEditable` and contains `children` managed by ' +
        'React. It is now your responsibility to guarantee that none of those '+
        'nodes are unexpectedly modified or duplicated. This is probably not ' +
        'intentional.'
      );
    }
  }
  ("production" !== process.env.NODE_ENV ? invariant(
    props.style == null || typeof props.style === 'object',
    'The `style` prop expects a mapping from style properties to values, ' +
    'not a string.'
  ) : invariant(props.style == null || typeof props.style === 'object'));
}

function putListener(id, registrationName, listener, transaction) {
  if ("production" !== process.env.NODE_ENV) {
    // IE8 has no API for event capturing and the `onScroll` event doesn't
    // bubble.
    if (registrationName === 'onScroll' &&
        !isEventSupported('scroll', true)) {
      monitorCodeUse('react_no_scroll_event');
      console.warn('This browser doesn\'t support the `onScroll` event');
    }
  }
  var container = ReactMount.findReactContainerForID(id);
  if (container) {
    var doc = container.nodeType === ELEMENT_NODE_TYPE ?
      container.ownerDocument :
      container;
    listenTo(registrationName, doc);
  }
  transaction.getPutListenerQueue().enqueuePutListener(
    id,
    registrationName,
    listener
  );
}

// For HTML, certain tags should omit their close tag. We keep a whitelist for
// those special cased tags.

var omittedCloseTags = {
  'area': true,
  'base': true,
  'br': true,
  'col': true,
  'embed': true,
  'hr': true,
  'img': true,
  'input': true,
  'keygen': true,
  'link': true,
  'meta': true,
  'param': true,
  'source': true,
  'track': true,
  'wbr': true
  // NOTE: menuitem's close tag should be omitted, but that causes problems.
};

// We accept any tag to be rendered but since this gets injected into abitrary
// HTML, we want to make sure that it's a safe tag.
// http://www.w3.org/TR/REC-xml/#NT-Name

var VALID_TAG_REGEX = /^[a-zA-Z][a-zA-Z:_\.\-\d]*$/; // Simplified subset
var validatedTagCache = {};
var hasOwnProperty = {}.hasOwnProperty;

function validateDangerousTag(tag) {
  if (!hasOwnProperty.call(validatedTagCache, tag)) {
    ("production" !== process.env.NODE_ENV ? invariant(VALID_TAG_REGEX.test(tag), 'Invalid tag: %s', tag) : invariant(VALID_TAG_REGEX.test(tag)));
    validatedTagCache[tag] = true;
  }
}

/**
 * Creates a new React class that is idempotent and capable of containing other
 * React components. It accepts event listeners and DOM properties that are
 * valid according to `DOMProperty`.
 *
 *  - Event listeners: `onClick`, `onMouseDown`, etc.
 *  - DOM properties: `className`, `name`, `title`, etc.
 *
 * The `style` property functions differently from the DOM API. It accepts an
 * object mapping of style properties to values.
 *
 * @constructor ReactDOMComponent
 * @extends ReactComponent
 * @extends ReactMultiChild
 */
function ReactDOMComponent(tag) {
  validateDangerousTag(tag);
  this._tag = tag;
  this.tagName = tag.toUpperCase();
}

ReactDOMComponent.displayName = 'ReactDOMComponent';

ReactDOMComponent.Mixin = {

  /**
   * Generates root tag markup then recurses. This method has side effects and
   * is not idempotent.
   *
   * @internal
   * @param {string} rootID The root DOM ID for this node.
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @param {number} mountDepth number of components in the owner hierarchy
   * @return {string} The computed markup.
   */
  mountComponent: ReactPerf.measure(
    'ReactDOMComponent',
    'mountComponent',
    function(rootID, transaction, mountDepth) {
      ReactComponent.Mixin.mountComponent.call(
        this,
        rootID,
        transaction,
        mountDepth
      );
      assertValidProps(this.props);
      var closeTag = omittedCloseTags[this._tag] ? '' : '</' + this._tag + '>';
      return (
        this._createOpenTagMarkupAndPutListeners(transaction) +
        this._createContentMarkup(transaction) +
        closeTag
      );
    }
  ),

  /**
   * Creates markup for the open tag and all attributes.
   *
   * This method has side effects because events get registered.
   *
   * Iterating over object properties is faster than iterating over arrays.
   * @see http://jsperf.com/obj-vs-arr-iteration
   *
   * @private
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @return {string} Markup of opening tag.
   */
  _createOpenTagMarkupAndPutListeners: function(transaction) {
    var props = this.props;
    var ret = '<' + this._tag;

    for (var propKey in props) {
      if (!props.hasOwnProperty(propKey)) {
        continue;
      }
      var propValue = props[propKey];
      if (propValue == null) {
        continue;
      }
      if (registrationNameModules.hasOwnProperty(propKey)) {
        putListener(this._rootNodeID, propKey, propValue, transaction);
      } else {
        if (propKey === STYLE) {
          if (propValue) {
            propValue = props.style = assign({}, props.style);
          }
          propValue = CSSPropertyOperations.createMarkupForStyles(propValue);
        }
        var markup =
          DOMPropertyOperations.createMarkupForProperty(propKey, propValue);
        if (markup) {
          ret += ' ' + markup;
        }
      }
    }

    // For static pages, no need to put React ID and checksum. Saves lots of
    // bytes.
    if (transaction.renderToStaticMarkup) {
      return ret + '>';
    }

    var markupForID = DOMPropertyOperations.createMarkupForID(this._rootNodeID);
    return ret + ' ' + markupForID + '>';
  },

  /**
   * Creates markup for the content between the tags.
   *
   * @private
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @return {string} Content markup.
   */
  _createContentMarkup: function(transaction) {
    // Intentional use of != to avoid catching zero/false.
    var innerHTML = this.props.dangerouslySetInnerHTML;
    if (innerHTML != null) {
      if (innerHTML.__html != null) {
        return innerHTML.__html;
      }
    } else {
      var contentToUse =
        CONTENT_TYPES[typeof this.props.children] ? this.props.children : null;
      var childrenToUse = contentToUse != null ? null : this.props.children;
      if (contentToUse != null) {
        return escapeTextForBrowser(contentToUse);
      } else if (childrenToUse != null) {
        var mountImages = this.mountChildren(
          childrenToUse,
          transaction
        );
        return mountImages.join('');
      }
    }
    return '';
  },

  receiveComponent: function(nextElement, transaction) {
    if (nextElement === this._currentElement &&
        nextElement._owner != null) {
      // Since elements are immutable after the owner is rendered,
      // we can do a cheap identity compare here to determine if this is a
      // superfluous reconcile. It's possible for state to be mutable but such
      // change should trigger an update of the owner which would recreate
      // the element. We explicitly check for the existence of an owner since
      // it's possible for a element created outside a composite to be
      // deeply mutated and reused.
      return;
    }

    ReactComponent.Mixin.receiveComponent.call(
      this,
      nextElement,
      transaction
    );
  },

  /**
   * Updates a native DOM component after it has already been allocated and
   * attached to the DOM. Reconciles the root DOM node, then recurses.
   *
   * @param {ReactReconcileTransaction} transaction
   * @param {ReactElement} prevElement
   * @internal
   * @overridable
   */
  updateComponent: ReactPerf.measure(
    'ReactDOMComponent',
    'updateComponent',
    function(transaction, prevElement) {
      assertValidProps(this._currentElement.props);
      ReactComponent.Mixin.updateComponent.call(
        this,
        transaction,
        prevElement
      );
      this._updateDOMProperties(prevElement.props, transaction);
      this._updateDOMChildren(prevElement.props, transaction);
    }
  ),

  /**
   * Reconciles the properties by detecting differences in property values and
   * updating the DOM as necessary. This function is probably the single most
   * critical path for performance optimization.
   *
   * TODO: Benchmark whether checking for changed values in memory actually
   *       improves performance (especially statically positioned elements).
   * TODO: Benchmark the effects of putting this at the top since 99% of props
   *       do not change for a given reconciliation.
   * TODO: Benchmark areas that can be improved with caching.
   *
   * @private
   * @param {object} lastProps
   * @param {ReactReconcileTransaction} transaction
   */
  _updateDOMProperties: function(lastProps, transaction) {
    var nextProps = this.props;
    var propKey;
    var styleName;
    var styleUpdates;
    for (propKey in lastProps) {
      if (nextProps.hasOwnProperty(propKey) ||
         !lastProps.hasOwnProperty(propKey)) {
        continue;
      }
      if (propKey === STYLE) {
        var lastStyle = lastProps[propKey];
        for (styleName in lastStyle) {
          if (lastStyle.hasOwnProperty(styleName)) {
            styleUpdates = styleUpdates || {};
            styleUpdates[styleName] = '';
          }
        }
      } else if (registrationNameModules.hasOwnProperty(propKey)) {
        deleteListener(this._rootNodeID, propKey);
      } else if (
          DOMProperty.isStandardName[propKey] ||
          DOMProperty.isCustomAttribute(propKey)) {
        ReactComponent.BackendIDOperations.deletePropertyByID(
          this._rootNodeID,
          propKey
        );
      }
    }
    for (propKey in nextProps) {
      var nextProp = nextProps[propKey];
      var lastProp = lastProps[propKey];
      if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp) {
        continue;
      }
      if (propKey === STYLE) {
        if (nextProp) {
          nextProp = nextProps.style = assign({}, nextProp);
        }
        if (lastProp) {
          // Unset styles on `lastProp` but not on `nextProp`.
          for (styleName in lastProp) {
            if (lastProp.hasOwnProperty(styleName) &&
                (!nextProp || !nextProp.hasOwnProperty(styleName))) {
              styleUpdates = styleUpdates || {};
              styleUpdates[styleName] = '';
            }
          }
          // Update styles that changed since `lastProp`.
          for (styleName in nextProp) {
            if (nextProp.hasOwnProperty(styleName) &&
                lastProp[styleName] !== nextProp[styleName]) {
              styleUpdates = styleUpdates || {};
              styleUpdates[styleName] = nextProp[styleName];
            }
          }
        } else {
          // Relies on `updateStylesByID` not mutating `styleUpdates`.
          styleUpdates = nextProp;
        }
      } else if (registrationNameModules.hasOwnProperty(propKey)) {
        putListener(this._rootNodeID, propKey, nextProp, transaction);
      } else if (
          DOMProperty.isStandardName[propKey] ||
          DOMProperty.isCustomAttribute(propKey)) {
        ReactComponent.BackendIDOperations.updatePropertyByID(
          this._rootNodeID,
          propKey,
          nextProp
        );
      }
    }
    if (styleUpdates) {
      ReactComponent.BackendIDOperations.updateStylesByID(
        this._rootNodeID,
        styleUpdates
      );
    }
  },

  /**
   * Reconciles the children with the various properties that affect the
   * children content.
   *
   * @param {object} lastProps
   * @param {ReactReconcileTransaction} transaction
   */
  _updateDOMChildren: function(lastProps, transaction) {
    var nextProps = this.props;

    var lastContent =
      CONTENT_TYPES[typeof lastProps.children] ? lastProps.children : null;
    var nextContent =
      CONTENT_TYPES[typeof nextProps.children] ? nextProps.children : null;

    var lastHtml =
      lastProps.dangerouslySetInnerHTML &&
      lastProps.dangerouslySetInnerHTML.__html;
    var nextHtml =
      nextProps.dangerouslySetInnerHTML &&
      nextProps.dangerouslySetInnerHTML.__html;

    // Note the use of `!=` which checks for null or undefined.
    var lastChildren = lastContent != null ? null : lastProps.children;
    var nextChildren = nextContent != null ? null : nextProps.children;

    // If we're switching from children to content/html or vice versa, remove
    // the old content
    var lastHasContentOrHtml = lastContent != null || lastHtml != null;
    var nextHasContentOrHtml = nextContent != null || nextHtml != null;
    if (lastChildren != null && nextChildren == null) {
      this.updateChildren(null, transaction);
    } else if (lastHasContentOrHtml && !nextHasContentOrHtml) {
      this.updateTextContent('');
    }

    if (nextContent != null) {
      if (lastContent !== nextContent) {
        this.updateTextContent('' + nextContent);
      }
    } else if (nextHtml != null) {
      if (lastHtml !== nextHtml) {
        ReactComponent.BackendIDOperations.updateInnerHTMLByID(
          this._rootNodeID,
          nextHtml
        );
      }
    } else if (nextChildren != null) {
      this.updateChildren(nextChildren, transaction);
    }
  },

  /**
   * Destroys all event registrations for this instance. Does not remove from
   * the DOM. That must be done by the parent.
   *
   * @internal
   */
  unmountComponent: function() {
    this.unmountChildren();
    ReactBrowserEventEmitter.deleteAllListeners(this._rootNodeID);
    ReactComponent.Mixin.unmountComponent.call(this);
  }

};

assign(
  ReactDOMComponent.prototype,
  ReactComponent.Mixin,
  ReactDOMComponent.Mixin,
  ReactMultiChild.Mixin,
  ReactBrowserComponentMixin
);

module.exports = ReactDOMComponent;

}).call(this,require('_process'))

},{"./CSSPropertyOperations":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/CSSPropertyOperations.js","./DOMProperty":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/DOMProperty.js","./DOMPropertyOperations":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/DOMPropertyOperations.js","./Object.assign":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/Object.assign.js","./ReactBrowserComponentMixin":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ReactBrowserComponentMixin.js","./ReactBrowserEventEmitter":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ReactBrowserEventEmitter.js","./ReactComponent":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ReactComponent.js","./ReactMount":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ReactMount.js","./ReactMultiChild":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ReactMultiChild.js","./ReactPerf":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ReactPerf.js","./escapeTextForBrowser":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/escapeTextForBrowser.js","./invariant":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/invariant.js","./isEventSupported":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/isEventSupported.js","./keyOf":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/keyOf.js","./monitorCodeUse":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/monitorCodeUse.js","_process":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/browserify/node_modules/process/browser.js"}],"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ReactDOMForm.js":[function(require,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMForm
 */

"use strict";

var EventConstants = require("./EventConstants");
var LocalEventTrapMixin = require("./LocalEventTrapMixin");
var ReactBrowserComponentMixin = require("./ReactBrowserComponentMixin");
var ReactCompositeComponent = require("./ReactCompositeComponent");
var ReactElement = require("./ReactElement");
var ReactDOM = require("./ReactDOM");

// Store a reference to the <form> `ReactDOMComponent`. TODO: use string
var form = ReactElement.createFactory(ReactDOM.form.type);

/**
 * Since onSubmit doesn't bubble OR capture on the top level in IE8, we need
 * to capture it on the <form> element itself. There are lots of hacks we could
 * do to accomplish this, but the most reliable is to make <form> a
 * composite component and use `componentDidMount` to attach the event handlers.
 */
var ReactDOMForm = ReactCompositeComponent.createClass({
  displayName: 'ReactDOMForm',

  mixins: [ReactBrowserComponentMixin, LocalEventTrapMixin],

  render: function() {
    // TODO: Instead of using `ReactDOM` directly, we should use JSX. However,
    // `jshint` fails to parse JSX so in order for linting to work in the open
    // source repo, we need to just use `ReactDOM.form`.
    return form(this.props);
  },

  componentDidMount: function() {
    this.trapBubbledEvent(EventConstants.topLevelTypes.topReset, 'reset');
    this.trapBubbledEvent(EventConstants.topLevelTypes.topSubmit, 'submit');
  }
});

module.exports = ReactDOMForm;

},{"./EventConstants":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/EventConstants.js","./LocalEventTrapMixin":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/LocalEventTrapMixin.js","./ReactBrowserComponentMixin":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ReactBrowserComponentMixin.js","./ReactCompositeComponent":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ReactCompositeComponent.js","./ReactDOM":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ReactDOM.js","./ReactElement":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ReactElement.js"}],"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ReactDOMIDOperations.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMIDOperations
 * @typechecks static-only
 */

/*jslint evil: true */

"use strict";

var CSSPropertyOperations = require("./CSSPropertyOperations");
var DOMChildrenOperations = require("./DOMChildrenOperations");
var DOMPropertyOperations = require("./DOMPropertyOperations");
var ReactMount = require("./ReactMount");
var ReactPerf = require("./ReactPerf");

var invariant = require("./invariant");
var setInnerHTML = require("./setInnerHTML");

/**
 * Errors for properties that should not be updated with `updatePropertyById()`.
 *
 * @type {object}
 * @private
 */
var INVALID_PROPERTY_ERRORS = {
  dangerouslySetInnerHTML:
    '`dangerouslySetInnerHTML` must be set using `updateInnerHTMLByID()`.',
  style: '`style` must be set using `updateStylesByID()`.'
};

/**
 * Operations used to process updates to DOM nodes. This is made injectable via
 * `ReactComponent.BackendIDOperations`.
 */
var ReactDOMIDOperations = {

  /**
   * Updates a DOM node with new property values. This should only be used to
   * update DOM properties in `DOMProperty`.
   *
   * @param {string} id ID of the node to update.
   * @param {string} name A valid property name, see `DOMProperty`.
   * @param {*} value New value of the property.
   * @internal
   */
  updatePropertyByID: ReactPerf.measure(
    'ReactDOMIDOperations',
    'updatePropertyByID',
    function(id, name, value) {
      var node = ReactMount.getNode(id);
      ("production" !== process.env.NODE_ENV ? invariant(
        !INVALID_PROPERTY_ERRORS.hasOwnProperty(name),
        'updatePropertyByID(...): %s',
        INVALID_PROPERTY_ERRORS[name]
      ) : invariant(!INVALID_PROPERTY_ERRORS.hasOwnProperty(name)));

      // If we're updating to null or undefined, we should remove the property
      // from the DOM node instead of inadvertantly setting to a string. This
      // brings us in line with the same behavior we have on initial render.
      if (value != null) {
        DOMPropertyOperations.setValueForProperty(node, name, value);
      } else {
        DOMPropertyOperations.deleteValueForProperty(node, name);
      }
    }
  ),

  /**
   * Updates a DOM node to remove a property. This should only be used to remove
   * DOM properties in `DOMProperty`.
   *
   * @param {string} id ID of the node to update.
   * @param {string} name A property name to remove, see `DOMProperty`.
   * @internal
   */
  deletePropertyByID: ReactPerf.measure(
    'ReactDOMIDOperations',
    'deletePropertyByID',
    function(id, name, value) {
      var node = ReactMount.getNode(id);
      ("production" !== process.env.NODE_ENV ? invariant(
        !INVALID_PROPERTY_ERRORS.hasOwnProperty(name),
        'updatePropertyByID(...): %s',
        INVALID_PROPERTY_ERRORS[name]
      ) : invariant(!INVALID_PROPERTY_ERRORS.hasOwnProperty(name)));
      DOMPropertyOperations.deleteValueForProperty(node, name, value);
    }
  ),

  /**
   * Updates a DOM node with new style values. If a value is specified as '',
   * the corresponding style property will be unset.
   *
   * @param {string} id ID of the node to update.
   * @param {object} styles Mapping from styles to values.
   * @internal
   */
  updateStylesByID: ReactPerf.measure(
    'ReactDOMIDOperations',
    'updateStylesByID',
    function(id, styles) {
      var node = ReactMount.getNode(id);
      CSSPropertyOperations.setValueForStyles(node, styles);
    }
  ),

  /**
   * Updates a DOM node's innerHTML.
   *
   * @param {string} id ID of the node to update.
   * @param {string} html An HTML string.
   * @internal
   */
  updateInnerHTMLByID: ReactPerf.measure(
    'ReactDOMIDOperations',
    'updateInnerHTMLByID',
    function(id, html) {
      var node = ReactMount.getNode(id);
      setInnerHTML(node, html);
    }
  ),

  /**
   * Updates a DOM node's text content set by `props.content`.
   *
   * @param {string} id ID of the node to update.
   * @param {string} content Text content.
   * @internal
   */
  updateTextContentByID: ReactPerf.measure(
    'ReactDOMIDOperations',
    'updateTextContentByID',
    function(id, content) {
      var node = ReactMount.getNode(id);
      DOMChildrenOperations.updateTextContent(node, content);
    }
  ),

  /**
   * Replaces a DOM node that exists in the document with markup.
   *
   * @param {string} id ID of child to be replaced.
   * @param {string} markup Dangerous markup to inject in place of child.
   * @internal
   * @see {Danger.dangerouslyReplaceNodeWithMarkup}
   */
  dangerouslyReplaceNodeWithMarkupByID: ReactPerf.measure(
    'ReactDOMIDOperations',
    'dangerouslyReplaceNodeWithMarkupByID',
    function(id, markup) {
      var node = ReactMount.getNode(id);
      DOMChildrenOperations.dangerouslyReplaceNodeWithMarkup(node, markup);
    }
  ),

  /**
   * Updates a component's children by processing a series of updates.
   *
   * @param {array<object>} updates List of update configurations.
   * @param {array<string>} markup List of markup strings.
   * @internal
   */
  dangerouslyProcessChildrenUpdates: ReactPerf.measure(
    'ReactDOMIDOperations',
    'dangerouslyProcessChildrenUpdates',
    function(updates, markup) {
      for (var i = 0; i < updates.length; i++) {
        updates[i].parentNode = ReactMount.getNode(updates[i].parentID);
      }
      DOMChildrenOperations.processUpdates(updates, markup);
    }
  )
};

module.exports = ReactDOMIDOperations;

}).call(this,require('_process'))

},{"./CSSPropertyOperations":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/CSSPropertyOperations.js","./DOMChildrenOperations":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/DOMChildrenOperations.js","./DOMPropertyOperations":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/DOMPropertyOperations.js","./ReactMount":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ReactMount.js","./ReactPerf":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ReactPerf.js","./invariant":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/invariant.js","./setInnerHTML":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/setInnerHTML.js","_process":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/browserify/node_modules/process/browser.js"}],"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ReactDOMImg.js":[function(require,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMImg
 */

"use strict";

var EventConstants = require("./EventConstants");
var LocalEventTrapMixin = require("./LocalEventTrapMixin");
var ReactBrowserComponentMixin = require("./ReactBrowserComponentMixin");
var ReactCompositeComponent = require("./ReactCompositeComponent");
var ReactElement = require("./ReactElement");
var ReactDOM = require("./ReactDOM");

// Store a reference to the <img> `ReactDOMComponent`. TODO: use string
var img = ReactElement.createFactory(ReactDOM.img.type);

/**
 * Since onLoad doesn't bubble OR capture on the top level in IE8, we need to
 * capture it on the <img> element itself. There are lots of hacks we could do
 * to accomplish this, but the most reliable is to make <img> a composite
 * component and use `componentDidMount` to attach the event handlers.
 */
var ReactDOMImg = ReactCompositeComponent.createClass({
  displayName: 'ReactDOMImg',
  tagName: 'IMG',

  mixins: [ReactBrowserComponentMixin, LocalEventTrapMixin],

  render: function() {
    return img(this.props);
  },

  componentDidMount: function() {
    this.trapBubbledEvent(EventConstants.topLevelTypes.topLoad, 'load');
    this.trapBubbledEvent(EventConstants.topLevelTypes.topError, 'error');
  }
});

module.exports = ReactDOMImg;

},{"./EventConstants":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/EventConstants.js","./LocalEventTrapMixin":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/LocalEventTrapMixin.js","./ReactBrowserComponentMixin":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ReactBrowserComponentMixin.js","./ReactCompositeComponent":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ReactCompositeComponent.js","./ReactDOM":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ReactDOM.js","./ReactElement":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ReactElement.js"}],"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ReactDOMInput.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMInput
 */

"use strict";

var AutoFocusMixin = require("./AutoFocusMixin");
var DOMPropertyOperations = require("./DOMPropertyOperations");
var LinkedValueUtils = require("./LinkedValueUtils");
var ReactBrowserComponentMixin = require("./ReactBrowserComponentMixin");
var ReactCompositeComponent = require("./ReactCompositeComponent");
var ReactElement = require("./ReactElement");
var ReactDOM = require("./ReactDOM");
var ReactMount = require("./ReactMount");
var ReactUpdates = require("./ReactUpdates");

var assign = require("./Object.assign");
var invariant = require("./invariant");

// Store a reference to the <input> `ReactDOMComponent`. TODO: use string
var input = ReactElement.createFactory(ReactDOM.input.type);

var instancesByReactID = {};

function forceUpdateIfMounted() {
  /*jshint validthis:true */
  if (this.isMounted()) {
    this.forceUpdate();
  }
}

/**
 * Implements an <input> native component that allows setting these optional
 * props: `checked`, `value`, `defaultChecked`, and `defaultValue`.
 *
 * If `checked` or `value` are not supplied (or null/undefined), user actions
 * that affect the checked state or value will trigger updates to the element.
 *
 * If they are supplied (and not null/undefined), the rendered element will not
 * trigger updates to the element. Instead, the props must change in order for
 * the rendered element to be updated.
 *
 * The rendered element will be initialized as unchecked (or `defaultChecked`)
 * with an empty value (or `defaultValue`).
 *
 * @see http://www.w3.org/TR/2012/WD-html5-20121025/the-input-element.html
 */
var ReactDOMInput = ReactCompositeComponent.createClass({
  displayName: 'ReactDOMInput',

  mixins: [AutoFocusMixin, LinkedValueUtils.Mixin, ReactBrowserComponentMixin],

  getInitialState: function() {
    var defaultValue = this.props.defaultValue;
    return {
      initialChecked: this.props.defaultChecked || false,
      initialValue: defaultValue != null ? defaultValue : null
    };
  },

  render: function() {
    // Clone `this.props` so we don't mutate the input.
    var props = assign({}, this.props);

    props.defaultChecked = null;
    props.defaultValue = null;

    var value = LinkedValueUtils.getValue(this);
    props.value = value != null ? value : this.state.initialValue;

    var checked = LinkedValueUtils.getChecked(this);
    props.checked = checked != null ? checked : this.state.initialChecked;

    props.onChange = this._handleChange;

    return input(props, this.props.children);
  },

  componentDidMount: function() {
    var id = ReactMount.getID(this.getDOMNode());
    instancesByReactID[id] = this;
  },

  componentWillUnmount: function() {
    var rootNode = this.getDOMNode();
    var id = ReactMount.getID(rootNode);
    delete instancesByReactID[id];
  },

  componentDidUpdate: function(prevProps, prevState, prevContext) {
    var rootNode = this.getDOMNode();
    if (this.props.checked != null) {
      DOMPropertyOperations.setValueForProperty(
        rootNode,
        'checked',
        this.props.checked || false
      );
    }

    var value = LinkedValueUtils.getValue(this);
    if (value != null) {
      // Cast `value` to a string to ensure the value is set correctly. While
      // browsers typically do this as necessary, jsdom doesn't.
      DOMPropertyOperations.setValueForProperty(rootNode, 'value', '' + value);
    }
  },

  _handleChange: function(event) {
    var returnValue;
    var onChange = LinkedValueUtils.getOnChange(this);
    if (onChange) {
      returnValue = onChange.call(this, event);
    }
    // Here we use asap to wait until all updates have propagated, which
    // is important when using controlled components within layers:
    // https://github.com/facebook/react/issues/1698
    ReactUpdates.asap(forceUpdateIfMounted, this);

    var name = this.props.name;
    if (this.props.type === 'radio' && name != null) {
      var rootNode = this.getDOMNode();
      var queryRoot = rootNode;

      while (queryRoot.parentNode) {
        queryRoot = queryRoot.parentNode;
      }

      // If `rootNode.form` was non-null, then we could try `form.elements`,
      // but that sometimes behaves strangely in IE8. We could also try using
      // `form.getElementsByName`, but that will only return direct children
      // and won't include inputs that use the HTML5 `form=` attribute. Since
      // the input might not even be in a form, let's just use the global
      // `querySelectorAll` to ensure we don't miss anything.
      var group = queryRoot.querySelectorAll(
        'input[name=' + JSON.stringify('' + name) + '][type="radio"]');

      for (var i = 0, groupLen = group.length; i < groupLen; i++) {
        var otherNode = group[i];
        if (otherNode === rootNode ||
            otherNode.form !== rootNode.form) {
          continue;
        }
        var otherID = ReactMount.getID(otherNode);
        ("production" !== process.env.NODE_ENV ? invariant(
          otherID,
          'ReactDOMInput: Mixing React and non-React radio inputs with the ' +
          'same `name` is not supported.'
        ) : invariant(otherID));
        var otherInstance = instancesByReactID[otherID];
        ("production" !== process.env.NODE_ENV ? invariant(
          otherInstance,
          'ReactDOMInput: Unknown radio button ID %s.',
          otherID
        ) : invariant(otherInstance));
        // If this is a controlled radio button group, forcing the input that
        // was previously checked to update will cause it to be come re-checked
        // as appropriate.
        ReactUpdates.asap(forceUpdateIfMounted, otherInstance);
      }
    }

    return returnValue;
  }

});

module.exports = ReactDOMInput;

}).call(this,require('_process'))

},{"./AutoFocusMixin":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/AutoFocusMixin.js","./DOMPropertyOperations":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/DOMPropertyOperations.js","./LinkedValueUtils":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/LinkedValueUtils.js","./Object.assign":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/Object.assign.js","./ReactBrowserComponentMixin":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ReactBrowserComponentMixin.js","./ReactCompositeComponent":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ReactCompositeComponent.js","./ReactDOM":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ReactDOM.js","./ReactElement":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ReactElement.js","./ReactMount":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ReactMount.js","./ReactUpdates":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ReactUpdates.js","./invariant":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/invariant.js","_process":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/browserify/node_modules/process/browser.js"}],"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ReactDOMOption.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMOption
 */

"use strict";

var ReactBrowserComponentMixin = require("./ReactBrowserComponentMixin");
var ReactCompositeComponent = require("./ReactCompositeComponent");
var ReactElement = require("./ReactElement");
var ReactDOM = require("./ReactDOM");

var warning = require("./warning");

// Store a reference to the <option> `ReactDOMComponent`. TODO: use string
var option = ReactElement.createFactory(ReactDOM.option.type);

/**
 * Implements an <option> native component that warns when `selected` is set.
 */
var ReactDOMOption = ReactCompositeComponent.createClass({
  displayName: 'ReactDOMOption',

  mixins: [ReactBrowserComponentMixin],

  componentWillMount: function() {
    // TODO (yungsters): Remove support for `selected` in <option>.
    if ("production" !== process.env.NODE_ENV) {
      ("production" !== process.env.NODE_ENV ? warning(
        this.props.selected == null,
        'Use the `defaultValue` or `value` props on <select> instead of ' +
        'setting `selected` on <option>.'
      ) : null);
    }
  },

  render: function() {
    return option(this.props, this.props.children);
  }

});

module.exports = ReactDOMOption;

}).call(this,require('_process'))

},{"./ReactBrowserComponentMixin":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ReactBrowserComponentMixin.js","./ReactCompositeComponent":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ReactCompositeComponent.js","./ReactDOM":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ReactDOM.js","./ReactElement":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ReactElement.js","./warning":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/warning.js","_process":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/browserify/node_modules/process/browser.js"}],"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ReactDOMSelect.js":[function(require,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMSelect
 */

"use strict";

var AutoFocusMixin = require("./AutoFocusMixin");
var LinkedValueUtils = require("./LinkedValueUtils");
var ReactBrowserComponentMixin = require("./ReactBrowserComponentMixin");
var ReactCompositeComponent = require("./ReactCompositeComponent");
var ReactElement = require("./ReactElement");
var ReactDOM = require("./ReactDOM");
var ReactUpdates = require("./ReactUpdates");

var assign = require("./Object.assign");

// Store a reference to the <select> `ReactDOMComponent`. TODO: use string
var select = ReactElement.createFactory(ReactDOM.select.type);

function updateWithPendingValueIfMounted() {
  /*jshint validthis:true */
  if (this.isMounted()) {
    this.setState({value: this._pendingValue});
    this._pendingValue = 0;
  }
}

/**
 * Validation function for `value` and `defaultValue`.
 * @private
 */
function selectValueType(props, propName, componentName) {
  if (props[propName] == null) {
    return;
  }
  if (props.multiple) {
    if (!Array.isArray(props[propName])) {
      return new Error(
        ("The `" + propName + "` prop supplied to <select> must be an array if ") +
        ("`multiple` is true.")
      );
    }
  } else {
    if (Array.isArray(props[propName])) {
      return new Error(
        ("The `" + propName + "` prop supplied to <select> must be a scalar ") +
        ("value if `multiple` is false.")
      );
    }
  }
}

/**
 * If `value` is supplied, updates <option> elements on mount and update.
 * @param {ReactComponent} component Instance of ReactDOMSelect
 * @param {?*} propValue For uncontrolled components, null/undefined. For
 * controlled components, a string (or with `multiple`, a list of strings).
 * @private
 */
function updateOptions(component, propValue) {
  var multiple = component.props.multiple;
  var value = propValue != null ? propValue : component.state.value;
  var options = component.getDOMNode().options;
  var selectedValue, i, l;
  if (multiple) {
    selectedValue = {};
    for (i = 0, l = value.length; i < l; ++i) {
      selectedValue['' + value[i]] = true;
    }
  } else {
    selectedValue = '' + value;
  }
  for (i = 0, l = options.length; i < l; i++) {
    var selected = multiple ?
      selectedValue.hasOwnProperty(options[i].value) :
      options[i].value === selectedValue;

    if (selected !== options[i].selected) {
      options[i].selected = selected;
    }
  }
}

/**
 * Implements a <select> native component that allows optionally setting the
 * props `value` and `defaultValue`. If `multiple` is false, the prop must be a
 * string. If `multiple` is true, the prop must be an array of strings.
 *
 * If `value` is not supplied (or null/undefined), user actions that change the
 * selected option will trigger updates to the rendered options.
 *
 * If it is supplied (and not null/undefined), the rendered options will not
 * update in response to user actions. Instead, the `value` prop must change in
 * order for the rendered options to update.
 *
 * If `defaultValue` is provided, any options with the supplied values will be
 * selected.
 */
var ReactDOMSelect = ReactCompositeComponent.createClass({
  displayName: 'ReactDOMSelect',

  mixins: [AutoFocusMixin, LinkedValueUtils.Mixin, ReactBrowserComponentMixin],

  propTypes: {
    defaultValue: selectValueType,
    value: selectValueType
  },

  getInitialState: function() {
    return {value: this.props.defaultValue || (this.props.multiple ? [] : '')};
  },

  componentWillMount: function() {
    this._pendingValue = null;
  },

  componentWillReceiveProps: function(nextProps) {
    if (!this.props.multiple && nextProps.multiple) {
      this.setState({value: [this.state.value]});
    } else if (this.props.multiple && !nextProps.multiple) {
      this.setState({value: this.state.value[0]});
    }
  },

  render: function() {
    // Clone `this.props` so we don't mutate the input.
    var props = assign({}, this.props);

    props.onChange = this._handleChange;
    props.value = null;

    return select(props, this.props.children);
  },

  componentDidMount: function() {
    updateOptions(this, LinkedValueUtils.getValue(this));
  },

  componentDidUpdate: function(prevProps) {
    var value = LinkedValueUtils.getValue(this);
    var prevMultiple = !!prevProps.multiple;
    var multiple = !!this.props.multiple;
    if (value != null || prevMultiple !== multiple) {
      updateOptions(this, value);
    }
  },

  _handleChange: function(event) {
    var returnValue;
    var onChange = LinkedValueUtils.getOnChange(this);
    if (onChange) {
      returnValue = onChange.call(this, event);
    }

    var selectedValue;
    if (this.props.multiple) {
      selectedValue = [];
      var options = event.target.options;
      for (var i = 0, l = options.length; i < l; i++) {
        if (options[i].selected) {
          selectedValue.push(options[i].value);
        }
      }
    } else {
      selectedValue = event.target.value;
    }

    this._pendingValue = selectedValue;
    ReactUpdates.asap(updateWithPendingValueIfMounted, this);
    return returnValue;
  }

});

module.exports = ReactDOMSelect;

},{"./AutoFocusMixin":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/AutoFocusMixin.js","./LinkedValueUtils":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/LinkedValueUtils.js","./Object.assign":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/Object.assign.js","./ReactBrowserComponentMixin":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ReactBrowserComponentMixin.js","./ReactCompositeComponent":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ReactCompositeComponent.js","./ReactDOM":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ReactDOM.js","./ReactElement":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ReactElement.js","./ReactUpdates":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ReactUpdates.js"}],"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ReactDOMSelection.js":[function(require,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMSelection
 */

"use strict";

var ExecutionEnvironment = require("./ExecutionEnvironment");

var getNodeForCharacterOffset = require("./getNodeForCharacterOffset");
var getTextContentAccessor = require("./getTextContentAccessor");

/**
 * While `isCollapsed` is available on the Selection object and `collapsed`
 * is available on the Range object, IE11 sometimes gets them wrong.
 * If the anchor/focus nodes and offsets are the same, the range is collapsed.
 */
function isCollapsed(anchorNode, anchorOffset, focusNode, focusOffset) {
  return anchorNode === focusNode && anchorOffset === focusOffset;
}

/**
 * Get the appropriate anchor and focus node/offset pairs for IE.
 *
 * The catch here is that IE's selection API doesn't provide information
 * about whether the selection is forward or backward, so we have to
 * behave as though it's always forward.
 *
 * IE text differs from modern selection in that it behaves as though
 * block elements end with a new line. This means character offsets will
 * differ between the two APIs.
 *
 * @param {DOMElement} node
 * @return {object}
 */
function getIEOffsets(node) {
  var selection = document.selection;
  var selectedRange = selection.createRange();
  var selectedLength = selectedRange.text.length;

  // Duplicate selection so we can move range without breaking user selection.
  var fromStart = selectedRange.duplicate();
  fromStart.moveToElementText(node);
  fromStart.setEndPoint('EndToStart', selectedRange);

  var startOffset = fromStart.text.length;
  var endOffset = startOffset + selectedLength;

  return {
    start: startOffset,
    end: endOffset
  };
}

/**
 * @param {DOMElement} node
 * @return {?object}
 */
function getModernOffsets(node) {
  var selection = window.getSelection && window.getSelection();

  if (!selection || selection.rangeCount === 0) {
    return null;
  }

  var anchorNode = selection.anchorNode;
  var anchorOffset = selection.anchorOffset;
  var focusNode = selection.focusNode;
  var focusOffset = selection.focusOffset;

  var currentRange = selection.getRangeAt(0);

  // If the node and offset values are the same, the selection is collapsed.
  // `Selection.isCollapsed` is available natively, but IE sometimes gets
  // this value wrong.
  var isSelectionCollapsed = isCollapsed(
    selection.anchorNode,
    selection.anchorOffset,
    selection.focusNode,
    selection.focusOffset
  );

  var rangeLength = isSelectionCollapsed ? 0 : currentRange.toString().length;

  var tempRange = currentRange.cloneRange();
  tempRange.selectNodeContents(node);
  tempRange.setEnd(currentRange.startContainer, currentRange.startOffset);

  var isTempRangeCollapsed = isCollapsed(
    tempRange.startContainer,
    tempRange.startOffset,
    tempRange.endContainer,
    tempRange.endOffset
  );

  var start = isTempRangeCollapsed ? 0 : tempRange.toString().length;
  var end = start + rangeLength;

  // Detect whether the selection is backward.
  var detectionRange = document.createRange();
  detectionRange.setStart(anchorNode, anchorOffset);
  detectionRange.setEnd(focusNode, focusOffset);
  var isBackward = detectionRange.collapsed;

  return {
    start: isBackward ? end : start,
    end: isBackward ? start : end
  };
}

/**
 * @param {DOMElement|DOMTextNode} node
 * @param {object} offsets
 */
function setIEOffsets(node, offsets) {
  var range = document.selection.createRange().duplicate();
  var start, end;

  if (typeof offsets.end === 'undefined') {
    start = offsets.start;
    end = start;
  } else if (offsets.start > offsets.end) {
    start = offsets.end;
    end = offsets.start;
  } else {
    start = offsets.start;
    end = offsets.end;
  }

  range.moveToElementText(node);
  range.moveStart('character', start);
  range.setEndPoint('EndToStart', range);
  range.moveEnd('character', end - start);
  range.select();
}

/**
 * In modern non-IE browsers, we can support both forward and backward
 * selections.
 *
 * Note: IE10+ supports the Selection object, but it does not support
 * the `extend` method, which means that even in modern IE, it's not possible
 * to programatically create a backward selection. Thus, for all IE
 * versions, we use the old IE API to create our selections.
 *
 * @param {DOMElement|DOMTextNode} node
 * @param {object} offsets
 */
function setModernOffsets(node, offsets) {
  if (!window.getSelection) {
    return;
  }

  var selection = window.getSelection();
  var length = node[getTextContentAccessor()].length;
  var start = Math.min(offsets.start, length);
  var end = typeof offsets.end === 'undefined' ?
            start : Math.min(offsets.end, length);

  // IE 11 uses modern selection, but doesn't support the extend method.
  // Flip backward selections, so we can set with a single range.
  if (!selection.extend && start > end) {
    var temp = end;
    end = start;
    start = temp;
  }

  var startMarker = getNodeForCharacterOffset(node, start);
  var endMarker = getNodeForCharacterOffset(node, end);

  if (startMarker && endMarker) {
    var range = document.createRange();
    range.setStart(startMarker.node, startMarker.offset);
    selection.removeAllRanges();

    if (start > end) {
      selection.addRange(range);
      selection.extend(endMarker.node, endMarker.offset);
    } else {
      range.setEnd(endMarker.node, endMarker.offset);
      selection.addRange(range);
    }
  }
}

var useIEOffsets = ExecutionEnvironment.canUseDOM && document.selection;

var ReactDOMSelection = {
  /**
   * @param {DOMElement} node
   */
  getOffsets: useIEOffsets ? getIEOffsets : getModernOffsets,

  /**
   * @param {DOMElement|DOMTextNode} node
   * @param {object} offsets
   */
  setOffsets: useIEOffsets ? setIEOffsets : setModernOffsets
};

module.exports = ReactDOMSelection;

},{"./ExecutionEnvironment":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ExecutionEnvironment.js","./getNodeForCharacterOffset":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/getNodeForCharacterOffset.js","./getTextContentAccessor":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/getTextContentAccessor.js"}],"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ReactDOMTextarea.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMTextarea
 */

"use strict";

var AutoFocusMixin = require("./AutoFocusMixin");
var DOMPropertyOperations = require("./DOMPropertyOperations");
var LinkedValueUtils = require("./LinkedValueUtils");
var ReactBrowserComponentMixin = require("./ReactBrowserComponentMixin");
var ReactCompositeComponent = require("./ReactCompositeComponent");
var ReactElement = require("./ReactElement");
var ReactDOM = require("./ReactDOM");
var ReactUpdates = require("./ReactUpdates");

var assign = require("./Object.assign");
var invariant = require("./invariant");

var warning = require("./warning");

// Store a reference to the <textarea> `ReactDOMComponent`. TODO: use string
var textarea = ReactElement.createFactory(ReactDOM.textarea.type);

function forceUpdateIfMounted() {
  /*jshint validthis:true */
  if (this.isMounted()) {
    this.forceUpdate();
  }
}

/**
 * Implements a <textarea> native component that allows setting `value`, and
 * `defaultValue`. This differs from the traditional DOM API because value is
 * usually set as PCDATA children.
 *
 * If `value` is not supplied (or null/undefined), user actions that affect the
 * value will trigger updates to the element.
 *
 * If `value` is supplied (and not null/undefined), the rendered element will
 * not trigger updates to the element. Instead, the `value` prop must change in
 * order for the rendered element to be updated.
 *
 * The rendered element will be initialized with an empty value, the prop
 * `defaultValue` if specified, or the children content (deprecated).
 */
var ReactDOMTextarea = ReactCompositeComponent.createClass({
  displayName: 'ReactDOMTextarea',

  mixins: [AutoFocusMixin, LinkedValueUtils.Mixin, ReactBrowserComponentMixin],

  getInitialState: function() {
    var defaultValue = this.props.defaultValue;
    // TODO (yungsters): Remove support for children content in <textarea>.
    var children = this.props.children;
    if (children != null) {
      if ("production" !== process.env.NODE_ENV) {
        ("production" !== process.env.NODE_ENV ? warning(
          false,
          'Use the `defaultValue` or `value` props instead of setting ' +
          'children on <textarea>.'
        ) : null);
      }
      ("production" !== process.env.NODE_ENV ? invariant(
        defaultValue == null,
        'If you supply `defaultValue` on a <textarea>, do not pass children.'
      ) : invariant(defaultValue == null));
      if (Array.isArray(children)) {
        ("production" !== process.env.NODE_ENV ? invariant(
          children.length <= 1,
          '<textarea> can only have at most one child.'
        ) : invariant(children.length <= 1));
        children = children[0];
      }

      defaultValue = '' + children;
    }
    if (defaultValue == null) {
      defaultValue = '';
    }
    var value = LinkedValueUtils.getValue(this);
    return {
      // We save the initial value so that `ReactDOMComponent` doesn't update
      // `textContent` (unnecessary since we update value).
      // The initial value can be a boolean or object so that's why it's
      // forced to be a string.
      initialValue: '' + (value != null ? value : defaultValue)
    };
  },

  render: function() {
    // Clone `this.props` so we don't mutate the input.
    var props = assign({}, this.props);

    ("production" !== process.env.NODE_ENV ? invariant(
      props.dangerouslySetInnerHTML == null,
      '`dangerouslySetInnerHTML` does not make sense on <textarea>.'
    ) : invariant(props.dangerouslySetInnerHTML == null));

    props.defaultValue = null;
    props.value = null;
    props.onChange = this._handleChange;

    // Always set children to the same thing. In IE9, the selection range will
    // get reset if `textContent` is mutated.
    return textarea(props, this.state.initialValue);
  },

  componentDidUpdate: function(prevProps, prevState, prevContext) {
    var value = LinkedValueUtils.getValue(this);
    if (value != null) {
      var rootNode = this.getDOMNode();
      // Cast `value` to a string to ensure the value is set correctly. While
      // browsers typically do this as necessary, jsdom doesn't.
      DOMPropertyOperations.setValueForProperty(rootNode, 'value', '' + value);
    }
  },

  _handleChange: function(event) {
    var returnValue;
    var onChange = LinkedValueUtils.getOnChange(this);
    if (onChange) {
      returnValue = onChange.call(this, event);
    }
    ReactUpdates.asap(forceUpdateIfMounted, this);
    return returnValue;
  }

});

module.exports = ReactDOMTextarea;

}).call(this,require('_process'))

},{"./AutoFocusMixin":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/AutoFocusMixin.js","./DOMPropertyOperations":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/DOMPropertyOperations.js","./LinkedValueUtils":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/LinkedValueUtils.js","./Object.assign":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/Object.assign.js","./ReactBrowserComponentMixin":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ReactBrowserComponentMixin.js","./ReactCompositeComponent":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ReactCompositeComponent.js","./ReactDOM":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ReactDOM.js","./ReactElement":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ReactElement.js","./ReactUpdates":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ReactUpdates.js","./invariant":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/invariant.js","./warning":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/warning.js","_process":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/browserify/node_modules/process/browser.js"}],"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ReactDefaultBatchingStrategy.js":[function(require,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDefaultBatchingStrategy
 */

"use strict";

var ReactUpdates = require("./ReactUpdates");
var Transaction = require("./Transaction");

var assign = require("./Object.assign");
var emptyFunction = require("./emptyFunction");

var RESET_BATCHED_UPDATES = {
  initialize: emptyFunction,
  close: function() {
    ReactDefaultBatchingStrategy.isBatchingUpdates = false;
  }
};

var FLUSH_BATCHED_UPDATES = {
  initialize: emptyFunction,
  close: ReactUpdates.flushBatchedUpdates.bind(ReactUpdates)
};

var TRANSACTION_WRAPPERS = [FLUSH_BATCHED_UPDATES, RESET_BATCHED_UPDATES];

function ReactDefaultBatchingStrategyTransaction() {
  this.reinitializeTransaction();
}

assign(
  ReactDefaultBatchingStrategyTransaction.prototype,
  Transaction.Mixin,
  {
    getTransactionWrappers: function() {
      return TRANSACTION_WRAPPERS;
    }
  }
);

var transaction = new ReactDefaultBatchingStrategyTransaction();

var ReactDefaultBatchingStrategy = {
  isBatchingUpdates: false,

  /**
   * Call the provided function in a context within which calls to `setState`
   * and friends are batched such that components aren't updated unnecessarily.
   */
  batchedUpdates: function(callback, a, b) {
    var alreadyBatchingUpdates = ReactDefaultBatchingStrategy.isBatchingUpdates;

    ReactDefaultBatchingStrategy.isBatchingUpdates = true;

    // The code is written this way to avoid extra allocations
    if (alreadyBatchingUpdates) {
      callback(a, b);
    } else {
      transaction.perform(callback, null, a, b);
    }
  }
};

module.exports = ReactDefaultBatchingStrategy;

},{"./Object.assign":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/Object.assign.js","./ReactUpdates":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ReactUpdates.js","./Transaction":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/Transaction.js","./emptyFunction":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/emptyFunction.js"}],"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ReactDefaultInjection.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDefaultInjection
 */

"use strict";

var BeforeInputEventPlugin = require("./BeforeInputEventPlugin");
var ChangeEventPlugin = require("./ChangeEventPlugin");
var ClientReactRootIndex = require("./ClientReactRootIndex");
var CompositionEventPlugin = require("./CompositionEventPlugin");
var DefaultEventPluginOrder = require("./DefaultEventPluginOrder");
var EnterLeaveEventPlugin = require("./EnterLeaveEventPlugin");
var ExecutionEnvironment = require("./ExecutionEnvironment");
var HTMLDOMPropertyConfig = require("./HTMLDOMPropertyConfig");
var MobileSafariClickEventPlugin = require("./MobileSafariClickEventPlugin");
var ReactBrowserComponentMixin = require("./ReactBrowserComponentMixin");
var ReactComponentBrowserEnvironment =
  require("./ReactComponentBrowserEnvironment");
var ReactDefaultBatchingStrategy = require("./ReactDefaultBatchingStrategy");
var ReactDOMComponent = require("./ReactDOMComponent");
var ReactDOMButton = require("./ReactDOMButton");
var ReactDOMForm = require("./ReactDOMForm");
var ReactDOMImg = require("./ReactDOMImg");
var ReactDOMInput = require("./ReactDOMInput");
var ReactDOMOption = require("./ReactDOMOption");
var ReactDOMSelect = require("./ReactDOMSelect");
var ReactDOMTextarea = require("./ReactDOMTextarea");
var ReactEventListener = require("./ReactEventListener");
var ReactInjection = require("./ReactInjection");
var ReactInstanceHandles = require("./ReactInstanceHandles");
var ReactMount = require("./ReactMount");
var SelectEventPlugin = require("./SelectEventPlugin");
var ServerReactRootIndex = require("./ServerReactRootIndex");
var SimpleEventPlugin = require("./SimpleEventPlugin");
var SVGDOMPropertyConfig = require("./SVGDOMPropertyConfig");

var createFullPageComponent = require("./createFullPageComponent");

function inject() {
  ReactInjection.EventEmitter.injectReactEventListener(
    ReactEventListener
  );

  /**
   * Inject modules for resolving DOM hierarchy and plugin ordering.
   */
  ReactInjection.EventPluginHub.injectEventPluginOrder(DefaultEventPluginOrder);
  ReactInjection.EventPluginHub.injectInstanceHandle(ReactInstanceHandles);
  ReactInjection.EventPluginHub.injectMount(ReactMount);

  /**
   * Some important event plugins included by default (without having to require
   * them).
   */
  ReactInjection.EventPluginHub.injectEventPluginsByName({
    SimpleEventPlugin: SimpleEventPlugin,
    EnterLeaveEventPlugin: EnterLeaveEventPlugin,
    ChangeEventPlugin: ChangeEventPlugin,
    CompositionEventPlugin: CompositionEventPlugin,
    MobileSafariClickEventPlugin: MobileSafariClickEventPlugin,
    SelectEventPlugin: SelectEventPlugin,
    BeforeInputEventPlugin: BeforeInputEventPlugin
  });

  ReactInjection.NativeComponent.injectGenericComponentClass(
    ReactDOMComponent
  );

  ReactInjection.NativeComponent.injectComponentClasses({
    'button': ReactDOMButton,
    'form': ReactDOMForm,
    'img': ReactDOMImg,
    'input': ReactDOMInput,
    'option': ReactDOMOption,
    'select': ReactDOMSelect,
    'textarea': ReactDOMTextarea,

    'html': createFullPageComponent('html'),
    'head': createFullPageComponent('head'),
    'body': createFullPageComponent('body')
  });

  // This needs to happen after createFullPageComponent() otherwise the mixin
  // gets double injected.
  ReactInjection.CompositeComponent.injectMixin(ReactBrowserComponentMixin);

  ReactInjection.DOMProperty.injectDOMPropertyConfig(HTMLDOMPropertyConfig);
  ReactInjection.DOMProperty.injectDOMPropertyConfig(SVGDOMPropertyConfig);

  ReactInjection.EmptyComponent.injectEmptyComponent('noscript');

  ReactInjection.Updates.injectReconcileTransaction(
    ReactComponentBrowserEnvironment.ReactReconcileTransaction
  );
  ReactInjection.Updates.injectBatchingStrategy(
    ReactDefaultBatchingStrategy
  );

  ReactInjection.RootIndex.injectCreateReactRootIndex(
    ExecutionEnvironment.canUseDOM ?
      ClientReactRootIndex.createReactRootIndex :
      ServerReactRootIndex.createReactRootIndex
  );

  ReactInjection.Component.injectEnvironment(ReactComponentBrowserEnvironment);

  if ("production" !== process.env.NODE_ENV) {
    var url = (ExecutionEnvironment.canUseDOM && window.location.href) || '';
    if ((/[?&]react_perf\b/).test(url)) {
      var ReactDefaultPerf = require("./ReactDefaultPerf");
      ReactDefaultPerf.start();
    }
  }
}

module.exports = {
  inject: inject
};

}).call(this,require('_process'))

},{"./BeforeInputEventPlugin":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/BeforeInputEventPlugin.js","./ChangeEventPlugin":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ChangeEventPlugin.js","./ClientReactRootIndex":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ClientReactRootIndex.js","./CompositionEventPlugin":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/CompositionEventPlugin.js","./DefaultEventPluginOrder":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/DefaultEventPluginOrder.js","./EnterLeaveEventPlugin":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/EnterLeaveEventPlugin.js","./ExecutionEnvironment":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ExecutionEnvironment.js","./HTMLDOMPropertyConfig":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/HTMLDOMPropertyConfig.js","./MobileSafariClickEventPlugin":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/MobileSafariClickEventPlugin.js","./ReactBrowserComponentMixin":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ReactBrowserComponentMixin.js","./ReactComponentBrowserEnvironment":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ReactComponentBrowserEnvironment.js","./ReactDOMButton":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ReactDOMButton.js","./ReactDOMComponent":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ReactDOMComponent.js","./ReactDOMForm":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ReactDOMForm.js","./ReactDOMImg":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ReactDOMImg.js","./ReactDOMInput":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ReactDOMInput.js","./ReactDOMOption":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ReactDOMOption.js","./ReactDOMSelect":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ReactDOMSelect.js","./ReactDOMTextarea":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ReactDOMTextarea.js","./ReactDefaultBatchingStrategy":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ReactDefaultBatchingStrategy.js","./ReactDefaultPerf":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ReactDefaultPerf.js","./ReactEventListener":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ReactEventListener.js","./ReactInjection":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ReactInjection.js","./ReactInstanceHandles":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ReactInstanceHandles.js","./ReactMount":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ReactMount.js","./SVGDOMPropertyConfig":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/SVGDOMPropertyConfig.js","./SelectEventPlugin":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/SelectEventPlugin.js","./ServerReactRootIndex":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ServerReactRootIndex.js","./SimpleEventPlugin":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/SimpleEventPlugin.js","./createFullPageComponent":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/createFullPageComponent.js","_process":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/browserify/node_modules/process/browser.js"}],"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ReactDefaultPerf.js":[function(require,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDefaultPerf
 * @typechecks static-only
 */

"use strict";

var DOMProperty = require("./DOMProperty");
var ReactDefaultPerfAnalysis = require("./ReactDefaultPerfAnalysis");
var ReactMount = require("./ReactMount");
var ReactPerf = require("./ReactPerf");

var performanceNow = require("./performanceNow");

function roundFloat(val) {
  return Math.floor(val * 100) / 100;
}

function addValue(obj, key, val) {
  obj[key] = (obj[key] || 0) + val;
}

var ReactDefaultPerf = {
  _allMeasurements: [], // last item in the list is the current one
  _mountStack: [0],
  _injected: false,

  start: function() {
    if (!ReactDefaultPerf._injected) {
      ReactPerf.injection.injectMeasure(ReactDefaultPerf.measure);
    }

    ReactDefaultPerf._allMeasurements.length = 0;
    ReactPerf.enableMeasure = true;
  },

  stop: function() {
    ReactPerf.enableMeasure = false;
  },

  getLastMeasurements: function() {
    return ReactDefaultPerf._allMeasurements;
  },

  printExclusive: function(measurements) {
    measurements = measurements || ReactDefaultPerf._allMeasurements;
    var summary = ReactDefaultPerfAnalysis.getExclusiveSummary(measurements);
    console.table(summary.map(function(item) {
      return {
        'Component class name': item.componentName,
        'Total inclusive time (ms)': roundFloat(item.inclusive),
        'Exclusive mount time (ms)': roundFloat(item.exclusive),
        'Exclusive render time (ms)': roundFloat(item.render),
        'Mount time per instance (ms)': roundFloat(item.exclusive / item.count),
        'Render time per instance (ms)': roundFloat(item.render / item.count),
        'Instances': item.count
      };
    }));
    // TODO: ReactDefaultPerfAnalysis.getTotalTime() does not return the correct
    // number.
  },

  printInclusive: function(measurements) {
    measurements = measurements || ReactDefaultPerf._allMeasurements;
    var summary = ReactDefaultPerfAnalysis.getInclusiveSummary(measurements);
    console.table(summary.map(function(item) {
      return {
        'Owner > component': item.componentName,
        'Inclusive time (ms)': roundFloat(item.time),
        'Instances': item.count
      };
    }));
    console.log(
      'Total time:',
      ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms'
    );
  },

  getMeasurementsSummaryMap: function(measurements) {
    var summary = ReactDefaultPerfAnalysis.getInclusiveSummary(
      measurements,
      true
    );
    return summary.map(function(item) {
      return {
        'Owner > component': item.componentName,
        'Wasted time (ms)': item.time,
        'Instances': item.count
      };
    });
  },

  printWasted: function(measurements) {
    measurements = measurements || ReactDefaultPerf._allMeasurements;
    console.table(ReactDefaultPerf.getMeasurementsSummaryMap(measurements));
    console.log(
      'Total time:',
      ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms'
    );
  },

  printDOM: function(measurements) {
    measurements = measurements || ReactDefaultPerf._allMeasurements;
    var summary = ReactDefaultPerfAnalysis.getDOMSummary(measurements);
    console.table(summary.map(function(item) {
      var result = {};
      result[DOMProperty.ID_ATTRIBUTE_NAME] = item.id;
      result['type'] = item.type;
      result['args'] = JSON.stringify(item.args);
      return result;
    }));
    console.log(
      'Total time:',
      ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms'
    );
  },

  _recordWrite: function(id, fnName, totalTime, args) {
    // TODO: totalTime isn't that useful since it doesn't count paints/reflows
    var writes =
      ReactDefaultPerf
        ._allMeasurements[ReactDefaultPerf._allMeasurements.length - 1]
        .writes;
    writes[id] = writes[id] || [];
    writes[id].push({
      type: fnName,
      time: totalTime,
      args: args
    });
  },

  measure: function(moduleName, fnName, func) {
    return function() {for (var args=[],$__0=0,$__1=arguments.length;$__0<$__1;$__0++) args.push(arguments[$__0]);
      var totalTime;
      var rv;
      var start;

      if (fnName === '_renderNewRootComponent' ||
          fnName === 'flushBatchedUpdates') {
        // A "measurement" is a set of metrics recorded for each flush. We want
        // to group the metrics for a given flush together so we can look at the
        // components that rendered and the DOM operations that actually
        // happened to determine the amount of "wasted work" performed.
        ReactDefaultPerf._allMeasurements.push({
          exclusive: {},
          inclusive: {},
          render: {},
          counts: {},
          writes: {},
          displayNames: {},
          totalTime: 0
        });
        start = performanceNow();
        rv = func.apply(this, args);
        ReactDefaultPerf._allMeasurements[
          ReactDefaultPerf._allMeasurements.length - 1
        ].totalTime = performanceNow() - start;
        return rv;
      } else if (moduleName === 'ReactDOMIDOperations' ||
        moduleName === 'ReactComponentBrowserEnvironment') {
        start = performanceNow();
        rv = func.apply(this, args);
        totalTime = performanceNow() - start;

        if (fnName === 'mountImageIntoNode') {
          var mountID = ReactMount.getID(args[1]);
          ReactDefaultPerf._recordWrite(mountID, fnName, totalTime, args[0]);
        } else if (fnName === 'dangerouslyProcessChildrenUpdates') {
          // special format
          args[0].forEach(function(update) {
            var writeArgs = {};
            if (update.fromIndex !== null) {
              writeArgs.fromIndex = update.fromIndex;
            }
            if (update.toIndex !== null) {
              writeArgs.toIndex = update.toIndex;
            }
            if (update.textContent !== null) {
              writeArgs.textContent = update.textContent;
            }
            if (update.markupIndex !== null) {
              writeArgs.markup = args[1][update.markupIndex];
            }
            ReactDefaultPerf._recordWrite(
              update.parentID,
              update.type,
              totalTime,
              writeArgs
            );
          });
        } else {
          // basic format
          ReactDefaultPerf._recordWrite(
            args[0],
            fnName,
            totalTime,
            Array.prototype.slice.call(args, 1)
          );
        }
        return rv;
      } else if (moduleName === 'ReactCompositeComponent' && (
        fnName === 'mountComponent' ||
        fnName === 'updateComponent' || // TODO: receiveComponent()?
        fnName === '_renderValidatedComponent')) {

        var rootNodeID = fnName === 'mountComponent' ?
          args[0] :
          this._rootNodeID;
        var isRender = fnName === '_renderValidatedComponent';
        var isMount = fnName === 'mountComponent';

        var mountStack = ReactDefaultPerf._mountStack;
        var entry = ReactDefaultPerf._allMeasurements[
          ReactDefaultPerf._allMeasurements.length - 1
        ];

        if (isRender) {
          addValue(entry.counts, rootNodeID, 1);
        } else if (isMount) {
          mountStack.push(0);
        }

        start = performanceNow();
        rv = func.apply(this, args);
        totalTime = performanceNow() - start;

        if (isRender) {
          addValue(entry.render, rootNodeID, totalTime);
        } else if (isMount) {
          var subMountTime = mountStack.pop();
          mountStack[mountStack.length - 1] += totalTime;
          addValue(entry.exclusive, rootNodeID, totalTime - subMountTime);
          addValue(entry.inclusive, rootNodeID, totalTime);
        } else {
          addValue(entry.inclusive, rootNodeID, totalTime);
        }

        entry.displayNames[rootNodeID] = {
          current: this.constructor.displayName,
          owner: this._owner ? this._owner.constructor.displayName : '<root>'
        };

        return rv;
      } else {
        return func.apply(this, args);
      }
    };
  }
};

module.exports = ReactDefaultPerf;

},{"./DOMProperty":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/DOMProperty.js","./ReactDefaultPerfAnalysis":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ReactDefaultPerfAnalysis.js","./ReactMount":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ReactMount.js","./ReactPerf":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ReactPerf.js","./performanceNow":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/performanceNow.js"}],"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ReactDefaultPerfAnalysis.js":[function(require,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDefaultPerfAnalysis
 */

var assign = require("./Object.assign");

// Don't try to save users less than 1.2ms (a number I made up)
var DONT_CARE_THRESHOLD = 1.2;
var DOM_OPERATION_TYPES = {
  'mountImageIntoNode': 'set innerHTML',
  INSERT_MARKUP: 'set innerHTML',
  MOVE_EXISTING: 'move',
  REMOVE_NODE: 'remove',
  TEXT_CONTENT: 'set textContent',
  'updatePropertyByID': 'update attribute',
  'deletePropertyByID': 'delete attribute',
  'updateStylesByID': 'update styles',
  'updateInnerHTMLByID': 'set innerHTML',
  'dangerouslyReplaceNodeWithMarkupByID': 'replace'
};

function getTotalTime(measurements) {
  // TODO: return number of DOM ops? could be misleading.
  // TODO: measure dropped frames after reconcile?
  // TODO: log total time of each reconcile and the top-level component
  // class that triggered it.
  var totalTime = 0;
  for (var i = 0; i < measurements.length; i++) {
    var measurement = measurements[i];
    totalTime += measurement.totalTime;
  }
  return totalTime;
}

function getDOMSummary(measurements) {
  var items = [];
  for (var i = 0; i < measurements.length; i++) {
    var measurement = measurements[i];
    var id;

    for (id in measurement.writes) {
      measurement.writes[id].forEach(function(write) {
        items.push({
          id: id,
          type: DOM_OPERATION_TYPES[write.type] || write.type,
          args: write.args
        });
      });
    }
  }
  return items;
}

function getExclusiveSummary(measurements) {
  var candidates = {};
  var displayName;

  for (var i = 0; i < measurements.length; i++) {
    var measurement = measurements[i];
    var allIDs = assign(
      {},
      measurement.exclusive,
      measurement.inclusive
    );

    for (var id in allIDs) {
      displayName = measurement.displayNames[id].current;

      candidates[displayName] = candidates[displayName] || {
        componentName: displayName,
        inclusive: 0,
        exclusive: 0,
        render: 0,
        count: 0
      };
      if (measurement.render[id]) {
        candidates[displayName].render += measurement.render[id];
      }
      if (measurement.exclusive[id]) {
        candidates[displayName].exclusive += measurement.exclusive[id];
      }
      if (measurement.inclusive[id]) {
        candidates[displayName].inclusive += measurement.inclusive[id];
      }
      if (measurement.counts[id]) {
        candidates[displayName].count += measurement.counts[id];
      }
    }
  }

  // Now make a sorted array with the results.
  var arr = [];
  for (displayName in candidates) {
    if (candidates[displayName].exclusive >= DONT_CARE_THRESHOLD) {
      arr.push(candidates[displayName]);
    }
  }

  arr.sort(function(a, b) {
    return b.exclusive - a.exclusive;
  });

  return arr;
}

function getInclusiveSummary(measurements, onlyClean) {
  var candidates = {};
  var inclusiveKey;

  for (var i = 0; i < measurements.length; i++) {
    var measurement = measurements[i];
    var allIDs = assign(
      {},
      measurement.exclusive,
      measurement.inclusive
    );
    var cleanComponents;

    if (onlyClean) {
      cleanComponents = getUnchangedComponents(measurement);
    }

    for (var id in allIDs) {
      if (onlyClean && !cleanComponents[id]) {
        continue;
      }

      var displayName = measurement.displayNames[id];

      // Inclusive time is not useful for many components without knowing where
      // they are instantiated. So we aggregate inclusive time with both the
      // owner and current displayName as the key.
      inclusiveKey = displayName.owner + ' > ' + displayName.current;

      candidates[inclusiveKey] = candidates[inclusiveKey] || {
        componentName: inclusiveKey,
        time: 0,
        count: 0
      };

      if (measurement.inclusive[id]) {
        candidates[inclusiveKey].time += measurement.inclusive[id];
      }
      if (measurement.counts[id]) {
        candidates[inclusiveKey].count += measurement.counts[id];
      }
    }
  }

  // Now make a sorted array with the results.
  var arr = [];
  for (inclusiveKey in candidates) {
    if (candidates[inclusiveKey].time >= DONT_CARE_THRESHOLD) {
      arr.push(candidates[inclusiveKey]);
    }
  }

  arr.sort(function(a, b) {
    return b.time - a.time;
  });

  return arr;
}

function getUnchangedComponents(measurement) {
  // For a given reconcile, look at which components did not actually
  // render anything to the DOM and return a mapping of their ID to
  // the amount of time it took to render the entire subtree.
  var cleanComponents = {};
  var dirtyLeafIDs = Object.keys(measurement.writes);
  var allIDs = assign({}, measurement.exclusive, measurement.inclusive);

  for (var id in allIDs) {
    var isDirty = false;
    // For each component that rendered, see if a component that triggered
    // a DOM op is in its subtree.
    for (var i = 0; i < dirtyLeafIDs.length; i++) {
      if (dirtyLeafIDs[i].indexOf(id) === 0) {
        isDirty = true;
        break;
      }
    }
    if (!isDirty && measurement.counts[id] > 0) {
      cleanComponents[id] = true;
    }
  }
  return cleanComponents;
}

var ReactDefaultPerfAnalysis = {
  getExclusiveSummary: getExclusiveSummary,
  getInclusiveSummary: getInclusiveSummary,
  getDOMSummary: getDOMSummary,
  getTotalTime: getTotalTime
};

module.exports = ReactDefaultPerfAnalysis;

},{"./Object.assign":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/Object.assign.js"}],"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ReactElement.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactElement
 */

"use strict";

var ReactContext = require("./ReactContext");
var ReactCurrentOwner = require("./ReactCurrentOwner");

var warning = require("./warning");

var RESERVED_PROPS = {
  key: true,
  ref: true
};

/**
 * Warn for mutations.
 *
 * @internal
 * @param {object} object
 * @param {string} key
 */
function defineWarningProperty(object, key) {
  Object.defineProperty(object, key, {

    configurable: false,
    enumerable: true,

    get: function() {
      if (!this._store) {
        return null;
      }
      return this._store[key];
    },

    set: function(value) {
      ("production" !== process.env.NODE_ENV ? warning(
        false,
        'Don\'t set the ' + key + ' property of the component. ' +
        'Mutate the existing props object instead.'
      ) : null);
      this._store[key] = value;
    }

  });
}

/**
 * This is updated to true if the membrane is successfully created.
 */
var useMutationMembrane = false;

/**
 * Warn for mutations.
 *
 * @internal
 * @param {object} element
 */
function defineMutationMembrane(prototype) {
  try {
    var pseudoFrozenProperties = {
      props: true
    };
    for (var key in pseudoFrozenProperties) {
      defineWarningProperty(prototype, key);
    }
    useMutationMembrane = true;
  } catch (x) {
    // IE will fail on defineProperty
  }
}

/**
 * Base constructor for all React elements. This is only used to make this
 * work with a dynamic instanceof check. Nothing should live on this prototype.
 *
 * @param {*} type
 * @param {string|object} ref
 * @param {*} key
 * @param {*} props
 * @internal
 */
var ReactElement = function(type, key, ref, owner, context, props) {
  // Built-in properties that belong on the element
  this.type = type;
  this.key = key;
  this.ref = ref;

  // Record the component responsible for creating this element.
  this._owner = owner;

  // TODO: Deprecate withContext, and then the context becomes accessible
  // through the owner.
  this._context = context;

  if ("production" !== process.env.NODE_ENV) {
    // The validation flag and props are currently mutative. We put them on
    // an external backing store so that we can freeze the whole object.
    // This can be replaced with a WeakMap once they are implemented in
    // commonly used development environments.
    this._store = { validated: false, props: props };

    // We're not allowed to set props directly on the object so we early
    // return and rely on the prototype membrane to forward to the backing
    // store.
    if (useMutationMembrane) {
      Object.freeze(this);
      return;
    }
  }

  this.props = props;
};

// We intentionally don't expose the function on the constructor property.
// ReactElement should be indistinguishable from a plain object.
ReactElement.prototype = {
  _isReactElement: true
};

if ("production" !== process.env.NODE_ENV) {
  defineMutationMembrane(ReactElement.prototype);
}

ReactElement.createElement = function(type, config, children) {
  var propName;

  // Reserved names are extracted
  var props = {};

  var key = null;
  var ref = null;

  if (config != null) {
    ref = config.ref === undefined ? null : config.ref;
    if ("production" !== process.env.NODE_ENV) {
      ("production" !== process.env.NODE_ENV ? warning(
        config.key !== null,
        'createElement(...): Encountered component with a `key` of null. In ' +
        'a future version, this will be treated as equivalent to the string ' +
        '\'null\'; instead, provide an explicit key or use undefined.'
      ) : null);
    }
    // TODO: Change this back to `config.key === undefined`
    key = config.key == null ? null : '' + config.key;
    // Remaining properties are added to a new props object
    for (propName in config) {
      if (config.hasOwnProperty(propName) &&
          !RESERVED_PROPS.hasOwnProperty(propName)) {
        props[propName] = config[propName];
      }
    }
  }

  // Children can be more than one argument, and those are transferred onto
  // the newly allocated props object.
  var childrenLength = arguments.length - 2;
  if (childrenLength === 1) {
    props.children = children;
  } else if (childrenLength > 1) {
    var childArray = Array(childrenLength);
    for (var i = 0; i < childrenLength; i++) {
      childArray[i] = arguments[i + 2];
    }
    props.children = childArray;
  }

  // Resolve default props
  if (type && type.defaultProps) {
    var defaultProps = type.defaultProps;
    for (propName in defaultProps) {
      if (typeof props[propName] === 'undefined') {
        props[propName] = defaultProps[propName];
      }
    }
  }

  return new ReactElement(
    type,
    key,
    ref,
    ReactCurrentOwner.current,
    ReactContext.current,
    props
  );
};

ReactElement.createFactory = function(type) {
  var factory = ReactElement.createElement.bind(null, type);
  // Expose the type on the factory and the prototype so that it can be
  // easily accessed on elements. E.g. <Foo />.type === Foo.type.
  // This should not be named `constructor` since this may not be the function
  // that created the element, and it may not even be a constructor.
  factory.type = type;
  return factory;
};

ReactElement.cloneAndReplaceProps = function(oldElement, newProps) {
  var newElement = new ReactElement(
    oldElement.type,
    oldElement.key,
    oldElement.ref,
    oldElement._owner,
    oldElement._context,
    newProps
  );

  if ("production" !== process.env.NODE_ENV) {
    // If the key on the original is valid, then the clone is valid
    newElement._store.validated = oldElement._store.validated;
  }
  return newElement;
};

/**
 * @param {?object} object
 * @return {boolean} True if `object` is a valid component.
 * @final
 */
ReactElement.isValidElement = function(object) {
  // ReactTestUtils is often used outside of beforeEach where as React is
  // within it. This leads to two different instances of React on the same
  // page. To identify a element from a different React instance we use
  // a flag instead of an instanceof check.
  var isElement = !!(object && object._isReactElement);
  // if (isElement && !(object instanceof ReactElement)) {
  // This is an indicator that you're using multiple versions of React at the
  // same time. This will screw with ownership and stuff. Fix it, please.
  // TODO: We could possibly warn here.
  // }
  return isElement;
};

module.exports = ReactElement;

}).call(this,require('_process'))

},{"./ReactContext":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ReactContext.js","./ReactCurrentOwner":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ReactCurrentOwner.js","./warning":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/warning.js","_process":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/browserify/node_modules/process/browser.js"}],"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ReactElementValidator.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactElementValidator
 */

/**
 * ReactElementValidator provides a wrapper around a element factory
 * which validates the props passed to the element. This is intended to be
 * used only in DEV and could be replaced by a static type checker for languages
 * that support it.
 */

"use strict";

var ReactElement = require("./ReactElement");
var ReactPropTypeLocations = require("./ReactPropTypeLocations");
var ReactCurrentOwner = require("./ReactCurrentOwner");

var monitorCodeUse = require("./monitorCodeUse");
var warning = require("./warning");

/**
 * Warn if there's no key explicitly set on dynamic arrays of children or
 * object keys are not valid. This allows us to keep track of children between
 * updates.
 */
var ownerHasKeyUseWarning = {
  'react_key_warning': {},
  'react_numeric_key_warning': {}
};
var ownerHasMonitoredObjectMap = {};

var loggedTypeFailures = {};

var NUMERIC_PROPERTY_REGEX = /^\d+$/;

/**
 * Gets the current owner's displayName for use in warnings.
 *
 * @internal
 * @return {?string} Display name or undefined
 */
function getCurrentOwnerDisplayName() {
  var current = ReactCurrentOwner.current;
  return current && current.constructor.displayName || undefined;
}

/**
 * Warn if the component doesn't have an explicit key assigned to it.
 * This component is in an array. The array could grow and shrink or be
 * reordered. All children that haven't already been validated are required to
 * have a "key" property assigned to it.
 *
 * @internal
 * @param {ReactComponent} component Component that requires a key.
 * @param {*} parentType component's parent's type.
 */
function validateExplicitKey(component, parentType) {
  if (component._store.validated || component.key != null) {
    return;
  }
  component._store.validated = true;

  warnAndMonitorForKeyUse(
    'react_key_warning',
    'Each child in an array should have a unique "key" prop.',
    component,
    parentType
  );
}

/**
 * Warn if the key is being defined as an object property but has an incorrect
 * value.
 *
 * @internal
 * @param {string} name Property name of the key.
 * @param {ReactComponent} component Component that requires a key.
 * @param {*} parentType component's parent's type.
 */
function validatePropertyKey(name, component, parentType) {
  if (!NUMERIC_PROPERTY_REGEX.test(name)) {
    return;
  }
  warnAndMonitorForKeyUse(
    'react_numeric_key_warning',
    'Child objects should have non-numeric keys so ordering is preserved.',
    component,
    parentType
  );
}

/**
 * Shared warning and monitoring code for the key warnings.
 *
 * @internal
 * @param {string} warningID The id used when logging.
 * @param {string} message The base warning that gets output.
 * @param {ReactComponent} component Component that requires a key.
 * @param {*} parentType component's parent's type.
 */
function warnAndMonitorForKeyUse(warningID, message, component, parentType) {
  var ownerName = getCurrentOwnerDisplayName();
  var parentName = parentType.displayName;

  var useName = ownerName || parentName;
  var memoizer = ownerHasKeyUseWarning[warningID];
  if (memoizer.hasOwnProperty(useName)) {
    return;
  }
  memoizer[useName] = true;

  message += ownerName ?
    (" Check the render method of " + ownerName + ".") :
    (" Check the renderComponent call using <" + parentName + ">.");

  // Usually the current owner is the offender, but if it accepts children as a
  // property, it may be the creator of the child that's responsible for
  // assigning it a key.
  var childOwnerName = null;
  if (component._owner && component._owner !== ReactCurrentOwner.current) {
    // Name of the component that originally created this child.
    childOwnerName = component._owner.constructor.displayName;

    message += (" It was passed a child from " + childOwnerName + ".");
  }

  message += ' See http://fb.me/react-warning-keys for more information.';
  monitorCodeUse(warningID, {
    component: useName,
    componentOwner: childOwnerName
  });
  console.warn(message);
}

/**
 * Log that we're using an object map. We're considering deprecating this
 * feature and replace it with proper Map and ImmutableMap data structures.
 *
 * @internal
 */
function monitorUseOfObjectMap() {
  var currentName = getCurrentOwnerDisplayName() || '';
  if (ownerHasMonitoredObjectMap.hasOwnProperty(currentName)) {
    return;
  }
  ownerHasMonitoredObjectMap[currentName] = true;
  monitorCodeUse('react_object_map_children');
}

/**
 * Ensure that every component either is passed in a static location, in an
 * array with an explicit keys property defined, or in an object literal
 * with valid key property.
 *
 * @internal
 * @param {*} component Statically passed child of any type.
 * @param {*} parentType component's parent's type.
 * @return {boolean}
 */
function validateChildKeys(component, parentType) {
  if (Array.isArray(component)) {
    for (var i = 0; i < component.length; i++) {
      var child = component[i];
      if (ReactElement.isValidElement(child)) {
        validateExplicitKey(child, parentType);
      }
    }
  } else if (ReactElement.isValidElement(component)) {
    // This component was passed in a valid location.
    component._store.validated = true;
  } else if (component && typeof component === 'object') {
    monitorUseOfObjectMap();
    for (var name in component) {
      validatePropertyKey(name, component[name], parentType);
    }
  }
}

/**
 * Assert that the props are valid
 *
 * @param {string} componentName Name of the component for error messages.
 * @param {object} propTypes Map of prop name to a ReactPropType
 * @param {object} props
 * @param {string} location e.g. "prop", "context", "child context"
 * @private
 */
function checkPropTypes(componentName, propTypes, props, location) {
  for (var propName in propTypes) {
    if (propTypes.hasOwnProperty(propName)) {
      var error;
      // Prop type validation may throw. In case they do, we don't want to
      // fail the render phase where it didn't fail before. So we log it.
      // After these have been cleaned up, we'll let them throw.
      try {
        error = propTypes[propName](props, propName, componentName, location);
      } catch (ex) {
        error = ex;
      }
      if (error instanceof Error && !(error.message in loggedTypeFailures)) {
        // Only monitor this failure once because there tends to be a lot of the
        // same error.
        loggedTypeFailures[error.message] = true;
        // This will soon use the warning module
        monitorCodeUse(
          'react_failed_descriptor_type_check',
          { message: error.message }
        );
      }
    }
  }
}

var ReactElementValidator = {

  createElement: function(type, props, children) {
    // We warn in this case but don't throw. We expect the element creation to
    // succeed and there will likely be errors in render.
    ("production" !== process.env.NODE_ENV ? warning(
      type != null,
      'React.createElement: type should not be null or undefined. It should ' +
        'be a string (for DOM elements) or a ReactClass (for composite ' +
        'components).'
    ) : null);

    var element = ReactElement.createElement.apply(this, arguments);

    // The result can be nullish if a mock or a custom function is used.
    // TODO: Drop this when these are no longer allowed as the type argument.
    if (element == null) {
      return element;
    }

    for (var i = 2; i < arguments.length; i++) {
      validateChildKeys(arguments[i], type);
    }

    if (type) {
      var name = type.displayName;
      if (type.propTypes) {
        checkPropTypes(
          name,
          type.propTypes,
          element.props,
          ReactPropTypeLocations.prop
        );
      }
      if (type.contextTypes) {
        checkPropTypes(
          name,
          type.contextTypes,
          element._context,
          ReactPropTypeLocations.context
        );
      }
    }
    return element;
  },

  createFactory: function(type) {
    var validatedFactory = ReactElementValidator.createElement.bind(
      null,
      type
    );
    validatedFactory.type = type;
    return validatedFactory;
  }

};

module.exports = ReactElementValidator;

}).call(this,require('_process'))

},{"./ReactCurrentOwner":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ReactCurrentOwner.js","./ReactElement":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ReactElement.js","./ReactPropTypeLocations":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ReactPropTypeLocations.js","./monitorCodeUse":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/monitorCodeUse.js","./warning":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/warning.js","_process":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/browserify/node_modules/process/browser.js"}],"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ReactEmptyComponent.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactEmptyComponent
 */

"use strict";

var ReactElement = require("./ReactElement");

var invariant = require("./invariant");

var component;
// This registry keeps track of the React IDs of the components that rendered to
// `null` (in reality a placeholder such as `noscript`)
var nullComponentIdsRegistry = {};

var ReactEmptyComponentInjection = {
  injectEmptyComponent: function(emptyComponent) {
    component = ReactElement.createFactory(emptyComponent);
  }
};

/**
 * @return {ReactComponent} component The injected empty component.
 */
function getEmptyComponent() {
  ("production" !== process.env.NODE_ENV ? invariant(
    component,
    'Trying to return null from a render, but no null placeholder component ' +
    'was injected.'
  ) : invariant(component));
  return component();
}

/**
 * Mark the component as having rendered to null.
 * @param {string} id Component's `_rootNodeID`.
 */
function registerNullComponentID(id) {
  nullComponentIdsRegistry[id] = true;
}

/**
 * Unmark the component as having rendered to null: it renders to something now.
 * @param {string} id Component's `_rootNodeID`.
 */
function deregisterNullComponentID(id) {
  delete nullComponentIdsRegistry[id];
}

/**
 * @param {string} id Component's `_rootNodeID`.
 * @return {boolean} True if the component is rendered to null.
 */
function isNullComponentID(id) {
  return nullComponentIdsRegistry[id];
}

var ReactEmptyComponent = {
  deregisterNullComponentID: deregisterNullComponentID,
  getEmptyComponent: getEmptyComponent,
  injection: ReactEmptyComponentInjection,
  isNullComponentID: isNullComponentID,
  registerNullComponentID: registerNullComponentID
};

module.exports = ReactEmptyComponent;

}).call(this,require('_process'))

},{"./ReactElement":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ReactElement.js","./invariant":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/invariant.js","_process":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/browserify/node_modules/process/browser.js"}],"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ReactErrorUtils.js":[function(require,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactErrorUtils
 * @typechecks
 */

"use strict";

var ReactErrorUtils = {
  /**
   * Creates a guarded version of a function. This is supposed to make debugging
   * of event handlers easier. To aid debugging with the browser's debugger,
   * this currently simply returns the original function.
   *
   * @param {function} func Function to be executed
   * @param {string} name The name of the guard
   * @return {function}
   */
  guard: function(func, name) {
    return func;
  }
};

module.exports = ReactErrorUtils;

},{}],"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ReactEventEmitterMixin.js":[function(require,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactEventEmitterMixin
 */

"use strict";

var EventPluginHub = require("./EventPluginHub");

function runEventQueueInBatch(events) {
  EventPluginHub.enqueueEvents(events);
  EventPluginHub.processEventQueue();
}

var ReactEventEmitterMixin = {

  /**
   * Streams a fired top-level event to `EventPluginHub` where plugins have the
   * opportunity to create `ReactEvent`s to be dispatched.
   *
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {object} topLevelTarget The listening component root node.
   * @param {string} topLevelTargetID ID of `topLevelTarget`.
   * @param {object} nativeEvent Native environment event.
   */
  handleTopLevel: function(
      topLevelType,
      topLevelTarget,
      topLevelTargetID,
      nativeEvent) {
    var events = EventPluginHub.extractEvents(
      topLevelType,
      topLevelTarget,
      topLevelTargetID,
      nativeEvent
    );

    runEventQueueInBatch(events);
  }
};

module.exports = ReactEventEmitterMixin;

},{"./EventPluginHub":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/EventPluginHub.js"}],"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ReactEventListener.js":[function(require,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactEventListener
 * @typechecks static-only
 */

"use strict";

var EventListener = require("./EventListener");
var ExecutionEnvironment = require("./ExecutionEnvironment");
var PooledClass = require("./PooledClass");
var ReactInstanceHandles = require("./ReactInstanceHandles");
var ReactMount = require("./ReactMount");
var ReactUpdates = require("./ReactUpdates");

var assign = require("./Object.assign");
var getEventTarget = require("./getEventTarget");
var getUnboundedScrollPosition = require("./getUnboundedScrollPosition");

/**
 * Finds the parent React component of `node`.
 *
 * @param {*} node
 * @return {?DOMEventTarget} Parent container, or `null` if the specified node
 *                           is not nested.
 */
function findParent(node) {
  // TODO: It may be a good idea to cache this to prevent unnecessary DOM
  // traversal, but caching is difficult to do correctly without using a
  // mutation observer to listen for all DOM changes.
  var nodeID = ReactMount.getID(node);
  var rootID = ReactInstanceHandles.getReactRootIDFromNodeID(nodeID);
  var container = ReactMount.findReactContainerForID(rootID);
  var parent = ReactMount.getFirstReactDOM(container);
  return parent;
}

// Used to store ancestor hierarchy in top level callback
function TopLevelCallbackBookKeeping(topLevelType, nativeEvent) {
  this.topLevelType = topLevelType;
  this.nativeEvent = nativeEvent;
  this.ancestors = [];
}
assign(TopLevelCallbackBookKeeping.prototype, {
  destructor: function() {
    this.topLevelType = null;
    this.nativeEvent = null;
    this.ancestors.length = 0;
  }
});
PooledClass.addPoolingTo(
  TopLevelCallbackBookKeeping,
  PooledClass.twoArgumentPooler
);

function handleTopLevelImpl(bookKeeping) {
  var topLevelTarget = ReactMount.getFirstReactDOM(
    getEventTarget(bookKeeping.nativeEvent)
  ) || window;

  // Loop through the hierarchy, in case there's any nested components.
  // It's important that we build the array of ancestors before calling any
  // event handlers, because event handlers can modify the DOM, leading to
  // inconsistencies with ReactMount's node cache. See #1105.
  var ancestor = topLevelTarget;
  while (ancestor) {
    bookKeeping.ancestors.push(ancestor);
    ancestor = findParent(ancestor);
  }

  for (var i = 0, l = bookKeeping.ancestors.length; i < l; i++) {
    topLevelTarget = bookKeeping.ancestors[i];
    var topLevelTargetID = ReactMount.getID(topLevelTarget) || '';
    ReactEventListener._handleTopLevel(
      bookKeeping.topLevelType,
      topLevelTarget,
      topLevelTargetID,
      bookKeeping.nativeEvent
    );
  }
}

function scrollValueMonitor(cb) {
  var scrollPosition = getUnboundedScrollPosition(window);
  cb(scrollPosition);
}

var ReactEventListener = {
  _enabled: true,
  _handleTopLevel: null,

  WINDOW_HANDLE: ExecutionEnvironment.canUseDOM ? window : null,

  setHandleTopLevel: function(handleTopLevel) {
    ReactEventListener._handleTopLevel = handleTopLevel;
  },

  setEnabled: function(enabled) {
    ReactEventListener._enabled = !!enabled;
  },

  isEnabled: function() {
    return ReactEventListener._enabled;
  },


  /**
   * Traps top-level events by using event bubbling.
   *
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {string} handlerBaseName Event name (e.g. "click").
   * @param {object} handle Element on which to attach listener.
   * @return {object} An object with a remove function which will forcefully
   *                  remove the listener.
   * @internal
   */
  trapBubbledEvent: function(topLevelType, handlerBaseName, handle) {
    var element = handle;
    if (!element) {
      return;
    }
    return EventListener.listen(
      element,
      handlerBaseName,
      ReactEventListener.dispatchEvent.bind(null, topLevelType)
    );
  },

  /**
   * Traps a top-level event by using event capturing.
   *
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {string} handlerBaseName Event name (e.g. "click").
   * @param {object} handle Element on which to attach listener.
   * @return {object} An object with a remove function which will forcefully
   *                  remove the listener.
   * @internal
   */
  trapCapturedEvent: function(topLevelType, handlerBaseName, handle) {
    var element = handle;
    if (!element) {
      return;
    }
    return EventListener.capture(
      element,
      handlerBaseName,
      ReactEventListener.dispatchEvent.bind(null, topLevelType)
    );
  },

  monitorScrollValue: function(refresh) {
    var callback = scrollValueMonitor.bind(null, refresh);
    EventListener.listen(window, 'scroll', callback);
    EventListener.listen(window, 'resize', callback);
  },

  dispatchEvent: function(topLevelType, nativeEvent) {
    if (!ReactEventListener._enabled) {
      return;
    }

    var bookKeeping = TopLevelCallbackBookKeeping.getPooled(
      topLevelType,
      nativeEvent
    );
    try {
      // Event queue being processed in the same cycle allows
      // `preventDefault`.
      ReactUpdates.batchedUpdates(handleTopLevelImpl, bookKeeping);
    } finally {
      TopLevelCallbackBookKeeping.release(bookKeeping);
    }
  }
};

module.exports = ReactEventListener;

},{"./EventListener":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/EventListener.js","./ExecutionEnvironment":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ExecutionEnvironment.js","./Object.assign":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/Object.assign.js","./PooledClass":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/PooledClass.js","./ReactInstanceHandles":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ReactInstanceHandles.js","./ReactMount":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ReactMount.js","./ReactUpdates":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ReactUpdates.js","./getEventTarget":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/getEventTarget.js","./getUnboundedScrollPosition":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/getUnboundedScrollPosition.js"}],"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ReactInjection.js":[function(require,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactInjection
 */

"use strict";

var DOMProperty = require("./DOMProperty");
var EventPluginHub = require("./EventPluginHub");
var ReactComponent = require("./ReactComponent");
var ReactCompositeComponent = require("./ReactCompositeComponent");
var ReactEmptyComponent = require("./ReactEmptyComponent");
var ReactBrowserEventEmitter = require("./ReactBrowserEventEmitter");
var ReactNativeComponent = require("./ReactNativeComponent");
var ReactPerf = require("./ReactPerf");
var ReactRootIndex = require("./ReactRootIndex");
var ReactUpdates = require("./ReactUpdates");

var ReactInjection = {
  Component: ReactComponent.injection,
  CompositeComponent: ReactCompositeComponent.injection,
  DOMProperty: DOMProperty.injection,
  EmptyComponent: ReactEmptyComponent.injection,
  EventPluginHub: EventPluginHub.injection,
  EventEmitter: ReactBrowserEventEmitter.injection,
  NativeComponent: ReactNativeComponent.injection,
  Perf: ReactPerf.injection,
  RootIndex: ReactRootIndex.injection,
  Updates: ReactUpdates.injection
};

module.exports = ReactInjection;

},{"./DOMProperty":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/DOMProperty.js","./EventPluginHub":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/EventPluginHub.js","./ReactBrowserEventEmitter":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ReactBrowserEventEmitter.js","./ReactComponent":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ReactComponent.js","./ReactCompositeComponent":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ReactCompositeComponent.js","./ReactEmptyComponent":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ReactEmptyComponent.js","./ReactNativeComponent":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ReactNativeComponent.js","./ReactPerf":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ReactPerf.js","./ReactRootIndex":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ReactRootIndex.js","./ReactUpdates":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ReactUpdates.js"}],"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ReactInputSelection.js":[function(require,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactInputSelection
 */

"use strict";

var ReactDOMSelection = require("./ReactDOMSelection");

var containsNode = require("./containsNode");
var focusNode = require("./focusNode");
var getActiveElement = require("./getActiveElement");

function isInDocument(node) {
  return containsNode(document.documentElement, node);
}

/**
 * @ReactInputSelection: React input selection module. Based on Selection.js,
 * but modified to be suitable for react and has a couple of bug fixes (doesn't
 * assume buttons have range selections allowed).
 * Input selection module for React.
 */
var ReactInputSelection = {

  hasSelectionCapabilities: function(elem) {
    return elem && (
      (elem.nodeName === 'INPUT' && elem.type === 'text') ||
      elem.nodeName === 'TEXTAREA' ||
      elem.contentEditable === 'true'
    );
  },

  getSelectionInformation: function() {
    var focusedElem = getActiveElement();
    return {
      focusedElem: focusedElem,
      selectionRange:
          ReactInputSelection.hasSelectionCapabilities(focusedElem) ?
          ReactInputSelection.getSelection(focusedElem) :
          null
    };
  },

  /**
   * @restoreSelection: If any selection information was potentially lost,
   * restore it. This is useful when performing operations that could remove dom
   * nodes and place them back in, resulting in focus being lost.
   */
  restoreSelection: function(priorSelectionInformation) {
    var curFocusedElem = getActiveElement();
    var priorFocusedElem = priorSelectionInformation.focusedElem;
    var priorSelectionRange = priorSelectionInformation.selectionRange;
    if (curFocusedElem !== priorFocusedElem &&
        isInDocument(priorFocusedElem)) {
      if (ReactInputSelection.hasSelectionCapabilities(priorFocusedElem)) {
        ReactInputSelection.setSelection(
          priorFocusedElem,
          priorSelectionRange
        );
      }
      focusNode(priorFocusedElem);
    }
  },

  /**
   * @getSelection: Gets the selection bounds of a focused textarea, input or
   * contentEditable node.
   * -@input: Look up selection bounds of this input
   * -@return {start: selectionStart, end: selectionEnd}
   */
  getSelection: function(input) {
    var selection;

    if ('selectionStart' in input) {
      // Modern browser with input or textarea.
      selection = {
        start: input.selectionStart,
        end: input.selectionEnd
      };
    } else if (document.selection && input.nodeName === 'INPUT') {
      // IE8 input.
      var range = document.selection.createRange();
      // There can only be one selection per document in IE, so it must
      // be in our element.
      if (range.parentElement() === input) {
        selection = {
          start: -range.moveStart('character', -input.value.length),
          end: -range.moveEnd('character', -input.value.length)
        };
      }
    } else {
      // Content editable or old IE textarea.
      selection = ReactDOMSelection.getOffsets(input);
    }

    return selection || {start: 0, end: 0};
  },

  /**
   * @setSelection: Sets the selection bounds of a textarea or input and focuses
   * the input.
   * -@input     Set selection bounds of this input or textarea
   * -@offsets   Object of same form that is returned from get*
   */
  setSelection: function(input, offsets) {
    var start = offsets.start;
    var end = offsets.end;
    if (typeof end === 'undefined') {
      end = start;
    }

    if ('selectionStart' in input) {
      input.selectionStart = start;
      input.selectionEnd = Math.min(end, input.value.length);
    } else if (document.selection && input.nodeName === 'INPUT') {
      var range = input.createTextRange();
      range.collapse(true);
      range.moveStart('character', start);
      range.moveEnd('character', end - start);
      range.select();
    } else {
      ReactDOMSelection.setOffsets(input, offsets);
    }
  }
};

module.exports = ReactInputSelection;

},{"./ReactDOMSelection":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ReactDOMSelection.js","./containsNode":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/containsNode.js","./focusNode":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/focusNode.js","./getActiveElement":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/getActiveElement.js"}],"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ReactInstanceHandles.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactInstanceHandles
 * @typechecks static-only
 */

"use strict";

var ReactRootIndex = require("./ReactRootIndex");

var invariant = require("./invariant");

var SEPARATOR = '.';
var SEPARATOR_LENGTH = SEPARATOR.length;

/**
 * Maximum depth of traversals before we consider the possibility of a bad ID.
 */
var MAX_TREE_DEPTH = 100;

/**
 * Creates a DOM ID prefix to use when mounting React components.
 *
 * @param {number} index A unique integer
 * @return {string} React root ID.
 * @internal
 */
function getReactRootIDString(index) {
  return SEPARATOR + index.toString(36);
}

/**
 * Checks if a character in the supplied ID is a separator or the end.
 *
 * @param {string} id A React DOM ID.
 * @param {number} index Index of the character to check.
 * @return {boolean} True if the character is a separator or end of the ID.
 * @private
 */
function isBoundary(id, index) {
  return id.charAt(index) === SEPARATOR || index === id.length;
}

/**
 * Checks if the supplied string is a valid React DOM ID.
 *
 * @param {string} id A React DOM ID, maybe.
 * @return {boolean} True if the string is a valid React DOM ID.
 * @private
 */
function isValidID(id) {
  return id === '' || (
    id.charAt(0) === SEPARATOR && id.charAt(id.length - 1) !== SEPARATOR
  );
}

/**
 * Checks if the first ID is an ancestor of or equal to the second ID.
 *
 * @param {string} ancestorID
 * @param {string} descendantID
 * @return {boolean} True if `ancestorID` is an ancestor of `descendantID`.
 * @internal
 */
function isAncestorIDOf(ancestorID, descendantID) {
  return (
    descendantID.indexOf(ancestorID) === 0 &&
    isBoundary(descendantID, ancestorID.length)
  );
}

/**
 * Gets the parent ID of the supplied React DOM ID, `id`.
 *
 * @param {string} id ID of a component.
 * @return {string} ID of the parent, or an empty string.
 * @private
 */
function getParentID(id) {
  return id ? id.substr(0, id.lastIndexOf(SEPARATOR)) : '';
}

/**
 * Gets the next DOM ID on the tree path from the supplied `ancestorID` to the
 * supplied `destinationID`. If they are equal, the ID is returned.
 *
 * @param {string} ancestorID ID of an ancestor node of `destinationID`.
 * @param {string} destinationID ID of the destination node.
 * @return {string} Next ID on the path from `ancestorID` to `destinationID`.
 * @private
 */
function getNextDescendantID(ancestorID, destinationID) {
  ("production" !== process.env.NODE_ENV ? invariant(
    isValidID(ancestorID) && isValidID(destinationID),
    'getNextDescendantID(%s, %s): Received an invalid React DOM ID.',
    ancestorID,
    destinationID
  ) : invariant(isValidID(ancestorID) && isValidID(destinationID)));
  ("production" !== process.env.NODE_ENV ? invariant(
    isAncestorIDOf(ancestorID, destinationID),
    'getNextDescendantID(...): React has made an invalid assumption about ' +
    'the DOM hierarchy. Expected `%s` to be an ancestor of `%s`.',
    ancestorID,
    destinationID
  ) : invariant(isAncestorIDOf(ancestorID, destinationID)));
  if (ancestorID === destinationID) {
    return ancestorID;
  }
  // Skip over the ancestor and the immediate separator. Traverse until we hit
  // another separator or we reach the end of `destinationID`.
  var start = ancestorID.length + SEPARATOR_LENGTH;
  for (var i = start; i < destinationID.length; i++) {
    if (isBoundary(destinationID, i)) {
      break;
    }
  }
  return destinationID.substr(0, i);
}

/**
 * Gets the nearest common ancestor ID of two IDs.
 *
 * Using this ID scheme, the nearest common ancestor ID is the longest common
 * prefix of the two IDs that immediately preceded a "marker" in both strings.
 *
 * @param {string} oneID
 * @param {string} twoID
 * @return {string} Nearest common ancestor ID, or the empty string if none.
 * @private
 */
function getFirstCommonAncestorID(oneID, twoID) {
  var minLength = Math.min(oneID.length, twoID.length);
  if (minLength === 0) {
    return '';
  }
  var lastCommonMarkerIndex = 0;
  // Use `<=` to traverse until the "EOL" of the shorter string.
  for (var i = 0; i <= minLength; i++) {
    if (isBoundary(oneID, i) && isBoundary(twoID, i)) {
      lastCommonMarkerIndex = i;
    } else if (oneID.charAt(i) !== twoID.charAt(i)) {
      break;
    }
  }
  var longestCommonID = oneID.substr(0, lastCommonMarkerIndex);
  ("production" !== process.env.NODE_ENV ? invariant(
    isValidID(longestCommonID),
    'getFirstCommonAncestorID(%s, %s): Expected a valid React DOM ID: %s',
    oneID,
    twoID,
    longestCommonID
  ) : invariant(isValidID(longestCommonID)));
  return longestCommonID;
}

/**
 * Traverses the parent path between two IDs (either up or down). The IDs must
 * not be the same, and there must exist a parent path between them. If the
 * callback returns `false`, traversal is stopped.
 *
 * @param {?string} start ID at which to start traversal.
 * @param {?string} stop ID at which to end traversal.
 * @param {function} cb Callback to invoke each ID with.
 * @param {?boolean} skipFirst Whether or not to skip the first node.
 * @param {?boolean} skipLast Whether or not to skip the last node.
 * @private
 */
function traverseParentPath(start, stop, cb, arg, skipFirst, skipLast) {
  start = start || '';
  stop = stop || '';
  ("production" !== process.env.NODE_ENV ? invariant(
    start !== stop,
    'traverseParentPath(...): Cannot traverse from and to the same ID, `%s`.',
    start
  ) : invariant(start !== stop));
  var traverseUp = isAncestorIDOf(stop, start);
  ("production" !== process.env.NODE_ENV ? invariant(
    traverseUp || isAncestorIDOf(start, stop),
    'traverseParentPath(%s, %s, ...): Cannot traverse from two IDs that do ' +
    'not have a parent path.',
    start,
    stop
  ) : invariant(traverseUp || isAncestorIDOf(start, stop)));
  // Traverse from `start` to `stop` one depth at a time.
  var depth = 0;
  var traverse = traverseUp ? getParentID : getNextDescendantID;
  for (var id = start; /* until break */; id = traverse(id, stop)) {
    var ret;
    if ((!skipFirst || id !== start) && (!skipLast || id !== stop)) {
      ret = cb(id, traverseUp, arg);
    }
    if (ret === false || id === stop) {
      // Only break //after// visiting `stop`.
      break;
    }
    ("production" !== process.env.NODE_ENV ? invariant(
      depth++ < MAX_TREE_DEPTH,
      'traverseParentPath(%s, %s, ...): Detected an infinite loop while ' +
      'traversing the React DOM ID tree. This may be due to malformed IDs: %s',
      start, stop
    ) : invariant(depth++ < MAX_TREE_DEPTH));
  }
}

/**
 * Manages the IDs assigned to DOM representations of React components. This
 * uses a specific scheme in order to traverse the DOM efficiently (e.g. in
 * order to simulate events).
 *
 * @internal
 */
var ReactInstanceHandles = {

  /**
   * Constructs a React root ID
   * @return {string} A React root ID.
   */
  createReactRootID: function() {
    return getReactRootIDString(ReactRootIndex.createReactRootIndex());
  },

  /**
   * Constructs a React ID by joining a root ID with a name.
   *
   * @param {string} rootID Root ID of a parent component.
   * @param {string} name A component's name (as flattened children).
   * @return {string} A React ID.
   * @internal
   */
  createReactID: function(rootID, name) {
    return rootID + name;
  },

  /**
   * Gets the DOM ID of the React component that is the root of the tree that
   * contains the React component with the supplied DOM ID.
   *
   * @param {string} id DOM ID of a React component.
   * @return {?string} DOM ID of the React component that is the root.
   * @internal
   */
  getReactRootIDFromNodeID: function(id) {
    if (id && id.charAt(0) === SEPARATOR && id.length > 1) {
      var index = id.indexOf(SEPARATOR, 1);
      return index > -1 ? id.substr(0, index) : id;
    }
    return null;
  },

  /**
   * Traverses the ID hierarchy and invokes the supplied `cb` on any IDs that
   * should would receive a `mouseEnter` or `mouseLeave` event.
   *
   * NOTE: Does not invoke the callback on the nearest common ancestor because
   * nothing "entered" or "left" that element.
   *
   * @param {string} leaveID ID being left.
   * @param {string} enterID ID being entered.
   * @param {function} cb Callback to invoke on each entered/left ID.
   * @param {*} upArg Argument to invoke the callback with on left IDs.
   * @param {*} downArg Argument to invoke the callback with on entered IDs.
   * @internal
   */
  traverseEnterLeave: function(leaveID, enterID, cb, upArg, downArg) {
    var ancestorID = getFirstCommonAncestorID(leaveID, enterID);
    if (ancestorID !== leaveID) {
      traverseParentPath(leaveID, ancestorID, cb, upArg, false, true);
    }
    if (ancestorID !== enterID) {
      traverseParentPath(ancestorID, enterID, cb, downArg, true, false);
    }
  },

  /**
   * Simulates the traversal of a two-phase, capture/bubble event dispatch.
   *
   * NOTE: This traversal happens on IDs without touching the DOM.
   *
   * @param {string} targetID ID of the target node.
   * @param {function} cb Callback to invoke.
   * @param {*} arg Argument to invoke the callback with.
   * @internal
   */
  traverseTwoPhase: function(targetID, cb, arg) {
    if (targetID) {
      traverseParentPath('', targetID, cb, arg, true, false);
      traverseParentPath(targetID, '', cb, arg, false, true);
    }
  },

  /**
   * Traverse a node ID, calling the supplied `cb` for each ancestor ID. For
   * example, passing `.0.$row-0.1` would result in `cb` getting called
   * with `.0`, `.0.$row-0`, and `.0.$row-0.1`.
   *
   * NOTE: This traversal happens on IDs without touching the DOM.
   *
   * @param {string} targetID ID of the target node.
   * @param {function} cb Callback to invoke.
   * @param {*} arg Argument to invoke the callback with.
   * @internal
   */
  traverseAncestors: function(targetID, cb, arg) {
    traverseParentPath('', targetID, cb, arg, true, false);
  },

  /**
   * Exposed for unit testing.
   * @private
   */
  _getFirstCommonAncestorID: getFirstCommonAncestorID,

  /**
   * Exposed for unit testing.
   * @private
   */
  _getNextDescendantID: getNextDescendantID,

  isAncestorIDOf: isAncestorIDOf,

  SEPARATOR: SEPARATOR

};

module.exports = ReactInstanceHandles;

}).call(this,require('_process'))

},{"./ReactRootIndex":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ReactRootIndex.js","./invariant":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/invariant.js","_process":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/browserify/node_modules/process/browser.js"}],"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ReactLegacyElement.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactLegacyElement
 */

"use strict";

var ReactCurrentOwner = require("./ReactCurrentOwner");

var invariant = require("./invariant");
var monitorCodeUse = require("./monitorCodeUse");
var warning = require("./warning");

var legacyFactoryLogs = {};
function warnForLegacyFactoryCall() {
  if (!ReactLegacyElementFactory._isLegacyCallWarningEnabled) {
    return;
  }
  var owner = ReactCurrentOwner.current;
  var name = owner && owner.constructor ? owner.constructor.displayName : '';
  if (!name) {
    name = 'Something';
  }
  if (legacyFactoryLogs.hasOwnProperty(name)) {
    return;
  }
  legacyFactoryLogs[name] = true;
  ("production" !== process.env.NODE_ENV ? warning(
    false,
    name + ' is calling a React component directly. ' +
    'Use a factory or JSX instead. See: http://fb.me/react-legacyfactory'
  ) : null);
  monitorCodeUse('react_legacy_factory_call', { version: 3, name: name });
}

function warnForPlainFunctionType(type) {
  var isReactClass =
    type.prototype &&
    typeof type.prototype.mountComponent === 'function' &&
    typeof type.prototype.receiveComponent === 'function';
  if (isReactClass) {
    ("production" !== process.env.NODE_ENV ? warning(
      false,
      'Did not expect to get a React class here. Use `Component` instead ' +
      'of `Component.type` or `this.constructor`.'
    ) : null);
  } else {
    if (!type._reactWarnedForThisType) {
      try {
        type._reactWarnedForThisType = true;
      } catch (x) {
        // just incase this is a frozen object or some special object
      }
      monitorCodeUse(
        'react_non_component_in_jsx',
        { version: 3, name: type.name }
      );
    }
    ("production" !== process.env.NODE_ENV ? warning(
      false,
      'This JSX uses a plain function. Only React components are ' +
      'valid in React\'s JSX transform.'
    ) : null);
  }
}

function warnForNonLegacyFactory(type) {
  ("production" !== process.env.NODE_ENV ? warning(
    false,
    'Do not pass React.DOM.' + type.type + ' to JSX or createFactory. ' +
    'Use the string "' + type.type + '" instead.'
  ) : null);
}

/**
 * Transfer static properties from the source to the target. Functions are
 * rebound to have this reflect the original source.
 */
function proxyStaticMethods(target, source) {
  if (typeof source !== 'function') {
    return;
  }
  for (var key in source) {
    if (source.hasOwnProperty(key)) {
      var value = source[key];
      if (typeof value === 'function') {
        var bound = value.bind(source);
        // Copy any properties defined on the function, such as `isRequired` on
        // a PropTypes validator.
        for (var k in value) {
          if (value.hasOwnProperty(k)) {
            bound[k] = value[k];
          }
        }
        target[key] = bound;
      } else {
        target[key] = value;
      }
    }
  }
}

// We use an object instead of a boolean because booleans are ignored by our
// mocking libraries when these factories gets mocked.
var LEGACY_MARKER = {};
var NON_LEGACY_MARKER = {};

var ReactLegacyElementFactory = {};

ReactLegacyElementFactory.wrapCreateFactory = function(createFactory) {
  var legacyCreateFactory = function(type) {
    if (typeof type !== 'function') {
      // Non-function types cannot be legacy factories
      return createFactory(type);
    }

    if (type.isReactNonLegacyFactory) {
      // This is probably a factory created by ReactDOM we unwrap it to get to
      // the underlying string type. It shouldn't have been passed here so we
      // warn.
      if ("production" !== process.env.NODE_ENV) {
        warnForNonLegacyFactory(type);
      }
      return createFactory(type.type);
    }

    if (type.isReactLegacyFactory) {
      // This is probably a legacy factory created by ReactCompositeComponent.
      // We unwrap it to get to the underlying class.
      return createFactory(type.type);
    }

    if ("production" !== process.env.NODE_ENV) {
      warnForPlainFunctionType(type);
    }

    // Unless it's a legacy factory, then this is probably a plain function,
    // that is expecting to be invoked by JSX. We can just return it as is.
    return type;
  };
  return legacyCreateFactory;
};

ReactLegacyElementFactory.wrapCreateElement = function(createElement) {
  var legacyCreateElement = function(type, props, children) {
    if (typeof type !== 'function') {
      // Non-function types cannot be legacy factories
      return createElement.apply(this, arguments);
    }

    var args;

    if (type.isReactNonLegacyFactory) {
      // This is probably a factory created by ReactDOM we unwrap it to get to
      // the underlying string type. It shouldn't have been passed here so we
      // warn.
      if ("production" !== process.env.NODE_ENV) {
        warnForNonLegacyFactory(type);
      }
      args = Array.prototype.slice.call(arguments, 0);
      args[0] = type.type;
      return createElement.apply(this, args);
    }

    if (type.isReactLegacyFactory) {
      // This is probably a legacy factory created by ReactCompositeComponent.
      // We unwrap it to get to the underlying class.
      if (type._isMockFunction) {
        // If this is a mock function, people will expect it to be called. We
        // will actually call the original mock factory function instead. This
        // future proofs unit testing that assume that these are classes.
        type.type._mockedReactClassConstructor = type;
      }
      args = Array.prototype.slice.call(arguments, 0);
      args[0] = type.type;
      return createElement.apply(this, args);
    }

    if ("production" !== process.env.NODE_ENV) {
      warnForPlainFunctionType(type);
    }

    // This is being called with a plain function we should invoke it
    // immediately as if this was used with legacy JSX.
    return type.apply(null, Array.prototype.slice.call(arguments, 1));
  };
  return legacyCreateElement;
};

ReactLegacyElementFactory.wrapFactory = function(factory) {
  ("production" !== process.env.NODE_ENV ? invariant(
    typeof factory === 'function',
    'This is suppose to accept a element factory'
  ) : invariant(typeof factory === 'function'));
  var legacyElementFactory = function(config, children) {
    // This factory should not be called when JSX is used. Use JSX instead.
    if ("production" !== process.env.NODE_ENV) {
      warnForLegacyFactoryCall();
    }
    return factory.apply(this, arguments);
  };
  proxyStaticMethods(legacyElementFactory, factory.type);
  legacyElementFactory.isReactLegacyFactory = LEGACY_MARKER;
  legacyElementFactory.type = factory.type;
  return legacyElementFactory;
};

// This is used to mark a factory that will remain. E.g. we're allowed to call
// it as a function. However, you're not suppose to pass it to createElement
// or createFactory, so it will warn you if you do.
ReactLegacyElementFactory.markNonLegacyFactory = function(factory) {
  factory.isReactNonLegacyFactory = NON_LEGACY_MARKER;
  return factory;
};

// Checks if a factory function is actually a legacy factory pretending to
// be a class.
ReactLegacyElementFactory.isValidFactory = function(factory) {
  // TODO: This will be removed and moved into a class validator or something.
  return typeof factory === 'function' &&
    factory.isReactLegacyFactory === LEGACY_MARKER;
};

ReactLegacyElementFactory.isValidClass = function(factory) {
  if ("production" !== process.env.NODE_ENV) {
    ("production" !== process.env.NODE_ENV ? warning(
      false,
      'isValidClass is deprecated and will be removed in a future release. ' +
      'Use a more specific validator instead.'
    ) : null);
  }
  return ReactLegacyElementFactory.isValidFactory(factory);
};

ReactLegacyElementFactory._isLegacyCallWarningEnabled = true;

module.exports = ReactLegacyElementFactory;

}).call(this,require('_process'))

},{"./ReactCurrentOwner":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ReactCurrentOwner.js","./invariant":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/invariant.js","./monitorCodeUse":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/monitorCodeUse.js","./warning":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/warning.js","_process":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/browserify/node_modules/process/browser.js"}],"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ReactLink.js":[function(require,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactLink
 * @typechecks static-only
 */

"use strict";

/**
 * ReactLink encapsulates a common pattern in which a component wants to modify
 * a prop received from its parent. ReactLink allows the parent to pass down a
 * value coupled with a callback that, when invoked, expresses an intent to
 * modify that value. For example:
 *
 * React.createClass({
 *   getInitialState: function() {
 *     return {value: ''};
 *   },
 *   render: function() {
 *     var valueLink = new ReactLink(this.state.value, this._handleValueChange);
 *     return <input valueLink={valueLink} />;
 *   },
 *   this._handleValueChange: function(newValue) {
 *     this.setState({value: newValue});
 *   }
 * });
 *
 * We have provided some sugary mixins to make the creation and
 * consumption of ReactLink easier; see LinkedValueUtils and LinkedStateMixin.
 */

var React = require("./React");

/**
 * @param {*} value current value of the link
 * @param {function} requestChange callback to request a change
 */
function ReactLink(value, requestChange) {
  this.value = value;
  this.requestChange = requestChange;
}

/**
 * Creates a PropType that enforces the ReactLink API and optionally checks the
 * type of the value being passed inside the link. Example:
 *
 * MyComponent.propTypes = {
 *   tabIndexLink: ReactLink.PropTypes.link(React.PropTypes.number)
 * }
 */
function createLinkTypeChecker(linkType) {
  var shapes = {
    value: typeof linkType === 'undefined' ?
      React.PropTypes.any.isRequired :
      linkType.isRequired,
    requestChange: React.PropTypes.func.isRequired
  };
  return React.PropTypes.shape(shapes);
}

ReactLink.PropTypes = {
  link: createLinkTypeChecker
};

module.exports = ReactLink;

},{"./React":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/React.js"}],"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ReactMarkupChecksum.js":[function(require,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactMarkupChecksum
 */

"use strict";

var adler32 = require("./adler32");

var ReactMarkupChecksum = {
  CHECKSUM_ATTR_NAME: 'data-react-checksum',

  /**
   * @param {string} markup Markup string
   * @return {string} Markup string with checksum attribute attached
   */
  addChecksumToMarkup: function(markup) {
    var checksum = adler32(markup);
    return markup.replace(
      '>',
      ' ' + ReactMarkupChecksum.CHECKSUM_ATTR_NAME + '="' + checksum + '">'
    );
  },

  /**
   * @param {string} markup to use
   * @param {DOMElement} element root React element
   * @returns {boolean} whether or not the markup is the same
   */
  canReuseMarkup: function(markup, element) {
    var existingChecksum = element.getAttribute(
      ReactMarkupChecksum.CHECKSUM_ATTR_NAME
    );
    existingChecksum = existingChecksum && parseInt(existingChecksum, 10);
    var markupChecksum = adler32(markup);
    return markupChecksum === existingChecksum;
  }
};

module.exports = ReactMarkupChecksum;

},{"./adler32":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/adler32.js"}],"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ReactMount.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactMount
 */

"use strict";

var DOMProperty = require("./DOMProperty");
var ReactBrowserEventEmitter = require("./ReactBrowserEventEmitter");
var ReactCurrentOwner = require("./ReactCurrentOwner");
var ReactElement = require("./ReactElement");
var ReactLegacyElement = require("./ReactLegacyElement");
var ReactInstanceHandles = require("./ReactInstanceHandles");
var ReactPerf = require("./ReactPerf");

var containsNode = require("./containsNode");
var deprecated = require("./deprecated");
var getReactRootElementInContainer = require("./getReactRootElementInContainer");
var instantiateReactComponent = require("./instantiateReactComponent");
var invariant = require("./invariant");
var shouldUpdateReactComponent = require("./shouldUpdateReactComponent");
var warning = require("./warning");

var createElement = ReactLegacyElement.wrapCreateElement(
  ReactElement.createElement
);

var SEPARATOR = ReactInstanceHandles.SEPARATOR;

var ATTR_NAME = DOMProperty.ID_ATTRIBUTE_NAME;
var nodeCache = {};

var ELEMENT_NODE_TYPE = 1;
var DOC_NODE_TYPE = 9;

/** Mapping from reactRootID to React component instance. */
var instancesByReactRootID = {};

/** Mapping from reactRootID to `container` nodes. */
var containersByReactRootID = {};

if ("production" !== process.env.NODE_ENV) {
  /** __DEV__-only mapping from reactRootID to root elements. */
  var rootElementsByReactRootID = {};
}

// Used to store breadth-first search state in findComponentRoot.
var findComponentRootReusableArray = [];

/**
 * @param {DOMElement} container DOM element that may contain a React component.
 * @return {?string} A "reactRoot" ID, if a React component is rendered.
 */
function getReactRootID(container) {
  var rootElement = getReactRootElementInContainer(container);
  return rootElement && ReactMount.getID(rootElement);
}

/**
 * Accessing node[ATTR_NAME] or calling getAttribute(ATTR_NAME) on a form
 * element can return its control whose name or ID equals ATTR_NAME. All
 * DOM nodes support `getAttributeNode` but this can also get called on
 * other objects so just return '' if we're given something other than a
 * DOM node (such as window).
 *
 * @param {?DOMElement|DOMWindow|DOMDocument|DOMTextNode} node DOM node.
 * @return {string} ID of the supplied `domNode`.
 */
function getID(node) {
  var id = internalGetID(node);
  if (id) {
    if (nodeCache.hasOwnProperty(id)) {
      var cached = nodeCache[id];
      if (cached !== node) {
        ("production" !== process.env.NODE_ENV ? invariant(
          !isValid(cached, id),
          'ReactMount: Two valid but unequal nodes with the same `%s`: %s',
          ATTR_NAME, id
        ) : invariant(!isValid(cached, id)));

        nodeCache[id] = node;
      }
    } else {
      nodeCache[id] = node;
    }
  }

  return id;
}

function internalGetID(node) {
  // If node is something like a window, document, or text node, none of
  // which support attributes or a .getAttribute method, gracefully return
  // the empty string, as if the attribute were missing.
  return node && node.getAttribute && node.getAttribute(ATTR_NAME) || '';
}

/**
 * Sets the React-specific ID of the given node.
 *
 * @param {DOMElement} node The DOM node whose ID will be set.
 * @param {string} id The value of the ID attribute.
 */
function setID(node, id) {
  var oldID = internalGetID(node);
  if (oldID !== id) {
    delete nodeCache[oldID];
  }
  node.setAttribute(ATTR_NAME, id);
  nodeCache[id] = node;
}

/**
 * Finds the node with the supplied React-generated DOM ID.
 *
 * @param {string} id A React-generated DOM ID.
 * @return {DOMElement} DOM node with the suppled `id`.
 * @internal
 */
function getNode(id) {
  if (!nodeCache.hasOwnProperty(id) || !isValid(nodeCache[id], id)) {
    nodeCache[id] = ReactMount.findReactNodeByID(id);
  }
  return nodeCache[id];
}

/**
 * A node is "valid" if it is contained by a currently mounted container.
 *
 * This means that the node does not have to be contained by a document in
 * order to be considered valid.
 *
 * @param {?DOMElement} node The candidate DOM node.
 * @param {string} id The expected ID of the node.
 * @return {boolean} Whether the node is contained by a mounted container.
 */
function isValid(node, id) {
  if (node) {
    ("production" !== process.env.NODE_ENV ? invariant(
      internalGetID(node) === id,
      'ReactMount: Unexpected modification of `%s`',
      ATTR_NAME
    ) : invariant(internalGetID(node) === id));

    var container = ReactMount.findReactContainerForID(id);
    if (container && containsNode(container, node)) {
      return true;
    }
  }

  return false;
}

/**
 * Causes the cache to forget about one React-specific ID.
 *
 * @param {string} id The ID to forget.
 */
function purgeID(id) {
  delete nodeCache[id];
}

var deepestNodeSoFar = null;
function findDeepestCachedAncestorImpl(ancestorID) {
  var ancestor = nodeCache[ancestorID];
  if (ancestor && isValid(ancestor, ancestorID)) {
    deepestNodeSoFar = ancestor;
  } else {
    // This node isn't populated in the cache, so presumably none of its
    // descendants are. Break out of the loop.
    return false;
  }
}

/**
 * Return the deepest cached node whose ID is a prefix of `targetID`.
 */
function findDeepestCachedAncestor(targetID) {
  deepestNodeSoFar = null;
  ReactInstanceHandles.traverseAncestors(
    targetID,
    findDeepestCachedAncestorImpl
  );

  var foundNode = deepestNodeSoFar;
  deepestNodeSoFar = null;
  return foundNode;
}

/**
 * Mounting is the process of initializing a React component by creatings its
 * representative DOM elements and inserting them into a supplied `container`.
 * Any prior content inside `container` is destroyed in the process.
 *
 *   ReactMount.render(
 *     component,
 *     document.getElementById('container')
 *   );
 *
 *   <div id="container">                   <-- Supplied `container`.
 *     <div data-reactid=".3">              <-- Rendered reactRoot of React
 *       // ...                                 component.
 *     </div>
 *   </div>
 *
 * Inside of `container`, the first element rendered is the "reactRoot".
 */
var ReactMount = {
  /** Exposed for debugging purposes **/
  _instancesByReactRootID: instancesByReactRootID,

  /**
   * This is a hook provided to support rendering React components while
   * ensuring that the apparent scroll position of its `container` does not
   * change.
   *
   * @param {DOMElement} container The `container` being rendered into.
   * @param {function} renderCallback This must be called once to do the render.
   */
  scrollMonitor: function(container, renderCallback) {
    renderCallback();
  },

  /**
   * Take a component that's already mounted into the DOM and replace its props
   * @param {ReactComponent} prevComponent component instance already in the DOM
   * @param {ReactComponent} nextComponent component instance to render
   * @param {DOMElement} container container to render into
   * @param {?function} callback function triggered on completion
   */
  _updateRootComponent: function(
      prevComponent,
      nextComponent,
      container,
      callback) {
    var nextProps = nextComponent.props;
    ReactMount.scrollMonitor(container, function() {
      prevComponent.replaceProps(nextProps, callback);
    });

    if ("production" !== process.env.NODE_ENV) {
      // Record the root element in case it later gets transplanted.
      rootElementsByReactRootID[getReactRootID(container)] =
        getReactRootElementInContainer(container);
    }

    return prevComponent;
  },

  /**
   * Register a component into the instance map and starts scroll value
   * monitoring
   * @param {ReactComponent} nextComponent component instance to render
   * @param {DOMElement} container container to render into
   * @return {string} reactRoot ID prefix
   */
  _registerComponent: function(nextComponent, container) {
    ("production" !== process.env.NODE_ENV ? invariant(
      container && (
        container.nodeType === ELEMENT_NODE_TYPE ||
        container.nodeType === DOC_NODE_TYPE
      ),
      '_registerComponent(...): Target container is not a DOM element.'
    ) : invariant(container && (
      container.nodeType === ELEMENT_NODE_TYPE ||
      container.nodeType === DOC_NODE_TYPE
    )));

    ReactBrowserEventEmitter.ensureScrollValueMonitoring();

    var reactRootID = ReactMount.registerContainer(container);
    instancesByReactRootID[reactRootID] = nextComponent;
    return reactRootID;
  },

  /**
   * Render a new component into the DOM.
   * @param {ReactComponent} nextComponent component instance to render
   * @param {DOMElement} container container to render into
   * @param {boolean} shouldReuseMarkup if we should skip the markup insertion
   * @return {ReactComponent} nextComponent
   */
  _renderNewRootComponent: ReactPerf.measure(
    'ReactMount',
    '_renderNewRootComponent',
    function(
        nextComponent,
        container,
        shouldReuseMarkup) {
      // Various parts of our code (such as ReactCompositeComponent's
      // _renderValidatedComponent) assume that calls to render aren't nested;
      // verify that that's the case.
      ("production" !== process.env.NODE_ENV ? warning(
        ReactCurrentOwner.current == null,
        '_renderNewRootComponent(): Render methods should be a pure function ' +
        'of props and state; triggering nested component updates from ' +
        'render is not allowed. If necessary, trigger nested updates in ' +
        'componentDidUpdate.'
      ) : null);

      var componentInstance = instantiateReactComponent(nextComponent, null);
      var reactRootID = ReactMount._registerComponent(
        componentInstance,
        container
      );
      componentInstance.mountComponentIntoNode(
        reactRootID,
        container,
        shouldReuseMarkup
      );

      if ("production" !== process.env.NODE_ENV) {
        // Record the root element in case it later gets transplanted.
        rootElementsByReactRootID[reactRootID] =
          getReactRootElementInContainer(container);
      }

      return componentInstance;
    }
  ),

  /**
   * Renders a React component into the DOM in the supplied `container`.
   *
   * If the React component was previously rendered into `container`, this will
   * perform an update on it and only mutate the DOM as necessary to reflect the
   * latest React component.
   *
   * @param {ReactElement} nextElement Component element to render.
   * @param {DOMElement} container DOM element to render into.
   * @param {?function} callback function triggered on completion
   * @return {ReactComponent} Component instance rendered in `container`.
   */
  render: function(nextElement, container, callback) {
    ("production" !== process.env.NODE_ENV ? invariant(
      ReactElement.isValidElement(nextElement),
      'renderComponent(): Invalid component element.%s',
      (
        typeof nextElement === 'string' ?
          ' Instead of passing an element string, make sure to instantiate ' +
          'it by passing it to React.createElement.' :
        ReactLegacyElement.isValidFactory(nextElement) ?
          ' Instead of passing a component class, make sure to instantiate ' +
          'it by passing it to React.createElement.' :
        // Check if it quacks like a element
        typeof nextElement.props !== "undefined" ?
          ' This may be caused by unintentionally loading two independent ' +
          'copies of React.' :
          ''
      )
    ) : invariant(ReactElement.isValidElement(nextElement)));

    var prevComponent = instancesByReactRootID[getReactRootID(container)];

    if (prevComponent) {
      var prevElement = prevComponent._currentElement;
      if (shouldUpdateReactComponent(prevElement, nextElement)) {
        return ReactMount._updateRootComponent(
          prevComponent,
          nextElement,
          container,
          callback
        );
      } else {
        ReactMount.unmountComponentAtNode(container);
      }
    }

    var reactRootElement = getReactRootElementInContainer(container);
    var containerHasReactMarkup =
      reactRootElement && ReactMount.isRenderedByReact(reactRootElement);

    var shouldReuseMarkup = containerHasReactMarkup && !prevComponent;

    var component = ReactMount._renderNewRootComponent(
      nextElement,
      container,
      shouldReuseMarkup
    );
    callback && callback.call(component);
    return component;
  },

  /**
   * Constructs a component instance of `constructor` with `initialProps` and
   * renders it into the supplied `container`.
   *
   * @param {function} constructor React component constructor.
   * @param {?object} props Initial props of the component instance.
   * @param {DOMElement} container DOM element to render into.
   * @return {ReactComponent} Component instance rendered in `container`.
   */
  constructAndRenderComponent: function(constructor, props, container) {
    var element = createElement(constructor, props);
    return ReactMount.render(element, container);
  },

  /**
   * Constructs a component instance of `constructor` with `initialProps` and
   * renders it into a container node identified by supplied `id`.
   *
   * @param {function} componentConstructor React component constructor
   * @param {?object} props Initial props of the component instance.
   * @param {string} id ID of the DOM element to render into.
   * @return {ReactComponent} Component instance rendered in the container node.
   */
  constructAndRenderComponentByID: function(constructor, props, id) {
    var domNode = document.getElementById(id);
    ("production" !== process.env.NODE_ENV ? invariant(
      domNode,
      'Tried to get element with id of "%s" but it is not present on the page.',
      id
    ) : invariant(domNode));
    return ReactMount.constructAndRenderComponent(constructor, props, domNode);
  },

  /**
   * Registers a container node into which React components will be rendered.
   * This also creates the "reactRoot" ID that will be assigned to the element
   * rendered within.
   *
   * @param {DOMElement} container DOM element to register as a container.
   * @return {string} The "reactRoot" ID of elements rendered within.
   */
  registerContainer: function(container) {
    var reactRootID = getReactRootID(container);
    if (reactRootID) {
      // If one exists, make sure it is a valid "reactRoot" ID.
      reactRootID = ReactInstanceHandles.getReactRootIDFromNodeID(reactRootID);
    }
    if (!reactRootID) {
      // No valid "reactRoot" ID found, create one.
      reactRootID = ReactInstanceHandles.createReactRootID();
    }
    containersByReactRootID[reactRootID] = container;
    return reactRootID;
  },

  /**
   * Unmounts and destroys the React component rendered in the `container`.
   *
   * @param {DOMElement} container DOM element containing a React component.
   * @return {boolean} True if a component was found in and unmounted from
   *                   `container`
   */
  unmountComponentAtNode: function(container) {
    // Various parts of our code (such as ReactCompositeComponent's
    // _renderValidatedComponent) assume that calls to render aren't nested;
    // verify that that's the case. (Strictly speaking, unmounting won't cause a
    // render but we still don't expect to be in a render call here.)
    ("production" !== process.env.NODE_ENV ? warning(
      ReactCurrentOwner.current == null,
      'unmountComponentAtNode(): Render methods should be a pure function of ' +
      'props and state; triggering nested component updates from render is ' +
      'not allowed. If necessary, trigger nested updates in ' +
      'componentDidUpdate.'
    ) : null);

    var reactRootID = getReactRootID(container);
    var component = instancesByReactRootID[reactRootID];
    if (!component) {
      return false;
    }
    ReactMount.unmountComponentFromNode(component, container);
    delete instancesByReactRootID[reactRootID];
    delete containersByReactRootID[reactRootID];
    if ("production" !== process.env.NODE_ENV) {
      delete rootElementsByReactRootID[reactRootID];
    }
    return true;
  },

  /**
   * Unmounts a component and removes it from the DOM.
   *
   * @param {ReactComponent} instance React component instance.
   * @param {DOMElement} container DOM element to unmount from.
   * @final
   * @internal
   * @see {ReactMount.unmountComponentAtNode}
   */
  unmountComponentFromNode: function(instance, container) {
    instance.unmountComponent();

    if (container.nodeType === DOC_NODE_TYPE) {
      container = container.documentElement;
    }

    // http://jsperf.com/emptying-a-node
    while (container.lastChild) {
      container.removeChild(container.lastChild);
    }
  },

  /**
   * Finds the container DOM element that contains React component to which the
   * supplied DOM `id` belongs.
   *
   * @param {string} id The ID of an element rendered by a React component.
   * @return {?DOMElement} DOM element that contains the `id`.
   */
  findReactContainerForID: function(id) {
    var reactRootID = ReactInstanceHandles.getReactRootIDFromNodeID(id);
    var container = containersByReactRootID[reactRootID];

    if ("production" !== process.env.NODE_ENV) {
      var rootElement = rootElementsByReactRootID[reactRootID];
      if (rootElement && rootElement.parentNode !== container) {
        ("production" !== process.env.NODE_ENV ? invariant(
          // Call internalGetID here because getID calls isValid which calls
          // findReactContainerForID (this function).
          internalGetID(rootElement) === reactRootID,
          'ReactMount: Root element ID differed from reactRootID.'
        ) : invariant(// Call internalGetID here because getID calls isValid which calls
        // findReactContainerForID (this function).
        internalGetID(rootElement) === reactRootID));

        var containerChild = container.firstChild;
        if (containerChild &&
            reactRootID === internalGetID(containerChild)) {
          // If the container has a new child with the same ID as the old
          // root element, then rootElementsByReactRootID[reactRootID] is
          // just stale and needs to be updated. The case that deserves a
          // warning is when the container is empty.
          rootElementsByReactRootID[reactRootID] = containerChild;
        } else {
          console.warn(
            'ReactMount: Root element has been removed from its original ' +
            'container. New container:', rootElement.parentNode
          );
        }
      }
    }

    return container;
  },

  /**
   * Finds an element rendered by React with the supplied ID.
   *
   * @param {string} id ID of a DOM node in the React component.
   * @return {DOMElement} Root DOM node of the React component.
   */
  findReactNodeByID: function(id) {
    var reactRoot = ReactMount.findReactContainerForID(id);
    return ReactMount.findComponentRoot(reactRoot, id);
  },

  /**
   * True if the supplied `node` is rendered by React.
   *
   * @param {*} node DOM Element to check.
   * @return {boolean} True if the DOM Element appears to be rendered by React.
   * @internal
   */
  isRenderedByReact: function(node) {
    if (node.nodeType !== 1) {
      // Not a DOMElement, therefore not a React component
      return false;
    }
    var id = ReactMount.getID(node);
    return id ? id.charAt(0) === SEPARATOR : false;
  },

  /**
   * Traverses up the ancestors of the supplied node to find a node that is a
   * DOM representation of a React component.
   *
   * @param {*} node
   * @return {?DOMEventTarget}
   * @internal
   */
  getFirstReactDOM: function(node) {
    var current = node;
    while (current && current.parentNode !== current) {
      if (ReactMount.isRenderedByReact(current)) {
        return current;
      }
      current = current.parentNode;
    }
    return null;
  },

  /**
   * Finds a node with the supplied `targetID` inside of the supplied
   * `ancestorNode`.  Exploits the ID naming scheme to perform the search
   * quickly.
   *
   * @param {DOMEventTarget} ancestorNode Search from this root.
   * @pararm {string} targetID ID of the DOM representation of the component.
   * @return {DOMEventTarget} DOM node with the supplied `targetID`.
   * @internal
   */
  findComponentRoot: function(ancestorNode, targetID) {
    var firstChildren = findComponentRootReusableArray;
    var childIndex = 0;

    var deepestAncestor = findDeepestCachedAncestor(targetID) || ancestorNode;

    firstChildren[0] = deepestAncestor.firstChild;
    firstChildren.length = 1;

    while (childIndex < firstChildren.length) {
      var child = firstChildren[childIndex++];
      var targetChild;

      while (child) {
        var childID = ReactMount.getID(child);
        if (childID) {
          // Even if we find the node we're looking for, we finish looping
          // through its siblings to ensure they're cached so that we don't have
          // to revisit this node again. Otherwise, we make n^2 calls to getID
          // when visiting the many children of a single node in order.

          if (targetID === childID) {
            targetChild = child;
          } else if (ReactInstanceHandles.isAncestorIDOf(childID, targetID)) {
            // If we find a child whose ID is an ancestor of the given ID,
            // then we can be sure that we only want to search the subtree
            // rooted at this child, so we can throw out the rest of the
            // search state.
            firstChildren.length = childIndex = 0;
            firstChildren.push(child.firstChild);
          }

        } else {
          // If this child had no ID, then there's a chance that it was
          // injected automatically by the browser, as when a `<table>`
          // element sprouts an extra `<tbody>` child as a side effect of
          // `.innerHTML` parsing. Optimistically continue down this
          // branch, but not before examining the other siblings.
          firstChildren.push(child.firstChild);
        }

        child = child.nextSibling;
      }

      if (targetChild) {
        // Emptying firstChildren/findComponentRootReusableArray is
        // not necessary for correctness, but it helps the GC reclaim
        // any nodes that were left at the end of the search.
        firstChildren.length = 0;

        return targetChild;
      }
    }

    firstChildren.length = 0;

    ("production" !== process.env.NODE_ENV ? invariant(
      false,
      'findComponentRoot(..., %s): Unable to find element. This probably ' +
      'means the DOM was unexpectedly mutated (e.g., by the browser), ' +
      'usually due to forgetting a <tbody> when using tables, nesting tags ' +
      'like <form>, <p>, or <a>, or using non-SVG elements in an <svg> ' +
      'parent. ' +
      'Try inspecting the child nodes of the element with React ID `%s`.',
      targetID,
      ReactMount.getID(ancestorNode)
    ) : invariant(false));
  },


  /**
   * React ID utilities.
   */

  getReactRootID: getReactRootID,

  getID: getID,

  setID: setID,

  getNode: getNode,

  purgeID: purgeID
};

// Deprecations (remove for 0.13)
ReactMount.renderComponent = deprecated(
  'ReactMount',
  'renderComponent',
  'render',
  this,
  ReactMount.render
);

module.exports = ReactMount;

}).call(this,require('_process'))

},{"./DOMProperty":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/DOMProperty.js","./ReactBrowserEventEmitter":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ReactBrowserEventEmitter.js","./ReactCurrentOwner":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ReactCurrentOwner.js","./ReactElement":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ReactElement.js","./ReactInstanceHandles":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ReactInstanceHandles.js","./ReactLegacyElement":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ReactLegacyElement.js","./ReactPerf":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ReactPerf.js","./containsNode":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/containsNode.js","./deprecated":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/deprecated.js","./getReactRootElementInContainer":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/getReactRootElementInContainer.js","./instantiateReactComponent":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/instantiateReactComponent.js","./invariant":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/invariant.js","./shouldUpdateReactComponent":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/shouldUpdateReactComponent.js","./warning":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/warning.js","_process":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/browserify/node_modules/process/browser.js"}],"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ReactMultiChild.js":[function(require,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactMultiChild
 * @typechecks static-only
 */

"use strict";

var ReactComponent = require("./ReactComponent");
var ReactMultiChildUpdateTypes = require("./ReactMultiChildUpdateTypes");

var flattenChildren = require("./flattenChildren");
var instantiateReactComponent = require("./instantiateReactComponent");
var shouldUpdateReactComponent = require("./shouldUpdateReactComponent");

/**
 * Updating children of a component may trigger recursive updates. The depth is
 * used to batch recursive updates to render markup more efficiently.
 *
 * @type {number}
 * @private
 */
var updateDepth = 0;

/**
 * Queue of update configuration objects.
 *
 * Each object has a `type` property that is in `ReactMultiChildUpdateTypes`.
 *
 * @type {array<object>}
 * @private
 */
var updateQueue = [];

/**
 * Queue of markup to be rendered.
 *
 * @type {array<string>}
 * @private
 */
var markupQueue = [];

/**
 * Enqueues markup to be rendered and inserted at a supplied index.
 *
 * @param {string} parentID ID of the parent component.
 * @param {string} markup Markup that renders into an element.
 * @param {number} toIndex Destination index.
 * @private
 */
function enqueueMarkup(parentID, markup, toIndex) {
  // NOTE: Null values reduce hidden classes.
  updateQueue.push({
    parentID: parentID,
    parentNode: null,
    type: ReactMultiChildUpdateTypes.INSERT_MARKUP,
    markupIndex: markupQueue.push(markup) - 1,
    textContent: null,
    fromIndex: null,
    toIndex: toIndex
  });
}

/**
 * Enqueues moving an existing element to another index.
 *
 * @param {string} parentID ID of the parent component.
 * @param {number} fromIndex Source index of the existing element.
 * @param {number} toIndex Destination index of the element.
 * @private
 */
function enqueueMove(parentID, fromIndex, toIndex) {
  // NOTE: Null values reduce hidden classes.
  updateQueue.push({
    parentID: parentID,
    parentNode: null,
    type: ReactMultiChildUpdateTypes.MOVE_EXISTING,
    markupIndex: null,
    textContent: null,
    fromIndex: fromIndex,
    toIndex: toIndex
  });
}

/**
 * Enqueues removing an element at an index.
 *
 * @param {string} parentID ID of the parent component.
 * @param {number} fromIndex Index of the element to remove.
 * @private
 */
function enqueueRemove(parentID, fromIndex) {
  // NOTE: Null values reduce hidden classes.
  updateQueue.push({
    parentID: parentID,
    parentNode: null,
    type: ReactMultiChildUpdateTypes.REMOVE_NODE,
    markupIndex: null,
    textContent: null,
    fromIndex: fromIndex,
    toIndex: null
  });
}

/**
 * Enqueues setting the text content.
 *
 * @param {string} parentID ID of the parent component.
 * @param {string} textContent Text content to set.
 * @private
 */
function enqueueTextContent(parentID, textContent) {
  // NOTE: Null values reduce hidden classes.
  updateQueue.push({
    parentID: parentID,
    parentNode: null,
    type: ReactMultiChildUpdateTypes.TEXT_CONTENT,
    markupIndex: null,
    textContent: textContent,
    fromIndex: null,
    toIndex: null
  });
}

/**
 * Processes any enqueued updates.
 *
 * @private
 */
function processQueue() {
  if (updateQueue.length) {
    ReactComponent.BackendIDOperations.dangerouslyProcessChildrenUpdates(
      updateQueue,
      markupQueue
    );
    clearQueue();
  }
}

/**
 * Clears any enqueued updates.
 *
 * @private
 */
function clearQueue() {
  updateQueue.length = 0;
  markupQueue.length = 0;
}

/**
 * ReactMultiChild are capable of reconciling multiple children.
 *
 * @class ReactMultiChild
 * @internal
 */
var ReactMultiChild = {

  /**
   * Provides common functionality for components that must reconcile multiple
   * children. This is used by `ReactDOMComponent` to mount, update, and
   * unmount child components.
   *
   * @lends {ReactMultiChild.prototype}
   */
  Mixin: {

    /**
     * Generates a "mount image" for each of the supplied children. In the case
     * of `ReactDOMComponent`, a mount image is a string of markup.
     *
     * @param {?object} nestedChildren Nested child maps.
     * @return {array} An array of mounted representations.
     * @internal
     */
    mountChildren: function(nestedChildren, transaction) {
      var children = flattenChildren(nestedChildren);
      var mountImages = [];
      var index = 0;
      this._renderedChildren = children;
      for (var name in children) {
        var child = children[name];
        if (children.hasOwnProperty(name)) {
          // The rendered children must be turned into instances as they're
          // mounted.
          var childInstance = instantiateReactComponent(child, null);
          children[name] = childInstance;
          // Inlined for performance, see `ReactInstanceHandles.createReactID`.
          var rootID = this._rootNodeID + name;
          var mountImage = childInstance.mountComponent(
            rootID,
            transaction,
            this._mountDepth + 1
          );
          childInstance._mountIndex = index;
          mountImages.push(mountImage);
          index++;
        }
      }
      return mountImages;
    },

    /**
     * Replaces any rendered children with a text content string.
     *
     * @param {string} nextContent String of content.
     * @internal
     */
    updateTextContent: function(nextContent) {
      updateDepth++;
      var errorThrown = true;
      try {
        var prevChildren = this._renderedChildren;
        // Remove any rendered children.
        for (var name in prevChildren) {
          if (prevChildren.hasOwnProperty(name)) {
            this._unmountChildByName(prevChildren[name], name);
          }
        }
        // Set new text content.
        this.setTextContent(nextContent);
        errorThrown = false;
      } finally {
        updateDepth--;
        if (!updateDepth) {
          errorThrown ? clearQueue() : processQueue();
        }
      }
    },

    /**
     * Updates the rendered children with new children.
     *
     * @param {?object} nextNestedChildren Nested child maps.
     * @param {ReactReconcileTransaction} transaction
     * @internal
     */
    updateChildren: function(nextNestedChildren, transaction) {
      updateDepth++;
      var errorThrown = true;
      try {
        this._updateChildren(nextNestedChildren, transaction);
        errorThrown = false;
      } finally {
        updateDepth--;
        if (!updateDepth) {
          errorThrown ? clearQueue() : processQueue();
        }
      }
    },

    /**
     * Improve performance by isolating this hot code path from the try/catch
     * block in `updateChildren`.
     *
     * @param {?object} nextNestedChildren Nested child maps.
     * @param {ReactReconcileTransaction} transaction
     * @final
     * @protected
     */
    _updateChildren: function(nextNestedChildren, transaction) {
      var nextChildren = flattenChildren(nextNestedChildren);
      var prevChildren = this._renderedChildren;
      if (!nextChildren && !prevChildren) {
        return;
      }
      var name;
      // `nextIndex` will increment for each child in `nextChildren`, but
      // `lastIndex` will be the last index visited in `prevChildren`.
      var lastIndex = 0;
      var nextIndex = 0;
      for (name in nextChildren) {
        if (!nextChildren.hasOwnProperty(name)) {
          continue;
        }
        var prevChild = prevChildren && prevChildren[name];
        var prevElement = prevChild && prevChild._currentElement;
        var nextElement = nextChildren[name];
        if (shouldUpdateReactComponent(prevElement, nextElement)) {
          this.moveChild(prevChild, nextIndex, lastIndex);
          lastIndex = Math.max(prevChild._mountIndex, lastIndex);
          prevChild.receiveComponent(nextElement, transaction);
          prevChild._mountIndex = nextIndex;
        } else {
          if (prevChild) {
            // Update `lastIndex` before `_mountIndex` gets unset by unmounting.
            lastIndex = Math.max(prevChild._mountIndex, lastIndex);
            this._unmountChildByName(prevChild, name);
          }
          // The child must be instantiated before it's mounted.
          var nextChildInstance = instantiateReactComponent(
            nextElement,
            null
          );
          this._mountChildByNameAtIndex(
            nextChildInstance, name, nextIndex, transaction
          );
        }
        nextIndex++;
      }
      // Remove children that are no longer present.
      for (name in prevChildren) {
        if (prevChildren.hasOwnProperty(name) &&
            !(nextChildren && nextChildren[name])) {
          this._unmountChildByName(prevChildren[name], name);
        }
      }
    },

    /**
     * Unmounts all rendered children. This should be used to clean up children
     * when this component is unmounted.
     *
     * @internal
     */
    unmountChildren: function() {
      var renderedChildren = this._renderedChildren;
      for (var name in renderedChildren) {
        var renderedChild = renderedChildren[name];
        // TODO: When is this not true?
        if (renderedChild.unmountComponent) {
          renderedChild.unmountComponent();
        }
      }
      this._renderedChildren = null;
    },

    /**
     * Moves a child component to the supplied index.
     *
     * @param {ReactComponent} child Component to move.
     * @param {number} toIndex Destination index of the element.
     * @param {number} lastIndex Last index visited of the siblings of `child`.
     * @protected
     */
    moveChild: function(child, toIndex, lastIndex) {
      // If the index of `child` is less than `lastIndex`, then it needs to
      // be moved. Otherwise, we do not need to move it because a child will be
      // inserted or moved before `child`.
      if (child._mountIndex < lastIndex) {
        enqueueMove(this._rootNodeID, child._mountIndex, toIndex);
      }
    },

    /**
     * Creates a child component.
     *
     * @param {ReactComponent} child Component to create.
     * @param {string} mountImage Markup to insert.
     * @protected
     */
    createChild: function(child, mountImage) {
      enqueueMarkup(this._rootNodeID, mountImage, child._mountIndex);
    },

    /**
     * Removes a child component.
     *
     * @param {ReactComponent} child Child to remove.
     * @protected
     */
    removeChild: function(child) {
      enqueueRemove(this._rootNodeID, child._mountIndex);
    },

    /**
     * Sets this text content string.
     *
     * @param {string} textContent Text content to set.
     * @protected
     */
    setTextContent: function(textContent) {
      enqueueTextContent(this._rootNodeID, textContent);
    },

    /**
     * Mounts a child with the supplied name.
     *
     * NOTE: This is part of `updateChildren` and is here for readability.
     *
     * @param {ReactComponent} child Component to mount.
     * @param {string} name Name of the child.
     * @param {number} index Index at which to insert the child.
     * @param {ReactReconcileTransaction} transaction
     * @private
     */
    _mountChildByNameAtIndex: function(child, name, index, transaction) {
      // Inlined for performance, see `ReactInstanceHandles.createReactID`.
      var rootID = this._rootNodeID + name;
      var mountImage = child.mountComponent(
        rootID,
        transaction,
        this._mountDepth + 1
      );
      child._mountIndex = index;
      this.createChild(child, mountImage);
      this._renderedChildren = this._renderedChildren || {};
      this._renderedChildren[name] = child;
    },

    /**
     * Unmounts a rendered child by name.
     *
     * NOTE: This is part of `updateChildren` and is here for readability.
     *
     * @param {ReactComponent} child Component to unmount.
     * @param {string} name Name of the child in `this._renderedChildren`.
     * @private
     */
    _unmountChildByName: function(child, name) {
      this.removeChild(child);
      child._mountIndex = null;
      child.unmountComponent();
      delete this._renderedChildren[name];
    }

  }

};

module.exports = ReactMultiChild;

},{"./ReactComponent":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ReactComponent.js","./ReactMultiChildUpdateTypes":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ReactMultiChildUpdateTypes.js","./flattenChildren":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/flattenChildren.js","./instantiateReactComponent":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/instantiateReactComponent.js","./shouldUpdateReactComponent":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/shouldUpdateReactComponent.js"}],"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ReactMultiChildUpdateTypes.js":[function(require,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactMultiChildUpdateTypes
 */

"use strict";

var keyMirror = require("./keyMirror");

/**
 * When a component's children are updated, a series of update configuration
 * objects are created in order to batch and serialize the required changes.
 *
 * Enumerates all the possible types of update configurations.
 *
 * @internal
 */
var ReactMultiChildUpdateTypes = keyMirror({
  INSERT_MARKUP: null,
  MOVE_EXISTING: null,
  REMOVE_NODE: null,
  TEXT_CONTENT: null
});

module.exports = ReactMultiChildUpdateTypes;

},{"./keyMirror":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/keyMirror.js"}],"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ReactNativeComponent.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactNativeComponent
 */

"use strict";

var assign = require("./Object.assign");
var invariant = require("./invariant");

var genericComponentClass = null;
// This registry keeps track of wrapper classes around native tags
var tagToComponentClass = {};

var ReactNativeComponentInjection = {
  // This accepts a class that receives the tag string. This is a catch all
  // that can render any kind of tag.
  injectGenericComponentClass: function(componentClass) {
    genericComponentClass = componentClass;
  },
  // This accepts a keyed object with classes as values. Each key represents a
  // tag. That particular tag will use this class instead of the generic one.
  injectComponentClasses: function(componentClasses) {
    assign(tagToComponentClass, componentClasses);
  }
};

/**
 * Create an internal class for a specific tag.
 *
 * @param {string} tag The tag for which to create an internal instance.
 * @param {any} props The props passed to the instance constructor.
 * @return {ReactComponent} component The injected empty component.
 */
function createInstanceForTag(tag, props, parentType) {
  var componentClass = tagToComponentClass[tag];
  if (componentClass == null) {
    ("production" !== process.env.NODE_ENV ? invariant(
      genericComponentClass,
      'There is no registered component for the tag %s',
      tag
    ) : invariant(genericComponentClass));
    return new genericComponentClass(tag, props);
  }
  if (parentType === tag) {
    // Avoid recursion
    ("production" !== process.env.NODE_ENV ? invariant(
      genericComponentClass,
      'There is no registered component for the tag %s',
      tag
    ) : invariant(genericComponentClass));
    return new genericComponentClass(tag, props);
  }
  // Unwrap legacy factories
  return new componentClass.type(props);
}

var ReactNativeComponent = {
  createInstanceForTag: createInstanceForTag,
  injection: ReactNativeComponentInjection
};

module.exports = ReactNativeComponent;

}).call(this,require('_process'))

},{"./Object.assign":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/Object.assign.js","./invariant":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/invariant.js","_process":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/browserify/node_modules/process/browser.js"}],"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ReactOwner.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactOwner
 */

"use strict";

var emptyObject = require("./emptyObject");
var invariant = require("./invariant");

/**
 * ReactOwners are capable of storing references to owned components.
 *
 * All components are capable of //being// referenced by owner components, but
 * only ReactOwner components are capable of //referencing// owned components.
 * The named reference is known as a "ref".
 *
 * Refs are available when mounted and updated during reconciliation.
 *
 *   var MyComponent = React.createClass({
 *     render: function() {
 *       return (
 *         <div onClick={this.handleClick}>
 *           <CustomComponent ref="custom" />
 *         </div>
 *       );
 *     },
 *     handleClick: function() {
 *       this.refs.custom.handleClick();
 *     },
 *     componentDidMount: function() {
 *       this.refs.custom.initialize();
 *     }
 *   });
 *
 * Refs should rarely be used. When refs are used, they should only be done to
 * control data that is not handled by React's data flow.
 *
 * @class ReactOwner
 */
var ReactOwner = {

  /**
   * @param {?object} object
   * @return {boolean} True if `object` is a valid owner.
   * @final
   */
  isValidOwner: function(object) {
    return !!(
      object &&
      typeof object.attachRef === 'function' &&
      typeof object.detachRef === 'function'
    );
  },

  /**
   * Adds a component by ref to an owner component.
   *
   * @param {ReactComponent} component Component to reference.
   * @param {string} ref Name by which to refer to the component.
   * @param {ReactOwner} owner Component on which to record the ref.
   * @final
   * @internal
   */
  addComponentAsRefTo: function(component, ref, owner) {
    ("production" !== process.env.NODE_ENV ? invariant(
      ReactOwner.isValidOwner(owner),
      'addComponentAsRefTo(...): Only a ReactOwner can have refs. This ' +
      'usually means that you\'re trying to add a ref to a component that ' +
      'doesn\'t have an owner (that is, was not created inside of another ' +
      'component\'s `render` method). Try rendering this component inside of ' +
      'a new top-level component which will hold the ref.'
    ) : invariant(ReactOwner.isValidOwner(owner)));
    owner.attachRef(ref, component);
  },

  /**
   * Removes a component by ref from an owner component.
   *
   * @param {ReactComponent} component Component to dereference.
   * @param {string} ref Name of the ref to remove.
   * @param {ReactOwner} owner Component on which the ref is recorded.
   * @final
   * @internal
   */
  removeComponentAsRefFrom: function(component, ref, owner) {
    ("production" !== process.env.NODE_ENV ? invariant(
      ReactOwner.isValidOwner(owner),
      'removeComponentAsRefFrom(...): Only a ReactOwner can have refs. This ' +
      'usually means that you\'re trying to remove a ref to a component that ' +
      'doesn\'t have an owner (that is, was not created inside of another ' +
      'component\'s `render` method). Try rendering this component inside of ' +
      'a new top-level component which will hold the ref.'
    ) : invariant(ReactOwner.isValidOwner(owner)));
    // Check that `component` is still the current ref because we do not want to
    // detach the ref if another component stole it.
    if (owner.refs[ref] === component) {
      owner.detachRef(ref);
    }
  },

  /**
   * A ReactComponent must mix this in to have refs.
   *
   * @lends {ReactOwner.prototype}
   */
  Mixin: {

    construct: function() {
      this.refs = emptyObject;
    },

    /**
     * Lazily allocates the refs object and stores `component` as `ref`.
     *
     * @param {string} ref Reference name.
     * @param {component} component Component to store as `ref`.
     * @final
     * @private
     */
    attachRef: function(ref, component) {
      ("production" !== process.env.NODE_ENV ? invariant(
        component.isOwnedBy(this),
        'attachRef(%s, ...): Only a component\'s owner can store a ref to it.',
        ref
      ) : invariant(component.isOwnedBy(this)));
      var refs = this.refs === emptyObject ? (this.refs = {}) : this.refs;
      refs[ref] = component;
    },

    /**
     * Detaches a reference name.
     *
     * @param {string} ref Name to dereference.
     * @final
     * @private
     */
    detachRef: function(ref) {
      delete this.refs[ref];
    }

  }

};

module.exports = ReactOwner;

}).call(this,require('_process'))

},{"./emptyObject":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/emptyObject.js","./invariant":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/invariant.js","_process":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/browserify/node_modules/process/browser.js"}],"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ReactPerf.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactPerf
 * @typechecks static-only
 */

"use strict";

/**
 * ReactPerf is a general AOP system designed to measure performance. This
 * module only has the hooks: see ReactDefaultPerf for the analysis tool.
 */
var ReactPerf = {
  /**
   * Boolean to enable/disable measurement. Set to false by default to prevent
   * accidental logging and perf loss.
   */
  enableMeasure: false,

  /**
   * Holds onto the measure function in use. By default, don't measure
   * anything, but we'll override this if we inject a measure function.
   */
  storedMeasure: _noMeasure,

  /**
   * Use this to wrap methods you want to measure. Zero overhead in production.
   *
   * @param {string} objName
   * @param {string} fnName
   * @param {function} func
   * @return {function}
   */
  measure: function(objName, fnName, func) {
    if ("production" !== process.env.NODE_ENV) {
      var measuredFunc = null;
      var wrapper = function() {
        if (ReactPerf.enableMeasure) {
          if (!measuredFunc) {
            measuredFunc = ReactPerf.storedMeasure(objName, fnName, func);
          }
          return measuredFunc.apply(this, arguments);
        }
        return func.apply(this, arguments);
      };
      wrapper.displayName = objName + '_' + fnName;
      return wrapper;
    }
    return func;
  },

  injection: {
    /**
     * @param {function} measure
     */
    injectMeasure: function(measure) {
      ReactPerf.storedMeasure = measure;
    }
  }
};

/**
 * Simply passes through the measured function, without measuring it.
 *
 * @param {string} objName
 * @param {string} fnName
 * @param {function} func
 * @return {function}
 */
function _noMeasure(objName, fnName, func) {
  return func;
}

module.exports = ReactPerf;

}).call(this,require('_process'))

},{"_process":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/browserify/node_modules/process/browser.js"}],"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ReactPropTransferer.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactPropTransferer
 */

"use strict";

var assign = require("./Object.assign");
var emptyFunction = require("./emptyFunction");
var invariant = require("./invariant");
var joinClasses = require("./joinClasses");
var warning = require("./warning");

var didWarn = false;

/**
 * Creates a transfer strategy that will merge prop values using the supplied
 * `mergeStrategy`. If a prop was previously unset, this just sets it.
 *
 * @param {function} mergeStrategy
 * @return {function}
 */
function createTransferStrategy(mergeStrategy) {
  return function(props, key, value) {
    if (!props.hasOwnProperty(key)) {
      props[key] = value;
    } else {
      props[key] = mergeStrategy(props[key], value);
    }
  };
}

var transferStrategyMerge = createTransferStrategy(function(a, b) {
  // `merge` overrides the first object's (`props[key]` above) keys using the
  // second object's (`value`) keys. An object's style's existing `propA` would
  // get overridden. Flip the order here.
  return assign({}, b, a);
});

/**
 * Transfer strategies dictate how props are transferred by `transferPropsTo`.
 * NOTE: if you add any more exceptions to this list you should be sure to
 * update `cloneWithProps()` accordingly.
 */
var TransferStrategies = {
  /**
   * Never transfer `children`.
   */
  children: emptyFunction,
  /**
   * Transfer the `className` prop by merging them.
   */
  className: createTransferStrategy(joinClasses),
  /**
   * Transfer the `style` prop (which is an object) by merging them.
   */
  style: transferStrategyMerge
};

/**
 * Mutates the first argument by transferring the properties from the second
 * argument.
 *
 * @param {object} props
 * @param {object} newProps
 * @return {object}
 */
function transferInto(props, newProps) {
  for (var thisKey in newProps) {
    if (!newProps.hasOwnProperty(thisKey)) {
      continue;
    }

    var transferStrategy = TransferStrategies[thisKey];

    if (transferStrategy && TransferStrategies.hasOwnProperty(thisKey)) {
      transferStrategy(props, thisKey, newProps[thisKey]);
    } else if (!props.hasOwnProperty(thisKey)) {
      props[thisKey] = newProps[thisKey];
    }
  }
  return props;
}

/**
 * ReactPropTransferer are capable of transferring props to another component
 * using a `transferPropsTo` method.
 *
 * @class ReactPropTransferer
 */
var ReactPropTransferer = {

  TransferStrategies: TransferStrategies,

  /**
   * Merge two props objects using TransferStrategies.
   *
   * @param {object} oldProps original props (they take precedence)
   * @param {object} newProps new props to merge in
   * @return {object} a new object containing both sets of props merged.
   */
  mergeProps: function(oldProps, newProps) {
    return transferInto(assign({}, oldProps), newProps);
  },

  /**
   * @lends {ReactPropTransferer.prototype}
   */
  Mixin: {

    /**
     * Transfer props from this component to a target component.
     *
     * Props that do not have an explicit transfer strategy will be transferred
     * only if the target component does not already have the prop set.
     *
     * This is usually used to pass down props to a returned root component.
     *
     * @param {ReactElement} element Component receiving the properties.
     * @return {ReactElement} The supplied `component`.
     * @final
     * @protected
     */
    transferPropsTo: function(element) {
      ("production" !== process.env.NODE_ENV ? invariant(
        element._owner === this,
        '%s: You can\'t call transferPropsTo() on a component that you ' +
        'don\'t own, %s. This usually means you are calling ' +
        'transferPropsTo() on a component passed in as props or children.',
        this.constructor.displayName,
        typeof element.type === 'string' ?
        element.type :
        element.type.displayName
      ) : invariant(element._owner === this));

      if ("production" !== process.env.NODE_ENV) {
        if (!didWarn) {
          didWarn = true;
          ("production" !== process.env.NODE_ENV ? warning(
            false,
            'transferPropsTo is deprecated. ' +
            'See http://fb.me/react-transferpropsto for more information.'
          ) : null);
        }
      }

      // Because elements are immutable we have to merge into the existing
      // props object rather than clone it.
      transferInto(element.props, this.props);

      return element;
    }

  }
};

module.exports = ReactPropTransferer;

}).call(this,require('_process'))

},{"./Object.assign":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/Object.assign.js","./emptyFunction":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/emptyFunction.js","./invariant":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/invariant.js","./joinClasses":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/joinClasses.js","./warning":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/warning.js","_process":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/browserify/node_modules/process/browser.js"}],"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ReactPropTypeLocationNames.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactPropTypeLocationNames
 */

"use strict";

var ReactPropTypeLocationNames = {};

if ("production" !== process.env.NODE_ENV) {
  ReactPropTypeLocationNames = {
    prop: 'prop',
    context: 'context',
    childContext: 'child context'
  };
}

module.exports = ReactPropTypeLocationNames;

}).call(this,require('_process'))

},{"_process":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/browserify/node_modules/process/browser.js"}],"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ReactPropTypeLocations.js":[function(require,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactPropTypeLocations
 */

"use strict";

var keyMirror = require("./keyMirror");

var ReactPropTypeLocations = keyMirror({
  prop: null,
  context: null,
  childContext: null
});

module.exports = ReactPropTypeLocations;

},{"./keyMirror":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/keyMirror.js"}],"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ReactPropTypes.js":[function(require,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactPropTypes
 */

"use strict";

var ReactElement = require("./ReactElement");
var ReactPropTypeLocationNames = require("./ReactPropTypeLocationNames");

var deprecated = require("./deprecated");
var emptyFunction = require("./emptyFunction");

/**
 * Collection of methods that allow declaration and validation of props that are
 * supplied to React components. Example usage:
 *
 *   var Props = require('ReactPropTypes');
 *   var MyArticle = React.createClass({
 *     propTypes: {
 *       // An optional string prop named "description".
 *       description: Props.string,
 *
 *       // A required enum prop named "category".
 *       category: Props.oneOf(['News','Photos']).isRequired,
 *
 *       // A prop named "dialog" that requires an instance of Dialog.
 *       dialog: Props.instanceOf(Dialog).isRequired
 *     },
 *     render: function() { ... }
 *   });
 *
 * A more formal specification of how these methods are used:
 *
 *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)
 *   decl := ReactPropTypes.{type}(.isRequired)?
 *
 * Each and every declaration produces a function with the same signature. This
 * allows the creation of custom validation functions. For example:
 *
 *  var MyLink = React.createClass({
 *    propTypes: {
 *      // An optional string or URI prop named "href".
 *      href: function(props, propName, componentName) {
 *        var propValue = props[propName];
 *        if (propValue != null && typeof propValue !== 'string' &&
 *            !(propValue instanceof URI)) {
 *          return new Error(
 *            'Expected a string or an URI for ' + propName + ' in ' +
 *            componentName
 *          );
 *        }
 *      }
 *    },
 *    render: function() {...}
 *  });
 *
 * @internal
 */

var ANONYMOUS = '<<anonymous>>';

var elementTypeChecker = createElementTypeChecker();
var nodeTypeChecker = createNodeChecker();

var ReactPropTypes = {
  array: createPrimitiveTypeChecker('array'),
  bool: createPrimitiveTypeChecker('boolean'),
  func: createPrimitiveTypeChecker('function'),
  number: createPrimitiveTypeChecker('number'),
  object: createPrimitiveTypeChecker('object'),
  string: createPrimitiveTypeChecker('string'),

  any: createAnyTypeChecker(),
  arrayOf: createArrayOfTypeChecker,
  element: elementTypeChecker,
  instanceOf: createInstanceTypeChecker,
  node: nodeTypeChecker,
  objectOf: createObjectOfTypeChecker,
  oneOf: createEnumTypeChecker,
  oneOfType: createUnionTypeChecker,
  shape: createShapeTypeChecker,

  component: deprecated(
    'React.PropTypes',
    'component',
    'element',
    this,
    elementTypeChecker
  ),
  renderable: deprecated(
    'React.PropTypes',
    'renderable',
    'node',
    this,
    nodeTypeChecker
  )
};

function createChainableTypeChecker(validate) {
  function checkType(isRequired, props, propName, componentName, location) {
    componentName = componentName || ANONYMOUS;
    if (props[propName] == null) {
      var locationName = ReactPropTypeLocationNames[location];
      if (isRequired) {
        return new Error(
          ("Required " + locationName + " `" + propName + "` was not specified in ")+
          ("`" + componentName + "`.")
        );
      }
    } else {
      return validate(props, propName, componentName, location);
    }
  }

  var chainedCheckType = checkType.bind(null, false);
  chainedCheckType.isRequired = checkType.bind(null, true);

  return chainedCheckType;
}

function createPrimitiveTypeChecker(expectedType) {
  function validate(props, propName, componentName, location) {
    var propValue = props[propName];
    var propType = getPropType(propValue);
    if (propType !== expectedType) {
      var locationName = ReactPropTypeLocationNames[location];
      // `propValue` being instance of, say, date/regexp, pass the 'object'
      // check, but we can offer a more precise error message here rather than
      // 'of type `object`'.
      var preciseType = getPreciseType(propValue);

      return new Error(
        ("Invalid " + locationName + " `" + propName + "` of type `" + preciseType + "` ") +
        ("supplied to `" + componentName + "`, expected `" + expectedType + "`.")
      );
    }
  }
  return createChainableTypeChecker(validate);
}

function createAnyTypeChecker() {
  return createChainableTypeChecker(emptyFunction.thatReturns());
}

function createArrayOfTypeChecker(typeChecker) {
  function validate(props, propName, componentName, location) {
    var propValue = props[propName];
    if (!Array.isArray(propValue)) {
      var locationName = ReactPropTypeLocationNames[location];
      var propType = getPropType(propValue);
      return new Error(
        ("Invalid " + locationName + " `" + propName + "` of type ") +
        ("`" + propType + "` supplied to `" + componentName + "`, expected an array.")
      );
    }
    for (var i = 0; i < propValue.length; i++) {
      var error = typeChecker(propValue, i, componentName, location);
      if (error instanceof Error) {
        return error;
      }
    }
  }
  return createChainableTypeChecker(validate);
}

function createElementTypeChecker() {
  function validate(props, propName, componentName, location) {
    if (!ReactElement.isValidElement(props[propName])) {
      var locationName = ReactPropTypeLocationNames[location];
      return new Error(
        ("Invalid " + locationName + " `" + propName + "` supplied to ") +
        ("`" + componentName + "`, expected a ReactElement.")
      );
    }
  }
  return createChainableTypeChecker(validate);
}

function createInstanceTypeChecker(expectedClass) {
  function validate(props, propName, componentName, location) {
    if (!(props[propName] instanceof expectedClass)) {
      var locationName = ReactPropTypeLocationNames[location];
      var expectedClassName = expectedClass.name || ANONYMOUS;
      return new Error(
        ("Invalid " + locationName + " `" + propName + "` supplied to ") +
        ("`" + componentName + "`, expected instance of `" + expectedClassName + "`.")
      );
    }
  }
  return createChainableTypeChecker(validate);
}

function createEnumTypeChecker(expectedValues) {
  function validate(props, propName, componentName, location) {
    var propValue = props[propName];
    for (var i = 0; i < expectedValues.length; i++) {
      if (propValue === expectedValues[i]) {
        return;
      }
    }

    var locationName = ReactPropTypeLocationNames[location];
    var valuesString = JSON.stringify(expectedValues);
    return new Error(
      ("Invalid " + locationName + " `" + propName + "` of value `" + propValue + "` ") +
      ("supplied to `" + componentName + "`, expected one of " + valuesString + ".")
    );
  }
  return createChainableTypeChecker(validate);
}

function createObjectOfTypeChecker(typeChecker) {
  function validate(props, propName, componentName, location) {
    var propValue = props[propName];
    var propType = getPropType(propValue);
    if (propType !== 'object') {
      var locationName = ReactPropTypeLocationNames[location];
      return new Error(
        ("Invalid " + locationName + " `" + propName + "` of type ") +
        ("`" + propType + "` supplied to `" + componentName + "`, expected an object.")
      );
    }
    for (var key in propValue) {
      if (propValue.hasOwnProperty(key)) {
        var error = typeChecker(propValue, key, componentName, location);
        if (error instanceof Error) {
          return error;
        }
      }
    }
  }
  return createChainableTypeChecker(validate);
}

function createUnionTypeChecker(arrayOfTypeCheckers) {
  function validate(props, propName, componentName, location) {
    for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
      var checker = arrayOfTypeCheckers[i];
      if (checker(props, propName, componentName, location) == null) {
        return;
      }
    }

    var locationName = ReactPropTypeLocationNames[location];
    return new Error(
      ("Invalid " + locationName + " `" + propName + "` supplied to ") +
      ("`" + componentName + "`.")
    );
  }
  return createChainableTypeChecker(validate);
}

function createNodeChecker() {
  function validate(props, propName, componentName, location) {
    if (!isNode(props[propName])) {
      var locationName = ReactPropTypeLocationNames[location];
      return new Error(
        ("Invalid " + locationName + " `" + propName + "` supplied to ") +
        ("`" + componentName + "`, expected a ReactNode.")
      );
    }
  }
  return createChainableTypeChecker(validate);
}

function createShapeTypeChecker(shapeTypes) {
  function validate(props, propName, componentName, location) {
    var propValue = props[propName];
    var propType = getPropType(propValue);
    if (propType !== 'object') {
      var locationName = ReactPropTypeLocationNames[location];
      return new Error(
        ("Invalid " + locationName + " `" + propName + "` of type `" + propType + "` ") +
        ("supplied to `" + componentName + "`, expected `object`.")
      );
    }
    for (var key in shapeTypes) {
      var checker = shapeTypes[key];
      if (!checker) {
        continue;
      }
      var error = checker(propValue, key, componentName, location);
      if (error) {
        return error;
      }
    }
  }
  return createChainableTypeChecker(validate, 'expected `object`');
}

function isNode(propValue) {
  switch(typeof propValue) {
    case 'number':
    case 'string':
      return true;
    case 'boolean':
      return !propValue;
    case 'object':
      if (Array.isArray(propValue)) {
        return propValue.every(isNode);
      }
      if (ReactElement.isValidElement(propValue)) {
        return true;
      }
      for (var k in propValue) {
        if (!isNode(propValue[k])) {
          return false;
        }
      }
      return true;
    default:
      return false;
  }
}

// Equivalent of `typeof` but with special handling for array and regexp.
function getPropType(propValue) {
  var propType = typeof propValue;
  if (Array.isArray(propValue)) {
    return 'array';
  }
  if (propValue instanceof RegExp) {
    // Old webkits (at least until Android 4.0) return 'function' rather than
    // 'object' for typeof a RegExp. We'll normalize this here so that /bla/
    // passes PropTypes.object.
    return 'object';
  }
  return propType;
}

// This handles more types than `getPropType`. Only used for error messages.
// See `createPrimitiveTypeChecker`.
function getPreciseType(propValue) {
  var propType = getPropType(propValue);
  if (propType === 'object') {
    if (propValue instanceof Date) {
      return 'date';
    } else if (propValue instanceof RegExp) {
      return 'regexp';
    }
  }
  return propType;
}

module.exports = ReactPropTypes;

},{"./ReactElement":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ReactElement.js","./ReactPropTypeLocationNames":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ReactPropTypeLocationNames.js","./deprecated":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/deprecated.js","./emptyFunction":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/emptyFunction.js"}],"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ReactPutListenerQueue.js":[function(require,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactPutListenerQueue
 */

"use strict";

var PooledClass = require("./PooledClass");
var ReactBrowserEventEmitter = require("./ReactBrowserEventEmitter");

var assign = require("./Object.assign");

function ReactPutListenerQueue() {
  this.listenersToPut = [];
}

assign(ReactPutListenerQueue.prototype, {
  enqueuePutListener: function(rootNodeID, propKey, propValue) {
    this.listenersToPut.push({
      rootNodeID: rootNodeID,
      propKey: propKey,
      propValue: propValue
    });
  },

  putListeners: function() {
    for (var i = 0; i < this.listenersToPut.length; i++) {
      var listenerToPut = this.listenersToPut[i];
      ReactBrowserEventEmitter.putListener(
        listenerToPut.rootNodeID,
        listenerToPut.propKey,
        listenerToPut.propValue
      );
    }
  },

  reset: function() {
    this.listenersToPut.length = 0;
  },

  destructor: function() {
    this.reset();
  }
});

PooledClass.addPoolingTo(ReactPutListenerQueue);

module.exports = ReactPutListenerQueue;

},{"./Object.assign":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/Object.assign.js","./PooledClass":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/PooledClass.js","./ReactBrowserEventEmitter":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ReactBrowserEventEmitter.js"}],"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ReactReconcileTransaction.js":[function(require,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactReconcileTransaction
 * @typechecks static-only
 */

"use strict";

var CallbackQueue = require("./CallbackQueue");
var PooledClass = require("./PooledClass");
var ReactBrowserEventEmitter = require("./ReactBrowserEventEmitter");
var ReactInputSelection = require("./ReactInputSelection");
var ReactPutListenerQueue = require("./ReactPutListenerQueue");
var Transaction = require("./Transaction");

var assign = require("./Object.assign");

/**
 * Ensures that, when possible, the selection range (currently selected text
 * input) is not disturbed by performing the transaction.
 */
var SELECTION_RESTORATION = {
  /**
   * @return {Selection} Selection information.
   */
  initialize: ReactInputSelection.getSelectionInformation,
  /**
   * @param {Selection} sel Selection information returned from `initialize`.
   */
  close: ReactInputSelection.restoreSelection
};

/**
 * Suppresses events (blur/focus) that could be inadvertently dispatched due to
 * high level DOM manipulations (like temporarily removing a text input from the
 * DOM).
 */
var EVENT_SUPPRESSION = {
  /**
   * @return {boolean} The enabled status of `ReactBrowserEventEmitter` before
   * the reconciliation.
   */
  initialize: function() {
    var currentlyEnabled = ReactBrowserEventEmitter.isEnabled();
    ReactBrowserEventEmitter.setEnabled(false);
    return currentlyEnabled;
  },

  /**
   * @param {boolean} previouslyEnabled Enabled status of
   *   `ReactBrowserEventEmitter` before the reconciliation occured. `close`
   *   restores the previous value.
   */
  close: function(previouslyEnabled) {
    ReactBrowserEventEmitter.setEnabled(previouslyEnabled);
  }
};

/**
 * Provides a queue for collecting `componentDidMount` and
 * `componentDidUpdate` callbacks during the the transaction.
 */
var ON_DOM_READY_QUEUEING = {
  /**
   * Initializes the internal `onDOMReady` queue.
   */
  initialize: function() {
    this.reactMountReady.reset();
  },

  /**
   * After DOM is flushed, invoke all registered `onDOMReady` callbacks.
   */
  close: function() {
    this.reactMountReady.notifyAll();
  }
};

var PUT_LISTENER_QUEUEING = {
  initialize: function() {
    this.putListenerQueue.reset();
  },

  close: function() {
    this.putListenerQueue.putListeners();
  }
};

/**
 * Executed within the scope of the `Transaction` instance. Consider these as
 * being member methods, but with an implied ordering while being isolated from
 * each other.
 */
var TRANSACTION_WRAPPERS = [
  PUT_LISTENER_QUEUEING,
  SELECTION_RESTORATION,
  EVENT_SUPPRESSION,
  ON_DOM_READY_QUEUEING
];

/**
 * Currently:
 * - The order that these are listed in the transaction is critical:
 * - Suppresses events.
 * - Restores selection range.
 *
 * Future:
 * - Restore document/overflow scroll positions that were unintentionally
 *   modified via DOM insertions above the top viewport boundary.
 * - Implement/integrate with customized constraint based layout system and keep
 *   track of which dimensions must be remeasured.
 *
 * @class ReactReconcileTransaction
 */
function ReactReconcileTransaction() {
  this.reinitializeTransaction();
  // Only server-side rendering really needs this option (see
  // `ReactServerRendering`), but server-side uses
  // `ReactServerRenderingTransaction` instead. This option is here so that it's
  // accessible and defaults to false when `ReactDOMComponent` and
  // `ReactTextComponent` checks it in `mountComponent`.`
  this.renderToStaticMarkup = false;
  this.reactMountReady = CallbackQueue.getPooled(null);
  this.putListenerQueue = ReactPutListenerQueue.getPooled();
}

var Mixin = {
  /**
   * @see Transaction
   * @abstract
   * @final
   * @return {array<object>} List of operation wrap proceedures.
   *   TODO: convert to array<TransactionWrapper>
   */
  getTransactionWrappers: function() {
    return TRANSACTION_WRAPPERS;
  },

  /**
   * @return {object} The queue to collect `onDOMReady` callbacks with.
   */
  getReactMountReady: function() {
    return this.reactMountReady;
  },

  getPutListenerQueue: function() {
    return this.putListenerQueue;
  },

  /**
   * `PooledClass` looks for this, and will invoke this before allowing this
   * instance to be resused.
   */
  destructor: function() {
    CallbackQueue.release(this.reactMountReady);
    this.reactMountReady = null;

    ReactPutListenerQueue.release(this.putListenerQueue);
    this.putListenerQueue = null;
  }
};


assign(ReactReconcileTransaction.prototype, Transaction.Mixin, Mixin);

PooledClass.addPoolingTo(ReactReconcileTransaction);

module.exports = ReactReconcileTransaction;

},{"./CallbackQueue":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/CallbackQueue.js","./Object.assign":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/Object.assign.js","./PooledClass":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/PooledClass.js","./ReactBrowserEventEmitter":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ReactBrowserEventEmitter.js","./ReactInputSelection":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ReactInputSelection.js","./ReactPutListenerQueue":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ReactPutListenerQueue.js","./Transaction":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/Transaction.js"}],"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ReactRootIndex.js":[function(require,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactRootIndex
 * @typechecks
 */

"use strict";

var ReactRootIndexInjection = {
  /**
   * @param {function} _createReactRootIndex
   */
  injectCreateReactRootIndex: function(_createReactRootIndex) {
    ReactRootIndex.createReactRootIndex = _createReactRootIndex;
  }
};

var ReactRootIndex = {
  createReactRootIndex: null,
  injection: ReactRootIndexInjection
};

module.exports = ReactRootIndex;

},{}],"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ReactServerRendering.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @typechecks static-only
 * @providesModule ReactServerRendering
 */
"use strict";

var ReactElement = require("./ReactElement");
var ReactInstanceHandles = require("./ReactInstanceHandles");
var ReactMarkupChecksum = require("./ReactMarkupChecksum");
var ReactServerRenderingTransaction =
  require("./ReactServerRenderingTransaction");

var instantiateReactComponent = require("./instantiateReactComponent");
var invariant = require("./invariant");

/**
 * @param {ReactElement} element
 * @return {string} the HTML markup
 */
function renderToString(element) {
  ("production" !== process.env.NODE_ENV ? invariant(
    ReactElement.isValidElement(element),
    'renderToString(): You must pass a valid ReactElement.'
  ) : invariant(ReactElement.isValidElement(element)));

  var transaction;
  try {
    var id = ReactInstanceHandles.createReactRootID();
    transaction = ReactServerRenderingTransaction.getPooled(false);

    return transaction.perform(function() {
      var componentInstance = instantiateReactComponent(element, null);
      var markup = componentInstance.mountComponent(id, transaction, 0);
      return ReactMarkupChecksum.addChecksumToMarkup(markup);
    }, null);
  } finally {
    ReactServerRenderingTransaction.release(transaction);
  }
}

/**
 * @param {ReactElement} element
 * @return {string} the HTML markup, without the extra React ID and checksum
 * (for generating static pages)
 */
function renderToStaticMarkup(element) {
  ("production" !== process.env.NODE_ENV ? invariant(
    ReactElement.isValidElement(element),
    'renderToStaticMarkup(): You must pass a valid ReactElement.'
  ) : invariant(ReactElement.isValidElement(element)));

  var transaction;
  try {
    var id = ReactInstanceHandles.createReactRootID();
    transaction = ReactServerRenderingTransaction.getPooled(true);

    return transaction.perform(function() {
      var componentInstance = instantiateReactComponent(element, null);
      return componentInstance.mountComponent(id, transaction, 0);
    }, null);
  } finally {
    ReactServerRenderingTransaction.release(transaction);
  }
}

module.exports = {
  renderToString: renderToString,
  renderToStaticMarkup: renderToStaticMarkup
};

}).call(this,require('_process'))

},{"./ReactElement":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ReactElement.js","./ReactInstanceHandles":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ReactInstanceHandles.js","./ReactMarkupChecksum":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ReactMarkupChecksum.js","./ReactServerRenderingTransaction":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ReactServerRenderingTransaction.js","./instantiateReactComponent":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/instantiateReactComponent.js","./invariant":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/invariant.js","_process":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/browserify/node_modules/process/browser.js"}],"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ReactServerRenderingTransaction.js":[function(require,module,exports){
/**
 * Copyright 2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactServerRenderingTransaction
 * @typechecks
 */

"use strict";

var PooledClass = require("./PooledClass");
var CallbackQueue = require("./CallbackQueue");
var ReactPutListenerQueue = require("./ReactPutListenerQueue");
var Transaction = require("./Transaction");

var assign = require("./Object.assign");
var emptyFunction = require("./emptyFunction");

/**
 * Provides a `CallbackQueue` queue for collecting `onDOMReady` callbacks
 * during the performing of the transaction.
 */
var ON_DOM_READY_QUEUEING = {
  /**
   * Initializes the internal `onDOMReady` queue.
   */
  initialize: function() {
    this.reactMountReady.reset();
  },

  close: emptyFunction
};

var PUT_LISTENER_QUEUEING = {
  initialize: function() {
    this.putListenerQueue.reset();
  },

  close: emptyFunction
};

/**
 * Executed within the scope of the `Transaction` instance. Consider these as
 * being member methods, but with an implied ordering while being isolated from
 * each other.
 */
var TRANSACTION_WRAPPERS = [
  PUT_LISTENER_QUEUEING,
  ON_DOM_READY_QUEUEING
];

/**
 * @class ReactServerRenderingTransaction
 * @param {boolean} renderToStaticMarkup
 */
function ReactServerRenderingTransaction(renderToStaticMarkup) {
  this.reinitializeTransaction();
  this.renderToStaticMarkup = renderToStaticMarkup;
  this.reactMountReady = CallbackQueue.getPooled(null);
  this.putListenerQueue = ReactPutListenerQueue.getPooled();
}

var Mixin = {
  /**
   * @see Transaction
   * @abstract
   * @final
   * @return {array} Empty list of operation wrap proceedures.
   */
  getTransactionWrappers: function() {
    return TRANSACTION_WRAPPERS;
  },

  /**
   * @return {object} The queue to collect `onDOMReady` callbacks with.
   */
  getReactMountReady: function() {
    return this.reactMountReady;
  },

  getPutListenerQueue: function() {
    return this.putListenerQueue;
  },

  /**
   * `PooledClass` looks for this, and will invoke this before allowing this
   * instance to be resused.
   */
  destructor: function() {
    CallbackQueue.release(this.reactMountReady);
    this.reactMountReady = null;

    ReactPutListenerQueue.release(this.putListenerQueue);
    this.putListenerQueue = null;
  }
};


assign(
  ReactServerRenderingTransaction.prototype,
  Transaction.Mixin,
  Mixin
);

PooledClass.addPoolingTo(ReactServerRenderingTransaction);

module.exports = ReactServerRenderingTransaction;

},{"./CallbackQueue":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/CallbackQueue.js","./Object.assign":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/Object.assign.js","./PooledClass":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/PooledClass.js","./ReactPutListenerQueue":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ReactPutListenerQueue.js","./Transaction":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/Transaction.js","./emptyFunction":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/emptyFunction.js"}],"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ReactStateSetters.js":[function(require,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactStateSetters
 */

"use strict";

var ReactStateSetters = {
  /**
   * Returns a function that calls the provided function, and uses the result
   * of that to set the component's state.
   *
   * @param {ReactCompositeComponent} component
   * @param {function} funcReturningState Returned callback uses this to
   *                                      determine how to update state.
   * @return {function} callback that when invoked uses funcReturningState to
   *                    determined the object literal to setState.
   */
  createStateSetter: function(component, funcReturningState) {
    return function(a, b, c, d, e, f) {
      var partialState = funcReturningState.call(component, a, b, c, d, e, f);
      if (partialState) {
        component.setState(partialState);
      }
    };
  },

  /**
   * Returns a single-argument callback that can be used to update a single
   * key in the component's state.
   *
   * Note: this is memoized function, which makes it inexpensive to call.
   *
   * @param {ReactCompositeComponent} component
   * @param {string} key The key in the state that you should update.
   * @return {function} callback of 1 argument which calls setState() with
   *                    the provided keyName and callback argument.
   */
  createStateKeySetter: function(component, key) {
    // Memoize the setters.
    var cache = component.__keySetters || (component.__keySetters = {});
    return cache[key] || (cache[key] = createStateKeySetter(component, key));
  }
};

function createStateKeySetter(component, key) {
  // Partial state is allocated outside of the function closure so it can be
  // reused with every call, avoiding memory allocation when this function
  // is called.
  var partialState = {};
  return function stateKeySetter(value) {
    partialState[key] = value;
    component.setState(partialState);
  };
}

ReactStateSetters.Mixin = {
  /**
   * Returns a function that calls the provided function, and uses the result
   * of that to set the component's state.
   *
   * For example, these statements are equivalent:
   *
   *   this.setState({x: 1});
   *   this.createStateSetter(function(xValue) {
   *     return {x: xValue};
   *   })(1);
   *
   * @param {function} funcReturningState Returned callback uses this to
   *                                      determine how to update state.
   * @return {function} callback that when invoked uses funcReturningState to
   *                    determined the object literal to setState.
   */
  createStateSetter: function(funcReturningState) {
    return ReactStateSetters.createStateSetter(this, funcReturningState);
  },

  /**
   * Returns a single-argument callback that can be used to update a single
   * key in the component's state.
   *
   * For example, these statements are equivalent:
   *
   *   this.setState({x: 1});
   *   this.createStateKeySetter('x')(1);
   *
   * Note: this is memoized function, which makes it inexpensive to call.
   *
   * @param {string} key The key in the state that you should update.
   * @return {function} callback of 1 argument which calls setState() with
   *                    the provided keyName and callback argument.
   */
  createStateKeySetter: function(key) {
    return ReactStateSetters.createStateKeySetter(this, key);
  }
};

module.exports = ReactStateSetters;

},{}],"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ReactTestUtils.js":[function(require,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactTestUtils
 */

"use strict";

var EventConstants = require("./EventConstants");
var EventPluginHub = require("./EventPluginHub");
var EventPropagators = require("./EventPropagators");
var React = require("./React");
var ReactElement = require("./ReactElement");
var ReactBrowserEventEmitter = require("./ReactBrowserEventEmitter");
var ReactMount = require("./ReactMount");
var ReactTextComponent = require("./ReactTextComponent");
var ReactUpdates = require("./ReactUpdates");
var SyntheticEvent = require("./SyntheticEvent");

var assign = require("./Object.assign");

var topLevelTypes = EventConstants.topLevelTypes;

function Event(suffix) {}

/**
 * @class ReactTestUtils
 */

/**
 * Todo: Support the entire DOM.scry query syntax. For now, these simple
 * utilities will suffice for testing purposes.
 * @lends ReactTestUtils
 */
var ReactTestUtils = {
  renderIntoDocument: function(instance) {
    var div = document.createElement('div');
    // None of our tests actually require attaching the container to the
    // DOM, and doing so creates a mess that we rely on test isolation to
    // clean up, so we're going to stop honoring the name of this method
    // (and probably rename it eventually) if no problems arise.
    // document.documentElement.appendChild(div);
    return React.render(instance, div);
  },

  isElement: function(element) {
    return ReactElement.isValidElement(element);
  },

  isElementOfType: function(inst, convenienceConstructor) {
    return (
      ReactElement.isValidElement(inst) &&
      inst.type === convenienceConstructor.type
    );
  },

  isDOMComponent: function(inst) {
    return !!(inst && inst.mountComponent && inst.tagName);
  },

  isDOMComponentElement: function(inst) {
    return !!(inst &&
              ReactElement.isValidElement(inst) &&
              !!inst.tagName);
  },

  isCompositeComponent: function(inst) {
    return typeof inst.render === 'function' &&
           typeof inst.setState === 'function';
  },

  isCompositeComponentWithType: function(inst, type) {
    return !!(ReactTestUtils.isCompositeComponent(inst) &&
             (inst.constructor === type.type));
  },

  isCompositeComponentElement: function(inst) {
    if (!ReactElement.isValidElement(inst)) {
      return false;
    }
    // We check the prototype of the type that will get mounted, not the
    // instance itself. This is a future proof way of duck typing.
    var prototype = inst.type.prototype;
    return (
      typeof prototype.render === 'function' &&
      typeof prototype.setState === 'function'
    );
  },

  isCompositeComponentElementWithType: function(inst, type) {
    return !!(ReactTestUtils.isCompositeComponentElement(inst) &&
             (inst.constructor === type));
  },

  isTextComponent: function(inst) {
    return inst instanceof ReactTextComponent.type;
  },

  findAllInRenderedTree: function(inst, test) {
    if (!inst) {
      return [];
    }
    var ret = test(inst) ? [inst] : [];
    if (ReactTestUtils.isDOMComponent(inst)) {
      var renderedChildren = inst._renderedChildren;
      var key;
      for (key in renderedChildren) {
        if (!renderedChildren.hasOwnProperty(key)) {
          continue;
        }
        ret = ret.concat(
          ReactTestUtils.findAllInRenderedTree(renderedChildren[key], test)
        );
      }
    } else if (ReactTestUtils.isCompositeComponent(inst)) {
      ret = ret.concat(
        ReactTestUtils.findAllInRenderedTree(inst._renderedComponent, test)
      );
    }
    return ret;
  },

  /**
   * Finds all instance of components in the rendered tree that are DOM
   * components with the class name matching `className`.
   * @return an array of all the matches.
   */
  scryRenderedDOMComponentsWithClass: function(root, className) {
    return ReactTestUtils.findAllInRenderedTree(root, function(inst) {
      var instClassName = inst.props.className;
      return ReactTestUtils.isDOMComponent(inst) && (
        instClassName &&
        (' ' + instClassName + ' ').indexOf(' ' + className + ' ') !== -1
      );
    });
  },

  /**
   * Like scryRenderedDOMComponentsWithClass but expects there to be one result,
   * and returns that one result, or throws exception if there is any other
   * number of matches besides one.
   * @return {!ReactDOMComponent} The one match.
   */
  findRenderedDOMComponentWithClass: function(root, className) {
    var all =
      ReactTestUtils.scryRenderedDOMComponentsWithClass(root, className);
    if (all.length !== 1) {
      throw new Error('Did not find exactly one match for class:' + className);
    }
    return all[0];
  },


  /**
   * Finds all instance of components in the rendered tree that are DOM
   * components with the tag name matching `tagName`.
   * @return an array of all the matches.
   */
  scryRenderedDOMComponentsWithTag: function(root, tagName) {
    return ReactTestUtils.findAllInRenderedTree(root, function(inst) {
      return ReactTestUtils.isDOMComponent(inst) &&
            inst.tagName === tagName.toUpperCase();
    });
  },

  /**
   * Like scryRenderedDOMComponentsWithTag but expects there to be one result,
   * and returns that one result, or throws exception if there is any other
   * number of matches besides one.
   * @return {!ReactDOMComponent} The one match.
   */
  findRenderedDOMComponentWithTag: function(root, tagName) {
    var all = ReactTestUtils.scryRenderedDOMComponentsWithTag(root, tagName);
    if (all.length !== 1) {
      throw new Error('Did not find exactly one match for tag:' + tagName);
    }
    return all[0];
  },


  /**
   * Finds all instances of components with type equal to `componentType`.
   * @return an array of all the matches.
   */
  scryRenderedComponentsWithType: function(root, componentType) {
    return ReactTestUtils.findAllInRenderedTree(root, function(inst) {
      return ReactTestUtils.isCompositeComponentWithType(
        inst,
        componentType
      );
    });
  },

  /**
   * Same as `scryRenderedComponentsWithType` but expects there to be one result
   * and returns that one result, or throws exception if there is any other
   * number of matches besides one.
   * @return {!ReactComponent} The one match.
   */
  findRenderedComponentWithType: function(root, componentType) {
    var all = ReactTestUtils.scryRenderedComponentsWithType(
      root,
      componentType
    );
    if (all.length !== 1) {
      throw new Error(
        'Did not find exactly one match for componentType:' + componentType
      );
    }
    return all[0];
  },

  /**
   * Pass a mocked component module to this method to augment it with
   * useful methods that allow it to be used as a dummy React component.
   * Instead of rendering as usual, the component will become a simple
   * <div> containing any provided children.
   *
   * @param {object} module the mock function object exported from a
   *                        module that defines the component to be mocked
   * @param {?string} mockTagName optional dummy root tag name to return
   *                              from render method (overrides
   *                              module.mockTagName if provided)
   * @return {object} the ReactTestUtils object (for chaining)
   */
  mockComponent: function(module, mockTagName) {
    mockTagName = mockTagName || module.mockTagName || "div";

    var ConvenienceConstructor = React.createClass({displayName: "ConvenienceConstructor",
      render: function() {
        return React.createElement(
          mockTagName,
          null,
          this.props.children
        );
      }
    });

    module.mockImplementation(ConvenienceConstructor);

    module.type = ConvenienceConstructor.type;
    module.isReactLegacyFactory = true;

    return this;
  },

  /**
   * Simulates a top level event being dispatched from a raw event that occured
   * on an `Element` node.
   * @param topLevelType {Object} A type from `EventConstants.topLevelTypes`
   * @param {!Element} node The dom to simulate an event occurring on.
   * @param {?Event} fakeNativeEvent Fake native event to use in SyntheticEvent.
   */
  simulateNativeEventOnNode: function(topLevelType, node, fakeNativeEvent) {
    fakeNativeEvent.target = node;
    ReactBrowserEventEmitter.ReactEventListener.dispatchEvent(
      topLevelType,
      fakeNativeEvent
    );
  },

  /**
   * Simulates a top level event being dispatched from a raw event that occured
   * on the `ReactDOMComponent` `comp`.
   * @param topLevelType {Object} A type from `EventConstants.topLevelTypes`.
   * @param comp {!ReactDOMComponent}
   * @param {?Event} fakeNativeEvent Fake native event to use in SyntheticEvent.
   */
  simulateNativeEventOnDOMComponent: function(
      topLevelType,
      comp,
      fakeNativeEvent) {
    ReactTestUtils.simulateNativeEventOnNode(
      topLevelType,
      comp.getDOMNode(),
      fakeNativeEvent
    );
  },

  nativeTouchData: function(x, y) {
    return {
      touches: [
        {pageX: x, pageY: y}
      ]
    };
  },

  Simulate: null,
  SimulateNative: {}
};

/**
 * Exports:
 *
 * - `ReactTestUtils.Simulate.click(Element/ReactDOMComponent)`
 * - `ReactTestUtils.Simulate.mouseMove(Element/ReactDOMComponent)`
 * - `ReactTestUtils.Simulate.change(Element/ReactDOMComponent)`
 * - ... (All keys from event plugin `eventTypes` objects)
 */
function makeSimulator(eventType) {
  return function(domComponentOrNode, eventData) {
    var node;
    if (ReactTestUtils.isDOMComponent(domComponentOrNode)) {
      node = domComponentOrNode.getDOMNode();
    } else if (domComponentOrNode.tagName) {
      node = domComponentOrNode;
    }

    var fakeNativeEvent = new Event();
    fakeNativeEvent.target = node;
    // We don't use SyntheticEvent.getPooled in order to not have to worry about
    // properly destroying any properties assigned from `eventData` upon release
    var event = new SyntheticEvent(
      ReactBrowserEventEmitter.eventNameDispatchConfigs[eventType],
      ReactMount.getID(node),
      fakeNativeEvent
    );
    assign(event, eventData);
    EventPropagators.accumulateTwoPhaseDispatches(event);

    ReactUpdates.batchedUpdates(function() {
      EventPluginHub.enqueueEvents(event);
      EventPluginHub.processEventQueue();
    });
  };
}

function buildSimulators() {
  ReactTestUtils.Simulate = {};

  var eventType;
  for (eventType in ReactBrowserEventEmitter.eventNameDispatchConfigs) {
    /**
     * @param {!Element || ReactDOMComponent} domComponentOrNode
     * @param {?object} eventData Fake event data to use in SyntheticEvent.
     */
    ReactTestUtils.Simulate[eventType] = makeSimulator(eventType);
  }
}

// Rebuild ReactTestUtils.Simulate whenever event plugins are injected
var oldInjectEventPluginOrder = EventPluginHub.injection.injectEventPluginOrder;
EventPluginHub.injection.injectEventPluginOrder = function() {
  oldInjectEventPluginOrder.apply(this, arguments);
  buildSimulators();
};
var oldInjectEventPlugins = EventPluginHub.injection.injectEventPluginsByName;
EventPluginHub.injection.injectEventPluginsByName = function() {
  oldInjectEventPlugins.apply(this, arguments);
  buildSimulators();
};

buildSimulators();

/**
 * Exports:
 *
 * - `ReactTestUtils.SimulateNative.click(Element/ReactDOMComponent)`
 * - `ReactTestUtils.SimulateNative.mouseMove(Element/ReactDOMComponent)`
 * - `ReactTestUtils.SimulateNative.mouseIn/ReactDOMComponent)`
 * - `ReactTestUtils.SimulateNative.mouseOut(Element/ReactDOMComponent)`
 * - ... (All keys from `EventConstants.topLevelTypes`)
 *
 * Note: Top level event types are a subset of the entire set of handler types
 * (which include a broader set of "synthetic" events). For example, onDragDone
 * is a synthetic event. Except when testing an event plugin or React's event
 * handling code specifically, you probably want to use ReactTestUtils.Simulate
 * to dispatch synthetic events.
 */

function makeNativeSimulator(eventType) {
  return function(domComponentOrNode, nativeEventData) {
    var fakeNativeEvent = new Event(eventType);
    assign(fakeNativeEvent, nativeEventData);
    if (ReactTestUtils.isDOMComponent(domComponentOrNode)) {
      ReactTestUtils.simulateNativeEventOnDOMComponent(
        eventType,
        domComponentOrNode,
        fakeNativeEvent
      );
    } else if (!!domComponentOrNode.tagName) {
      // Will allow on actual dom nodes.
      ReactTestUtils.simulateNativeEventOnNode(
        eventType,
        domComponentOrNode,
        fakeNativeEvent
      );
    }
  };
}

var eventType;
for (eventType in topLevelTypes) {
  // Event type is stored as 'topClick' - we transform that to 'click'
  var convenienceName = eventType.indexOf('top') === 0 ?
    eventType.charAt(3).toLowerCase() + eventType.substr(4) : eventType;
  /**
   * @param {!Element || ReactDOMComponent} domComponentOrNode
   * @param {?Event} nativeEventData Fake native event to use in SyntheticEvent.
   */
  ReactTestUtils.SimulateNative[convenienceName] =
    makeNativeSimulator(eventType);
}

module.exports = ReactTestUtils;

},{"./EventConstants":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/EventConstants.js","./EventPluginHub":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/EventPluginHub.js","./EventPropagators":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/EventPropagators.js","./Object.assign":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/Object.assign.js","./React":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/React.js","./ReactBrowserEventEmitter":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ReactBrowserEventEmitter.js","./ReactElement":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ReactElement.js","./ReactMount":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ReactMount.js","./ReactTextComponent":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ReactTextComponent.js","./ReactUpdates":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ReactUpdates.js","./SyntheticEvent":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/SyntheticEvent.js"}],"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ReactTextComponent.js":[function(require,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactTextComponent
 * @typechecks static-only
 */

"use strict";

var DOMPropertyOperations = require("./DOMPropertyOperations");
var ReactComponent = require("./ReactComponent");
var ReactElement = require("./ReactElement");

var assign = require("./Object.assign");
var escapeTextForBrowser = require("./escapeTextForBrowser");

/**
 * Text nodes violate a couple assumptions that React makes about components:
 *
 *  - When mounting text into the DOM, adjacent text nodes are merged.
 *  - Text nodes cannot be assigned a React root ID.
 *
 * This component is used to wrap strings in elements so that they can undergo
 * the same reconciliation that is applied to elements.
 *
 * TODO: Investigate representing React components in the DOM with text nodes.
 *
 * @class ReactTextComponent
 * @extends ReactComponent
 * @internal
 */
var ReactTextComponent = function(props) {
  // This constructor and it's argument is currently used by mocks.
};

assign(ReactTextComponent.prototype, ReactComponent.Mixin, {

  /**
   * Creates the markup for this text node. This node is not intended to have
   * any features besides containing text content.
   *
   * @param {string} rootID DOM ID of the root node.
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @param {number} mountDepth number of components in the owner hierarchy
   * @return {string} Markup for this text node.
   * @internal
   */
  mountComponent: function(rootID, transaction, mountDepth) {
    ReactComponent.Mixin.mountComponent.call(
      this,
      rootID,
      transaction,
      mountDepth
    );

    var escapedText = escapeTextForBrowser(this.props);

    if (transaction.renderToStaticMarkup) {
      // Normally we'd wrap this in a `span` for the reasons stated above, but
      // since this is a situation where React won't take over (static pages),
      // we can simply return the text as it is.
      return escapedText;
    }

    return (
      '<span ' + DOMPropertyOperations.createMarkupForID(rootID) + '>' +
        escapedText +
      '</span>'
    );
  },

  /**
   * Updates this component by updating the text content.
   *
   * @param {object} nextComponent Contains the next text content.
   * @param {ReactReconcileTransaction} transaction
   * @internal
   */
  receiveComponent: function(nextComponent, transaction) {
    var nextProps = nextComponent.props;
    if (nextProps !== this.props) {
      this.props = nextProps;
      ReactComponent.BackendIDOperations.updateTextContentByID(
        this._rootNodeID,
        nextProps
      );
    }
  }

});

var ReactTextComponentFactory = function(text) {
  // Bypass validation and configuration
  return new ReactElement(ReactTextComponent, null, null, null, null, text);
};

ReactTextComponentFactory.type = ReactTextComponent;

module.exports = ReactTextComponentFactory;

},{"./DOMPropertyOperations":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/DOMPropertyOperations.js","./Object.assign":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/Object.assign.js","./ReactComponent":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ReactComponent.js","./ReactElement":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ReactElement.js","./escapeTextForBrowser":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/escapeTextForBrowser.js"}],"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ReactTransitionChildMapping.js":[function(require,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @typechecks static-only
 * @providesModule ReactTransitionChildMapping
 */

"use strict";

var ReactChildren = require("./ReactChildren");

var ReactTransitionChildMapping = {
  /**
   * Given `this.props.children`, return an object mapping key to child. Just
   * simple syntactic sugar around ReactChildren.map().
   *
   * @param {*} children `this.props.children`
   * @return {object} Mapping of key to child
   */
  getChildMapping: function(children) {
    return ReactChildren.map(children, function(child) {
      return child;
    });
  },

  /**
   * When you're adding or removing children some may be added or removed in the
   * same render pass. We want to show *both* since we want to simultaneously
   * animate elements in and out. This function takes a previous set of keys
   * and a new set of keys and merges them with its best guess of the correct
   * ordering. In the future we may expose some of the utilities in
   * ReactMultiChild to make this easy, but for now React itself does not
   * directly have this concept of the union of prevChildren and nextChildren
   * so we implement it here.
   *
   * @param {object} prev prev children as returned from
   * `ReactTransitionChildMapping.getChildMapping()`.
   * @param {object} next next children as returned from
   * `ReactTransitionChildMapping.getChildMapping()`.
   * @return {object} a key set that contains all keys in `prev` and all keys
   * in `next` in a reasonable order.
   */
  mergeChildMappings: function(prev, next) {
    prev = prev || {};
    next = next || {};

    function getValueForKey(key) {
      if (next.hasOwnProperty(key)) {
        return next[key];
      } else {
        return prev[key];
      }
    }

    // For each key of `next`, the list of keys to insert before that key in
    // the combined list
    var nextKeysPending = {};

    var pendingKeys = [];
    for (var prevKey in prev) {
      if (next.hasOwnProperty(prevKey)) {
        if (pendingKeys.length) {
          nextKeysPending[prevKey] = pendingKeys;
          pendingKeys = [];
        }
      } else {
        pendingKeys.push(prevKey);
      }
    }

    var i;
    var childMapping = {};
    for (var nextKey in next) {
      if (nextKeysPending.hasOwnProperty(nextKey)) {
        for (i = 0; i < nextKeysPending[nextKey].length; i++) {
          var pendingNextKey = nextKeysPending[nextKey][i];
          childMapping[nextKeysPending[nextKey][i]] = getValueForKey(
            pendingNextKey
          );
        }
      }
      childMapping[nextKey] = getValueForKey(nextKey);
    }

    // Finally, add the keys which didn't appear before any key in `next`
    for (i = 0; i < pendingKeys.length; i++) {
      childMapping[pendingKeys[i]] = getValueForKey(pendingKeys[i]);
    }

    return childMapping;
  }
};

module.exports = ReactTransitionChildMapping;

},{"./ReactChildren":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ReactChildren.js"}],"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ReactTransitionEvents.js":[function(require,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactTransitionEvents
 */

"use strict";

var ExecutionEnvironment = require("./ExecutionEnvironment");

/**
 * EVENT_NAME_MAP is used to determine which event fired when a
 * transition/animation ends, based on the style property used to
 * define that event.
 */
var EVENT_NAME_MAP = {
  transitionend: {
    'transition': 'transitionend',
    'WebkitTransition': 'webkitTransitionEnd',
    'MozTransition': 'mozTransitionEnd',
    'OTransition': 'oTransitionEnd',
    'msTransition': 'MSTransitionEnd'
  },

  animationend: {
    'animation': 'animationend',
    'WebkitAnimation': 'webkitAnimationEnd',
    'MozAnimation': 'mozAnimationEnd',
    'OAnimation': 'oAnimationEnd',
    'msAnimation': 'MSAnimationEnd'
  }
};

var endEvents = [];

function detectEvents() {
  var testEl = document.createElement('div');
  var style = testEl.style;

  // On some platforms, in particular some releases of Android 4.x,
  // the un-prefixed "animation" and "transition" properties are defined on the
  // style object but the events that fire will still be prefixed, so we need
  // to check if the un-prefixed events are useable, and if not remove them
  // from the map
  if (!('AnimationEvent' in window)) {
    delete EVENT_NAME_MAP.animationend.animation;
  }

  if (!('TransitionEvent' in window)) {
    delete EVENT_NAME_MAP.transitionend.transition;
  }

  for (var baseEventName in EVENT_NAME_MAP) {
    var baseEvents = EVENT_NAME_MAP[baseEventName];
    for (var styleName in baseEvents) {
      if (styleName in style) {
        endEvents.push(baseEvents[styleName]);
        break;
      }
    }
  }
}

if (ExecutionEnvironment.canUseDOM) {
  detectEvents();
}

// We use the raw {add|remove}EventListener() call because EventListener
// does not know how to remove event listeners and we really should
// clean up. Also, these events are not triggered in older browsers
// so we should be A-OK here.

function addEventListener(node, eventName, eventListener) {
  node.addEventListener(eventName, eventListener, false);
}

function removeEventListener(node, eventName, eventListener) {
  node.removeEventListener(eventName, eventListener, false);
}

var ReactTransitionEvents = {
  addEndEventListener: function(node, eventListener) {
    if (endEvents.length === 0) {
      // If CSS transitions are not supported, trigger an "end animation"
      // event immediately.
      window.setTimeout(eventListener, 0);
      return;
    }
    endEvents.forEach(function(endEvent) {
      addEventListener(node, endEvent, eventListener);
    });
  },

  removeEndEventListener: function(node, eventListener) {
    if (endEvents.length === 0) {
      return;
    }
    endEvents.forEach(function(endEvent) {
      removeEventListener(node, endEvent, eventListener);
    });
  }
};

module.exports = ReactTransitionEvents;

},{"./ExecutionEnvironment":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ExecutionEnvironment.js"}],"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ReactTransitionGroup.js":[function(require,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactTransitionGroup
 */

"use strict";

var React = require("./React");
var ReactTransitionChildMapping = require("./ReactTransitionChildMapping");

var assign = require("./Object.assign");
var cloneWithProps = require("./cloneWithProps");
var emptyFunction = require("./emptyFunction");

var ReactTransitionGroup = React.createClass({
  displayName: 'ReactTransitionGroup',

  propTypes: {
    component: React.PropTypes.any,
    childFactory: React.PropTypes.func
  },

  getDefaultProps: function() {
    return {
      component: 'span',
      childFactory: emptyFunction.thatReturnsArgument
    };
  },

  getInitialState: function() {
    return {
      children: ReactTransitionChildMapping.getChildMapping(this.props.children)
    };
  },

  componentWillReceiveProps: function(nextProps) {
    var nextChildMapping = ReactTransitionChildMapping.getChildMapping(
      nextProps.children
    );
    var prevChildMapping = this.state.children;

    this.setState({
      children: ReactTransitionChildMapping.mergeChildMappings(
        prevChildMapping,
        nextChildMapping
      )
    });

    var key;

    for (key in nextChildMapping) {
      var hasPrev = prevChildMapping && prevChildMapping.hasOwnProperty(key);
      if (nextChildMapping[key] && !hasPrev &&
          !this.currentlyTransitioningKeys[key]) {
        this.keysToEnter.push(key);
      }
    }

    for (key in prevChildMapping) {
      var hasNext = nextChildMapping && nextChildMapping.hasOwnProperty(key);
      if (prevChildMapping[key] && !hasNext &&
          !this.currentlyTransitioningKeys[key]) {
        this.keysToLeave.push(key);
      }
    }

    // If we want to someday check for reordering, we could do it here.
  },

  componentWillMount: function() {
    this.currentlyTransitioningKeys = {};
    this.keysToEnter = [];
    this.keysToLeave = [];
  },

  componentDidUpdate: function() {
    var keysToEnter = this.keysToEnter;
    this.keysToEnter = [];
    keysToEnter.forEach(this.performEnter);

    var keysToLeave = this.keysToLeave;
    this.keysToLeave = [];
    keysToLeave.forEach(this.performLeave);
  },

  performEnter: function(key) {
    this.currentlyTransitioningKeys[key] = true;

    var component = this.refs[key];

    if (component.componentWillEnter) {
      component.componentWillEnter(
        this._handleDoneEntering.bind(this, key)
      );
    } else {
      this._handleDoneEntering(key);
    }
  },

  _handleDoneEntering: function(key) {
    var component = this.refs[key];
    if (component.componentDidEnter) {
      component.componentDidEnter();
    }

    delete this.currentlyTransitioningKeys[key];

    var currentChildMapping = ReactTransitionChildMapping.getChildMapping(
      this.props.children
    );

    if (!currentChildMapping || !currentChildMapping.hasOwnProperty(key)) {
      // This was removed before it had fully entered. Remove it.
      this.performLeave(key);
    }
  },

  performLeave: function(key) {
    this.currentlyTransitioningKeys[key] = true;

    var component = this.refs[key];
    if (component.componentWillLeave) {
      component.componentWillLeave(this._handleDoneLeaving.bind(this, key));
    } else {
      // Note that this is somewhat dangerous b/c it calls setState()
      // again, effectively mutating the component before all the work
      // is done.
      this._handleDoneLeaving(key);
    }
  },

  _handleDoneLeaving: function(key) {
    var component = this.refs[key];

    if (component.componentDidLeave) {
      component.componentDidLeave();
    }

    delete this.currentlyTransitioningKeys[key];

    var currentChildMapping = ReactTransitionChildMapping.getChildMapping(
      this.props.children
    );

    if (currentChildMapping && currentChildMapping.hasOwnProperty(key)) {
      // This entered again before it fully left. Add it again.
      this.performEnter(key);
    } else {
      var newChildren = assign({}, this.state.children);
      delete newChildren[key];
      this.setState({children: newChildren});
    }
  },

  render: function() {
    // TODO: we could get rid of the need for the wrapper node
    // by cloning a single child
    var childrenToRender = {};
    for (var key in this.state.children) {
      var child = this.state.children[key];
      if (child) {
        // You may need to apply reactive updates to a child as it is leaving.
        // The normal React way to do it won't work since the child will have
        // already been removed. In case you need this behavior you can provide
        // a childFactory function to wrap every child, even the ones that are
        // leaving.
        childrenToRender[key] = cloneWithProps(
          this.props.childFactory(child),
          {ref: key}
        );
      }
    }
    return React.createElement(
      this.props.component,
      this.props,
      childrenToRender
    );
  }
});

module.exports = ReactTransitionGroup;

},{"./Object.assign":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/Object.assign.js","./React":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/React.js","./ReactTransitionChildMapping":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ReactTransitionChildMapping.js","./cloneWithProps":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/cloneWithProps.js","./emptyFunction":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/emptyFunction.js"}],"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ReactUpdates.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactUpdates
 */

"use strict";

var CallbackQueue = require("./CallbackQueue");
var PooledClass = require("./PooledClass");
var ReactCurrentOwner = require("./ReactCurrentOwner");
var ReactPerf = require("./ReactPerf");
var Transaction = require("./Transaction");

var assign = require("./Object.assign");
var invariant = require("./invariant");
var warning = require("./warning");

var dirtyComponents = [];
var asapCallbackQueue = CallbackQueue.getPooled();
var asapEnqueued = false;

var batchingStrategy = null;

function ensureInjected() {
  ("production" !== process.env.NODE_ENV ? invariant(
    ReactUpdates.ReactReconcileTransaction && batchingStrategy,
    'ReactUpdates: must inject a reconcile transaction class and batching ' +
    'strategy'
  ) : invariant(ReactUpdates.ReactReconcileTransaction && batchingStrategy));
}

var NESTED_UPDATES = {
  initialize: function() {
    this.dirtyComponentsLength = dirtyComponents.length;
  },
  close: function() {
    if (this.dirtyComponentsLength !== dirtyComponents.length) {
      // Additional updates were enqueued by componentDidUpdate handlers or
      // similar; before our own UPDATE_QUEUEING wrapper closes, we want to run
      // these new updates so that if A's componentDidUpdate calls setState on
      // B, B will update before the callback A's updater provided when calling
      // setState.
      dirtyComponents.splice(0, this.dirtyComponentsLength);
      flushBatchedUpdates();
    } else {
      dirtyComponents.length = 0;
    }
  }
};

var UPDATE_QUEUEING = {
  initialize: function() {
    this.callbackQueue.reset();
  },
  close: function() {
    this.callbackQueue.notifyAll();
  }
};

var TRANSACTION_WRAPPERS = [NESTED_UPDATES, UPDATE_QUEUEING];

function ReactUpdatesFlushTransaction() {
  this.reinitializeTransaction();
  this.dirtyComponentsLength = null;
  this.callbackQueue = CallbackQueue.getPooled();
  this.reconcileTransaction =
    ReactUpdates.ReactReconcileTransaction.getPooled();
}

assign(
  ReactUpdatesFlushTransaction.prototype,
  Transaction.Mixin, {
  getTransactionWrappers: function() {
    return TRANSACTION_WRAPPERS;
  },

  destructor: function() {
    this.dirtyComponentsLength = null;
    CallbackQueue.release(this.callbackQueue);
    this.callbackQueue = null;
    ReactUpdates.ReactReconcileTransaction.release(this.reconcileTransaction);
    this.reconcileTransaction = null;
  },

  perform: function(method, scope, a) {
    // Essentially calls `this.reconcileTransaction.perform(method, scope, a)`
    // with this transaction's wrappers around it.
    return Transaction.Mixin.perform.call(
      this,
      this.reconcileTransaction.perform,
      this.reconcileTransaction,
      method,
      scope,
      a
    );
  }
});

PooledClass.addPoolingTo(ReactUpdatesFlushTransaction);

function batchedUpdates(callback, a, b) {
  ensureInjected();
  batchingStrategy.batchedUpdates(callback, a, b);
}

/**
 * Array comparator for ReactComponents by owner depth
 *
 * @param {ReactComponent} c1 first component you're comparing
 * @param {ReactComponent} c2 second component you're comparing
 * @return {number} Return value usable by Array.prototype.sort().
 */
function mountDepthComparator(c1, c2) {
  return c1._mountDepth - c2._mountDepth;
}

function runBatchedUpdates(transaction) {
  var len = transaction.dirtyComponentsLength;
  ("production" !== process.env.NODE_ENV ? invariant(
    len === dirtyComponents.length,
    'Expected flush transaction\'s stored dirty-components length (%s) to ' +
    'match dirty-components array length (%s).',
    len,
    dirtyComponents.length
  ) : invariant(len === dirtyComponents.length));

  // Since reconciling a component higher in the owner hierarchy usually (not
  // always -- see shouldComponentUpdate()) will reconcile children, reconcile
  // them before their children by sorting the array.
  dirtyComponents.sort(mountDepthComparator);

  for (var i = 0; i < len; i++) {
    // If a component is unmounted before pending changes apply, ignore them
    // TODO: Queue unmounts in the same list to avoid this happening at all
    var component = dirtyComponents[i];
    if (component.isMounted()) {
      // If performUpdateIfNecessary happens to enqueue any new updates, we
      // shouldn't execute the callbacks until the next render happens, so
      // stash the callbacks first
      var callbacks = component._pendingCallbacks;
      component._pendingCallbacks = null;
      component.performUpdateIfNecessary(transaction.reconcileTransaction);

      if (callbacks) {
        for (var j = 0; j < callbacks.length; j++) {
          transaction.callbackQueue.enqueue(
            callbacks[j],
            component
          );
        }
      }
    }
  }
}

var flushBatchedUpdates = ReactPerf.measure(
  'ReactUpdates',
  'flushBatchedUpdates',
  function() {
    // ReactUpdatesFlushTransaction's wrappers will clear the dirtyComponents
    // array and perform any updates enqueued by mount-ready handlers (i.e.,
    // componentDidUpdate) but we need to check here too in order to catch
    // updates enqueued by setState callbacks and asap calls.
    while (dirtyComponents.length || asapEnqueued) {
      if (dirtyComponents.length) {
        var transaction = ReactUpdatesFlushTransaction.getPooled();
        transaction.perform(runBatchedUpdates, null, transaction);
        ReactUpdatesFlushTransaction.release(transaction);
      }

      if (asapEnqueued) {
        asapEnqueued = false;
        var queue = asapCallbackQueue;
        asapCallbackQueue = CallbackQueue.getPooled();
        queue.notifyAll();
        CallbackQueue.release(queue);
      }
    }
  }
);

/**
 * Mark a component as needing a rerender, adding an optional callback to a
 * list of functions which will be executed once the rerender occurs.
 */
function enqueueUpdate(component, callback) {
  ("production" !== process.env.NODE_ENV ? invariant(
    !callback || typeof callback === "function",
    'enqueueUpdate(...): You called `setProps`, `replaceProps`, ' +
    '`setState`, `replaceState`, or `forceUpdate` with a callback that ' +
    'isn\'t callable.'
  ) : invariant(!callback || typeof callback === "function"));
  ensureInjected();

  // Various parts of our code (such as ReactCompositeComponent's
  // _renderValidatedComponent) assume that calls to render aren't nested;
  // verify that that's the case. (This is called by each top-level update
  // function, like setProps, setState, forceUpdate, etc.; creation and
  // destruction of top-level components is guarded in ReactMount.)
  ("production" !== process.env.NODE_ENV ? warning(
    ReactCurrentOwner.current == null,
    'enqueueUpdate(): Render methods should be a pure function of props ' +
    'and state; triggering nested component updates from render is not ' +
    'allowed. If necessary, trigger nested updates in ' +
    'componentDidUpdate.'
  ) : null);

  if (!batchingStrategy.isBatchingUpdates) {
    batchingStrategy.batchedUpdates(enqueueUpdate, component, callback);
    return;
  }

  dirtyComponents.push(component);

  if (callback) {
    if (component._pendingCallbacks) {
      component._pendingCallbacks.push(callback);
    } else {
      component._pendingCallbacks = [callback];
    }
  }
}

/**
 * Enqueue a callback to be run at the end of the current batching cycle. Throws
 * if no updates are currently being performed.
 */
function asap(callback, context) {
  ("production" !== process.env.NODE_ENV ? invariant(
    batchingStrategy.isBatchingUpdates,
    'ReactUpdates.asap: Can\'t enqueue an asap callback in a context where' +
    'updates are not being batched.'
  ) : invariant(batchingStrategy.isBatchingUpdates));
  asapCallbackQueue.enqueue(callback, context);
  asapEnqueued = true;
}

var ReactUpdatesInjection = {
  injectReconcileTransaction: function(ReconcileTransaction) {
    ("production" !== process.env.NODE_ENV ? invariant(
      ReconcileTransaction,
      'ReactUpdates: must provide a reconcile transaction class'
    ) : invariant(ReconcileTransaction));
    ReactUpdates.ReactReconcileTransaction = ReconcileTransaction;
  },

  injectBatchingStrategy: function(_batchingStrategy) {
    ("production" !== process.env.NODE_ENV ? invariant(
      _batchingStrategy,
      'ReactUpdates: must provide a batching strategy'
    ) : invariant(_batchingStrategy));
    ("production" !== process.env.NODE_ENV ? invariant(
      typeof _batchingStrategy.batchedUpdates === 'function',
      'ReactUpdates: must provide a batchedUpdates() function'
    ) : invariant(typeof _batchingStrategy.batchedUpdates === 'function'));
    ("production" !== process.env.NODE_ENV ? invariant(
      typeof _batchingStrategy.isBatchingUpdates === 'boolean',
      'ReactUpdates: must provide an isBatchingUpdates boolean attribute'
    ) : invariant(typeof _batchingStrategy.isBatchingUpdates === 'boolean'));
    batchingStrategy = _batchingStrategy;
  }
};

var ReactUpdates = {
  /**
   * React references `ReactReconcileTransaction` using this property in order
   * to allow dependency injection.
   *
   * @internal
   */
  ReactReconcileTransaction: null,

  batchedUpdates: batchedUpdates,
  enqueueUpdate: enqueueUpdate,
  flushBatchedUpdates: flushBatchedUpdates,
  injection: ReactUpdatesInjection,
  asap: asap
};

module.exports = ReactUpdates;

}).call(this,require('_process'))

},{"./CallbackQueue":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/CallbackQueue.js","./Object.assign":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/Object.assign.js","./PooledClass":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/PooledClass.js","./ReactCurrentOwner":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ReactCurrentOwner.js","./ReactPerf":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ReactPerf.js","./Transaction":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/Transaction.js","./invariant":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/invariant.js","./warning":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/warning.js","_process":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/browserify/node_modules/process/browser.js"}],"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ReactWithAddons.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactWithAddons
 */

/**
 * This module exists purely in the open source project, and is meant as a way
 * to create a separate standalone build of React. This build has "addons", or
 * functionality we've built and think might be useful but doesn't have a good
 * place to live inside React core.
 */

"use strict";

var LinkedStateMixin = require("./LinkedStateMixin");
var React = require("./React");
var ReactComponentWithPureRenderMixin =
  require("./ReactComponentWithPureRenderMixin");
var ReactCSSTransitionGroup = require("./ReactCSSTransitionGroup");
var ReactTransitionGroup = require("./ReactTransitionGroup");
var ReactUpdates = require("./ReactUpdates");

var cx = require("./cx");
var cloneWithProps = require("./cloneWithProps");
var update = require("./update");

React.addons = {
  CSSTransitionGroup: ReactCSSTransitionGroup,
  LinkedStateMixin: LinkedStateMixin,
  PureRenderMixin: ReactComponentWithPureRenderMixin,
  TransitionGroup: ReactTransitionGroup,

  batchedUpdates: ReactUpdates.batchedUpdates,
  classSet: cx,
  cloneWithProps: cloneWithProps,
  update: update
};

if ("production" !== process.env.NODE_ENV) {
  React.addons.Perf = require("./ReactDefaultPerf");
  React.addons.TestUtils = require("./ReactTestUtils");
}

module.exports = React;

}).call(this,require('_process'))

},{"./LinkedStateMixin":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/LinkedStateMixin.js","./React":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/React.js","./ReactCSSTransitionGroup":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ReactCSSTransitionGroup.js","./ReactComponentWithPureRenderMixin":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ReactComponentWithPureRenderMixin.js","./ReactDefaultPerf":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ReactDefaultPerf.js","./ReactTestUtils":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ReactTestUtils.js","./ReactTransitionGroup":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ReactTransitionGroup.js","./ReactUpdates":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ReactUpdates.js","./cloneWithProps":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/cloneWithProps.js","./cx":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/cx.js","./update":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/update.js","_process":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/browserify/node_modules/process/browser.js"}],"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/SVGDOMPropertyConfig.js":[function(require,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SVGDOMPropertyConfig
 */

/*jslint bitwise: true*/

"use strict";

var DOMProperty = require("./DOMProperty");

var MUST_USE_ATTRIBUTE = DOMProperty.injection.MUST_USE_ATTRIBUTE;

var SVGDOMPropertyConfig = {
  Properties: {
    cx: MUST_USE_ATTRIBUTE,
    cy: MUST_USE_ATTRIBUTE,
    d: MUST_USE_ATTRIBUTE,
    dx: MUST_USE_ATTRIBUTE,
    dy: MUST_USE_ATTRIBUTE,
    fill: MUST_USE_ATTRIBUTE,
    fillOpacity: MUST_USE_ATTRIBUTE,
    fontFamily: MUST_USE_ATTRIBUTE,
    fontSize: MUST_USE_ATTRIBUTE,
    fx: MUST_USE_ATTRIBUTE,
    fy: MUST_USE_ATTRIBUTE,
    gradientTransform: MUST_USE_ATTRIBUTE,
    gradientUnits: MUST_USE_ATTRIBUTE,
    markerEnd: MUST_USE_ATTRIBUTE,
    markerMid: MUST_USE_ATTRIBUTE,
    markerStart: MUST_USE_ATTRIBUTE,
    offset: MUST_USE_ATTRIBUTE,
    opacity: MUST_USE_ATTRIBUTE,
    patternContentUnits: MUST_USE_ATTRIBUTE,
    patternUnits: MUST_USE_ATTRIBUTE,
    points: MUST_USE_ATTRIBUTE,
    preserveAspectRatio: MUST_USE_ATTRIBUTE,
    r: MUST_USE_ATTRIBUTE,
    rx: MUST_USE_ATTRIBUTE,
    ry: MUST_USE_ATTRIBUTE,
    spreadMethod: MUST_USE_ATTRIBUTE,
    stopColor: MUST_USE_ATTRIBUTE,
    stopOpacity: MUST_USE_ATTRIBUTE,
    stroke: MUST_USE_ATTRIBUTE,
    strokeDasharray: MUST_USE_ATTRIBUTE,
    strokeLinecap: MUST_USE_ATTRIBUTE,
    strokeOpacity: MUST_USE_ATTRIBUTE,
    strokeWidth: MUST_USE_ATTRIBUTE,
    textAnchor: MUST_USE_ATTRIBUTE,
    transform: MUST_USE_ATTRIBUTE,
    version: MUST_USE_ATTRIBUTE,
    viewBox: MUST_USE_ATTRIBUTE,
    x1: MUST_USE_ATTRIBUTE,
    x2: MUST_USE_ATTRIBUTE,
    x: MUST_USE_ATTRIBUTE,
    y1: MUST_USE_ATTRIBUTE,
    y2: MUST_USE_ATTRIBUTE,
    y: MUST_USE_ATTRIBUTE
  },
  DOMAttributeNames: {
    fillOpacity: 'fill-opacity',
    fontFamily: 'font-family',
    fontSize: 'font-size',
    gradientTransform: 'gradientTransform',
    gradientUnits: 'gradientUnits',
    markerEnd: 'marker-end',
    markerMid: 'marker-mid',
    markerStart: 'marker-start',
    patternContentUnits: 'patternContentUnits',
    patternUnits: 'patternUnits',
    preserveAspectRatio: 'preserveAspectRatio',
    spreadMethod: 'spreadMethod',
    stopColor: 'stop-color',
    stopOpacity: 'stop-opacity',
    strokeDasharray: 'stroke-dasharray',
    strokeLinecap: 'stroke-linecap',
    strokeOpacity: 'stroke-opacity',
    strokeWidth: 'stroke-width',
    textAnchor: 'text-anchor',
    viewBox: 'viewBox'
  }
};

module.exports = SVGDOMPropertyConfig;

},{"./DOMProperty":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/DOMProperty.js"}],"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/SelectEventPlugin.js":[function(require,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SelectEventPlugin
 */

"use strict";

var EventConstants = require("./EventConstants");
var EventPropagators = require("./EventPropagators");
var ReactInputSelection = require("./ReactInputSelection");
var SyntheticEvent = require("./SyntheticEvent");

var getActiveElement = require("./getActiveElement");
var isTextInputElement = require("./isTextInputElement");
var keyOf = require("./keyOf");
var shallowEqual = require("./shallowEqual");

var topLevelTypes = EventConstants.topLevelTypes;

var eventTypes = {
  select: {
    phasedRegistrationNames: {
      bubbled: keyOf({onSelect: null}),
      captured: keyOf({onSelectCapture: null})
    },
    dependencies: [
      topLevelTypes.topBlur,
      topLevelTypes.topContextMenu,
      topLevelTypes.topFocus,
      topLevelTypes.topKeyDown,
      topLevelTypes.topMouseDown,
      topLevelTypes.topMouseUp,
      topLevelTypes.topSelectionChange
    ]
  }
};

var activeElement = null;
var activeElementID = null;
var lastSelection = null;
var mouseDown = false;

/**
 * Get an object which is a unique representation of the current selection.
 *
 * The return value will not be consistent across nodes or browsers, but
 * two identical selections on the same node will return identical objects.
 *
 * @param {DOMElement} node
 * @param {object}
 */
function getSelection(node) {
  if ('selectionStart' in node &&
      ReactInputSelection.hasSelectionCapabilities(node)) {
    return {
      start: node.selectionStart,
      end: node.selectionEnd
    };
  } else if (window.getSelection) {
    var selection = window.getSelection();
    return {
      anchorNode: selection.anchorNode,
      anchorOffset: selection.anchorOffset,
      focusNode: selection.focusNode,
      focusOffset: selection.focusOffset
    };
  } else if (document.selection) {
    var range = document.selection.createRange();
    return {
      parentElement: range.parentElement(),
      text: range.text,
      top: range.boundingTop,
      left: range.boundingLeft
    };
  }
}

/**
 * Poll selection to see whether it's changed.
 *
 * @param {object} nativeEvent
 * @return {?SyntheticEvent}
 */
function constructSelectEvent(nativeEvent) {
  // Ensure we have the right element, and that the user is not dragging a
  // selection (this matches native `select` event behavior). In HTML5, select
  // fires only on input and textarea thus if there's no focused element we
  // won't dispatch.
  if (mouseDown ||
      activeElement == null ||
      activeElement != getActiveElement()) {
    return;
  }

  // Only fire when selection has actually changed.
  var currentSelection = getSelection(activeElement);
  if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
    lastSelection = currentSelection;

    var syntheticEvent = SyntheticEvent.getPooled(
      eventTypes.select,
      activeElementID,
      nativeEvent
    );

    syntheticEvent.type = 'select';
    syntheticEvent.target = activeElement;

    EventPropagators.accumulateTwoPhaseDispatches(syntheticEvent);

    return syntheticEvent;
  }
}

/**
 * This plugin creates an `onSelect` event that normalizes select events
 * across form elements.
 *
 * Supported elements are:
 * - input (see `isTextInputElement`)
 * - textarea
 * - contentEditable
 *
 * This differs from native browser implementations in the following ways:
 * - Fires on contentEditable fields as well as inputs.
 * - Fires for collapsed selection.
 * - Fires after user input.
 */
var SelectEventPlugin = {

  eventTypes: eventTypes,

  /**
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {DOMEventTarget} topLevelTarget The listening component root node.
   * @param {string} topLevelTargetID ID of `topLevelTarget`.
   * @param {object} nativeEvent Native browser event.
   * @return {*} An accumulation of synthetic events.
   * @see {EventPluginHub.extractEvents}
   */
  extractEvents: function(
      topLevelType,
      topLevelTarget,
      topLevelTargetID,
      nativeEvent) {

    switch (topLevelType) {
      // Track the input node that has focus.
      case topLevelTypes.topFocus:
        if (isTextInputElement(topLevelTarget) ||
            topLevelTarget.contentEditable === 'true') {
          activeElement = topLevelTarget;
          activeElementID = topLevelTargetID;
          lastSelection = null;
        }
        break;
      case topLevelTypes.topBlur:
        activeElement = null;
        activeElementID = null;
        lastSelection = null;
        break;

      // Don't fire the event while the user is dragging. This matches the
      // semantics of the native select event.
      case topLevelTypes.topMouseDown:
        mouseDown = true;
        break;
      case topLevelTypes.topContextMenu:
      case topLevelTypes.topMouseUp:
        mouseDown = false;
        return constructSelectEvent(nativeEvent);

      // Chrome and IE fire non-standard event when selection is changed (and
      // sometimes when it hasn't).
      // Firefox doesn't support selectionchange, so check selection status
      // after each key entry. The selection changes after keydown and before
      // keyup, but we check on keydown as well in the case of holding down a
      // key, when multiple keydown events are fired but only one keyup is.
      case topLevelTypes.topSelectionChange:
      case topLevelTypes.topKeyDown:
      case topLevelTypes.topKeyUp:
        return constructSelectEvent(nativeEvent);
    }
  }
};

module.exports = SelectEventPlugin;

},{"./EventConstants":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/EventConstants.js","./EventPropagators":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/EventPropagators.js","./ReactInputSelection":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ReactInputSelection.js","./SyntheticEvent":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/SyntheticEvent.js","./getActiveElement":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/getActiveElement.js","./isTextInputElement":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/isTextInputElement.js","./keyOf":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/keyOf.js","./shallowEqual":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/shallowEqual.js"}],"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ServerReactRootIndex.js":[function(require,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ServerReactRootIndex
 * @typechecks
 */

"use strict";

/**
 * Size of the reactRoot ID space. We generate random numbers for React root
 * IDs and if there's a collision the events and DOM update system will
 * get confused. In the future we need a way to generate GUIDs but for
 * now this will work on a smaller scale.
 */
var GLOBAL_MOUNT_POINT_MAX = Math.pow(2, 53);

var ServerReactRootIndex = {
  createReactRootIndex: function() {
    return Math.ceil(Math.random() * GLOBAL_MOUNT_POINT_MAX);
  }
};

module.exports = ServerReactRootIndex;

},{}],"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/SimpleEventPlugin.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SimpleEventPlugin
 */

"use strict";

var EventConstants = require("./EventConstants");
var EventPluginUtils = require("./EventPluginUtils");
var EventPropagators = require("./EventPropagators");
var SyntheticClipboardEvent = require("./SyntheticClipboardEvent");
var SyntheticEvent = require("./SyntheticEvent");
var SyntheticFocusEvent = require("./SyntheticFocusEvent");
var SyntheticKeyboardEvent = require("./SyntheticKeyboardEvent");
var SyntheticMouseEvent = require("./SyntheticMouseEvent");
var SyntheticDragEvent = require("./SyntheticDragEvent");
var SyntheticTouchEvent = require("./SyntheticTouchEvent");
var SyntheticUIEvent = require("./SyntheticUIEvent");
var SyntheticWheelEvent = require("./SyntheticWheelEvent");

var getEventCharCode = require("./getEventCharCode");

var invariant = require("./invariant");
var keyOf = require("./keyOf");
var warning = require("./warning");

var topLevelTypes = EventConstants.topLevelTypes;

var eventTypes = {
  blur: {
    phasedRegistrationNames: {
      bubbled: keyOf({onBlur: true}),
      captured: keyOf({onBlurCapture: true})
    }
  },
  click: {
    phasedRegistrationNames: {
      bubbled: keyOf({onClick: true}),
      captured: keyOf({onClickCapture: true})
    }
  },
  contextMenu: {
    phasedRegistrationNames: {
      bubbled: keyOf({onContextMenu: true}),
      captured: keyOf({onContextMenuCapture: true})
    }
  },
  copy: {
    phasedRegistrationNames: {
      bubbled: keyOf({onCopy: true}),
      captured: keyOf({onCopyCapture: true})
    }
  },
  cut: {
    phasedRegistrationNames: {
      bubbled: keyOf({onCut: true}),
      captured: keyOf({onCutCapture: true})
    }
  },
  doubleClick: {
    phasedRegistrationNames: {
      bubbled: keyOf({onDoubleClick: true}),
      captured: keyOf({onDoubleClickCapture: true})
    }
  },
  drag: {
    phasedRegistrationNames: {
      bubbled: keyOf({onDrag: true}),
      captured: keyOf({onDragCapture: true})
    }
  },
  dragEnd: {
    phasedRegistrationNames: {
      bubbled: keyOf({onDragEnd: true}),
      captured: keyOf({onDragEndCapture: true})
    }
  },
  dragEnter: {
    phasedRegistrationNames: {
      bubbled: keyOf({onDragEnter: true}),
      captured: keyOf({onDragEnterCapture: true})
    }
  },
  dragExit: {
    phasedRegistrationNames: {
      bubbled: keyOf({onDragExit: true}),
      captured: keyOf({onDragExitCapture: true})
    }
  },
  dragLeave: {
    phasedRegistrationNames: {
      bubbled: keyOf({onDragLeave: true}),
      captured: keyOf({onDragLeaveCapture: true})
    }
  },
  dragOver: {
    phasedRegistrationNames: {
      bubbled: keyOf({onDragOver: true}),
      captured: keyOf({onDragOverCapture: true})
    }
  },
  dragStart: {
    phasedRegistrationNames: {
      bubbled: keyOf({onDragStart: true}),
      captured: keyOf({onDragStartCapture: true})
    }
  },
  drop: {
    phasedRegistrationNames: {
      bubbled: keyOf({onDrop: true}),
      captured: keyOf({onDropCapture: true})
    }
  },
  focus: {
    phasedRegistrationNames: {
      bubbled: keyOf({onFocus: true}),
      captured: keyOf({onFocusCapture: true})
    }
  },
  input: {
    phasedRegistrationNames: {
      bubbled: keyOf({onInput: true}),
      captured: keyOf({onInputCapture: true})
    }
  },
  keyDown: {
    phasedRegistrationNames: {
      bubbled: keyOf({onKeyDown: true}),
      captured: keyOf({onKeyDownCapture: true})
    }
  },
  keyPress: {
    phasedRegistrationNames: {
      bubbled: keyOf({onKeyPress: true}),
      captured: keyOf({onKeyPressCapture: true})
    }
  },
  keyUp: {
    phasedRegistrationNames: {
      bubbled: keyOf({onKeyUp: true}),
      captured: keyOf({onKeyUpCapture: true})
    }
  },
  load: {
    phasedRegistrationNames: {
      bubbled: keyOf({onLoad: true}),
      captured: keyOf({onLoadCapture: true})
    }
  },
  error: {
    phasedRegistrationNames: {
      bubbled: keyOf({onError: true}),
      captured: keyOf({onErrorCapture: true})
    }
  },
  // Note: We do not allow listening to mouseOver events. Instead, use the
  // onMouseEnter/onMouseLeave created by `EnterLeaveEventPlugin`.
  mouseDown: {
    phasedRegistrationNames: {
      bubbled: keyOf({onMouseDown: true}),
      captured: keyOf({onMouseDownCapture: true})
    }
  },
  mouseMove: {
    phasedRegistrationNames: {
      bubbled: keyOf({onMouseMove: true}),
      captured: keyOf({onMouseMoveCapture: true})
    }
  },
  mouseOut: {
    phasedRegistrationNames: {
      bubbled: keyOf({onMouseOut: true}),
      captured: keyOf({onMouseOutCapture: true})
    }
  },
  mouseOver: {
    phasedRegistrationNames: {
      bubbled: keyOf({onMouseOver: true}),
      captured: keyOf({onMouseOverCapture: true})
    }
  },
  mouseUp: {
    phasedRegistrationNames: {
      bubbled: keyOf({onMouseUp: true}),
      captured: keyOf({onMouseUpCapture: true})
    }
  },
  paste: {
    phasedRegistrationNames: {
      bubbled: keyOf({onPaste: true}),
      captured: keyOf({onPasteCapture: true})
    }
  },
  reset: {
    phasedRegistrationNames: {
      bubbled: keyOf({onReset: true}),
      captured: keyOf({onResetCapture: true})
    }
  },
  scroll: {
    phasedRegistrationNames: {
      bubbled: keyOf({onScroll: true}),
      captured: keyOf({onScrollCapture: true})
    }
  },
  submit: {
    phasedRegistrationNames: {
      bubbled: keyOf({onSubmit: true}),
      captured: keyOf({onSubmitCapture: true})
    }
  },
  touchCancel: {
    phasedRegistrationNames: {
      bubbled: keyOf({onTouchCancel: true}),
      captured: keyOf({onTouchCancelCapture: true})
    }
  },
  touchEnd: {
    phasedRegistrationNames: {
      bubbled: keyOf({onTouchEnd: true}),
      captured: keyOf({onTouchEndCapture: true})
    }
  },
  touchMove: {
    phasedRegistrationNames: {
      bubbled: keyOf({onTouchMove: true}),
      captured: keyOf({onTouchMoveCapture: true})
    }
  },
  touchStart: {
    phasedRegistrationNames: {
      bubbled: keyOf({onTouchStart: true}),
      captured: keyOf({onTouchStartCapture: true})
    }
  },
  wheel: {
    phasedRegistrationNames: {
      bubbled: keyOf({onWheel: true}),
      captured: keyOf({onWheelCapture: true})
    }
  }
};

var topLevelEventsToDispatchConfig = {
  topBlur:        eventTypes.blur,
  topClick:       eventTypes.click,
  topContextMenu: eventTypes.contextMenu,
  topCopy:        eventTypes.copy,
  topCut:         eventTypes.cut,
  topDoubleClick: eventTypes.doubleClick,
  topDrag:        eventTypes.drag,
  topDragEnd:     eventTypes.dragEnd,
  topDragEnter:   eventTypes.dragEnter,
  topDragExit:    eventTypes.dragExit,
  topDragLeave:   eventTypes.dragLeave,
  topDragOver:    eventTypes.dragOver,
  topDragStart:   eventTypes.dragStart,
  topDrop:        eventTypes.drop,
  topError:       eventTypes.error,
  topFocus:       eventTypes.focus,
  topInput:       eventTypes.input,
  topKeyDown:     eventTypes.keyDown,
  topKeyPress:    eventTypes.keyPress,
  topKeyUp:       eventTypes.keyUp,
  topLoad:        eventTypes.load,
  topMouseDown:   eventTypes.mouseDown,
  topMouseMove:   eventTypes.mouseMove,
  topMouseOut:    eventTypes.mouseOut,
  topMouseOver:   eventTypes.mouseOver,
  topMouseUp:     eventTypes.mouseUp,
  topPaste:       eventTypes.paste,
  topReset:       eventTypes.reset,
  topScroll:      eventTypes.scroll,
  topSubmit:      eventTypes.submit,
  topTouchCancel: eventTypes.touchCancel,
  topTouchEnd:    eventTypes.touchEnd,
  topTouchMove:   eventTypes.touchMove,
  topTouchStart:  eventTypes.touchStart,
  topWheel:       eventTypes.wheel
};

for (var topLevelType in topLevelEventsToDispatchConfig) {
  topLevelEventsToDispatchConfig[topLevelType].dependencies = [topLevelType];
}

var SimpleEventPlugin = {

  eventTypes: eventTypes,

  /**
   * Same as the default implementation, except cancels the event when return
   * value is false. This behavior will be disabled in a future release.
   *
   * @param {object} Event to be dispatched.
   * @param {function} Application-level callback.
   * @param {string} domID DOM ID to pass to the callback.
   */
  executeDispatch: function(event, listener, domID) {
    var returnValue = EventPluginUtils.executeDispatch(event, listener, domID);

    ("production" !== process.env.NODE_ENV ? warning(
      typeof returnValue !== 'boolean',
      'Returning `false` from an event handler is deprecated and will be ' +
      'ignored in a future release. Instead, manually call ' +
      'e.stopPropagation() or e.preventDefault(), as appropriate.'
    ) : null);

    if (returnValue === false) {
      event.stopPropagation();
      event.preventDefault();
    }
  },

  /**
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {DOMEventTarget} topLevelTarget The listening component root node.
   * @param {string} topLevelTargetID ID of `topLevelTarget`.
   * @param {object} nativeEvent Native browser event.
   * @return {*} An accumulation of synthetic events.
   * @see {EventPluginHub.extractEvents}
   */
  extractEvents: function(
      topLevelType,
      topLevelTarget,
      topLevelTargetID,
      nativeEvent) {
    var dispatchConfig = topLevelEventsToDispatchConfig[topLevelType];
    if (!dispatchConfig) {
      return null;
    }
    var EventConstructor;
    switch (topLevelType) {
      case topLevelTypes.topInput:
      case topLevelTypes.topLoad:
      case topLevelTypes.topError:
      case topLevelTypes.topReset:
      case topLevelTypes.topSubmit:
        // HTML Events
        // @see http://www.w3.org/TR/html5/index.html#events-0
        EventConstructor = SyntheticEvent;
        break;
      case topLevelTypes.topKeyPress:
        // FireFox creates a keypress event for function keys too. This removes
        // the unwanted keypress events. Enter is however both printable and
        // non-printable. One would expect Tab to be as well (but it isn't).
        if (getEventCharCode(nativeEvent) === 0) {
          return null;
        }
        /* falls through */
      case topLevelTypes.topKeyDown:
      case topLevelTypes.topKeyUp:
        EventConstructor = SyntheticKeyboardEvent;
        break;
      case topLevelTypes.topBlur:
      case topLevelTypes.topFocus:
        EventConstructor = SyntheticFocusEvent;
        break;
      case topLevelTypes.topClick:
        // Firefox creates a click event on right mouse clicks. This removes the
        // unwanted click events.
        if (nativeEvent.button === 2) {
          return null;
        }
        /* falls through */
      case topLevelTypes.topContextMenu:
      case topLevelTypes.topDoubleClick:
      case topLevelTypes.topMouseDown:
      case topLevelTypes.topMouseMove:
      case topLevelTypes.topMouseOut:
      case topLevelTypes.topMouseOver:
      case topLevelTypes.topMouseUp:
        EventConstructor = SyntheticMouseEvent;
        break;
      case topLevelTypes.topDrag:
      case topLevelTypes.topDragEnd:
      case topLevelTypes.topDragEnter:
      case topLevelTypes.topDragExit:
      case topLevelTypes.topDragLeave:
      case topLevelTypes.topDragOver:
      case topLevelTypes.topDragStart:
      case topLevelTypes.topDrop:
        EventConstructor = SyntheticDragEvent;
        break;
      case topLevelTypes.topTouchCancel:
      case topLevelTypes.topTouchEnd:
      case topLevelTypes.topTouchMove:
      case topLevelTypes.topTouchStart:
        EventConstructor = SyntheticTouchEvent;
        break;
      case topLevelTypes.topScroll:
        EventConstructor = SyntheticUIEvent;
        break;
      case topLevelTypes.topWheel:
        EventConstructor = SyntheticWheelEvent;
        break;
      case topLevelTypes.topCopy:
      case topLevelTypes.topCut:
      case topLevelTypes.topPaste:
        EventConstructor = SyntheticClipboardEvent;
        break;
    }
    ("production" !== process.env.NODE_ENV ? invariant(
      EventConstructor,
      'SimpleEventPlugin: Unhandled event type, `%s`.',
      topLevelType
    ) : invariant(EventConstructor));
    var event = EventConstructor.getPooled(
      dispatchConfig,
      topLevelTargetID,
      nativeEvent
    );
    EventPropagators.accumulateTwoPhaseDispatches(event);
    return event;
  }

};

module.exports = SimpleEventPlugin;

}).call(this,require('_process'))

},{"./EventConstants":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/EventConstants.js","./EventPluginUtils":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/EventPluginUtils.js","./EventPropagators":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/EventPropagators.js","./SyntheticClipboardEvent":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/SyntheticClipboardEvent.js","./SyntheticDragEvent":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/SyntheticDragEvent.js","./SyntheticEvent":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/SyntheticEvent.js","./SyntheticFocusEvent":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/SyntheticFocusEvent.js","./SyntheticKeyboardEvent":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/SyntheticKeyboardEvent.js","./SyntheticMouseEvent":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/SyntheticMouseEvent.js","./SyntheticTouchEvent":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/SyntheticTouchEvent.js","./SyntheticUIEvent":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/SyntheticUIEvent.js","./SyntheticWheelEvent":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/SyntheticWheelEvent.js","./getEventCharCode":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/getEventCharCode.js","./invariant":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/invariant.js","./keyOf":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/keyOf.js","./warning":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/warning.js","_process":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/browserify/node_modules/process/browser.js"}],"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/SyntheticClipboardEvent.js":[function(require,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticClipboardEvent
 * @typechecks static-only
 */

"use strict";

var SyntheticEvent = require("./SyntheticEvent");

/**
 * @interface Event
 * @see http://www.w3.org/TR/clipboard-apis/
 */
var ClipboardEventInterface = {
  clipboardData: function(event) {
    return (
      'clipboardData' in event ?
        event.clipboardData :
        window.clipboardData
    );
  }
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticClipboardEvent(dispatchConfig, dispatchMarker, nativeEvent) {
  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
}

SyntheticEvent.augmentClass(SyntheticClipboardEvent, ClipboardEventInterface);

module.exports = SyntheticClipboardEvent;


},{"./SyntheticEvent":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/SyntheticEvent.js"}],"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/SyntheticCompositionEvent.js":[function(require,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticCompositionEvent
 * @typechecks static-only
 */

"use strict";

var SyntheticEvent = require("./SyntheticEvent");

/**
 * @interface Event
 * @see http://www.w3.org/TR/DOM-Level-3-Events/#events-compositionevents
 */
var CompositionEventInterface = {
  data: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticCompositionEvent(
  dispatchConfig,
  dispatchMarker,
  nativeEvent) {
  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
}

SyntheticEvent.augmentClass(
  SyntheticCompositionEvent,
  CompositionEventInterface
);

module.exports = SyntheticCompositionEvent;


},{"./SyntheticEvent":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/SyntheticEvent.js"}],"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/SyntheticDragEvent.js":[function(require,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticDragEvent
 * @typechecks static-only
 */

"use strict";

var SyntheticMouseEvent = require("./SyntheticMouseEvent");

/**
 * @interface DragEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var DragEventInterface = {
  dataTransfer: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticDragEvent(dispatchConfig, dispatchMarker, nativeEvent) {
  SyntheticMouseEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
}

SyntheticMouseEvent.augmentClass(SyntheticDragEvent, DragEventInterface);

module.exports = SyntheticDragEvent;

},{"./SyntheticMouseEvent":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/SyntheticMouseEvent.js"}],"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/SyntheticEvent.js":[function(require,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticEvent
 * @typechecks static-only
 */

"use strict";

var PooledClass = require("./PooledClass");

var assign = require("./Object.assign");
var emptyFunction = require("./emptyFunction");
var getEventTarget = require("./getEventTarget");

/**
 * @interface Event
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var EventInterface = {
  type: null,
  target: getEventTarget,
  // currentTarget is set when dispatching; no use in copying it here
  currentTarget: emptyFunction.thatReturnsNull,
  eventPhase: null,
  bubbles: null,
  cancelable: null,
  timeStamp: function(event) {
    return event.timeStamp || Date.now();
  },
  defaultPrevented: null,
  isTrusted: null
};

/**
 * Synthetic events are dispatched by event plugins, typically in response to a
 * top-level event delegation handler.
 *
 * These systems should generally use pooling to reduce the frequency of garbage
 * collection. The system should check `isPersistent` to determine whether the
 * event should be released into the pool after being dispatched. Users that
 * need a persisted event should invoke `persist`.
 *
 * Synthetic events (and subclasses) implement the DOM Level 3 Events API by
 * normalizing browser quirks. Subclasses do not necessarily have to implement a
 * DOM interface; custom application-specific events can also subclass this.
 *
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 */
function SyntheticEvent(dispatchConfig, dispatchMarker, nativeEvent) {
  this.dispatchConfig = dispatchConfig;
  this.dispatchMarker = dispatchMarker;
  this.nativeEvent = nativeEvent;

  var Interface = this.constructor.Interface;
  for (var propName in Interface) {
    if (!Interface.hasOwnProperty(propName)) {
      continue;
    }
    var normalize = Interface[propName];
    if (normalize) {
      this[propName] = normalize(nativeEvent);
    } else {
      this[propName] = nativeEvent[propName];
    }
  }

  var defaultPrevented = nativeEvent.defaultPrevented != null ?
    nativeEvent.defaultPrevented :
    nativeEvent.returnValue === false;
  if (defaultPrevented) {
    this.isDefaultPrevented = emptyFunction.thatReturnsTrue;
  } else {
    this.isDefaultPrevented = emptyFunction.thatReturnsFalse;
  }
  this.isPropagationStopped = emptyFunction.thatReturnsFalse;
}

assign(SyntheticEvent.prototype, {

  preventDefault: function() {
    this.defaultPrevented = true;
    var event = this.nativeEvent;
    event.preventDefault ? event.preventDefault() : event.returnValue = false;
    this.isDefaultPrevented = emptyFunction.thatReturnsTrue;
  },

  stopPropagation: function() {
    var event = this.nativeEvent;
    event.stopPropagation ? event.stopPropagation() : event.cancelBubble = true;
    this.isPropagationStopped = emptyFunction.thatReturnsTrue;
  },

  /**
   * We release all dispatched `SyntheticEvent`s after each event loop, adding
   * them back into the pool. This allows a way to hold onto a reference that
   * won't be added back into the pool.
   */
  persist: function() {
    this.isPersistent = emptyFunction.thatReturnsTrue;
  },

  /**
   * Checks if this event should be released back into the pool.
   *
   * @return {boolean} True if this should not be released, false otherwise.
   */
  isPersistent: emptyFunction.thatReturnsFalse,

  /**
   * `PooledClass` looks for `destructor` on each instance it releases.
   */
  destructor: function() {
    var Interface = this.constructor.Interface;
    for (var propName in Interface) {
      this[propName] = null;
    }
    this.dispatchConfig = null;
    this.dispatchMarker = null;
    this.nativeEvent = null;
  }

});

SyntheticEvent.Interface = EventInterface;

/**
 * Helper to reduce boilerplate when creating subclasses.
 *
 * @param {function} Class
 * @param {?object} Interface
 */
SyntheticEvent.augmentClass = function(Class, Interface) {
  var Super = this;

  var prototype = Object.create(Super.prototype);
  assign(prototype, Class.prototype);
  Class.prototype = prototype;
  Class.prototype.constructor = Class;

  Class.Interface = assign({}, Super.Interface, Interface);
  Class.augmentClass = Super.augmentClass;

  PooledClass.addPoolingTo(Class, PooledClass.threeArgumentPooler);
};

PooledClass.addPoolingTo(SyntheticEvent, PooledClass.threeArgumentPooler);

module.exports = SyntheticEvent;

},{"./Object.assign":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/Object.assign.js","./PooledClass":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/PooledClass.js","./emptyFunction":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/emptyFunction.js","./getEventTarget":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/getEventTarget.js"}],"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/SyntheticFocusEvent.js":[function(require,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticFocusEvent
 * @typechecks static-only
 */

"use strict";

var SyntheticUIEvent = require("./SyntheticUIEvent");

/**
 * @interface FocusEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var FocusEventInterface = {
  relatedTarget: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticFocusEvent(dispatchConfig, dispatchMarker, nativeEvent) {
  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
}

SyntheticUIEvent.augmentClass(SyntheticFocusEvent, FocusEventInterface);

module.exports = SyntheticFocusEvent;

},{"./SyntheticUIEvent":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/SyntheticUIEvent.js"}],"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/SyntheticInputEvent.js":[function(require,module,exports){
/**
 * Copyright 2013 Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticInputEvent
 * @typechecks static-only
 */

"use strict";

var SyntheticEvent = require("./SyntheticEvent");

/**
 * @interface Event
 * @see http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105
 *      /#events-inputevents
 */
var InputEventInterface = {
  data: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticInputEvent(
  dispatchConfig,
  dispatchMarker,
  nativeEvent) {
  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
}

SyntheticEvent.augmentClass(
  SyntheticInputEvent,
  InputEventInterface
);

module.exports = SyntheticInputEvent;


},{"./SyntheticEvent":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/SyntheticEvent.js"}],"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/SyntheticKeyboardEvent.js":[function(require,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticKeyboardEvent
 * @typechecks static-only
 */

"use strict";

var SyntheticUIEvent = require("./SyntheticUIEvent");

var getEventCharCode = require("./getEventCharCode");
var getEventKey = require("./getEventKey");
var getEventModifierState = require("./getEventModifierState");

/**
 * @interface KeyboardEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var KeyboardEventInterface = {
  key: getEventKey,
  location: null,
  ctrlKey: null,
  shiftKey: null,
  altKey: null,
  metaKey: null,
  repeat: null,
  locale: null,
  getModifierState: getEventModifierState,
  // Legacy Interface
  charCode: function(event) {
    // `charCode` is the result of a KeyPress event and represents the value of
    // the actual printable character.

    // KeyPress is deprecated, but its replacement is not yet final and not
    // implemented in any major browser. Only KeyPress has charCode.
    if (event.type === 'keypress') {
      return getEventCharCode(event);
    }
    return 0;
  },
  keyCode: function(event) {
    // `keyCode` is the result of a KeyDown/Up event and represents the value of
    // physical keyboard key.

    // The actual meaning of the value depends on the users' keyboard layout
    // which cannot be detected. Assuming that it is a US keyboard layout
    // provides a surprisingly accurate mapping for US and European users.
    // Due to this, it is left to the user to implement at this time.
    if (event.type === 'keydown' || event.type === 'keyup') {
      return event.keyCode;
    }
    return 0;
  },
  which: function(event) {
    // `which` is an alias for either `keyCode` or `charCode` depending on the
    // type of the event.
    if (event.type === 'keypress') {
      return getEventCharCode(event);
    }
    if (event.type === 'keydown' || event.type === 'keyup') {
      return event.keyCode;
    }
    return 0;
  }
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticKeyboardEvent(dispatchConfig, dispatchMarker, nativeEvent) {
  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
}

SyntheticUIEvent.augmentClass(SyntheticKeyboardEvent, KeyboardEventInterface);

module.exports = SyntheticKeyboardEvent;

},{"./SyntheticUIEvent":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/SyntheticUIEvent.js","./getEventCharCode":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/getEventCharCode.js","./getEventKey":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/getEventKey.js","./getEventModifierState":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/getEventModifierState.js"}],"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/SyntheticMouseEvent.js":[function(require,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticMouseEvent
 * @typechecks static-only
 */

"use strict";

var SyntheticUIEvent = require("./SyntheticUIEvent");
var ViewportMetrics = require("./ViewportMetrics");

var getEventModifierState = require("./getEventModifierState");

/**
 * @interface MouseEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var MouseEventInterface = {
  screenX: null,
  screenY: null,
  clientX: null,
  clientY: null,
  ctrlKey: null,
  shiftKey: null,
  altKey: null,
  metaKey: null,
  getModifierState: getEventModifierState,
  button: function(event) {
    // Webkit, Firefox, IE9+
    // which:  1 2 3
    // button: 0 1 2 (standard)
    var button = event.button;
    if ('which' in event) {
      return button;
    }
    // IE<9
    // which:  undefined
    // button: 0 0 0
    // button: 1 4 2 (onmouseup)
    return button === 2 ? 2 : button === 4 ? 1 : 0;
  },
  buttons: null,
  relatedTarget: function(event) {
    return event.relatedTarget || (
      event.fromElement === event.srcElement ?
        event.toElement :
        event.fromElement
    );
  },
  // "Proprietary" Interface.
  pageX: function(event) {
    return 'pageX' in event ?
      event.pageX :
      event.clientX + ViewportMetrics.currentScrollLeft;
  },
  pageY: function(event) {
    return 'pageY' in event ?
      event.pageY :
      event.clientY + ViewportMetrics.currentScrollTop;
  }
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticMouseEvent(dispatchConfig, dispatchMarker, nativeEvent) {
  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
}

SyntheticUIEvent.augmentClass(SyntheticMouseEvent, MouseEventInterface);

module.exports = SyntheticMouseEvent;

},{"./SyntheticUIEvent":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/SyntheticUIEvent.js","./ViewportMetrics":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ViewportMetrics.js","./getEventModifierState":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/getEventModifierState.js"}],"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/SyntheticTouchEvent.js":[function(require,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticTouchEvent
 * @typechecks static-only
 */

"use strict";

var SyntheticUIEvent = require("./SyntheticUIEvent");

var getEventModifierState = require("./getEventModifierState");

/**
 * @interface TouchEvent
 * @see http://www.w3.org/TR/touch-events/
 */
var TouchEventInterface = {
  touches: null,
  targetTouches: null,
  changedTouches: null,
  altKey: null,
  metaKey: null,
  ctrlKey: null,
  shiftKey: null,
  getModifierState: getEventModifierState
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticTouchEvent(dispatchConfig, dispatchMarker, nativeEvent) {
  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
}

SyntheticUIEvent.augmentClass(SyntheticTouchEvent, TouchEventInterface);

module.exports = SyntheticTouchEvent;

},{"./SyntheticUIEvent":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/SyntheticUIEvent.js","./getEventModifierState":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/getEventModifierState.js"}],"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/SyntheticUIEvent.js":[function(require,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticUIEvent
 * @typechecks static-only
 */

"use strict";

var SyntheticEvent = require("./SyntheticEvent");

var getEventTarget = require("./getEventTarget");

/**
 * @interface UIEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var UIEventInterface = {
  view: function(event) {
    if (event.view) {
      return event.view;
    }

    var target = getEventTarget(event);
    if (target != null && target.window === target) {
      // target is a window object
      return target;
    }

    var doc = target.ownerDocument;
    // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
    if (doc) {
      return doc.defaultView || doc.parentWindow;
    } else {
      return window;
    }
  },
  detail: function(event) {
    return event.detail || 0;
  }
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticEvent}
 */
function SyntheticUIEvent(dispatchConfig, dispatchMarker, nativeEvent) {
  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
}

SyntheticEvent.augmentClass(SyntheticUIEvent, UIEventInterface);

module.exports = SyntheticUIEvent;

},{"./SyntheticEvent":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/SyntheticEvent.js","./getEventTarget":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/getEventTarget.js"}],"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/SyntheticWheelEvent.js":[function(require,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticWheelEvent
 * @typechecks static-only
 */

"use strict";

var SyntheticMouseEvent = require("./SyntheticMouseEvent");

/**
 * @interface WheelEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var WheelEventInterface = {
  deltaX: function(event) {
    return (
      'deltaX' in event ? event.deltaX :
      // Fallback to `wheelDeltaX` for Webkit and normalize (right is positive).
      'wheelDeltaX' in event ? -event.wheelDeltaX : 0
    );
  },
  deltaY: function(event) {
    return (
      'deltaY' in event ? event.deltaY :
      // Fallback to `wheelDeltaY` for Webkit and normalize (down is positive).
      'wheelDeltaY' in event ? -event.wheelDeltaY :
      // Fallback to `wheelDelta` for IE<9 and normalize (down is positive).
      'wheelDelta' in event ? -event.wheelDelta : 0
    );
  },
  deltaZ: null,

  // Browsers without "deltaMode" is reporting in raw wheel delta where one
  // notch on the scroll is always +/- 120, roughly equivalent to pixels.
  // A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or
  // ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.
  deltaMode: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticMouseEvent}
 */
function SyntheticWheelEvent(dispatchConfig, dispatchMarker, nativeEvent) {
  SyntheticMouseEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
}

SyntheticMouseEvent.augmentClass(SyntheticWheelEvent, WheelEventInterface);

module.exports = SyntheticWheelEvent;

},{"./SyntheticMouseEvent":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/SyntheticMouseEvent.js"}],"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/Transaction.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule Transaction
 */

"use strict";

var invariant = require("./invariant");

/**
 * `Transaction` creates a black box that is able to wrap any method such that
 * certain invariants are maintained before and after the method is invoked
 * (Even if an exception is thrown while invoking the wrapped method). Whoever
 * instantiates a transaction can provide enforcers of the invariants at
 * creation time. The `Transaction` class itself will supply one additional
 * automatic invariant for you - the invariant that any transaction instance
 * should not be run while it is already being run. You would typically create a
 * single instance of a `Transaction` for reuse multiple times, that potentially
 * is used to wrap several different methods. Wrappers are extremely simple -
 * they only require implementing two methods.
 *
 * <pre>
 *                       wrappers (injected at creation time)
 *                                      +        +
 *                                      |        |
 *                    +-----------------|--------|--------------+
 *                    |                 v        |              |
 *                    |      +---------------+   |              |
 *                    |   +--|    wrapper1   |---|----+         |
 *                    |   |  +---------------+   v    |         |
 *                    |   |          +-------------+  |         |
 *                    |   |     +----|   wrapper2  |--------+   |
 *                    |   |     |    +-------------+  |     |   |
 *                    |   |     |                     |     |   |
 *                    |   v     v                     v     v   | wrapper
 *                    | +---+ +---+   +---------+   +---+ +---+ | invariants
 * perform(anyMethod) | |   | |   |   |         |   |   | |   | | maintained
 * +----------------->|-|---|-|---|-->|anyMethod|---|---|-|---|-|-------->
 *                    | |   | |   |   |         |   |   | |   | |
 *                    | |   | |   |   |         |   |   | |   | |
 *                    | |   | |   |   |         |   |   | |   | |
 *                    | +---+ +---+   +---------+   +---+ +---+ |
 *                    |  initialize                    close    |
 *                    +-----------------------------------------+
 * </pre>
 *
 * Use cases:
 * - Preserving the input selection ranges before/after reconciliation.
 *   Restoring selection even in the event of an unexpected error.
 * - Deactivating events while rearranging the DOM, preventing blurs/focuses,
 *   while guaranteeing that afterwards, the event system is reactivated.
 * - Flushing a queue of collected DOM mutations to the main UI thread after a
 *   reconciliation takes place in a worker thread.
 * - Invoking any collected `componentDidUpdate` callbacks after rendering new
 *   content.
 * - (Future use case): Wrapping particular flushes of the `ReactWorker` queue
 *   to preserve the `scrollTop` (an automatic scroll aware DOM).
 * - (Future use case): Layout calculations before and after DOM upates.
 *
 * Transactional plugin API:
 * - A module that has an `initialize` method that returns any precomputation.
 * - and a `close` method that accepts the precomputation. `close` is invoked
 *   when the wrapped process is completed, or has failed.
 *
 * @param {Array<TransactionalWrapper>} transactionWrapper Wrapper modules
 * that implement `initialize` and `close`.
 * @return {Transaction} Single transaction for reuse in thread.
 *
 * @class Transaction
 */
var Mixin = {
  /**
   * Sets up this instance so that it is prepared for collecting metrics. Does
   * so such that this setup method may be used on an instance that is already
   * initialized, in a way that does not consume additional memory upon reuse.
   * That can be useful if you decide to make your subclass of this mixin a
   * "PooledClass".
   */
  reinitializeTransaction: function() {
    this.transactionWrappers = this.getTransactionWrappers();
    if (!this.wrapperInitData) {
      this.wrapperInitData = [];
    } else {
      this.wrapperInitData.length = 0;
    }
    this._isInTransaction = false;
  },

  _isInTransaction: false,

  /**
   * @abstract
   * @return {Array<TransactionWrapper>} Array of transaction wrappers.
   */
  getTransactionWrappers: null,

  isInTransaction: function() {
    return !!this._isInTransaction;
  },

  /**
   * Executes the function within a safety window. Use this for the top level
   * methods that result in large amounts of computation/mutations that would
   * need to be safety checked.
   *
   * @param {function} method Member of scope to call.
   * @param {Object} scope Scope to invoke from.
   * @param {Object?=} args... Arguments to pass to the method (optional).
   *                           Helps prevent need to bind in many cases.
   * @return Return value from `method`.
   */
  perform: function(method, scope, a, b, c, d, e, f) {
    ("production" !== process.env.NODE_ENV ? invariant(
      !this.isInTransaction(),
      'Transaction.perform(...): Cannot initialize a transaction when there ' +
      'is already an outstanding transaction.'
    ) : invariant(!this.isInTransaction()));
    var errorThrown;
    var ret;
    try {
      this._isInTransaction = true;
      // Catching errors makes debugging more difficult, so we start with
      // errorThrown set to true before setting it to false after calling
      // close -- if it's still set to true in the finally block, it means
      // one of these calls threw.
      errorThrown = true;
      this.initializeAll(0);
      ret = method.call(scope, a, b, c, d, e, f);
      errorThrown = false;
    } finally {
      try {
        if (errorThrown) {
          // If `method` throws, prefer to show that stack trace over any thrown
          // by invoking `closeAll`.
          try {
            this.closeAll(0);
          } catch (err) {
          }
        } else {
          // Since `method` didn't throw, we don't want to silence the exception
          // here.
          this.closeAll(0);
        }
      } finally {
        this._isInTransaction = false;
      }
    }
    return ret;
  },

  initializeAll: function(startIndex) {
    var transactionWrappers = this.transactionWrappers;
    for (var i = startIndex; i < transactionWrappers.length; i++) {
      var wrapper = transactionWrappers[i];
      try {
        // Catching errors makes debugging more difficult, so we start with the
        // OBSERVED_ERROR state before overwriting it with the real return value
        // of initialize -- if it's still set to OBSERVED_ERROR in the finally
        // block, it means wrapper.initialize threw.
        this.wrapperInitData[i] = Transaction.OBSERVED_ERROR;
        this.wrapperInitData[i] = wrapper.initialize ?
          wrapper.initialize.call(this) :
          null;
      } finally {
        if (this.wrapperInitData[i] === Transaction.OBSERVED_ERROR) {
          // The initializer for wrapper i threw an error; initialize the
          // remaining wrappers but silence any exceptions from them to ensure
          // that the first error is the one to bubble up.
          try {
            this.initializeAll(i + 1);
          } catch (err) {
          }
        }
      }
    }
  },

  /**
   * Invokes each of `this.transactionWrappers.close[i]` functions, passing into
   * them the respective return values of `this.transactionWrappers.init[i]`
   * (`close`rs that correspond to initializers that failed will not be
   * invoked).
   */
  closeAll: function(startIndex) {
    ("production" !== process.env.NODE_ENV ? invariant(
      this.isInTransaction(),
      'Transaction.closeAll(): Cannot close transaction when none are open.'
    ) : invariant(this.isInTransaction()));
    var transactionWrappers = this.transactionWrappers;
    for (var i = startIndex; i < transactionWrappers.length; i++) {
      var wrapper = transactionWrappers[i];
      var initData = this.wrapperInitData[i];
      var errorThrown;
      try {
        // Catching errors makes debugging more difficult, so we start with
        // errorThrown set to true before setting it to false after calling
        // close -- if it's still set to true in the finally block, it means
        // wrapper.close threw.
        errorThrown = true;
        if (initData !== Transaction.OBSERVED_ERROR) {
          wrapper.close && wrapper.close.call(this, initData);
        }
        errorThrown = false;
      } finally {
        if (errorThrown) {
          // The closer for wrapper i threw an error; close the remaining
          // wrappers but silence any exceptions from them to ensure that the
          // first error is the one to bubble up.
          try {
            this.closeAll(i + 1);
          } catch (e) {
          }
        }
      }
    }
    this.wrapperInitData.length = 0;
  }
};

var Transaction = {

  Mixin: Mixin,

  /**
   * Token to look for to determine if an error occured.
   */
  OBSERVED_ERROR: {}

};

module.exports = Transaction;

}).call(this,require('_process'))

},{"./invariant":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/invariant.js","_process":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/browserify/node_modules/process/browser.js"}],"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ViewportMetrics.js":[function(require,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ViewportMetrics
 */

"use strict";

var getUnboundedScrollPosition = require("./getUnboundedScrollPosition");

var ViewportMetrics = {

  currentScrollLeft: 0,

  currentScrollTop: 0,

  refreshScrollValues: function() {
    var scrollPosition = getUnboundedScrollPosition(window);
    ViewportMetrics.currentScrollLeft = scrollPosition.x;
    ViewportMetrics.currentScrollTop = scrollPosition.y;
  }

};

module.exports = ViewportMetrics;

},{"./getUnboundedScrollPosition":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/getUnboundedScrollPosition.js"}],"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/accumulateInto.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule accumulateInto
 */

"use strict";

var invariant = require("./invariant");

/**
 *
 * Accumulates items that must not be null or undefined into the first one. This
 * is used to conserve memory by avoiding array allocations, and thus sacrifices
 * API cleanness. Since `current` can be null before being passed in and not
 * null after this function, make sure to assign it back to `current`:
 *
 * `a = accumulateInto(a, b);`
 *
 * This API should be sparingly used. Try `accumulate` for something cleaner.
 *
 * @return {*|array<*>} An accumulation of items.
 */

function accumulateInto(current, next) {
  ("production" !== process.env.NODE_ENV ? invariant(
    next != null,
    'accumulateInto(...): Accumulated items must not be null or undefined.'
  ) : invariant(next != null));
  if (current == null) {
    return next;
  }

  // Both are not empty. Warning: Never call x.concat(y) when you are not
  // certain that x is an Array (x could be a string with concat method).
  var currentIsArray = Array.isArray(current);
  var nextIsArray = Array.isArray(next);

  if (currentIsArray && nextIsArray) {
    current.push.apply(current, next);
    return current;
  }

  if (currentIsArray) {
    current.push(next);
    return current;
  }

  if (nextIsArray) {
    // A bit too dangerous to mutate `next`.
    return [current].concat(next);
  }

  return [current, next];
}

module.exports = accumulateInto;

}).call(this,require('_process'))

},{"./invariant":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/invariant.js","_process":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/browserify/node_modules/process/browser.js"}],"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/adler32.js":[function(require,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule adler32
 */

/* jslint bitwise:true */

"use strict";

var MOD = 65521;

// This is a clean-room implementation of adler32 designed for detecting
// if markup is not what we expect it to be. It does not need to be
// cryptographically strong, only reasonably good at detecting if markup
// generated on the server is different than that on the client.
function adler32(data) {
  var a = 1;
  var b = 0;
  for (var i = 0; i < data.length; i++) {
    a = (a + data.charCodeAt(i)) % MOD;
    b = (b + a) % MOD;
  }
  return a | (b << 16);
}

module.exports = adler32;

},{}],"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/camelize.js":[function(require,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule camelize
 * @typechecks
 */

var _hyphenPattern = /-(.)/g;

/**
 * Camelcases a hyphenated string, for example:
 *
 *   > camelize('background-color')
 *   < "backgroundColor"
 *
 * @param {string} string
 * @return {string}
 */
function camelize(string) {
  return string.replace(_hyphenPattern, function(_, character) {
    return character.toUpperCase();
  });
}

module.exports = camelize;

},{}],"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/camelizeStyleName.js":[function(require,module,exports){
/**
 * Copyright 2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule camelizeStyleName
 * @typechecks
 */

"use strict";

var camelize = require("./camelize");

var msPattern = /^-ms-/;

/**
 * Camelcases a hyphenated CSS property name, for example:
 *
 *   > camelizeStyleName('background-color')
 *   < "backgroundColor"
 *   > camelizeStyleName('-moz-transition')
 *   < "MozTransition"
 *   > camelizeStyleName('-ms-transition')
 *   < "msTransition"
 *
 * As Andi Smith suggests
 * (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix
 * is converted to lowercase `ms`.
 *
 * @param {string} string
 * @return {string}
 */
function camelizeStyleName(string) {
  return camelize(string.replace(msPattern, 'ms-'));
}

module.exports = camelizeStyleName;

},{"./camelize":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/camelize.js"}],"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/cloneWithProps.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @typechecks
 * @providesModule cloneWithProps
 */

"use strict";

var ReactElement = require("./ReactElement");
var ReactPropTransferer = require("./ReactPropTransferer");

var keyOf = require("./keyOf");
var warning = require("./warning");

var CHILDREN_PROP = keyOf({children: null});

/**
 * Sometimes you want to change the props of a child passed to you. Usually
 * this is to add a CSS class.
 *
 * @param {object} child child component you'd like to clone
 * @param {object} props props you'd like to modify. They will be merged
 * as if you used `transferPropsTo()`.
 * @return {object} a clone of child with props merged in.
 */
function cloneWithProps(child, props) {
  if ("production" !== process.env.NODE_ENV) {
    ("production" !== process.env.NODE_ENV ? warning(
      !child.ref,
      'You are calling cloneWithProps() on a child with a ref. This is ' +
      'dangerous because you\'re creating a new child which will not be ' +
      'added as a ref to its parent.'
    ) : null);
  }

  var newProps = ReactPropTransferer.mergeProps(props, child.props);

  // Use `child.props.children` if it is provided.
  if (!newProps.hasOwnProperty(CHILDREN_PROP) &&
      child.props.hasOwnProperty(CHILDREN_PROP)) {
    newProps.children = child.props.children;
  }

  // The current API doesn't retain _owner and _context, which is why this
  // doesn't use ReactElement.cloneAndReplaceProps.
  return ReactElement.createElement(child.type, newProps);
}

module.exports = cloneWithProps;

}).call(this,require('_process'))

},{"./ReactElement":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ReactElement.js","./ReactPropTransferer":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ReactPropTransferer.js","./keyOf":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/keyOf.js","./warning":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/warning.js","_process":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/browserify/node_modules/process/browser.js"}],"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/containsNode.js":[function(require,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule containsNode
 * @typechecks
 */

var isTextNode = require("./isTextNode");

/*jslint bitwise:true */

/**
 * Checks if a given DOM node contains or is another DOM node.
 *
 * @param {?DOMNode} outerNode Outer DOM node.
 * @param {?DOMNode} innerNode Inner DOM node.
 * @return {boolean} True if `outerNode` contains or is `innerNode`.
 */
function containsNode(outerNode, innerNode) {
  if (!outerNode || !innerNode) {
    return false;
  } else if (outerNode === innerNode) {
    return true;
  } else if (isTextNode(outerNode)) {
    return false;
  } else if (isTextNode(innerNode)) {
    return containsNode(outerNode, innerNode.parentNode);
  } else if (outerNode.contains) {
    return outerNode.contains(innerNode);
  } else if (outerNode.compareDocumentPosition) {
    return !!(outerNode.compareDocumentPosition(innerNode) & 16);
  } else {
    return false;
  }
}

module.exports = containsNode;

},{"./isTextNode":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/isTextNode.js"}],"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/createArrayFrom.js":[function(require,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule createArrayFrom
 * @typechecks
 */

var toArray = require("./toArray");

/**
 * Perform a heuristic test to determine if an object is "array-like".
 *
 *   A monk asked Joshu, a Zen master, "Has a dog Buddha nature?"
 *   Joshu replied: "Mu."
 *
 * This function determines if its argument has "array nature": it returns
 * true if the argument is an actual array, an `arguments' object, or an
 * HTMLCollection (e.g. node.childNodes or node.getElementsByTagName()).
 *
 * It will return false for other array-like objects like Filelist.
 *
 * @param {*} obj
 * @return {boolean}
 */
function hasArrayNature(obj) {
  return (
    // not null/false
    !!obj &&
    // arrays are objects, NodeLists are functions in Safari
    (typeof obj == 'object' || typeof obj == 'function') &&
    // quacks like an array
    ('length' in obj) &&
    // not window
    !('setInterval' in obj) &&
    // no DOM node should be considered an array-like
    // a 'select' element has 'length' and 'item' properties on IE8
    (typeof obj.nodeType != 'number') &&
    (
      // a real array
      (// HTMLCollection/NodeList
      (Array.isArray(obj) ||
      // arguments
      ('callee' in obj) || 'item' in obj))
    )
  );
}

/**
 * Ensure that the argument is an array by wrapping it in an array if it is not.
 * Creates a copy of the argument if it is already an array.
 *
 * This is mostly useful idiomatically:
 *
 *   var createArrayFrom = require('createArrayFrom');
 *
 *   function takesOneOrMoreThings(things) {
 *     things = createArrayFrom(things);
 *     ...
 *   }
 *
 * This allows you to treat `things' as an array, but accept scalars in the API.
 *
 * If you need to convert an array-like object, like `arguments`, into an array
 * use toArray instead.
 *
 * @param {*} obj
 * @return {array}
 */
function createArrayFrom(obj) {
  if (!hasArrayNature(obj)) {
    return [obj];
  } else if (Array.isArray(obj)) {
    return obj.slice();
  } else {
    return toArray(obj);
  }
}

module.exports = createArrayFrom;

},{"./toArray":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/toArray.js"}],"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/createFullPageComponent.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule createFullPageComponent
 * @typechecks
 */

"use strict";

// Defeat circular references by requiring this directly.
var ReactCompositeComponent = require("./ReactCompositeComponent");
var ReactElement = require("./ReactElement");

var invariant = require("./invariant");

/**
 * Create a component that will throw an exception when unmounted.
 *
 * Components like <html> <head> and <body> can't be removed or added
 * easily in a cross-browser way, however it's valuable to be able to
 * take advantage of React's reconciliation for styling and <title>
 * management. So we just document it and throw in dangerous cases.
 *
 * @param {string} tag The tag to wrap
 * @return {function} convenience constructor of new component
 */
function createFullPageComponent(tag) {
  var elementFactory = ReactElement.createFactory(tag);

  var FullPageComponent = ReactCompositeComponent.createClass({
    displayName: 'ReactFullPageComponent' + tag,

    componentWillUnmount: function() {
      ("production" !== process.env.NODE_ENV ? invariant(
        false,
        '%s tried to unmount. Because of cross-browser quirks it is ' +
        'impossible to unmount some top-level components (eg <html>, <head>, ' +
        'and <body>) reliably and efficiently. To fix this, have a single ' +
        'top-level component that never unmounts render these elements.',
        this.constructor.displayName
      ) : invariant(false));
    },

    render: function() {
      return elementFactory(this.props);
    }
  });

  return FullPageComponent;
}

module.exports = createFullPageComponent;

}).call(this,require('_process'))

},{"./ReactCompositeComponent":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ReactCompositeComponent.js","./ReactElement":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ReactElement.js","./invariant":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/invariant.js","_process":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/browserify/node_modules/process/browser.js"}],"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/createNodesFromMarkup.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule createNodesFromMarkup
 * @typechecks
 */

/*jslint evil: true, sub: true */

var ExecutionEnvironment = require("./ExecutionEnvironment");

var createArrayFrom = require("./createArrayFrom");
var getMarkupWrap = require("./getMarkupWrap");
var invariant = require("./invariant");

/**
 * Dummy container used to render all markup.
 */
var dummyNode =
  ExecutionEnvironment.canUseDOM ? document.createElement('div') : null;

/**
 * Pattern used by `getNodeName`.
 */
var nodeNamePattern = /^\s*<(\w+)/;

/**
 * Extracts the `nodeName` of the first element in a string of markup.
 *
 * @param {string} markup String of markup.
 * @return {?string} Node name of the supplied markup.
 */
function getNodeName(markup) {
  var nodeNameMatch = markup.match(nodeNamePattern);
  return nodeNameMatch && nodeNameMatch[1].toLowerCase();
}

/**
 * Creates an array containing the nodes rendered from the supplied markup. The
 * optionally supplied `handleScript` function will be invoked once for each
 * <script> element that is rendered. If no `handleScript` function is supplied,
 * an exception is thrown if any <script> elements are rendered.
 *
 * @param {string} markup A string of valid HTML markup.
 * @param {?function} handleScript Invoked once for each rendered <script>.
 * @return {array<DOMElement|DOMTextNode>} An array of rendered nodes.
 */
function createNodesFromMarkup(markup, handleScript) {
  var node = dummyNode;
  ("production" !== process.env.NODE_ENV ? invariant(!!dummyNode, 'createNodesFromMarkup dummy not initialized') : invariant(!!dummyNode));
  var nodeName = getNodeName(markup);

  var wrap = nodeName && getMarkupWrap(nodeName);
  if (wrap) {
    node.innerHTML = wrap[1] + markup + wrap[2];

    var wrapDepth = wrap[0];
    while (wrapDepth--) {
      node = node.lastChild;
    }
  } else {
    node.innerHTML = markup;
  }

  var scripts = node.getElementsByTagName('script');
  if (scripts.length) {
    ("production" !== process.env.NODE_ENV ? invariant(
      handleScript,
      'createNodesFromMarkup(...): Unexpected <script> element rendered.'
    ) : invariant(handleScript));
    createArrayFrom(scripts).forEach(handleScript);
  }

  var nodes = createArrayFrom(node.childNodes);
  while (node.lastChild) {
    node.removeChild(node.lastChild);
  }
  return nodes;
}

module.exports = createNodesFromMarkup;

}).call(this,require('_process'))

},{"./ExecutionEnvironment":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ExecutionEnvironment.js","./createArrayFrom":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/createArrayFrom.js","./getMarkupWrap":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/getMarkupWrap.js","./invariant":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/invariant.js","_process":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/browserify/node_modules/process/browser.js"}],"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/cx.js":[function(require,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule cx
 */

/**
 * This function is used to mark string literals representing CSS class names
 * so that they can be transformed statically. This allows for modularization
 * and minification of CSS class names.
 *
 * In static_upstream, this function is actually implemented, but it should
 * eventually be replaced with something more descriptive, and the transform
 * that is used in the main stack should be ported for use elsewhere.
 *
 * @param string|object className to modularize, or an object of key/values.
 *                      In the object case, the values are conditions that
 *                      determine if the className keys should be included.
 * @param [string ...]  Variable list of classNames in the string case.
 * @return string       Renderable space-separated CSS className.
 */
function cx(classNames) {
  if (typeof classNames == 'object') {
    return Object.keys(classNames).filter(function(className) {
      return classNames[className];
    }).join(' ');
  } else {
    return Array.prototype.join.call(arguments, ' ');
  }
}

module.exports = cx;

},{}],"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/dangerousStyleValue.js":[function(require,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule dangerousStyleValue
 * @typechecks static-only
 */

"use strict";

var CSSProperty = require("./CSSProperty");

var isUnitlessNumber = CSSProperty.isUnitlessNumber;

/**
 * Convert a value into the proper css writable value. The style name `name`
 * should be logical (no hyphens), as specified
 * in `CSSProperty.isUnitlessNumber`.
 *
 * @param {string} name CSS property name such as `topMargin`.
 * @param {*} value CSS property value such as `10px`.
 * @return {string} Normalized style value with dimensions applied.
 */
function dangerousStyleValue(name, value) {
  // Note that we've removed escapeTextForBrowser() calls here since the
  // whole string will be escaped when the attribute is injected into
  // the markup. If you provide unsafe user data here they can inject
  // arbitrary CSS which may be problematic (I couldn't repro this):
  // https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet
  // http://www.thespanner.co.uk/2007/11/26/ultimate-xss-css-injection/
  // This is not an XSS hole but instead a potential CSS injection issue
  // which has lead to a greater discussion about how we're going to
  // trust URLs moving forward. See #2115901

  var isEmpty = value == null || typeof value === 'boolean' || value === '';
  if (isEmpty) {
    return '';
  }

  var isNonNumeric = isNaN(value);
  if (isNonNumeric || value === 0 ||
      isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name]) {
    return '' + value; // cast to string
  }

  if (typeof value === 'string') {
    value = value.trim();
  }
  return value + 'px';
}

module.exports = dangerousStyleValue;

},{"./CSSProperty":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/CSSProperty.js"}],"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/deprecated.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule deprecated
 */

var assign = require("./Object.assign");
var warning = require("./warning");

/**
 * This will log a single deprecation notice per function and forward the call
 * on to the new API.
 *
 * @param {string} namespace The namespace of the call, eg 'React'
 * @param {string} oldName The old function name, eg 'renderComponent'
 * @param {string} newName The new function name, eg 'render'
 * @param {*} ctx The context this forwarded call should run in
 * @param {function} fn The function to forward on to
 * @return {*} Will be the value as returned from `fn`
 */
function deprecated(namespace, oldName, newName, ctx, fn) {
  var warned = false;
  if ("production" !== process.env.NODE_ENV) {
    var newFn = function() {
      ("production" !== process.env.NODE_ENV ? warning(
        warned,
        (namespace + "." + oldName + " will be deprecated in a future version. ") +
        ("Use " + namespace + "." + newName + " instead.")
      ) : null);
      warned = true;
      return fn.apply(ctx, arguments);
    };
    newFn.displayName = (namespace + "_" + oldName);
    // We need to make sure all properties of the original fn are copied over.
    // In particular, this is needed to support PropTypes
    return assign(newFn, fn);
  }

  return fn;
}

module.exports = deprecated;

}).call(this,require('_process'))

},{"./Object.assign":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/Object.assign.js","./warning":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/warning.js","_process":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/browserify/node_modules/process/browser.js"}],"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/emptyFunction.js":[function(require,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule emptyFunction
 */

function makeEmptyFunction(arg) {
  return function() {
    return arg;
  };
}

/**
 * This function accepts and discards inputs; it has no side effects. This is
 * primarily useful idiomatically for overridable function endpoints which
 * always need to be callable, since JS lacks a null-call idiom ala Cocoa.
 */
function emptyFunction() {}

emptyFunction.thatReturns = makeEmptyFunction;
emptyFunction.thatReturnsFalse = makeEmptyFunction(false);
emptyFunction.thatReturnsTrue = makeEmptyFunction(true);
emptyFunction.thatReturnsNull = makeEmptyFunction(null);
emptyFunction.thatReturnsThis = function() { return this; };
emptyFunction.thatReturnsArgument = function(arg) { return arg; };

module.exports = emptyFunction;

},{}],"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/emptyObject.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule emptyObject
 */

"use strict";

var emptyObject = {};

if ("production" !== process.env.NODE_ENV) {
  Object.freeze(emptyObject);
}

module.exports = emptyObject;

}).call(this,require('_process'))

},{"_process":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/browserify/node_modules/process/browser.js"}],"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/escapeTextForBrowser.js":[function(require,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule escapeTextForBrowser
 * @typechecks static-only
 */

"use strict";

var ESCAPE_LOOKUP = {
  "&": "&amp;",
  ">": "&gt;",
  "<": "&lt;",
  "\"": "&quot;",
  "'": "&#x27;"
};

var ESCAPE_REGEX = /[&><"']/g;

function escaper(match) {
  return ESCAPE_LOOKUP[match];
}

/**
 * Escapes text to prevent scripting attacks.
 *
 * @param {*} text Text value to escape.
 * @return {string} An escaped string.
 */
function escapeTextForBrowser(text) {
  return ('' + text).replace(ESCAPE_REGEX, escaper);
}

module.exports = escapeTextForBrowser;

},{}],"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/flattenChildren.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule flattenChildren
 */

"use strict";

var ReactTextComponent = require("./ReactTextComponent");

var traverseAllChildren = require("./traverseAllChildren");
var warning = require("./warning");

/**
 * @param {function} traverseContext Context passed through traversal.
 * @param {?ReactComponent} child React child component.
 * @param {!string} name String name of key path to child.
 */
function flattenSingleChildIntoContext(traverseContext, child, name) {
  // We found a component instance.
  var result = traverseContext;
  var keyUnique = !result.hasOwnProperty(name);
  ("production" !== process.env.NODE_ENV ? warning(
    keyUnique,
    'flattenChildren(...): Encountered two children with the same key, ' +
    '`%s`. Child keys must be unique; when two children share a key, only ' +
    'the first child will be used.',
    name
  ) : null);
  if (keyUnique && child != null) {
    var type = typeof child;
    var normalizedValue;

    if (type === 'string') {
      normalizedValue = ReactTextComponent(child);
    } else if (type === 'number') {
      normalizedValue = ReactTextComponent('' + child);
    } else {
      normalizedValue = child;
    }

    result[name] = normalizedValue;
  }
}

/**
 * Flattens children that are typically specified as `props.children`. Any null
 * children will not be included in the resulting object.
 * @return {!object} flattened children keyed by name.
 */
function flattenChildren(children) {
  if (children == null) {
    return children;
  }
  var result = {};
  traverseAllChildren(children, flattenSingleChildIntoContext, result);
  return result;
}

module.exports = flattenChildren;

}).call(this,require('_process'))

},{"./ReactTextComponent":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ReactTextComponent.js","./traverseAllChildren":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/traverseAllChildren.js","./warning":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/warning.js","_process":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/browserify/node_modules/process/browser.js"}],"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/focusNode.js":[function(require,module,exports){
/**
 * Copyright 2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule focusNode
 */

"use strict";

/**
 * @param {DOMElement} node input/textarea to focus
 */
function focusNode(node) {
  // IE8 can throw "Can't move focus to the control because it is invisible,
  // not enabled, or of a type that does not accept the focus." for all kinds of
  // reasons that are too expensive and fragile to test.
  try {
    node.focus();
  } catch(e) {
  }
}

module.exports = focusNode;

},{}],"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/forEachAccumulated.js":[function(require,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule forEachAccumulated
 */

"use strict";

/**
 * @param {array} an "accumulation" of items which is either an Array or
 * a single item. Useful when paired with the `accumulate` module. This is a
 * simple utility that allows us to reason about a collection of items, but
 * handling the case when there is exactly one item (and we do not need to
 * allocate an array).
 */
var forEachAccumulated = function(arr, cb, scope) {
  if (Array.isArray(arr)) {
    arr.forEach(cb, scope);
  } else if (arr) {
    cb.call(scope, arr);
  }
};

module.exports = forEachAccumulated;

},{}],"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/getActiveElement.js":[function(require,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getActiveElement
 * @typechecks
 */

/**
 * Same as document.activeElement but wraps in a try-catch block. In IE it is
 * not safe to call document.activeElement if there is nothing focused.
 *
 * The activeElement will be null only if the document body is not yet defined.
 */
function getActiveElement() /*?DOMElement*/ {
  try {
    return document.activeElement || document.body;
  } catch (e) {
    return document.body;
  }
}

module.exports = getActiveElement;

},{}],"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/getEventCharCode.js":[function(require,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getEventCharCode
 * @typechecks static-only
 */

"use strict";

/**
 * `charCode` represents the actual "character code" and is safe to use with
 * `String.fromCharCode`. As such, only keys that correspond to printable
 * characters produce a valid `charCode`, the only exception to this is Enter.
 * The Tab-key is considered non-printable and does not have a `charCode`,
 * presumably because it does not produce a tab-character in browsers.
 *
 * @param {object} nativeEvent Native browser event.
 * @return {string} Normalized `charCode` property.
 */
function getEventCharCode(nativeEvent) {
  var charCode;
  var keyCode = nativeEvent.keyCode;

  if ('charCode' in nativeEvent) {
    charCode = nativeEvent.charCode;

    // FF does not set `charCode` for the Enter-key, check against `keyCode`.
    if (charCode === 0 && keyCode === 13) {
      charCode = 13;
    }
  } else {
    // IE8 does not implement `charCode`, but `keyCode` has the correct value.
    charCode = keyCode;
  }

  // Some non-printable keys are reported in `charCode`/`keyCode`, discard them.
  // Must not discard the (non-)printable Enter-key.
  if (charCode >= 32 || charCode === 13) {
    return charCode;
  }

  return 0;
}

module.exports = getEventCharCode;

},{}],"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/getEventKey.js":[function(require,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getEventKey
 * @typechecks static-only
 */

"use strict";

var getEventCharCode = require("./getEventCharCode");

/**
 * Normalization of deprecated HTML5 `key` values
 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
 */
var normalizeKey = {
  'Esc': 'Escape',
  'Spacebar': ' ',
  'Left': 'ArrowLeft',
  'Up': 'ArrowUp',
  'Right': 'ArrowRight',
  'Down': 'ArrowDown',
  'Del': 'Delete',
  'Win': 'OS',
  'Menu': 'ContextMenu',
  'Apps': 'ContextMenu',
  'Scroll': 'ScrollLock',
  'MozPrintableKey': 'Unidentified'
};

/**
 * Translation from legacy `keyCode` to HTML5 `key`
 * Only special keys supported, all others depend on keyboard layout or browser
 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
 */
var translateToKey = {
  8: 'Backspace',
  9: 'Tab',
  12: 'Clear',
  13: 'Enter',
  16: 'Shift',
  17: 'Control',
  18: 'Alt',
  19: 'Pause',
  20: 'CapsLock',
  27: 'Escape',
  32: ' ',
  33: 'PageUp',
  34: 'PageDown',
  35: 'End',
  36: 'Home',
  37: 'ArrowLeft',
  38: 'ArrowUp',
  39: 'ArrowRight',
  40: 'ArrowDown',
  45: 'Insert',
  46: 'Delete',
  112: 'F1', 113: 'F2', 114: 'F3', 115: 'F4', 116: 'F5', 117: 'F6',
  118: 'F7', 119: 'F8', 120: 'F9', 121: 'F10', 122: 'F11', 123: 'F12',
  144: 'NumLock',
  145: 'ScrollLock',
  224: 'Meta'
};

/**
 * @param {object} nativeEvent Native browser event.
 * @return {string} Normalized `key` property.
 */
function getEventKey(nativeEvent) {
  if (nativeEvent.key) {
    // Normalize inconsistent values reported by browsers due to
    // implementations of a working draft specification.

    // FireFox implements `key` but returns `MozPrintableKey` for all
    // printable characters (normalized to `Unidentified`), ignore it.
    var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
    if (key !== 'Unidentified') {
      return key;
    }
  }

  // Browser does not implement `key`, polyfill as much of it as we can.
  if (nativeEvent.type === 'keypress') {
    var charCode = getEventCharCode(nativeEvent);

    // The enter-key is technically both printable and non-printable and can
    // thus be captured by `keypress`, no other non-printable key should.
    return charCode === 13 ? 'Enter' : String.fromCharCode(charCode);
  }
  if (nativeEvent.type === 'keydown' || nativeEvent.type === 'keyup') {
    // While user keyboard layout determines the actual meaning of each
    // `keyCode` value, almost all function keys have a universal value.
    return translateToKey[nativeEvent.keyCode] || 'Unidentified';
  }
  return '';
}

module.exports = getEventKey;

},{"./getEventCharCode":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/getEventCharCode.js"}],"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/getEventModifierState.js":[function(require,module,exports){
/**
 * Copyright 2013 Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getEventModifierState
 * @typechecks static-only
 */

"use strict";

/**
 * Translation from modifier key to the associated property in the event.
 * @see http://www.w3.org/TR/DOM-Level-3-Events/#keys-Modifiers
 */

var modifierKeyToProp = {
  'Alt': 'altKey',
  'Control': 'ctrlKey',
  'Meta': 'metaKey',
  'Shift': 'shiftKey'
};

// IE8 does not implement getModifierState so we simply map it to the only
// modifier keys exposed by the event itself, does not support Lock-keys.
// Currently, all major browsers except Chrome seems to support Lock-keys.
function modifierStateGetter(keyArg) {
  /*jshint validthis:true */
  var syntheticEvent = this;
  var nativeEvent = syntheticEvent.nativeEvent;
  if (nativeEvent.getModifierState) {
    return nativeEvent.getModifierState(keyArg);
  }
  var keyProp = modifierKeyToProp[keyArg];
  return keyProp ? !!nativeEvent[keyProp] : false;
}

function getEventModifierState(nativeEvent) {
  return modifierStateGetter;
}

module.exports = getEventModifierState;

},{}],"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/getEventTarget.js":[function(require,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getEventTarget
 * @typechecks static-only
 */

"use strict";

/**
 * Gets the target node from a native browser event by accounting for
 * inconsistencies in browser DOM APIs.
 *
 * @param {object} nativeEvent Native browser event.
 * @return {DOMEventTarget} Target node.
 */
function getEventTarget(nativeEvent) {
  var target = nativeEvent.target || nativeEvent.srcElement || window;
  // Safari may fire events on text nodes (Node.TEXT_NODE is 3).
  // @see http://www.quirksmode.org/js/events_properties.html
  return target.nodeType === 3 ? target.parentNode : target;
}

module.exports = getEventTarget;

},{}],"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/getMarkupWrap.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getMarkupWrap
 */

var ExecutionEnvironment = require("./ExecutionEnvironment");

var invariant = require("./invariant");

/**
 * Dummy container used to detect which wraps are necessary.
 */
var dummyNode =
  ExecutionEnvironment.canUseDOM ? document.createElement('div') : null;

/**
 * Some browsers cannot use `innerHTML` to render certain elements standalone,
 * so we wrap them, render the wrapped nodes, then extract the desired node.
 *
 * In IE8, certain elements cannot render alone, so wrap all elements ('*').
 */
var shouldWrap = {
  // Force wrapping for SVG elements because if they get created inside a <div>,
  // they will be initialized in the wrong namespace (and will not display).
  'circle': true,
  'defs': true,
  'ellipse': true,
  'g': true,
  'line': true,
  'linearGradient': true,
  'path': true,
  'polygon': true,
  'polyline': true,
  'radialGradient': true,
  'rect': true,
  'stop': true,
  'text': true
};

var selectWrap = [1, '<select multiple="true">', '</select>'];
var tableWrap = [1, '<table>', '</table>'];
var trWrap = [3, '<table><tbody><tr>', '</tr></tbody></table>'];

var svgWrap = [1, '<svg>', '</svg>'];

var markupWrap = {
  '*': [1, '?<div>', '</div>'],

  'area': [1, '<map>', '</map>'],
  'col': [2, '<table><tbody></tbody><colgroup>', '</colgroup></table>'],
  'legend': [1, '<fieldset>', '</fieldset>'],
  'param': [1, '<object>', '</object>'],
  'tr': [2, '<table><tbody>', '</tbody></table>'],

  'optgroup': selectWrap,
  'option': selectWrap,

  'caption': tableWrap,
  'colgroup': tableWrap,
  'tbody': tableWrap,
  'tfoot': tableWrap,
  'thead': tableWrap,

  'td': trWrap,
  'th': trWrap,

  'circle': svgWrap,
  'defs': svgWrap,
  'ellipse': svgWrap,
  'g': svgWrap,
  'line': svgWrap,
  'linearGradient': svgWrap,
  'path': svgWrap,
  'polygon': svgWrap,
  'polyline': svgWrap,
  'radialGradient': svgWrap,
  'rect': svgWrap,
  'stop': svgWrap,
  'text': svgWrap
};

/**
 * Gets the markup wrap configuration for the supplied `nodeName`.
 *
 * NOTE: This lazily detects which wraps are necessary for the current browser.
 *
 * @param {string} nodeName Lowercase `nodeName`.
 * @return {?array} Markup wrap configuration, if applicable.
 */
function getMarkupWrap(nodeName) {
  ("production" !== process.env.NODE_ENV ? invariant(!!dummyNode, 'Markup wrapping node not initialized') : invariant(!!dummyNode));
  if (!markupWrap.hasOwnProperty(nodeName)) {
    nodeName = '*';
  }
  if (!shouldWrap.hasOwnProperty(nodeName)) {
    if (nodeName === '*') {
      dummyNode.innerHTML = '<link />';
    } else {
      dummyNode.innerHTML = '<' + nodeName + '></' + nodeName + '>';
    }
    shouldWrap[nodeName] = !dummyNode.firstChild;
  }
  return shouldWrap[nodeName] ? markupWrap[nodeName] : null;
}


module.exports = getMarkupWrap;

}).call(this,require('_process'))

},{"./ExecutionEnvironment":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ExecutionEnvironment.js","./invariant":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/invariant.js","_process":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/browserify/node_modules/process/browser.js"}],"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/getNodeForCharacterOffset.js":[function(require,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getNodeForCharacterOffset
 */

"use strict";

/**
 * Given any node return the first leaf node without children.
 *
 * @param {DOMElement|DOMTextNode} node
 * @return {DOMElement|DOMTextNode}
 */
function getLeafNode(node) {
  while (node && node.firstChild) {
    node = node.firstChild;
  }
  return node;
}

/**
 * Get the next sibling within a container. This will walk up the
 * DOM if a node's siblings have been exhausted.
 *
 * @param {DOMElement|DOMTextNode} node
 * @return {?DOMElement|DOMTextNode}
 */
function getSiblingNode(node) {
  while (node) {
    if (node.nextSibling) {
      return node.nextSibling;
    }
    node = node.parentNode;
  }
}

/**
 * Get object describing the nodes which contain characters at offset.
 *
 * @param {DOMElement|DOMTextNode} root
 * @param {number} offset
 * @return {?object}
 */
function getNodeForCharacterOffset(root, offset) {
  var node = getLeafNode(root);
  var nodeStart = 0;
  var nodeEnd = 0;

  while (node) {
    if (node.nodeType == 3) {
      nodeEnd = nodeStart + node.textContent.length;

      if (nodeStart <= offset && nodeEnd >= offset) {
        return {
          node: node,
          offset: offset - nodeStart
        };
      }

      nodeStart = nodeEnd;
    }

    node = getLeafNode(getSiblingNode(node));
  }
}

module.exports = getNodeForCharacterOffset;

},{}],"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/getReactRootElementInContainer.js":[function(require,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getReactRootElementInContainer
 */

"use strict";

var DOC_NODE_TYPE = 9;

/**
 * @param {DOMElement|DOMDocument} container DOM element that may contain
 *                                           a React component
 * @return {?*} DOM element that may have the reactRoot ID, or null.
 */
function getReactRootElementInContainer(container) {
  if (!container) {
    return null;
  }

  if (container.nodeType === DOC_NODE_TYPE) {
    return container.documentElement;
  } else {
    return container.firstChild;
  }
}

module.exports = getReactRootElementInContainer;

},{}],"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/getTextContentAccessor.js":[function(require,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getTextContentAccessor
 */

"use strict";

var ExecutionEnvironment = require("./ExecutionEnvironment");

var contentKey = null;

/**
 * Gets the key used to access text content on a DOM node.
 *
 * @return {?string} Key used to access text content.
 * @internal
 */
function getTextContentAccessor() {
  if (!contentKey && ExecutionEnvironment.canUseDOM) {
    // Prefer textContent to innerText because many browsers support both but
    // SVG <text> elements don't support innerText even when <div> does.
    contentKey = 'textContent' in document.documentElement ?
      'textContent' :
      'innerText';
  }
  return contentKey;
}

module.exports = getTextContentAccessor;

},{"./ExecutionEnvironment":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ExecutionEnvironment.js"}],"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/getUnboundedScrollPosition.js":[function(require,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getUnboundedScrollPosition
 * @typechecks
 */

"use strict";

/**
 * Gets the scroll position of the supplied element or window.
 *
 * The return values are unbounded, unlike `getScrollPosition`. This means they
 * may be negative or exceed the element boundaries (which is possible using
 * inertial scrolling).
 *
 * @param {DOMWindow|DOMElement} scrollable
 * @return {object} Map with `x` and `y` keys.
 */
function getUnboundedScrollPosition(scrollable) {
  if (scrollable === window) {
    return {
      x: window.pageXOffset || document.documentElement.scrollLeft,
      y: window.pageYOffset || document.documentElement.scrollTop
    };
  }
  return {
    x: scrollable.scrollLeft,
    y: scrollable.scrollTop
  };
}

module.exports = getUnboundedScrollPosition;

},{}],"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/hyphenate.js":[function(require,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule hyphenate
 * @typechecks
 */

var _uppercasePattern = /([A-Z])/g;

/**
 * Hyphenates a camelcased string, for example:
 *
 *   > hyphenate('backgroundColor')
 *   < "background-color"
 *
 * For CSS style names, use `hyphenateStyleName` instead which works properly
 * with all vendor prefixes, including `ms`.
 *
 * @param {string} string
 * @return {string}
 */
function hyphenate(string) {
  return string.replace(_uppercasePattern, '-$1').toLowerCase();
}

module.exports = hyphenate;

},{}],"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/hyphenateStyleName.js":[function(require,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule hyphenateStyleName
 * @typechecks
 */

"use strict";

var hyphenate = require("./hyphenate");

var msPattern = /^ms-/;

/**
 * Hyphenates a camelcased CSS property name, for example:
 *
 *   > hyphenateStyleName('backgroundColor')
 *   < "background-color"
 *   > hyphenateStyleName('MozTransition')
 *   < "-moz-transition"
 *   > hyphenateStyleName('msTransition')
 *   < "-ms-transition"
 *
 * As Modernizr suggests (http://modernizr.com/docs/#prefixed), an `ms` prefix
 * is converted to `-ms-`.
 *
 * @param {string} string
 * @return {string}
 */
function hyphenateStyleName(string) {
  return hyphenate(string).replace(msPattern, '-ms-');
}

module.exports = hyphenateStyleName;

},{"./hyphenate":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/hyphenate.js"}],"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/instantiateReactComponent.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule instantiateReactComponent
 * @typechecks static-only
 */

"use strict";

var warning = require("./warning");

var ReactElement = require("./ReactElement");
var ReactLegacyElement = require("./ReactLegacyElement");
var ReactNativeComponent = require("./ReactNativeComponent");
var ReactEmptyComponent = require("./ReactEmptyComponent");

/**
 * Given an `element` create an instance that will actually be mounted.
 *
 * @param {object} element
 * @param {*} parentCompositeType The composite type that resolved this.
 * @return {object} A new instance of the element's constructor.
 * @protected
 */
function instantiateReactComponent(element, parentCompositeType) {
  var instance;

  if ("production" !== process.env.NODE_ENV) {
    ("production" !== process.env.NODE_ENV ? warning(
      element && (typeof element.type === 'function' ||
                     typeof element.type === 'string'),
      'Only functions or strings can be mounted as React components.'
    ) : null);

    // Resolve mock instances
    if (element.type._mockedReactClassConstructor) {
      // If this is a mocked class, we treat the legacy factory as if it was the
      // class constructor for future proofing unit tests. Because this might
      // be mocked as a legacy factory, we ignore any warnings triggerd by
      // this temporary hack.
      ReactLegacyElement._isLegacyCallWarningEnabled = false;
      try {
        instance = new element.type._mockedReactClassConstructor(
          element.props
        );
      } finally {
        ReactLegacyElement._isLegacyCallWarningEnabled = true;
      }

      // If the mock implementation was a legacy factory, then it returns a
      // element. We need to turn this into a real component instance.
      if (ReactElement.isValidElement(instance)) {
        instance = new instance.type(instance.props);
      }

      var render = instance.render;
      if (!render) {
        // For auto-mocked factories, the prototype isn't shimmed and therefore
        // there is no render function on the instance. We replace the whole
        // component with an empty component instance instead.
        element = ReactEmptyComponent.getEmptyComponent();
      } else {
        if (render._isMockFunction && !render._getMockImplementation()) {
          // Auto-mocked components may have a prototype with a mocked render
          // function. For those, we'll need to mock the result of the render
          // since we consider undefined to be invalid results from render.
          render.mockImplementation(
            ReactEmptyComponent.getEmptyComponent
          );
        }
        instance.construct(element);
        return instance;
      }
    }
  }

  // Special case string values
  if (typeof element.type === 'string') {
    instance = ReactNativeComponent.createInstanceForTag(
      element.type,
      element.props,
      parentCompositeType
    );
  } else {
    // Normal case for non-mocks and non-strings
    instance = new element.type(element.props);
  }

  if ("production" !== process.env.NODE_ENV) {
    ("production" !== process.env.NODE_ENV ? warning(
      typeof instance.construct === 'function' &&
      typeof instance.mountComponent === 'function' &&
      typeof instance.receiveComponent === 'function',
      'Only React Components can be mounted.'
    ) : null);
  }

  // This actually sets up the internal instance. This will become decoupled
  // from the public instance in a future diff.
  instance.construct(element);

  return instance;
}

module.exports = instantiateReactComponent;

}).call(this,require('_process'))

},{"./ReactElement":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ReactElement.js","./ReactEmptyComponent":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ReactEmptyComponent.js","./ReactLegacyElement":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ReactLegacyElement.js","./ReactNativeComponent":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ReactNativeComponent.js","./warning":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/warning.js","_process":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/browserify/node_modules/process/browser.js"}],"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/invariant.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule invariant
 */

"use strict";

/**
 * Use invariant() to assert state which your program assumes to be true.
 *
 * Provide sprintf-style format (only %s is supported) and arguments
 * to provide information about what broke and what you were
 * expecting.
 *
 * The invariant message will be stripped in production, but the invariant
 * will remain to ensure logic does not differ in production.
 */

var invariant = function(condition, format, a, b, c, d, e, f) {
  if ("production" !== process.env.NODE_ENV) {
    if (format === undefined) {
      throw new Error('invariant requires an error message argument');
    }
  }

  if (!condition) {
    var error;
    if (format === undefined) {
      error = new Error(
        'Minified exception occurred; use the non-minified dev environment ' +
        'for the full error message and additional helpful warnings.'
      );
    } else {
      var args = [a, b, c, d, e, f];
      var argIndex = 0;
      error = new Error(
        'Invariant Violation: ' +
        format.replace(/%s/g, function() { return args[argIndex++]; })
      );
    }

    error.framesToPop = 1; // we don't care about invariant's own frame
    throw error;
  }
};

module.exports = invariant;

}).call(this,require('_process'))

},{"_process":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/browserify/node_modules/process/browser.js"}],"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/isEventSupported.js":[function(require,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule isEventSupported
 */

"use strict";

var ExecutionEnvironment = require("./ExecutionEnvironment");

var useHasFeature;
if (ExecutionEnvironment.canUseDOM) {
  useHasFeature =
    document.implementation &&
    document.implementation.hasFeature &&
    // always returns true in newer browsers as per the standard.
    // @see http://dom.spec.whatwg.org/#dom-domimplementation-hasfeature
    document.implementation.hasFeature('', '') !== true;
}

/**
 * Checks if an event is supported in the current execution environment.
 *
 * NOTE: This will not work correctly for non-generic events such as `change`,
 * `reset`, `load`, `error`, and `select`.
 *
 * Borrows from Modernizr.
 *
 * @param {string} eventNameSuffix Event name, e.g. "click".
 * @param {?boolean} capture Check if the capture phase is supported.
 * @return {boolean} True if the event is supported.
 * @internal
 * @license Modernizr 3.0.0pre (Custom Build) | MIT
 */
function isEventSupported(eventNameSuffix, capture) {
  if (!ExecutionEnvironment.canUseDOM ||
      capture && !('addEventListener' in document)) {
    return false;
  }

  var eventName = 'on' + eventNameSuffix;
  var isSupported = eventName in document;

  if (!isSupported) {
    var element = document.createElement('div');
    element.setAttribute(eventName, 'return;');
    isSupported = typeof element[eventName] === 'function';
  }

  if (!isSupported && useHasFeature && eventNameSuffix === 'wheel') {
    // This is the only way to test support for the `wheel` event in IE9+.
    isSupported = document.implementation.hasFeature('Events.wheel', '3.0');
  }

  return isSupported;
}

module.exports = isEventSupported;

},{"./ExecutionEnvironment":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ExecutionEnvironment.js"}],"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/isNode.js":[function(require,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule isNode
 * @typechecks
 */

/**
 * @param {*} object The object to check.
 * @return {boolean} Whether or not the object is a DOM node.
 */
function isNode(object) {
  return !!(object && (
    typeof Node === 'function' ? object instanceof Node :
      typeof object === 'object' &&
      typeof object.nodeType === 'number' &&
      typeof object.nodeName === 'string'
  ));
}

module.exports = isNode;

},{}],"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/isTextInputElement.js":[function(require,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule isTextInputElement
 */

"use strict";

/**
 * @see http://www.whatwg.org/specs/web-apps/current-work/multipage/the-input-element.html#input-type-attr-summary
 */
var supportedInputTypes = {
  'color': true,
  'date': true,
  'datetime': true,
  'datetime-local': true,
  'email': true,
  'month': true,
  'number': true,
  'password': true,
  'range': true,
  'search': true,
  'tel': true,
  'text': true,
  'time': true,
  'url': true,
  'week': true
};

function isTextInputElement(elem) {
  return elem && (
    (elem.nodeName === 'INPUT' && supportedInputTypes[elem.type]) ||
    elem.nodeName === 'TEXTAREA'
  );
}

module.exports = isTextInputElement;

},{}],"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/isTextNode.js":[function(require,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule isTextNode
 * @typechecks
 */

var isNode = require("./isNode");

/**
 * @param {*} object The object to check.
 * @return {boolean} Whether or not the object is a DOM text node.
 */
function isTextNode(object) {
  return isNode(object) && object.nodeType == 3;
}

module.exports = isTextNode;

},{"./isNode":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/isNode.js"}],"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/joinClasses.js":[function(require,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule joinClasses
 * @typechecks static-only
 */

"use strict";

/**
 * Combines multiple className strings into one.
 * http://jsperf.com/joinclasses-args-vs-array
 *
 * @param {...?string} classes
 * @return {string}
 */
function joinClasses(className/*, ... */) {
  if (!className) {
    className = '';
  }
  var nextClass;
  var argLength = arguments.length;
  if (argLength > 1) {
    for (var ii = 1; ii < argLength; ii++) {
      nextClass = arguments[ii];
      if (nextClass) {
        className = (className ? className + ' ' : '') + nextClass;
      }
    }
  }
  return className;
}

module.exports = joinClasses;

},{}],"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/keyMirror.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule keyMirror
 * @typechecks static-only
 */

"use strict";

var invariant = require("./invariant");

/**
 * Constructs an enumeration with keys equal to their value.
 *
 * For example:
 *
 *   var COLORS = keyMirror({blue: null, red: null});
 *   var myColor = COLORS.blue;
 *   var isColorValid = !!COLORS[myColor];
 *
 * The last line could not be performed if the values of the generated enum were
 * not equal to their keys.
 *
 *   Input:  {key1: val1, key2: val2}
 *   Output: {key1: key1, key2: key2}
 *
 * @param {object} obj
 * @return {object}
 */
var keyMirror = function(obj) {
  var ret = {};
  var key;
  ("production" !== process.env.NODE_ENV ? invariant(
    obj instanceof Object && !Array.isArray(obj),
    'keyMirror(...): Argument must be an object.'
  ) : invariant(obj instanceof Object && !Array.isArray(obj)));
  for (key in obj) {
    if (!obj.hasOwnProperty(key)) {
      continue;
    }
    ret[key] = key;
  }
  return ret;
};

module.exports = keyMirror;

}).call(this,require('_process'))

},{"./invariant":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/invariant.js","_process":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/browserify/node_modules/process/browser.js"}],"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/keyOf.js":[function(require,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule keyOf
 */

/**
 * Allows extraction of a minified key. Let's the build system minify keys
 * without loosing the ability to dynamically use key strings as values
 * themselves. Pass in an object with a single key/val pair and it will return
 * you the string key of that single record. Suppose you want to grab the
 * value for a key 'className' inside of an object. Key/val minification may
 * have aliased that key to be 'xa12'. keyOf({className: null}) will return
 * 'xa12' in that case. Resolve keys you want to use once at startup time, then
 * reuse those resolutions.
 */
var keyOf = function(oneKeyObj) {
  var key;
  for (key in oneKeyObj) {
    if (!oneKeyObj.hasOwnProperty(key)) {
      continue;
    }
    return key;
  }
  return null;
};


module.exports = keyOf;

},{}],"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/mapObject.js":[function(require,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule mapObject
 */

'use strict';

var hasOwnProperty = Object.prototype.hasOwnProperty;

/**
 * Executes the provided `callback` once for each enumerable own property in the
 * object and constructs a new object from the results. The `callback` is
 * invoked with three arguments:
 *
 *  - the property value
 *  - the property name
 *  - the object being traversed
 *
 * Properties that are added after the call to `mapObject` will not be visited
 * by `callback`. If the values of existing properties are changed, the value
 * passed to `callback` will be the value at the time `mapObject` visits them.
 * Properties that are deleted before being visited are not visited.
 *
 * @grep function objectMap()
 * @grep function objMap()
 *
 * @param {?object} object
 * @param {function} callback
 * @param {*} context
 * @return {?object}
 */
function mapObject(object, callback, context) {
  if (!object) {
    return null;
  }
  var result = {};
  for (var name in object) {
    if (hasOwnProperty.call(object, name)) {
      result[name] = callback.call(context, object[name], name, object);
    }
  }
  return result;
}

module.exports = mapObject;

},{}],"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/memoizeStringOnly.js":[function(require,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule memoizeStringOnly
 * @typechecks static-only
 */

"use strict";

/**
 * Memoizes the return value of a function that accepts one string argument.
 *
 * @param {function} callback
 * @return {function}
 */
function memoizeStringOnly(callback) {
  var cache = {};
  return function(string) {
    if (cache.hasOwnProperty(string)) {
      return cache[string];
    } else {
      return cache[string] = callback.call(this, string);
    }
  };
}

module.exports = memoizeStringOnly;

},{}],"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/monitorCodeUse.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule monitorCodeUse
 */

"use strict";

var invariant = require("./invariant");

/**
 * Provides open-source compatible instrumentation for monitoring certain API
 * uses before we're ready to issue a warning or refactor. It accepts an event
 * name which may only contain the characters [a-z0-9_] and an optional data
 * object with further information.
 */

function monitorCodeUse(eventName, data) {
  ("production" !== process.env.NODE_ENV ? invariant(
    eventName && !/[^a-z0-9_]/.test(eventName),
    'You must provide an eventName using only the characters [a-z0-9_]'
  ) : invariant(eventName && !/[^a-z0-9_]/.test(eventName)));
}

module.exports = monitorCodeUse;

}).call(this,require('_process'))

},{"./invariant":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/invariant.js","_process":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/browserify/node_modules/process/browser.js"}],"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/onlyChild.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule onlyChild
 */
"use strict";

var ReactElement = require("./ReactElement");

var invariant = require("./invariant");

/**
 * Returns the first child in a collection of children and verifies that there
 * is only one child in the collection. The current implementation of this
 * function assumes that a single child gets passed without a wrapper, but the
 * purpose of this helper function is to abstract away the particular structure
 * of children.
 *
 * @param {?object} children Child collection structure.
 * @return {ReactComponent} The first and only `ReactComponent` contained in the
 * structure.
 */
function onlyChild(children) {
  ("production" !== process.env.NODE_ENV ? invariant(
    ReactElement.isValidElement(children),
    'onlyChild must be passed a children with exactly one child.'
  ) : invariant(ReactElement.isValidElement(children)));
  return children;
}

module.exports = onlyChild;

}).call(this,require('_process'))

},{"./ReactElement":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ReactElement.js","./invariant":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/invariant.js","_process":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/browserify/node_modules/process/browser.js"}],"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/performance.js":[function(require,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule performance
 * @typechecks
 */

"use strict";

var ExecutionEnvironment = require("./ExecutionEnvironment");

var performance;

if (ExecutionEnvironment.canUseDOM) {
  performance =
    window.performance ||
    window.msPerformance ||
    window.webkitPerformance;
}

module.exports = performance || {};

},{"./ExecutionEnvironment":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ExecutionEnvironment.js"}],"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/performanceNow.js":[function(require,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule performanceNow
 * @typechecks
 */

var performance = require("./performance");

/**
 * Detect if we can use `window.performance.now()` and gracefully fallback to
 * `Date.now()` if it doesn't exist. We need to support Firefox < 15 for now
 * because of Facebook's testing infrastructure.
 */
if (!performance || !performance.now) {
  performance = Date;
}

var performanceNow = performance.now.bind(performance);

module.exports = performanceNow;

},{"./performance":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/performance.js"}],"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/setInnerHTML.js":[function(require,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule setInnerHTML
 */

"use strict";

var ExecutionEnvironment = require("./ExecutionEnvironment");

var WHITESPACE_TEST = /^[ \r\n\t\f]/;
var NONVISIBLE_TEST = /<(!--|link|noscript|meta|script|style)[ \r\n\t\f\/>]/;

/**
 * Set the innerHTML property of a node, ensuring that whitespace is preserved
 * even in IE8.
 *
 * @param {DOMElement} node
 * @param {string} html
 * @internal
 */
var setInnerHTML = function(node, html) {
  node.innerHTML = html;
};

if (ExecutionEnvironment.canUseDOM) {
  // IE8: When updating a just created node with innerHTML only leading
  // whitespace is removed. When updating an existing node with innerHTML
  // whitespace in root TextNodes is also collapsed.
  // @see quirksmode.org/bugreports/archives/2004/11/innerhtml_and_t.html

  // Feature detection; only IE8 is known to behave improperly like this.
  var testElement = document.createElement('div');
  testElement.innerHTML = ' ';
  if (testElement.innerHTML === '') {
    setInnerHTML = function(node, html) {
      // Magic theory: IE8 supposedly differentiates between added and updated
      // nodes when processing innerHTML, innerHTML on updated nodes suffers
      // from worse whitespace behavior. Re-adding a node like this triggers
      // the initial and more favorable whitespace behavior.
      // TODO: What to do on a detached node?
      if (node.parentNode) {
        node.parentNode.replaceChild(node, node);
      }

      // We also implement a workaround for non-visible tags disappearing into
      // thin air on IE8, this only happens if there is no visible text
      // in-front of the non-visible tags. Piggyback on the whitespace fix
      // and simply check if any non-visible tags appear in the source.
      if (WHITESPACE_TEST.test(html) ||
          html[0] === '<' && NONVISIBLE_TEST.test(html)) {
        // Recover leading whitespace by temporarily prepending any character.
        // \uFEFF has the potential advantage of being zero-width/invisible.
        node.innerHTML = '\uFEFF' + html;

        // deleteData leaves an empty `TextNode` which offsets the index of all
        // children. Definitely want to avoid this.
        var textNode = node.firstChild;
        if (textNode.data.length === 1) {
          node.removeChild(textNode);
        } else {
          textNode.deleteData(0, 1);
        }
      } else {
        node.innerHTML = html;
      }
    };
  }
}

module.exports = setInnerHTML;

},{"./ExecutionEnvironment":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ExecutionEnvironment.js"}],"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/shallowEqual.js":[function(require,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule shallowEqual
 */

"use strict";

/**
 * Performs equality by iterating through keys on an object and returning
 * false when any key has values which are not strictly equal between
 * objA and objB. Returns true when the values of all keys are strictly equal.
 *
 * @return {boolean}
 */
function shallowEqual(objA, objB) {
  if (objA === objB) {
    return true;
  }
  var key;
  // Test for A's keys different from B.
  for (key in objA) {
    if (objA.hasOwnProperty(key) &&
        (!objB.hasOwnProperty(key) || objA[key] !== objB[key])) {
      return false;
    }
  }
  // Test for B's keys missing from A.
  for (key in objB) {
    if (objB.hasOwnProperty(key) && !objA.hasOwnProperty(key)) {
      return false;
    }
  }
  return true;
}

module.exports = shallowEqual;

},{}],"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/shouldUpdateReactComponent.js":[function(require,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule shouldUpdateReactComponent
 * @typechecks static-only
 */

"use strict";

/**
 * Given a `prevElement` and `nextElement`, determines if the existing
 * instance should be updated as opposed to being destroyed or replaced by a new
 * instance. Both arguments are elements. This ensures that this logic can
 * operate on stateless trees without any backing instance.
 *
 * @param {?object} prevElement
 * @param {?object} nextElement
 * @return {boolean} True if the existing instance should be updated.
 * @protected
 */
function shouldUpdateReactComponent(prevElement, nextElement) {
  if (prevElement && nextElement &&
      prevElement.type === nextElement.type &&
      prevElement.key === nextElement.key &&
      prevElement._owner === nextElement._owner) {
    return true;
  }
  return false;
}

module.exports = shouldUpdateReactComponent;

},{}],"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/toArray.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule toArray
 * @typechecks
 */

var invariant = require("./invariant");

/**
 * Convert array-like objects to arrays.
 *
 * This API assumes the caller knows the contents of the data type. For less
 * well defined inputs use createArrayFrom.
 *
 * @param {object|function|filelist} obj
 * @return {array}
 */
function toArray(obj) {
  var length = obj.length;

  // Some browse builtin objects can report typeof 'function' (e.g. NodeList in
  // old versions of Safari).
  ("production" !== process.env.NODE_ENV ? invariant(
    !Array.isArray(obj) &&
    (typeof obj === 'object' || typeof obj === 'function'),
    'toArray: Array-like object expected'
  ) : invariant(!Array.isArray(obj) &&
  (typeof obj === 'object' || typeof obj === 'function')));

  ("production" !== process.env.NODE_ENV ? invariant(
    typeof length === 'number',
    'toArray: Object needs a length property'
  ) : invariant(typeof length === 'number'));

  ("production" !== process.env.NODE_ENV ? invariant(
    length === 0 ||
    (length - 1) in obj,
    'toArray: Object should have keys for indices'
  ) : invariant(length === 0 ||
  (length - 1) in obj));

  // Old IE doesn't give collections access to hasOwnProperty. Assume inputs
  // without method will throw during the slice call and skip straight to the
  // fallback.
  if (obj.hasOwnProperty) {
    try {
      return Array.prototype.slice.call(obj);
    } catch (e) {
      // IE < 9 does not support Array#slice on collections objects
    }
  }

  // Fall back to copying key by key. This assumes all keys have a value,
  // so will not preserve sparsely populated inputs.
  var ret = Array(length);
  for (var ii = 0; ii < length; ii++) {
    ret[ii] = obj[ii];
  }
  return ret;
}

module.exports = toArray;

}).call(this,require('_process'))

},{"./invariant":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/invariant.js","_process":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/browserify/node_modules/process/browser.js"}],"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/traverseAllChildren.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule traverseAllChildren
 */

"use strict";

var ReactElement = require("./ReactElement");
var ReactInstanceHandles = require("./ReactInstanceHandles");

var invariant = require("./invariant");

var SEPARATOR = ReactInstanceHandles.SEPARATOR;
var SUBSEPARATOR = ':';

/**
 * TODO: Test that:
 * 1. `mapChildren` transforms strings and numbers into `ReactTextComponent`.
 * 2. it('should fail when supplied duplicate key', function() {
 * 3. That a single child and an array with one item have the same key pattern.
 * });
 */

var userProvidedKeyEscaperLookup = {
  '=': '=0',
  '.': '=1',
  ':': '=2'
};

var userProvidedKeyEscapeRegex = /[=.:]/g;

function userProvidedKeyEscaper(match) {
  return userProvidedKeyEscaperLookup[match];
}

/**
 * Generate a key string that identifies a component within a set.
 *
 * @param {*} component A component that could contain a manual key.
 * @param {number} index Index that is used if a manual key is not provided.
 * @return {string}
 */
function getComponentKey(component, index) {
  if (component && component.key != null) {
    // Explicit key
    return wrapUserProvidedKey(component.key);
  }
  // Implicit key determined by the index in the set
  return index.toString(36);
}

/**
 * Escape a component key so that it is safe to use in a reactid.
 *
 * @param {*} key Component key to be escaped.
 * @return {string} An escaped string.
 */
function escapeUserProvidedKey(text) {
  return ('' + text).replace(
    userProvidedKeyEscapeRegex,
    userProvidedKeyEscaper
  );
}

/**
 * Wrap a `key` value explicitly provided by the user to distinguish it from
 * implicitly-generated keys generated by a component's index in its parent.
 *
 * @param {string} key Value of a user-provided `key` attribute
 * @return {string}
 */
function wrapUserProvidedKey(key) {
  return '$' + escapeUserProvidedKey(key);
}

/**
 * @param {?*} children Children tree container.
 * @param {!string} nameSoFar Name of the key path so far.
 * @param {!number} indexSoFar Number of children encountered until this point.
 * @param {!function} callback Callback to invoke with each child found.
 * @param {?*} traverseContext Used to pass information throughout the traversal
 * process.
 * @return {!number} The number of children in this subtree.
 */
var traverseAllChildrenImpl =
  function(children, nameSoFar, indexSoFar, callback, traverseContext) {
    var nextName, nextIndex;
    var subtreeCount = 0;  // Count of children found in the current subtree.
    if (Array.isArray(children)) {
      for (var i = 0; i < children.length; i++) {
        var child = children[i];
        nextName = (
          nameSoFar +
          (nameSoFar ? SUBSEPARATOR : SEPARATOR) +
          getComponentKey(child, i)
        );
        nextIndex = indexSoFar + subtreeCount;
        subtreeCount += traverseAllChildrenImpl(
          child,
          nextName,
          nextIndex,
          callback,
          traverseContext
        );
      }
    } else {
      var type = typeof children;
      var isOnlyChild = nameSoFar === '';
      // If it's the only child, treat the name as if it was wrapped in an array
      // so that it's consistent if the number of children grows
      var storageName =
        isOnlyChild ? SEPARATOR + getComponentKey(children, 0) : nameSoFar;
      if (children == null || type === 'boolean') {
        // All of the above are perceived as null.
        callback(traverseContext, null, storageName, indexSoFar);
        subtreeCount = 1;
      } else if (type === 'string' || type === 'number' ||
                 ReactElement.isValidElement(children)) {
        callback(traverseContext, children, storageName, indexSoFar);
        subtreeCount = 1;
      } else if (type === 'object') {
        ("production" !== process.env.NODE_ENV ? invariant(
          !children || children.nodeType !== 1,
          'traverseAllChildren(...): Encountered an invalid child; DOM ' +
          'elements are not valid children of React components.'
        ) : invariant(!children || children.nodeType !== 1));
        for (var key in children) {
          if (children.hasOwnProperty(key)) {
            nextName = (
              nameSoFar + (nameSoFar ? SUBSEPARATOR : SEPARATOR) +
              wrapUserProvidedKey(key) + SUBSEPARATOR +
              getComponentKey(children[key], 0)
            );
            nextIndex = indexSoFar + subtreeCount;
            subtreeCount += traverseAllChildrenImpl(
              children[key],
              nextName,
              nextIndex,
              callback,
              traverseContext
            );
          }
        }
      }
    }
    return subtreeCount;
  };

/**
 * Traverses children that are typically specified as `props.children`, but
 * might also be specified through attributes:
 *
 * - `traverseAllChildren(this.props.children, ...)`
 * - `traverseAllChildren(this.props.leftPanelChildren, ...)`
 *
 * The `traverseContext` is an optional argument that is passed through the
 * entire traversal. It can be used to store accumulations or anything else that
 * the callback might find relevant.
 *
 * @param {?*} children Children tree object.
 * @param {!function} callback To invoke upon traversing each child.
 * @param {?*} traverseContext Context for traversal.
 * @return {!number} The number of children in this subtree.
 */
function traverseAllChildren(children, callback, traverseContext) {
  if (children == null) {
    return 0;
  }

  return traverseAllChildrenImpl(children, '', 0, callback, traverseContext);
}

module.exports = traverseAllChildren;

}).call(this,require('_process'))

},{"./ReactElement":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ReactElement.js","./ReactInstanceHandles":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/ReactInstanceHandles.js","./invariant":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/invariant.js","_process":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/browserify/node_modules/process/browser.js"}],"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/update.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule update
 */

"use strict";

var assign = require("./Object.assign");
var keyOf = require("./keyOf");
var invariant = require("./invariant");

function shallowCopy(x) {
  if (Array.isArray(x)) {
    return x.concat();
  } else if (x && typeof x === 'object') {
    return assign(new x.constructor(), x);
  } else {
    return x;
  }
}

var COMMAND_PUSH = keyOf({$push: null});
var COMMAND_UNSHIFT = keyOf({$unshift: null});
var COMMAND_SPLICE = keyOf({$splice: null});
var COMMAND_SET = keyOf({$set: null});
var COMMAND_MERGE = keyOf({$merge: null});
var COMMAND_APPLY = keyOf({$apply: null});

var ALL_COMMANDS_LIST = [
  COMMAND_PUSH,
  COMMAND_UNSHIFT,
  COMMAND_SPLICE,
  COMMAND_SET,
  COMMAND_MERGE,
  COMMAND_APPLY
];

var ALL_COMMANDS_SET = {};

ALL_COMMANDS_LIST.forEach(function(command) {
  ALL_COMMANDS_SET[command] = true;
});

function invariantArrayCase(value, spec, command) {
  ("production" !== process.env.NODE_ENV ? invariant(
    Array.isArray(value),
    'update(): expected target of %s to be an array; got %s.',
    command,
    value
  ) : invariant(Array.isArray(value)));
  var specValue = spec[command];
  ("production" !== process.env.NODE_ENV ? invariant(
    Array.isArray(specValue),
    'update(): expected spec of %s to be an array; got %s. ' +
    'Did you forget to wrap your parameter in an array?',
    command,
    specValue
  ) : invariant(Array.isArray(specValue)));
}

function update(value, spec) {
  ("production" !== process.env.NODE_ENV ? invariant(
    typeof spec === 'object',
    'update(): You provided a key path to update() that did not contain one ' +
    'of %s. Did you forget to include {%s: ...}?',
    ALL_COMMANDS_LIST.join(', '),
    COMMAND_SET
  ) : invariant(typeof spec === 'object'));

  if (spec.hasOwnProperty(COMMAND_SET)) {
    ("production" !== process.env.NODE_ENV ? invariant(
      Object.keys(spec).length === 1,
      'Cannot have more than one key in an object with %s',
      COMMAND_SET
    ) : invariant(Object.keys(spec).length === 1));

    return spec[COMMAND_SET];
  }

  var nextValue = shallowCopy(value);

  if (spec.hasOwnProperty(COMMAND_MERGE)) {
    var mergeObj = spec[COMMAND_MERGE];
    ("production" !== process.env.NODE_ENV ? invariant(
      mergeObj && typeof mergeObj === 'object',
      'update(): %s expects a spec of type \'object\'; got %s',
      COMMAND_MERGE,
      mergeObj
    ) : invariant(mergeObj && typeof mergeObj === 'object'));
    ("production" !== process.env.NODE_ENV ? invariant(
      nextValue && typeof nextValue === 'object',
      'update(): %s expects a target of type \'object\'; got %s',
      COMMAND_MERGE,
      nextValue
    ) : invariant(nextValue && typeof nextValue === 'object'));
    assign(nextValue, spec[COMMAND_MERGE]);
  }

  if (spec.hasOwnProperty(COMMAND_PUSH)) {
    invariantArrayCase(value, spec, COMMAND_PUSH);
    spec[COMMAND_PUSH].forEach(function(item) {
      nextValue.push(item);
    });
  }

  if (spec.hasOwnProperty(COMMAND_UNSHIFT)) {
    invariantArrayCase(value, spec, COMMAND_UNSHIFT);
    spec[COMMAND_UNSHIFT].forEach(function(item) {
      nextValue.unshift(item);
    });
  }

  if (spec.hasOwnProperty(COMMAND_SPLICE)) {
    ("production" !== process.env.NODE_ENV ? invariant(
      Array.isArray(value),
      'Expected %s target to be an array; got %s',
      COMMAND_SPLICE,
      value
    ) : invariant(Array.isArray(value)));
    ("production" !== process.env.NODE_ENV ? invariant(
      Array.isArray(spec[COMMAND_SPLICE]),
      'update(): expected spec of %s to be an array of arrays; got %s. ' +
      'Did you forget to wrap your parameters in an array?',
      COMMAND_SPLICE,
      spec[COMMAND_SPLICE]
    ) : invariant(Array.isArray(spec[COMMAND_SPLICE])));
    spec[COMMAND_SPLICE].forEach(function(args) {
      ("production" !== process.env.NODE_ENV ? invariant(
        Array.isArray(args),
        'update(): expected spec of %s to be an array of arrays; got %s. ' +
        'Did you forget to wrap your parameters in an array?',
        COMMAND_SPLICE,
        spec[COMMAND_SPLICE]
      ) : invariant(Array.isArray(args)));
      nextValue.splice.apply(nextValue, args);
    });
  }

  if (spec.hasOwnProperty(COMMAND_APPLY)) {
    ("production" !== process.env.NODE_ENV ? invariant(
      typeof spec[COMMAND_APPLY] === 'function',
      'update(): expected spec of %s to be a function; got %s.',
      COMMAND_APPLY,
      spec[COMMAND_APPLY]
    ) : invariant(typeof spec[COMMAND_APPLY] === 'function'));
    nextValue = spec[COMMAND_APPLY](nextValue);
  }

  for (var k in spec) {
    if (!(ALL_COMMANDS_SET.hasOwnProperty(k) && ALL_COMMANDS_SET[k])) {
      nextValue[k] = update(value[k], spec[k]);
    }
  }

  return nextValue;
}

module.exports = update;

}).call(this,require('_process'))

},{"./Object.assign":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/Object.assign.js","./invariant":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/invariant.js","./keyOf":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/keyOf.js","_process":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/browserify/node_modules/process/browser.js"}],"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/warning.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule warning
 */

"use strict";

var emptyFunction = require("./emptyFunction");

/**
 * Similar to invariant but only logs a warning if the condition is not met.
 * This can be used to log issues in development environments in critical
 * paths. Removing the logging code for production environments will keep the
 * same logic and follow the same code paths.
 */

var warning = emptyFunction;

if ("production" !== process.env.NODE_ENV) {
  warning = function(condition, format ) {for (var args=[],$__0=2,$__1=arguments.length;$__0<$__1;$__0++) args.push(arguments[$__0]);
    if (format === undefined) {
      throw new Error(
        '`warning(condition, format, ...args)` requires a warning ' +
        'message argument'
      );
    }

    if (!condition) {
      var argIndex = 0;
      console.warn('Warning: ' + format.replace(/%s/g, function()  {return args[argIndex++];}));
    }
  };
}

module.exports = warning;

}).call(this,require('_process'))

},{"./emptyFunction":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/emptyFunction.js","_process":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/browserify/node_modules/process/browser.js"}],"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/react.js":[function(require,module,exports){
module.exports = require('./lib/React');

},{"./lib/React":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/lib/React.js"}],"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/tether/tether.js":[function(require,module,exports){
/*! tether 0.6.5 */


(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    define(factory);
  } else if (typeof exports === 'object') {
    module.exports = factory(require,exports,module);
  } else {
    root.Tether = factory();
  }
}(this, function(require,exports,module) {

(function() {
  var Evented, addClass, defer, deferred, extend, flush, getBounds, getClassName, getOffsetParent, getOrigin, getScrollBarSize, getScrollParent, hasClass, node, removeClass, setClassName, uniqueId, updateClasses, zeroPosCache,
    __hasProp = {}.hasOwnProperty,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
    __slice = [].slice;

  if (this.Tether == null) {
    this.Tether = {
      modules: []
    };
  }

  getScrollParent = function(el) {
    var parent, position, scrollParent, style, _ref;
    position = getComputedStyle(el).position;
    if (position === 'fixed') {
      return el;
    }
    scrollParent = void 0;
    parent = el;
    while (parent = parent.parentNode) {
      try {
        style = getComputedStyle(parent);
      } catch (_error) {}
      if (style == null) {
        return parent;
      }
      if (/(auto|scroll)/.test(style['overflow'] + style['overflowY'] + style['overflowX'])) {
        if (position !== 'absolute' || ((_ref = style['position']) === 'relative' || _ref === 'absolute' || _ref === 'fixed')) {
          return parent;
        }
      }
    }
    return document.body;
  };

  uniqueId = (function() {
    var id;
    id = 0;
    return function() {
      return id++;
    };
  })();

  zeroPosCache = {};

  getOrigin = function(doc) {
    var id, k, node, v, _ref;
    node = doc._tetherZeroElement;
    if (node == null) {
      node = doc.createElement('div');
      node.setAttribute('data-tether-id', uniqueId());
      extend(node.style, {
        top: 0,
        left: 0,
        position: 'absolute'
      });
      doc.body.appendChild(node);
      doc._tetherZeroElement = node;
    }
    id = node.getAttribute('data-tether-id');
    if (zeroPosCache[id] == null) {
      zeroPosCache[id] = {};
      _ref = node.getBoundingClientRect();
      for (k in _ref) {
        v = _ref[k];
        zeroPosCache[id][k] = v;
      }
      defer(function() {
        return zeroPosCache[id] = void 0;
      });
    }
    return zeroPosCache[id];
  };

  node = null;

  getBounds = function(el) {
    var box, doc, docEl, k, origin, v, _ref;
    if (el === document) {
      doc = document;
      el = document.documentElement;
    } else {
      doc = el.ownerDocument;
    }
    docEl = doc.documentElement;
    box = {};
    _ref = el.getBoundingClientRect();
    for (k in _ref) {
      v = _ref[k];
      box[k] = v;
    }
    origin = getOrigin(doc);
    box.top -= origin.top;
    box.left -= origin.left;
    if (box.width == null) {
      box.width = document.body.scrollWidth - box.left - box.right;
    }
    if (box.height == null) {
      box.height = document.body.scrollHeight - box.top - box.bottom;
    }
    box.top = box.top - docEl.clientTop;
    box.left = box.left - docEl.clientLeft;
    box.right = doc.body.clientWidth - box.width - box.left;
    box.bottom = doc.body.clientHeight - box.height - box.top;
    return box;
  };

  getOffsetParent = function(el) {
    return el.offsetParent || document.documentElement;
  };

  getScrollBarSize = function() {
    var inner, outer, width, widthContained, widthScroll;
    inner = document.createElement('div');
    inner.style.width = '100%';
    inner.style.height = '200px';
    outer = document.createElement('div');
    extend(outer.style, {
      position: 'absolute',
      top: 0,
      left: 0,
      pointerEvents: 'none',
      visibility: 'hidden',
      width: '200px',
      height: '150px',
      overflow: 'hidden'
    });
    outer.appendChild(inner);
    document.body.appendChild(outer);
    widthContained = inner.offsetWidth;
    outer.style.overflow = 'scroll';
    widthScroll = inner.offsetWidth;
    if (widthContained === widthScroll) {
      widthScroll = outer.clientWidth;
    }
    document.body.removeChild(outer);
    width = widthContained - widthScroll;
    return {
      width: width,
      height: width
    };
  };

  extend = function(out) {
    var args, key, obj, val, _i, _len, _ref;
    if (out == null) {
      out = {};
    }
    args = [];
    Array.prototype.push.apply(args, arguments);
    _ref = args.slice(1);
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      obj = _ref[_i];
      if (obj) {
        for (key in obj) {
          if (!__hasProp.call(obj, key)) continue;
          val = obj[key];
          out[key] = val;
        }
      }
    }
    return out;
  };

  removeClass = function(el, name) {
    var className, cls, _i, _len, _ref, _results;
    if (el.classList != null) {
      _ref = name.split(' ');
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        cls = _ref[_i];
        if (cls.trim()) {
          _results.push(el.classList.remove(cls));
        }
      }
      return _results;
    } else {
      className = getClassName(el).replace(new RegExp("(^| )" + (name.split(' ').join('|')) + "( |$)", 'gi'), ' ');
      return setClassName(el, className);
    }
  };

  addClass = function(el, name) {
    var cls, _i, _len, _ref, _results;
    if (el.classList != null) {
      _ref = name.split(' ');
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        cls = _ref[_i];
        if (cls.trim()) {
          _results.push(el.classList.add(cls));
        }
      }
      return _results;
    } else {
      removeClass(el, name);
      cls = getClassName(el) + (" " + name);
      return setClassName(el, cls);
    }
  };

  hasClass = function(el, name) {
    if (el.classList != null) {
      return el.classList.contains(name);
    } else {
      return new RegExp("(^| )" + name + "( |$)", 'gi').test(getClassName(el));
    }
  };

  getClassName = function(el) {
    if (el.className instanceof SVGAnimatedString) {
      return el.className.baseVal;
    } else {
      return el.className;
    }
  };

  setClassName = function(el, className) {
    return el.setAttribute('class', className);
  };

  updateClasses = function(el, add, all) {
    var cls, _i, _j, _len, _len1, _results;
    for (_i = 0, _len = all.length; _i < _len; _i++) {
      cls = all[_i];
      if (__indexOf.call(add, cls) < 0) {
        if (hasClass(el, cls)) {
          removeClass(el, cls);
        }
      }
    }
    _results = [];
    for (_j = 0, _len1 = add.length; _j < _len1; _j++) {
      cls = add[_j];
      if (!hasClass(el, cls)) {
        _results.push(addClass(el, cls));
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  };

  deferred = [];

  defer = function(fn) {
    return deferred.push(fn);
  };

  flush = function() {
    var fn, _results;
    _results = [];
    while (fn = deferred.pop()) {
      _results.push(fn());
    }
    return _results;
  };

  Evented = (function() {
    function Evented() {}

    Evented.prototype.on = function(event, handler, ctx, once) {
      var _base;
      if (once == null) {
        once = false;
      }
      if (this.bindings == null) {
        this.bindings = {};
      }
      if ((_base = this.bindings)[event] == null) {
        _base[event] = [];
      }
      return this.bindings[event].push({
        handler: handler,
        ctx: ctx,
        once: once
      });
    };

    Evented.prototype.once = function(event, handler, ctx) {
      return this.on(event, handler, ctx, true);
    };

    Evented.prototype.off = function(event, handler) {
      var i, _ref, _results;
      if (((_ref = this.bindings) != null ? _ref[event] : void 0) == null) {
        return;
      }
      if (handler == null) {
        return delete this.bindings[event];
      } else {
        i = 0;
        _results = [];
        while (i < this.bindings[event].length) {
          if (this.bindings[event][i].handler === handler) {
            _results.push(this.bindings[event].splice(i, 1));
          } else {
            _results.push(i++);
          }
        }
        return _results;
      }
    };

    Evented.prototype.trigger = function() {
      var args, ctx, event, handler, i, once, _ref, _ref1, _results;
      event = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      if ((_ref = this.bindings) != null ? _ref[event] : void 0) {
        i = 0;
        _results = [];
        while (i < this.bindings[event].length) {
          _ref1 = this.bindings[event][i], handler = _ref1.handler, ctx = _ref1.ctx, once = _ref1.once;
          handler.apply(ctx != null ? ctx : this, args);
          if (once) {
            _results.push(this.bindings[event].splice(i, 1));
          } else {
            _results.push(i++);
          }
        }
        return _results;
      }
    };

    return Evented;

  })();

  this.Tether.Utils = {
    getScrollParent: getScrollParent,
    getBounds: getBounds,
    getOffsetParent: getOffsetParent,
    extend: extend,
    addClass: addClass,
    removeClass: removeClass,
    hasClass: hasClass,
    updateClasses: updateClasses,
    defer: defer,
    flush: flush,
    uniqueId: uniqueId,
    Evented: Evented,
    getScrollBarSize: getScrollBarSize
  };

}).call(this);

(function() {
  var MIRROR_LR, MIRROR_TB, OFFSET_MAP, Tether, addClass, addOffset, attachmentToOffset, autoToFixedAttachment, defer, extend, flush, getBounds, getOffsetParent, getOuterSize, getScrollBarSize, getScrollParent, getSize, now, offsetToPx, parseAttachment, parseOffset, position, removeClass, tethers, transformKey, updateClasses, within, _Tether, _ref,
    __slice = [].slice,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  if (this.Tether == null) {
    throw new Error("You must include the utils.js file before tether.js");
  }

  Tether = this.Tether;

  _ref = Tether.Utils, getScrollParent = _ref.getScrollParent, getSize = _ref.getSize, getOuterSize = _ref.getOuterSize, getBounds = _ref.getBounds, getOffsetParent = _ref.getOffsetParent, extend = _ref.extend, addClass = _ref.addClass, removeClass = _ref.removeClass, updateClasses = _ref.updateClasses, defer = _ref.defer, flush = _ref.flush, getScrollBarSize = _ref.getScrollBarSize;

  within = function(a, b, diff) {
    if (diff == null) {
      diff = 1;
    }
    return (a + diff >= b && b >= a - diff);
  };

  transformKey = (function() {
    var el, key, _i, _len, _ref1;
    el = document.createElement('div');
    _ref1 = ['transform', 'webkitTransform', 'OTransform', 'MozTransform', 'msTransform'];
    for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
      key = _ref1[_i];
      if (el.style[key] !== void 0) {
        return key;
      }
    }
  })();

  tethers = [];

  position = function() {
    var tether, _i, _len;
    for (_i = 0, _len = tethers.length; _i < _len; _i++) {
      tether = tethers[_i];
      tether.position(false);
    }
    return flush();
  };

  now = function() {
    var _ref1;
    return (_ref1 = typeof performance !== "undefined" && performance !== null ? typeof performance.now === "function" ? performance.now() : void 0 : void 0) != null ? _ref1 : +(new Date);
  };

  (function() {
    var event, lastCall, lastDuration, pendingTimeout, tick, _i, _len, _ref1, _results;
    lastCall = null;
    lastDuration = null;
    pendingTimeout = null;
    tick = function() {
      if ((lastDuration != null) && lastDuration > 16) {
        lastDuration = Math.min(lastDuration - 16, 250);
        pendingTimeout = setTimeout(tick, 250);
        return;
      }
      if ((lastCall != null) && (now() - lastCall) < 10) {
        return;
      }
      if (pendingTimeout != null) {
        clearTimeout(pendingTimeout);
        pendingTimeout = null;
      }
      lastCall = now();
      position();
      return lastDuration = now() - lastCall;
    };
    _ref1 = ['resize', 'scroll', 'touchmove'];
    _results = [];
    for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
      event = _ref1[_i];
      _results.push(window.addEventListener(event, tick));
    }
    return _results;
  })();

  MIRROR_LR = {
    center: 'center',
    left: 'right',
    right: 'left'
  };

  MIRROR_TB = {
    middle: 'middle',
    top: 'bottom',
    bottom: 'top'
  };

  OFFSET_MAP = {
    top: 0,
    left: 0,
    middle: '50%',
    center: '50%',
    bottom: '100%',
    right: '100%'
  };

  autoToFixedAttachment = function(attachment, relativeToAttachment) {
    var left, top;
    left = attachment.left, top = attachment.top;
    if (left === 'auto') {
      left = MIRROR_LR[relativeToAttachment.left];
    }
    if (top === 'auto') {
      top = MIRROR_TB[relativeToAttachment.top];
    }
    return {
      left: left,
      top: top
    };
  };

  attachmentToOffset = function(attachment) {
    var _ref1, _ref2;
    return {
      left: (_ref1 = OFFSET_MAP[attachment.left]) != null ? _ref1 : attachment.left,
      top: (_ref2 = OFFSET_MAP[attachment.top]) != null ? _ref2 : attachment.top
    };
  };

  addOffset = function() {
    var left, offsets, out, top, _i, _len, _ref1;
    offsets = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    out = {
      top: 0,
      left: 0
    };
    for (_i = 0, _len = offsets.length; _i < _len; _i++) {
      _ref1 = offsets[_i], top = _ref1.top, left = _ref1.left;
      if (typeof top === 'string') {
        top = parseFloat(top, 10);
      }
      if (typeof left === 'string') {
        left = parseFloat(left, 10);
      }
      out.top += top;
      out.left += left;
    }
    return out;
  };

  offsetToPx = function(offset, size) {
    if (typeof offset.left === 'string' && offset.left.indexOf('%') !== -1) {
      offset.left = parseFloat(offset.left, 10) / 100 * size.width;
    }
    if (typeof offset.top === 'string' && offset.top.indexOf('%') !== -1) {
      offset.top = parseFloat(offset.top, 10) / 100 * size.height;
    }
    return offset;
  };

  parseAttachment = parseOffset = function(value) {
    var left, top, _ref1;
    _ref1 = value.split(' '), top = _ref1[0], left = _ref1[1];
    return {
      top: top,
      left: left
    };
  };

  _Tether = (function() {
    _Tether.modules = [];

    function _Tether(options) {
      this.position = __bind(this.position, this);
      var module, _i, _len, _ref1, _ref2;
      tethers.push(this);
      this.history = [];
      this.setOptions(options, false);
      _ref1 = Tether.modules;
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        module = _ref1[_i];
        if ((_ref2 = module.initialize) != null) {
          _ref2.call(this);
        }
      }
      this.position();
    }

    _Tether.prototype.getClass = function(key) {
      var _ref1, _ref2;
      if ((_ref1 = this.options.classes) != null ? _ref1[key] : void 0) {
        return this.options.classes[key];
      } else if (((_ref2 = this.options.classes) != null ? _ref2[key] : void 0) !== false) {
        if (this.options.classPrefix) {
          return "" + this.options.classPrefix + "-" + key;
        } else {
          return key;
        }
      } else {
        return '';
      }
    };

    _Tether.prototype.setOptions = function(options, position) {
      var defaults, key, _i, _len, _ref1, _ref2;
      this.options = options;
      if (position == null) {
        position = true;
      }
      defaults = {
        offset: '0 0',
        targetOffset: '0 0',
        targetAttachment: 'auto auto',
        classPrefix: 'tether'
      };
      this.options = extend(defaults, this.options);
      _ref1 = this.options, this.element = _ref1.element, this.target = _ref1.target, this.targetModifier = _ref1.targetModifier;
      if (this.target === 'viewport') {
        this.target = document.body;
        this.targetModifier = 'visible';
      } else if (this.target === 'scroll-handle') {
        this.target = document.body;
        this.targetModifier = 'scroll-handle';
      }
      _ref2 = ['element', 'target'];
      for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
        key = _ref2[_i];
        if (this[key] == null) {
          throw new Error("Tether Error: Both element and target must be defined");
        }
        if (this[key].jquery != null) {
          this[key] = this[key][0];
        } else if (typeof this[key] === 'string') {
          this[key] = document.querySelector(this[key]);
        }
      }
      addClass(this.element, this.getClass('element'));
      addClass(this.target, this.getClass('target'));
      if (!this.options.attachment) {
        throw new Error("Tether Error: You must provide an attachment");
      }
      this.targetAttachment = parseAttachment(this.options.targetAttachment);
      this.attachment = parseAttachment(this.options.attachment);
      this.offset = parseOffset(this.options.offset);
      this.targetOffset = parseOffset(this.options.targetOffset);
      if (this.scrollParent != null) {
        this.disable();
      }
      if (this.targetModifier === 'scroll-handle') {
        this.scrollParent = this.target;
      } else {
        this.scrollParent = getScrollParent(this.target);
      }
      if (this.options.enabled !== false) {
        return this.enable(position);
      }
    };

    _Tether.prototype.getTargetBounds = function() {
      var bounds, fitAdj, hasBottomScroll, height, out, scrollBottom, scrollPercentage, style, target;
      if (this.targetModifier != null) {
        switch (this.targetModifier) {
          case 'visible':
            if (this.target === document.body) {
              return {
                top: pageYOffset,
                left: pageXOffset,
                height: innerHeight,
                width: innerWidth
              };
            } else {
              bounds = getBounds(this.target);
              out = {
                height: bounds.height,
                width: bounds.width,
                top: bounds.top,
                left: bounds.left
              };
              out.height = Math.min(out.height, bounds.height - (pageYOffset - bounds.top));
              out.height = Math.min(out.height, bounds.height - ((bounds.top + bounds.height) - (pageYOffset + innerHeight)));
              out.height = Math.min(innerHeight, out.height);
              out.height -= 2;
              out.width = Math.min(out.width, bounds.width - (pageXOffset - bounds.left));
              out.width = Math.min(out.width, bounds.width - ((bounds.left + bounds.width) - (pageXOffset + innerWidth)));
              out.width = Math.min(innerWidth, out.width);
              out.width -= 2;
              if (out.top < pageYOffset) {
                out.top = pageYOffset;
              }
              if (out.left < pageXOffset) {
                out.left = pageXOffset;
              }
              return out;
            }
            break;
          case 'scroll-handle':
            target = this.target;
            if (target === document.body) {
              target = document.documentElement;
              bounds = {
                left: pageXOffset,
                top: pageYOffset,
                height: innerHeight,
                width: innerWidth
              };
            } else {
              bounds = getBounds(target);
            }
            style = getComputedStyle(target);
            hasBottomScroll = target.scrollWidth > target.clientWidth || 'scroll' === [style.overflow, style.overflowX] || this.target !== document.body;
            scrollBottom = 0;
            if (hasBottomScroll) {
              scrollBottom = 15;
            }
            height = bounds.height - parseFloat(style.borderTopWidth) - parseFloat(style.borderBottomWidth) - scrollBottom;
            out = {
              width: 15,
              height: height * 0.975 * (height / target.scrollHeight),
              left: bounds.left + bounds.width - parseFloat(style.borderLeftWidth) - 15
            };
            fitAdj = 0;
            if (height < 408 && this.target === document.body) {
              fitAdj = -0.00011 * Math.pow(height, 2) - 0.00727 * height + 22.58;
            }
            if (this.target !== document.body) {
              out.height = Math.max(out.height, 24);
            }
            scrollPercentage = this.target.scrollTop / (target.scrollHeight - height);
            out.top = scrollPercentage * (height - out.height - fitAdj) + bounds.top + parseFloat(style.borderTopWidth);
            if (this.target === document.body) {
              out.height = Math.max(out.height, 24);
            }
            return out;
        }
      } else {
        return getBounds(this.target);
      }
    };

    _Tether.prototype.clearCache = function() {
      return this._cache = {};
    };

    _Tether.prototype.cache = function(k, getter) {
      if (this._cache == null) {
        this._cache = {};
      }
      if (this._cache[k] == null) {
        this._cache[k] = getter.call(this);
      }
      return this._cache[k];
    };

    _Tether.prototype.enable = function(position) {
      if (position == null) {
        position = true;
      }
      addClass(this.target, this.getClass('enabled'));
      addClass(this.element, this.getClass('enabled'));
      this.enabled = true;
      if (this.scrollParent !== document) {
        this.scrollParent.addEventListener('scroll', this.position);
      }
      if (position) {
        return this.position();
      }
    };

    _Tether.prototype.disable = function() {
      removeClass(this.target, this.getClass('enabled'));
      removeClass(this.element, this.getClass('enabled'));
      this.enabled = false;
      if (this.scrollParent != null) {
        return this.scrollParent.removeEventListener('scroll', this.position);
      }
    };

    _Tether.prototype.destroy = function() {
      var i, tether, _i, _len, _results;
      this.disable();
      _results = [];
      for (i = _i = 0, _len = tethers.length; _i < _len; i = ++_i) {
        tether = tethers[i];
        if (tether === this) {
          tethers.splice(i, 1);
          break;
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    _Tether.prototype.updateAttachClasses = function(elementAttach, targetAttach) {
      var add, all, side, sides, _i, _j, _len, _len1, _ref1,
        _this = this;
      if (elementAttach == null) {
        elementAttach = this.attachment;
      }
      if (targetAttach == null) {
        targetAttach = this.targetAttachment;
      }
      sides = ['left', 'top', 'bottom', 'right', 'middle', 'center'];
      if ((_ref1 = this._addAttachClasses) != null ? _ref1.length : void 0) {
        this._addAttachClasses.splice(0, this._addAttachClasses.length);
      }
      add = this._addAttachClasses != null ? this._addAttachClasses : this._addAttachClasses = [];
      if (elementAttach.top) {
        add.push("" + (this.getClass('element-attached')) + "-" + elementAttach.top);
      }
      if (elementAttach.left) {
        add.push("" + (this.getClass('element-attached')) + "-" + elementAttach.left);
      }
      if (targetAttach.top) {
        add.push("" + (this.getClass('target-attached')) + "-" + targetAttach.top);
      }
      if (targetAttach.left) {
        add.push("" + (this.getClass('target-attached')) + "-" + targetAttach.left);
      }
      all = [];
      for (_i = 0, _len = sides.length; _i < _len; _i++) {
        side = sides[_i];
        all.push("" + (this.getClass('element-attached')) + "-" + side);
      }
      for (_j = 0, _len1 = sides.length; _j < _len1; _j++) {
        side = sides[_j];
        all.push("" + (this.getClass('target-attached')) + "-" + side);
      }
      return defer(function() {
        if (_this._addAttachClasses == null) {
          return;
        }
        updateClasses(_this.element, _this._addAttachClasses, all);
        updateClasses(_this.target, _this._addAttachClasses, all);
        return _this._addAttachClasses = void 0;
      });
    };

    _Tether.prototype.position = function(flushChanges) {
      var elementPos, elementStyle, height, left, manualOffset, manualTargetOffset, module, next, offset, offsetBorder, offsetParent, offsetParentSize, offsetParentStyle, offsetPosition, ret, scrollLeft, scrollTop, scrollbarSize, side, targetAttachment, targetOffset, targetPos, targetSize, top, width, _i, _j, _len, _len1, _ref1, _ref2, _ref3, _ref4, _ref5, _ref6,
        _this = this;
      if (flushChanges == null) {
        flushChanges = true;
      }
      if (!this.enabled) {
        return;
      }
      this.clearCache();
      targetAttachment = autoToFixedAttachment(this.targetAttachment, this.attachment);
      this.updateAttachClasses(this.attachment, targetAttachment);
      elementPos = this.cache('element-bounds', function() {
        return getBounds(_this.element);
      });
      width = elementPos.width, height = elementPos.height;
      if (width === 0 && height === 0 && (this.lastSize != null)) {
        _ref1 = this.lastSize, width = _ref1.width, height = _ref1.height;
      } else {
        this.lastSize = {
          width: width,
          height: height
        };
      }
      targetSize = targetPos = this.cache('target-bounds', function() {
        return _this.getTargetBounds();
      });
      offset = offsetToPx(attachmentToOffset(this.attachment), {
        width: width,
        height: height
      });
      targetOffset = offsetToPx(attachmentToOffset(targetAttachment), targetSize);
      manualOffset = offsetToPx(this.offset, {
        width: width,
        height: height
      });
      manualTargetOffset = offsetToPx(this.targetOffset, targetSize);
      offset = addOffset(offset, manualOffset);
      targetOffset = addOffset(targetOffset, manualTargetOffset);
      left = targetPos.left + targetOffset.left - offset.left;
      top = targetPos.top + targetOffset.top - offset.top;
      _ref2 = Tether.modules;
      for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
        module = _ref2[_i];
        ret = module.position.call(this, {
          left: left,
          top: top,
          targetAttachment: targetAttachment,
          targetPos: targetPos,
          attachment: this.attachment,
          elementPos: elementPos,
          offset: offset,
          targetOffset: targetOffset,
          manualOffset: manualOffset,
          manualTargetOffset: manualTargetOffset,
          scrollbarSize: scrollbarSize
        });
        if ((ret == null) || typeof ret !== 'object') {
          continue;
        } else if (ret === false) {
          return false;
        } else {
          top = ret.top, left = ret.left;
        }
      }
      next = {
        page: {
          top: top,
          left: left
        },
        viewport: {
          top: top - pageYOffset,
          bottom: pageYOffset - top - height + innerHeight,
          left: left - pageXOffset,
          right: pageXOffset - left - width + innerWidth
        }
      };
      if (document.body.scrollWidth > window.innerWidth) {
        scrollbarSize = this.cache('scrollbar-size', getScrollBarSize);
        next.viewport.bottom -= scrollbarSize.height;
      }
      if (document.body.scrollHeight > window.innerHeight) {
        scrollbarSize = this.cache('scrollbar-size', getScrollBarSize);
        next.viewport.right -= scrollbarSize.width;
      }
      if (((_ref3 = document.body.style.position) !== '' && _ref3 !== 'static') || ((_ref4 = document.body.parentElement.style.position) !== '' && _ref4 !== 'static')) {
        next.page.bottom = document.body.scrollHeight - top - height;
        next.page.right = document.body.scrollWidth - left - width;
      }
      if (((_ref5 = this.options.optimizations) != null ? _ref5.moveElement : void 0) !== false && (this.targetModifier == null)) {
        offsetParent = this.cache('target-offsetparent', function() {
          return getOffsetParent(_this.target);
        });
        offsetPosition = this.cache('target-offsetparent-bounds', function() {
          return getBounds(offsetParent);
        });
        offsetParentStyle = getComputedStyle(offsetParent);
        elementStyle = getComputedStyle(this.element);
        offsetParentSize = offsetPosition;
        offsetBorder = {};
        _ref6 = ['Top', 'Left', 'Bottom', 'Right'];
        for (_j = 0, _len1 = _ref6.length; _j < _len1; _j++) {
          side = _ref6[_j];
          offsetBorder[side.toLowerCase()] = parseFloat(offsetParentStyle["border" + side + "Width"]);
        }
        offsetPosition.right = document.body.scrollWidth - offsetPosition.left - offsetParentSize.width + offsetBorder.right;
        offsetPosition.bottom = document.body.scrollHeight - offsetPosition.top - offsetParentSize.height + offsetBorder.bottom;
        if (next.page.top >= (offsetPosition.top + offsetBorder.top) && next.page.bottom >= offsetPosition.bottom) {
          if (next.page.left >= (offsetPosition.left + offsetBorder.left) && next.page.right >= offsetPosition.right) {
            scrollTop = offsetParent.scrollTop;
            scrollLeft = offsetParent.scrollLeft;
            next.offset = {
              top: next.page.top - offsetPosition.top + scrollTop - offsetBorder.top,
              left: next.page.left - offsetPosition.left + scrollLeft - offsetBorder.left
            };
          }
        }
      }
      this.move(next);
      this.history.unshift(next);
      if (this.history.length > 3) {
        this.history.pop();
      }
      if (flushChanges) {
        flush();
      }
      return true;
    };

    _Tether.prototype.move = function(position) {
      var css, elVal, found, key, moved, offsetParent, point, same, transcribe, type, val, write, writeCSS, _i, _len, _ref1, _ref2,
        _this = this;
      if (this.element.parentNode == null) {
        return;
      }
      same = {};
      for (type in position) {
        same[type] = {};
        for (key in position[type]) {
          found = false;
          _ref1 = this.history;
          for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
            point = _ref1[_i];
            if (!within((_ref2 = point[type]) != null ? _ref2[key] : void 0, position[type][key])) {
              found = true;
              break;
            }
          }
          if (!found) {
            same[type][key] = true;
          }
        }
      }
      css = {
        top: '',
        left: '',
        right: '',
        bottom: ''
      };
      transcribe = function(same, pos) {
        var xPos, yPos, _ref3;
        if (((_ref3 = _this.options.optimizations) != null ? _ref3.gpu : void 0) !== false) {
          if (same.top) {
            css.top = 0;
            yPos = pos.top;
          } else {
            css.bottom = 0;
            yPos = -pos.bottom;
          }
          if (same.left) {
            css.left = 0;
            xPos = pos.left;
          } else {
            css.right = 0;
            xPos = -pos.right;
          }
          css[transformKey] = "translateX(" + (Math.round(xPos)) + "px) translateY(" + (Math.round(yPos)) + "px)";
          if (transformKey !== 'msTransform') {
            return css[transformKey] += " translateZ(0)";
          }
        } else {
          if (same.top) {
            css.top = "" + pos.top + "px";
          } else {
            css.bottom = "" + pos.bottom + "px";
          }
          if (same.left) {
            return css.left = "" + pos.left + "px";
          } else {
            return css.right = "" + pos.right + "px";
          }
        }
      };
      moved = false;
      if ((same.page.top || same.page.bottom) && (same.page.left || same.page.right)) {
        css.position = 'absolute';
        transcribe(same.page, position.page);
      } else if ((same.viewport.top || same.viewport.bottom) && (same.viewport.left || same.viewport.right)) {
        css.position = 'fixed';
        transcribe(same.viewport, position.viewport);
      } else if ((same.offset != null) && same.offset.top && same.offset.left) {
        css.position = 'absolute';
        offsetParent = this.cache('target-offsetparent', function() {
          return getOffsetParent(_this.target);
        });
        if (getOffsetParent(this.element) !== offsetParent) {
          defer(function() {
            _this.element.parentNode.removeChild(_this.element);
            return offsetParent.appendChild(_this.element);
          });
        }
        transcribe(same.offset, position.offset);
        moved = true;
      } else {
        css.position = 'absolute';
        transcribe({
          top: true,
          left: true
        }, position.page);
      }
      if (!moved && this.element.parentNode.tagName !== 'BODY') {
        this.element.parentNode.removeChild(this.element);
        document.body.appendChild(this.element);
      }
      writeCSS = {};
      write = false;
      for (key in css) {
        val = css[key];
        elVal = this.element.style[key];
        if (elVal !== '' && val !== '' && (key === 'top' || key === 'left' || key === 'bottom' || key === 'right')) {
          elVal = parseFloat(elVal);
          val = parseFloat(val);
        }
        if (elVal !== val) {
          write = true;
          writeCSS[key] = css[key];
        }
      }
      if (write) {
        return defer(function() {
          return extend(_this.element.style, writeCSS);
        });
      }
    };

    return _Tether;

  })();

  Tether.position = position;

  this.Tether = extend(_Tether, Tether);

}).call(this);

(function() {
  var BOUNDS_FORMAT, MIRROR_ATTACH, defer, extend, getBoundingRect, getBounds, getOuterSize, getSize, updateClasses, _ref,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  _ref = this.Tether.Utils, getOuterSize = _ref.getOuterSize, getBounds = _ref.getBounds, getSize = _ref.getSize, extend = _ref.extend, updateClasses = _ref.updateClasses, defer = _ref.defer;

  MIRROR_ATTACH = {
    left: 'right',
    right: 'left',
    top: 'bottom',
    bottom: 'top',
    middle: 'middle'
  };

  BOUNDS_FORMAT = ['left', 'top', 'right', 'bottom'];

  getBoundingRect = function(tether, to) {
    var i, pos, side, size, style, _i, _len;
    if (to === 'scrollParent') {
      to = tether.scrollParent;
    } else if (to === 'window') {
      to = [pageXOffset, pageYOffset, innerWidth + pageXOffset, innerHeight + pageYOffset];
    }
    if (to === document) {
      to = to.documentElement;
    }
    if (to.nodeType != null) {
      pos = size = getBounds(to);
      style = getComputedStyle(to);
      to = [pos.left, pos.top, size.width + pos.left, size.height + pos.top];
      for (i = _i = 0, _len = BOUNDS_FORMAT.length; _i < _len; i = ++_i) {
        side = BOUNDS_FORMAT[i];
        side = side[0].toUpperCase() + side.substr(1);
        if (side === 'Top' || side === 'Left') {
          to[i] += parseFloat(style["border" + side + "Width"]);
        } else {
          to[i] -= parseFloat(style["border" + side + "Width"]);
        }
      }
    }
    return to;
  };

  this.Tether.modules.push({
    position: function(_arg) {
      var addClasses, allClasses, attachment, bounds, changeAttachX, changeAttachY, cls, constraint, eAttachment, height, left, oob, oobClass, p, pin, pinned, pinnedClass, removeClass, side, tAttachment, targetAttachment, targetHeight, targetSize, targetWidth, to, top, width, _i, _j, _k, _l, _len, _len1, _len2, _len3, _len4, _len5, _m, _n, _ref1, _ref2, _ref3, _ref4, _ref5, _ref6, _ref7, _ref8,
        _this = this;
      top = _arg.top, left = _arg.left, targetAttachment = _arg.targetAttachment;
      if (!this.options.constraints) {
        return true;
      }
      removeClass = function(prefix) {
        var side, _i, _len, _results;
        _this.removeClass(prefix);
        _results = [];
        for (_i = 0, _len = BOUNDS_FORMAT.length; _i < _len; _i++) {
          side = BOUNDS_FORMAT[_i];
          _results.push(_this.removeClass("" + prefix + "-" + side));
        }
        return _results;
      };
      _ref1 = this.cache('element-bounds', function() {
        return getBounds(_this.element);
      }), height = _ref1.height, width = _ref1.width;
      if (width === 0 && height === 0 && (this.lastSize != null)) {
        _ref2 = this.lastSize, width = _ref2.width, height = _ref2.height;
      }
      targetSize = this.cache('target-bounds', function() {
        return _this.getTargetBounds();
      });
      targetHeight = targetSize.height;
      targetWidth = targetSize.width;
      tAttachment = {};
      eAttachment = {};
      allClasses = [this.getClass('pinned'), this.getClass('out-of-bounds')];
      _ref3 = this.options.constraints;
      for (_i = 0, _len = _ref3.length; _i < _len; _i++) {
        constraint = _ref3[_i];
        if (constraint.outOfBoundsClass) {
          allClasses.push(constraint.outOfBoundsClass);
        }
        if (constraint.pinnedClass) {
          allClasses.push(constraint.pinnedClass);
        }
      }
      for (_j = 0, _len1 = allClasses.length; _j < _len1; _j++) {
        cls = allClasses[_j];
        _ref4 = ['left', 'top', 'right', 'bottom'];
        for (_k = 0, _len2 = _ref4.length; _k < _len2; _k++) {
          side = _ref4[_k];
          allClasses.push("" + cls + "-" + side);
        }
      }
      addClasses = [];
      tAttachment = extend({}, targetAttachment);
      eAttachment = extend({}, this.attachment);
      _ref5 = this.options.constraints;
      for (_l = 0, _len3 = _ref5.length; _l < _len3; _l++) {
        constraint = _ref5[_l];
        to = constraint.to, attachment = constraint.attachment, pin = constraint.pin;
        if (attachment == null) {
          attachment = '';
        }
        if (__indexOf.call(attachment, ' ') >= 0) {
          _ref6 = attachment.split(' '), changeAttachY = _ref6[0], changeAttachX = _ref6[1];
        } else {
          changeAttachX = changeAttachY = attachment;
        }
        bounds = getBoundingRect(this, to);
        if (changeAttachY === 'target' || changeAttachY === 'both') {
          if (top < bounds[1] && tAttachment.top === 'top') {
            top += targetHeight;
            tAttachment.top = 'bottom';
          }
          if (top + height > bounds[3] && tAttachment.top === 'bottom') {
            top -= targetHeight;
            tAttachment.top = 'top';
          }
        }
        if (changeAttachY === 'together') {
          if (top < bounds[1] && tAttachment.top === 'top') {
            if (eAttachment.top === 'bottom') {
              top += targetHeight;
              tAttachment.top = 'bottom';
              top += height;
              eAttachment.top = 'top';
            } else if (eAttachment.top === 'top') {
              top += targetHeight;
              tAttachment.top = 'bottom';
              top -= height;
              eAttachment.top = 'bottom';
            }
          }
          if (top + height > bounds[3] && tAttachment.top === 'bottom') {
            if (eAttachment.top === 'top') {
              top -= targetHeight;
              tAttachment.top = 'top';
              top -= height;
              eAttachment.top = 'bottom';
            } else if (eAttachment.top === 'bottom') {
              top -= targetHeight;
              tAttachment.top = 'top';
              top += height;
              eAttachment.top = 'top';
            }
          }
          if (tAttachment.top === 'middle') {
            if (top + height > bounds[3] && eAttachment.top === 'top') {
              top -= height;
              eAttachment.top = 'bottom';
            } else if (top < bounds[1] && eAttachment.top === 'bottom') {
              top += height;
              eAttachment.top = 'top';
            }
          }
        }
        if (changeAttachX === 'target' || changeAttachX === 'both') {
          if (left < bounds[0] && tAttachment.left === 'left') {
            left += targetWidth;
            tAttachment.left = 'right';
          }
          if (left + width > bounds[2] && tAttachment.left === 'right') {
            left -= targetWidth;
            tAttachment.left = 'left';
          }
        }
        if (changeAttachX === 'together') {
          if (left < bounds[0] && tAttachment.left === 'left') {
            if (eAttachment.left === 'right') {
              left += targetWidth;
              tAttachment.left = 'right';
              left += width;
              eAttachment.left = 'left';
            } else if (eAttachment.left === 'left') {
              left += targetWidth;
              tAttachment.left = 'right';
              left -= width;
              eAttachment.left = 'right';
            }
          } else if (left + width > bounds[2] && tAttachment.left === 'right') {
            if (eAttachment.left === 'left') {
              left -= targetWidth;
              tAttachment.left = 'left';
              left -= width;
              eAttachment.left = 'right';
            } else if (eAttachment.left === 'right') {
              left -= targetWidth;
              tAttachment.left = 'left';
              left += width;
              eAttachment.left = 'left';
            }
          } else if (tAttachment.left === 'center') {
            if (left + width > bounds[2] && eAttachment.left === 'left') {
              left -= width;
              eAttachment.left = 'right';
            } else if (left < bounds[0] && eAttachment.left === 'right') {
              left += width;
              eAttachment.left = 'left';
            }
          }
        }
        if (changeAttachY === 'element' || changeAttachY === 'both') {
          if (top < bounds[1] && eAttachment.top === 'bottom') {
            top += height;
            eAttachment.top = 'top';
          }
          if (top + height > bounds[3] && eAttachment.top === 'top') {
            top -= height;
            eAttachment.top = 'bottom';
          }
        }
        if (changeAttachX === 'element' || changeAttachX === 'both') {
          if (left < bounds[0] && eAttachment.left === 'right') {
            left += width;
            eAttachment.left = 'left';
          }
          if (left + width > bounds[2] && eAttachment.left === 'left') {
            left -= width;
            eAttachment.left = 'right';
          }
        }
        if (typeof pin === 'string') {
          pin = (function() {
            var _len4, _m, _ref7, _results;
            _ref7 = pin.split(',');
            _results = [];
            for (_m = 0, _len4 = _ref7.length; _m < _len4; _m++) {
              p = _ref7[_m];
              _results.push(p.trim());
            }
            return _results;
          })();
        } else if (pin === true) {
          pin = ['top', 'left', 'right', 'bottom'];
        }
        pin || (pin = []);
        pinned = [];
        oob = [];
        if (top < bounds[1]) {
          if (__indexOf.call(pin, 'top') >= 0) {
            top = bounds[1];
            pinned.push('top');
          } else {
            oob.push('top');
          }
        }
        if (top + height > bounds[3]) {
          if (__indexOf.call(pin, 'bottom') >= 0) {
            top = bounds[3] - height;
            pinned.push('bottom');
          } else {
            oob.push('bottom');
          }
        }
        if (left < bounds[0]) {
          if (__indexOf.call(pin, 'left') >= 0) {
            left = bounds[0];
            pinned.push('left');
          } else {
            oob.push('left');
          }
        }
        if (left + width > bounds[2]) {
          if (__indexOf.call(pin, 'right') >= 0) {
            left = bounds[2] - width;
            pinned.push('right');
          } else {
            oob.push('right');
          }
        }
        if (pinned.length) {
          pinnedClass = (_ref7 = this.options.pinnedClass) != null ? _ref7 : this.getClass('pinned');
          addClasses.push(pinnedClass);
          for (_m = 0, _len4 = pinned.length; _m < _len4; _m++) {
            side = pinned[_m];
            addClasses.push("" + pinnedClass + "-" + side);
          }
        }
        if (oob.length) {
          oobClass = (_ref8 = this.options.outOfBoundsClass) != null ? _ref8 : this.getClass('out-of-bounds');
          addClasses.push(oobClass);
          for (_n = 0, _len5 = oob.length; _n < _len5; _n++) {
            side = oob[_n];
            addClasses.push("" + oobClass + "-" + side);
          }
        }
        if (__indexOf.call(pinned, 'left') >= 0 || __indexOf.call(pinned, 'right') >= 0) {
          eAttachment.left = tAttachment.left = false;
        }
        if (__indexOf.call(pinned, 'top') >= 0 || __indexOf.call(pinned, 'bottom') >= 0) {
          eAttachment.top = tAttachment.top = false;
        }
        if (tAttachment.top !== targetAttachment.top || tAttachment.left !== targetAttachment.left || eAttachment.top !== this.attachment.top || eAttachment.left !== this.attachment.left) {
          this.updateAttachClasses(eAttachment, tAttachment);
        }
      }
      defer(function() {
        updateClasses(_this.target, addClasses, allClasses);
        return updateClasses(_this.element, addClasses, allClasses);
      });
      return {
        top: top,
        left: left
      };
    }
  });

}).call(this);

(function() {
  var defer, getBounds, updateClasses, _ref;

  _ref = this.Tether.Utils, getBounds = _ref.getBounds, updateClasses = _ref.updateClasses, defer = _ref.defer;

  this.Tether.modules.push({
    position: function(_arg) {
      var abutted, addClasses, allClasses, bottom, height, left, right, side, sides, targetPos, top, width, _i, _j, _k, _l, _len, _len1, _len2, _len3, _ref1, _ref2, _ref3, _ref4, _ref5,
        _this = this;
      top = _arg.top, left = _arg.left;
      _ref1 = this.cache('element-bounds', function() {
        return getBounds(_this.element);
      }), height = _ref1.height, width = _ref1.width;
      targetPos = this.getTargetBounds();
      bottom = top + height;
      right = left + width;
      abutted = [];
      if (top <= targetPos.bottom && bottom >= targetPos.top) {
        _ref2 = ['left', 'right'];
        for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
          side = _ref2[_i];
          if ((_ref3 = targetPos[side]) === left || _ref3 === right) {
            abutted.push(side);
          }
        }
      }
      if (left <= targetPos.right && right >= targetPos.left) {
        _ref4 = ['top', 'bottom'];
        for (_j = 0, _len1 = _ref4.length; _j < _len1; _j++) {
          side = _ref4[_j];
          if ((_ref5 = targetPos[side]) === top || _ref5 === bottom) {
            abutted.push(side);
          }
        }
      }
      allClasses = [];
      addClasses = [];
      sides = ['left', 'top', 'right', 'bottom'];
      allClasses.push(this.getClass('abutted'));
      for (_k = 0, _len2 = sides.length; _k < _len2; _k++) {
        side = sides[_k];
        allClasses.push("" + (this.getClass('abutted')) + "-" + side);
      }
      if (abutted.length) {
        addClasses.push(this.getClass('abutted'));
      }
      for (_l = 0, _len3 = abutted.length; _l < _len3; _l++) {
        side = abutted[_l];
        addClasses.push("" + (this.getClass('abutted')) + "-" + side);
      }
      defer(function() {
        updateClasses(_this.target, addClasses, allClasses);
        return updateClasses(_this.element, addClasses, allClasses);
      });
      return true;
    }
  });

}).call(this);

(function() {
  this.Tether.modules.push({
    position: function(_arg) {
      var left, result, shift, shiftLeft, shiftTop, top, _ref;
      top = _arg.top, left = _arg.left;
      if (!this.options.shift) {
        return;
      }
      result = function(val) {
        if (typeof val === 'function') {
          return val.call(this, {
            top: top,
            left: left
          });
        } else {
          return val;
        }
      };
      shift = result(this.options.shift);
      if (typeof shift === 'string') {
        shift = shift.split(' ');
        shift[1] || (shift[1] = shift[0]);
        shiftTop = shift[0], shiftLeft = shift[1];
        shiftTop = parseFloat(shiftTop, 10);
        shiftLeft = parseFloat(shiftLeft, 10);
      } else {
        _ref = [shift.top, shift.left], shiftTop = _ref[0], shiftLeft = _ref[1];
      }
      top += shiftTop;
      left += shiftLeft;
      return {
        top: top,
        left: left
      };
    }
  });

}).call(this);

return this.Tether;

}));

},{}],"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/underscore/underscore.js":[function(require,module,exports){
//     Underscore.js 1.7.0
//     http://underscorejs.org
//     (c) 2009-2014 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
//     Underscore may be freely distributed under the MIT license.

(function() {

  // Baseline setup
  // --------------

  // Establish the root object, `window` in the browser, or `exports` on the server.
  var root = this;

  // Save the previous value of the `_` variable.
  var previousUnderscore = root._;

  // Save bytes in the minified (but not gzipped) version:
  var ArrayProto = Array.prototype, ObjProto = Object.prototype, FuncProto = Function.prototype;

  // Create quick reference variables for speed access to core prototypes.
  var
    push             = ArrayProto.push,
    slice            = ArrayProto.slice,
    concat           = ArrayProto.concat,
    toString         = ObjProto.toString,
    hasOwnProperty   = ObjProto.hasOwnProperty;

  // All **ECMAScript 5** native function implementations that we hope to use
  // are declared here.
  var
    nativeIsArray      = Array.isArray,
    nativeKeys         = Object.keys,
    nativeBind         = FuncProto.bind;

  // Create a safe reference to the Underscore object for use below.
  var _ = function(obj) {
    if (obj instanceof _) return obj;
    if (!(this instanceof _)) return new _(obj);
    this._wrapped = obj;
  };

  // Export the Underscore object for **Node.js**, with
  // backwards-compatibility for the old `require()` API. If we're in
  // the browser, add `_` as a global object.
  if (typeof exports !== 'undefined') {
    if (typeof module !== 'undefined' && module.exports) {
      exports = module.exports = _;
    }
    exports._ = _;
  } else {
    root._ = _;
  }

  // Current version.
  _.VERSION = '1.7.0';

  // Internal function that returns an efficient (for current engines) version
  // of the passed-in callback, to be repeatedly applied in other Underscore
  // functions.
  var createCallback = function(func, context, argCount) {
    if (context === void 0) return func;
    switch (argCount == null ? 3 : argCount) {
      case 1: return function(value) {
        return func.call(context, value);
      };
      case 2: return function(value, other) {
        return func.call(context, value, other);
      };
      case 3: return function(value, index, collection) {
        return func.call(context, value, index, collection);
      };
      case 4: return function(accumulator, value, index, collection) {
        return func.call(context, accumulator, value, index, collection);
      };
    }
    return function() {
      return func.apply(context, arguments);
    };
  };

  // A mostly-internal function to generate callbacks that can be applied
  // to each element in a collection, returning the desired result — either
  // identity, an arbitrary callback, a property matcher, or a property accessor.
  _.iteratee = function(value, context, argCount) {
    if (value == null) return _.identity;
    if (_.isFunction(value)) return createCallback(value, context, argCount);
    if (_.isObject(value)) return _.matches(value);
    return _.property(value);
  };

  // Collection Functions
  // --------------------

  // The cornerstone, an `each` implementation, aka `forEach`.
  // Handles raw objects in addition to array-likes. Treats all
  // sparse array-likes as if they were dense.
  _.each = _.forEach = function(obj, iteratee, context) {
    if (obj == null) return obj;
    iteratee = createCallback(iteratee, context);
    var i, length = obj.length;
    if (length === +length) {
      for (i = 0; i < length; i++) {
        iteratee(obj[i], i, obj);
      }
    } else {
      var keys = _.keys(obj);
      for (i = 0, length = keys.length; i < length; i++) {
        iteratee(obj[keys[i]], keys[i], obj);
      }
    }
    return obj;
  };

  // Return the results of applying the iteratee to each element.
  _.map = _.collect = function(obj, iteratee, context) {
    if (obj == null) return [];
    iteratee = _.iteratee(iteratee, context);
    var keys = obj.length !== +obj.length && _.keys(obj),
        length = (keys || obj).length,
        results = Array(length),
        currentKey;
    for (var index = 0; index < length; index++) {
      currentKey = keys ? keys[index] : index;
      results[index] = iteratee(obj[currentKey], currentKey, obj);
    }
    return results;
  };

  var reduceError = 'Reduce of empty array with no initial value';

  // **Reduce** builds up a single result from a list of values, aka `inject`,
  // or `foldl`.
  _.reduce = _.foldl = _.inject = function(obj, iteratee, memo, context) {
    if (obj == null) obj = [];
    iteratee = createCallback(iteratee, context, 4);
    var keys = obj.length !== +obj.length && _.keys(obj),
        length = (keys || obj).length,
        index = 0, currentKey;
    if (arguments.length < 3) {
      if (!length) throw new TypeError(reduceError);
      memo = obj[keys ? keys[index++] : index++];
    }
    for (; index < length; index++) {
      currentKey = keys ? keys[index] : index;
      memo = iteratee(memo, obj[currentKey], currentKey, obj);
    }
    return memo;
  };

  // The right-associative version of reduce, also known as `foldr`.
  _.reduceRight = _.foldr = function(obj, iteratee, memo, context) {
    if (obj == null) obj = [];
    iteratee = createCallback(iteratee, context, 4);
    var keys = obj.length !== + obj.length && _.keys(obj),
        index = (keys || obj).length,
        currentKey;
    if (arguments.length < 3) {
      if (!index) throw new TypeError(reduceError);
      memo = obj[keys ? keys[--index] : --index];
    }
    while (index--) {
      currentKey = keys ? keys[index] : index;
      memo = iteratee(memo, obj[currentKey], currentKey, obj);
    }
    return memo;
  };

  // Return the first value which passes a truth test. Aliased as `detect`.
  _.find = _.detect = function(obj, predicate, context) {
    var result;
    predicate = _.iteratee(predicate, context);
    _.some(obj, function(value, index, list) {
      if (predicate(value, index, list)) {
        result = value;
        return true;
      }
    });
    return result;
  };

  // Return all the elements that pass a truth test.
  // Aliased as `select`.
  _.filter = _.select = function(obj, predicate, context) {
    var results = [];
    if (obj == null) return results;
    predicate = _.iteratee(predicate, context);
    _.each(obj, function(value, index, list) {
      if (predicate(value, index, list)) results.push(value);
    });
    return results;
  };

  // Return all the elements for which a truth test fails.
  _.reject = function(obj, predicate, context) {
    return _.filter(obj, _.negate(_.iteratee(predicate)), context);
  };

  // Determine whether all of the elements match a truth test.
  // Aliased as `all`.
  _.every = _.all = function(obj, predicate, context) {
    if (obj == null) return true;
    predicate = _.iteratee(predicate, context);
    var keys = obj.length !== +obj.length && _.keys(obj),
        length = (keys || obj).length,
        index, currentKey;
    for (index = 0; index < length; index++) {
      currentKey = keys ? keys[index] : index;
      if (!predicate(obj[currentKey], currentKey, obj)) return false;
    }
    return true;
  };

  // Determine if at least one element in the object matches a truth test.
  // Aliased as `any`.
  _.some = _.any = function(obj, predicate, context) {
    if (obj == null) return false;
    predicate = _.iteratee(predicate, context);
    var keys = obj.length !== +obj.length && _.keys(obj),
        length = (keys || obj).length,
        index, currentKey;
    for (index = 0; index < length; index++) {
      currentKey = keys ? keys[index] : index;
      if (predicate(obj[currentKey], currentKey, obj)) return true;
    }
    return false;
  };

  // Determine if the array or object contains a given value (using `===`).
  // Aliased as `include`.
  _.contains = _.include = function(obj, target) {
    if (obj == null) return false;
    if (obj.length !== +obj.length) obj = _.values(obj);
    return _.indexOf(obj, target) >= 0;
  };

  // Invoke a method (with arguments) on every item in a collection.
  _.invoke = function(obj, method) {
    var args = slice.call(arguments, 2);
    var isFunc = _.isFunction(method);
    return _.map(obj, function(value) {
      return (isFunc ? method : value[method]).apply(value, args);
    });
  };

  // Convenience version of a common use case of `map`: fetching a property.
  _.pluck = function(obj, key) {
    return _.map(obj, _.property(key));
  };

  // Convenience version of a common use case of `filter`: selecting only objects
  // containing specific `key:value` pairs.
  _.where = function(obj, attrs) {
    return _.filter(obj, _.matches(attrs));
  };

  // Convenience version of a common use case of `find`: getting the first object
  // containing specific `key:value` pairs.
  _.findWhere = function(obj, attrs) {
    return _.find(obj, _.matches(attrs));
  };

  // Return the maximum element (or element-based computation).
  _.max = function(obj, iteratee, context) {
    var result = -Infinity, lastComputed = -Infinity,
        value, computed;
    if (iteratee == null && obj != null) {
      obj = obj.length === +obj.length ? obj : _.values(obj);
      for (var i = 0, length = obj.length; i < length; i++) {
        value = obj[i];
        if (value > result) {
          result = value;
        }
      }
    } else {
      iteratee = _.iteratee(iteratee, context);
      _.each(obj, function(value, index, list) {
        computed = iteratee(value, index, list);
        if (computed > lastComputed || computed === -Infinity && result === -Infinity) {
          result = value;
          lastComputed = computed;
        }
      });
    }
    return result;
  };

  // Return the minimum element (or element-based computation).
  _.min = function(obj, iteratee, context) {
    var result = Infinity, lastComputed = Infinity,
        value, computed;
    if (iteratee == null && obj != null) {
      obj = obj.length === +obj.length ? obj : _.values(obj);
      for (var i = 0, length = obj.length; i < length; i++) {
        value = obj[i];
        if (value < result) {
          result = value;
        }
      }
    } else {
      iteratee = _.iteratee(iteratee, context);
      _.each(obj, function(value, index, list) {
        computed = iteratee(value, index, list);
        if (computed < lastComputed || computed === Infinity && result === Infinity) {
          result = value;
          lastComputed = computed;
        }
      });
    }
    return result;
  };

  // Shuffle a collection, using the modern version of the
  // [Fisher-Yates shuffle](http://en.wikipedia.org/wiki/Fisher–Yates_shuffle).
  _.shuffle = function(obj) {
    var set = obj && obj.length === +obj.length ? obj : _.values(obj);
    var length = set.length;
    var shuffled = Array(length);
    for (var index = 0, rand; index < length; index++) {
      rand = _.random(0, index);
      if (rand !== index) shuffled[index] = shuffled[rand];
      shuffled[rand] = set[index];
    }
    return shuffled;
  };

  // Sample **n** random values from a collection.
  // If **n** is not specified, returns a single random element.
  // The internal `guard` argument allows it to work with `map`.
  _.sample = function(obj, n, guard) {
    if (n == null || guard) {
      if (obj.length !== +obj.length) obj = _.values(obj);
      return obj[_.random(obj.length - 1)];
    }
    return _.shuffle(obj).slice(0, Math.max(0, n));
  };

  // Sort the object's values by a criterion produced by an iteratee.
  _.sortBy = function(obj, iteratee, context) {
    iteratee = _.iteratee(iteratee, context);
    return _.pluck(_.map(obj, function(value, index, list) {
      return {
        value: value,
        index: index,
        criteria: iteratee(value, index, list)
      };
    }).sort(function(left, right) {
      var a = left.criteria;
      var b = right.criteria;
      if (a !== b) {
        if (a > b || a === void 0) return 1;
        if (a < b || b === void 0) return -1;
      }
      return left.index - right.index;
    }), 'value');
  };

  // An internal function used for aggregate "group by" operations.
  var group = function(behavior) {
    return function(obj, iteratee, context) {
      var result = {};
      iteratee = _.iteratee(iteratee, context);
      _.each(obj, function(value, index) {
        var key = iteratee(value, index, obj);
        behavior(result, value, key);
      });
      return result;
    };
  };

  // Groups the object's values by a criterion. Pass either a string attribute
  // to group by, or a function that returns the criterion.
  _.groupBy = group(function(result, value, key) {
    if (_.has(result, key)) result[key].push(value); else result[key] = [value];
  });

  // Indexes the object's values by a criterion, similar to `groupBy`, but for
  // when you know that your index values will be unique.
  _.indexBy = group(function(result, value, key) {
    result[key] = value;
  });

  // Counts instances of an object that group by a certain criterion. Pass
  // either a string attribute to count by, or a function that returns the
  // criterion.
  _.countBy = group(function(result, value, key) {
    if (_.has(result, key)) result[key]++; else result[key] = 1;
  });

  // Use a comparator function to figure out the smallest index at which
  // an object should be inserted so as to maintain order. Uses binary search.
  _.sortedIndex = function(array, obj, iteratee, context) {
    iteratee = _.iteratee(iteratee, context, 1);
    var value = iteratee(obj);
    var low = 0, high = array.length;
    while (low < high) {
      var mid = low + high >>> 1;
      if (iteratee(array[mid]) < value) low = mid + 1; else high = mid;
    }
    return low;
  };

  // Safely create a real, live array from anything iterable.
  _.toArray = function(obj) {
    if (!obj) return [];
    if (_.isArray(obj)) return slice.call(obj);
    if (obj.length === +obj.length) return _.map(obj, _.identity);
    return _.values(obj);
  };

  // Return the number of elements in an object.
  _.size = function(obj) {
    if (obj == null) return 0;
    return obj.length === +obj.length ? obj.length : _.keys(obj).length;
  };

  // Split a collection into two arrays: one whose elements all satisfy the given
  // predicate, and one whose elements all do not satisfy the predicate.
  _.partition = function(obj, predicate, context) {
    predicate = _.iteratee(predicate, context);
    var pass = [], fail = [];
    _.each(obj, function(value, key, obj) {
      (predicate(value, key, obj) ? pass : fail).push(value);
    });
    return [pass, fail];
  };

  // Array Functions
  // ---------------

  // Get the first element of an array. Passing **n** will return the first N
  // values in the array. Aliased as `head` and `take`. The **guard** check
  // allows it to work with `_.map`.
  _.first = _.head = _.take = function(array, n, guard) {
    if (array == null) return void 0;
    if (n == null || guard) return array[0];
    if (n < 0) return [];
    return slice.call(array, 0, n);
  };

  // Returns everything but the last entry of the array. Especially useful on
  // the arguments object. Passing **n** will return all the values in
  // the array, excluding the last N. The **guard** check allows it to work with
  // `_.map`.
  _.initial = function(array, n, guard) {
    return slice.call(array, 0, Math.max(0, array.length - (n == null || guard ? 1 : n)));
  };

  // Get the last element of an array. Passing **n** will return the last N
  // values in the array. The **guard** check allows it to work with `_.map`.
  _.last = function(array, n, guard) {
    if (array == null) return void 0;
    if (n == null || guard) return array[array.length - 1];
    return slice.call(array, Math.max(array.length - n, 0));
  };

  // Returns everything but the first entry of the array. Aliased as `tail` and `drop`.
  // Especially useful on the arguments object. Passing an **n** will return
  // the rest N values in the array. The **guard**
  // check allows it to work with `_.map`.
  _.rest = _.tail = _.drop = function(array, n, guard) {
    return slice.call(array, n == null || guard ? 1 : n);
  };

  // Trim out all falsy values from an array.
  _.compact = function(array) {
    return _.filter(array, _.identity);
  };

  // Internal implementation of a recursive `flatten` function.
  var flatten = function(input, shallow, strict, output) {
    if (shallow && _.every(input, _.isArray)) {
      return concat.apply(output, input);
    }
    for (var i = 0, length = input.length; i < length; i++) {
      var value = input[i];
      if (!_.isArray(value) && !_.isArguments(value)) {
        if (!strict) output.push(value);
      } else if (shallow) {
        push.apply(output, value);
      } else {
        flatten(value, shallow, strict, output);
      }
    }
    return output;
  };

  // Flatten out an array, either recursively (by default), or just one level.
  _.flatten = function(array, shallow) {
    return flatten(array, shallow, false, []);
  };

  // Return a version of the array that does not contain the specified value(s).
  _.without = function(array) {
    return _.difference(array, slice.call(arguments, 1));
  };

  // Produce a duplicate-free version of the array. If the array has already
  // been sorted, you have the option of using a faster algorithm.
  // Aliased as `unique`.
  _.uniq = _.unique = function(array, isSorted, iteratee, context) {
    if (array == null) return [];
    if (!_.isBoolean(isSorted)) {
      context = iteratee;
      iteratee = isSorted;
      isSorted = false;
    }
    if (iteratee != null) iteratee = _.iteratee(iteratee, context);
    var result = [];
    var seen = [];
    for (var i = 0, length = array.length; i < length; i++) {
      var value = array[i];
      if (isSorted) {
        if (!i || seen !== value) result.push(value);
        seen = value;
      } else if (iteratee) {
        var computed = iteratee(value, i, array);
        if (_.indexOf(seen, computed) < 0) {
          seen.push(computed);
          result.push(value);
        }
      } else if (_.indexOf(result, value) < 0) {
        result.push(value);
      }
    }
    return result;
  };

  // Produce an array that contains the union: each distinct element from all of
  // the passed-in arrays.
  _.union = function() {
    return _.uniq(flatten(arguments, true, true, []));
  };

  // Produce an array that contains every item shared between all the
  // passed-in arrays.
  _.intersection = function(array) {
    if (array == null) return [];
    var result = [];
    var argsLength = arguments.length;
    for (var i = 0, length = array.length; i < length; i++) {
      var item = array[i];
      if (_.contains(result, item)) continue;
      for (var j = 1; j < argsLength; j++) {
        if (!_.contains(arguments[j], item)) break;
      }
      if (j === argsLength) result.push(item);
    }
    return result;
  };

  // Take the difference between one array and a number of other arrays.
  // Only the elements present in just the first array will remain.
  _.difference = function(array) {
    var rest = flatten(slice.call(arguments, 1), true, true, []);
    return _.filter(array, function(value){
      return !_.contains(rest, value);
    });
  };

  // Zip together multiple lists into a single array -- elements that share
  // an index go together.
  _.zip = function(array) {
    if (array == null) return [];
    var length = _.max(arguments, 'length').length;
    var results = Array(length);
    for (var i = 0; i < length; i++) {
      results[i] = _.pluck(arguments, i);
    }
    return results;
  };

  // Converts lists into objects. Pass either a single array of `[key, value]`
  // pairs, or two parallel arrays of the same length -- one of keys, and one of
  // the corresponding values.
  _.object = function(list, values) {
    if (list == null) return {};
    var result = {};
    for (var i = 0, length = list.length; i < length; i++) {
      if (values) {
        result[list[i]] = values[i];
      } else {
        result[list[i][0]] = list[i][1];
      }
    }
    return result;
  };

  // Return the position of the first occurrence of an item in an array,
  // or -1 if the item is not included in the array.
  // If the array is large and already in sort order, pass `true`
  // for **isSorted** to use binary search.
  _.indexOf = function(array, item, isSorted) {
    if (array == null) return -1;
    var i = 0, length = array.length;
    if (isSorted) {
      if (typeof isSorted == 'number') {
        i = isSorted < 0 ? Math.max(0, length + isSorted) : isSorted;
      } else {
        i = _.sortedIndex(array, item);
        return array[i] === item ? i : -1;
      }
    }
    for (; i < length; i++) if (array[i] === item) return i;
    return -1;
  };

  _.lastIndexOf = function(array, item, from) {
    if (array == null) return -1;
    var idx = array.length;
    if (typeof from == 'number') {
      idx = from < 0 ? idx + from + 1 : Math.min(idx, from + 1);
    }
    while (--idx >= 0) if (array[idx] === item) return idx;
    return -1;
  };

  // Generate an integer Array containing an arithmetic progression. A port of
  // the native Python `range()` function. See
  // [the Python documentation](http://docs.python.org/library/functions.html#range).
  _.range = function(start, stop, step) {
    if (arguments.length <= 1) {
      stop = start || 0;
      start = 0;
    }
    step = step || 1;

    var length = Math.max(Math.ceil((stop - start) / step), 0);
    var range = Array(length);

    for (var idx = 0; idx < length; idx++, start += step) {
      range[idx] = start;
    }

    return range;
  };

  // Function (ahem) Functions
  // ------------------

  // Reusable constructor function for prototype setting.
  var Ctor = function(){};

  // Create a function bound to a given object (assigning `this`, and arguments,
  // optionally). Delegates to **ECMAScript 5**'s native `Function.bind` if
  // available.
  _.bind = function(func, context) {
    var args, bound;
    if (nativeBind && func.bind === nativeBind) return nativeBind.apply(func, slice.call(arguments, 1));
    if (!_.isFunction(func)) throw new TypeError('Bind must be called on a function');
    args = slice.call(arguments, 2);
    bound = function() {
      if (!(this instanceof bound)) return func.apply(context, args.concat(slice.call(arguments)));
      Ctor.prototype = func.prototype;
      var self = new Ctor;
      Ctor.prototype = null;
      var result = func.apply(self, args.concat(slice.call(arguments)));
      if (_.isObject(result)) return result;
      return self;
    };
    return bound;
  };

  // Partially apply a function by creating a version that has had some of its
  // arguments pre-filled, without changing its dynamic `this` context. _ acts
  // as a placeholder, allowing any combination of arguments to be pre-filled.
  _.partial = function(func) {
    var boundArgs = slice.call(arguments, 1);
    return function() {
      var position = 0;
      var args = boundArgs.slice();
      for (var i = 0, length = args.length; i < length; i++) {
        if (args[i] === _) args[i] = arguments[position++];
      }
      while (position < arguments.length) args.push(arguments[position++]);
      return func.apply(this, args);
    };
  };

  // Bind a number of an object's methods to that object. Remaining arguments
  // are the method names to be bound. Useful for ensuring that all callbacks
  // defined on an object belong to it.
  _.bindAll = function(obj) {
    var i, length = arguments.length, key;
    if (length <= 1) throw new Error('bindAll must be passed function names');
    for (i = 1; i < length; i++) {
      key = arguments[i];
      obj[key] = _.bind(obj[key], obj);
    }
    return obj;
  };

  // Memoize an expensive function by storing its results.
  _.memoize = function(func, hasher) {
    var memoize = function(key) {
      var cache = memoize.cache;
      var address = hasher ? hasher.apply(this, arguments) : key;
      if (!_.has(cache, address)) cache[address] = func.apply(this, arguments);
      return cache[address];
    };
    memoize.cache = {};
    return memoize;
  };

  // Delays a function for the given number of milliseconds, and then calls
  // it with the arguments supplied.
  _.delay = function(func, wait) {
    var args = slice.call(arguments, 2);
    return setTimeout(function(){
      return func.apply(null, args);
    }, wait);
  };

  // Defers a function, scheduling it to run after the current call stack has
  // cleared.
  _.defer = function(func) {
    return _.delay.apply(_, [func, 1].concat(slice.call(arguments, 1)));
  };

  // Returns a function, that, when invoked, will only be triggered at most once
  // during a given window of time. Normally, the throttled function will run
  // as much as it can, without ever going more than once per `wait` duration;
  // but if you'd like to disable the execution on the leading edge, pass
  // `{leading: false}`. To disable execution on the trailing edge, ditto.
  _.throttle = function(func, wait, options) {
    var context, args, result;
    var timeout = null;
    var previous = 0;
    if (!options) options = {};
    var later = function() {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    };
    return function() {
      var now = _.now();
      if (!previous && options.leading === false) previous = now;
      var remaining = wait - (now - previous);
      context = this;
      args = arguments;
      if (remaining <= 0 || remaining > wait) {
        clearTimeout(timeout);
        timeout = null;
        previous = now;
        result = func.apply(context, args);
        if (!timeout) context = args = null;
      } else if (!timeout && options.trailing !== false) {
        timeout = setTimeout(later, remaining);
      }
      return result;
    };
  };

  // Returns a function, that, as long as it continues to be invoked, will not
  // be triggered. The function will be called after it stops being called for
  // N milliseconds. If `immediate` is passed, trigger the function on the
  // leading edge, instead of the trailing.
  _.debounce = function(func, wait, immediate) {
    var timeout, args, context, timestamp, result;

    var later = function() {
      var last = _.now() - timestamp;

      if (last < wait && last > 0) {
        timeout = setTimeout(later, wait - last);
      } else {
        timeout = null;
        if (!immediate) {
          result = func.apply(context, args);
          if (!timeout) context = args = null;
        }
      }
    };

    return function() {
      context = this;
      args = arguments;
      timestamp = _.now();
      var callNow = immediate && !timeout;
      if (!timeout) timeout = setTimeout(later, wait);
      if (callNow) {
        result = func.apply(context, args);
        context = args = null;
      }

      return result;
    };
  };

  // Returns the first function passed as an argument to the second,
  // allowing you to adjust arguments, run code before and after, and
  // conditionally execute the original function.
  _.wrap = function(func, wrapper) {
    return _.partial(wrapper, func);
  };

  // Returns a negated version of the passed-in predicate.
  _.negate = function(predicate) {
    return function() {
      return !predicate.apply(this, arguments);
    };
  };

  // Returns a function that is the composition of a list of functions, each
  // consuming the return value of the function that follows.
  _.compose = function() {
    var args = arguments;
    var start = args.length - 1;
    return function() {
      var i = start;
      var result = args[start].apply(this, arguments);
      while (i--) result = args[i].call(this, result);
      return result;
    };
  };

  // Returns a function that will only be executed after being called N times.
  _.after = function(times, func) {
    return function() {
      if (--times < 1) {
        return func.apply(this, arguments);
      }
    };
  };

  // Returns a function that will only be executed before being called N times.
  _.before = function(times, func) {
    var memo;
    return function() {
      if (--times > 0) {
        memo = func.apply(this, arguments);
      } else {
        func = null;
      }
      return memo;
    };
  };

  // Returns a function that will be executed at most one time, no matter how
  // often you call it. Useful for lazy initialization.
  _.once = _.partial(_.before, 2);

  // Object Functions
  // ----------------

  // Retrieve the names of an object's properties.
  // Delegates to **ECMAScript 5**'s native `Object.keys`
  _.keys = function(obj) {
    if (!_.isObject(obj)) return [];
    if (nativeKeys) return nativeKeys(obj);
    var keys = [];
    for (var key in obj) if (_.has(obj, key)) keys.push(key);
    return keys;
  };

  // Retrieve the values of an object's properties.
  _.values = function(obj) {
    var keys = _.keys(obj);
    var length = keys.length;
    var values = Array(length);
    for (var i = 0; i < length; i++) {
      values[i] = obj[keys[i]];
    }
    return values;
  };

  // Convert an object into a list of `[key, value]` pairs.
  _.pairs = function(obj) {
    var keys = _.keys(obj);
    var length = keys.length;
    var pairs = Array(length);
    for (var i = 0; i < length; i++) {
      pairs[i] = [keys[i], obj[keys[i]]];
    }
    return pairs;
  };

  // Invert the keys and values of an object. The values must be serializable.
  _.invert = function(obj) {
    var result = {};
    var keys = _.keys(obj);
    for (var i = 0, length = keys.length; i < length; i++) {
      result[obj[keys[i]]] = keys[i];
    }
    return result;
  };

  // Return a sorted list of the function names available on the object.
  // Aliased as `methods`
  _.functions = _.methods = function(obj) {
    var names = [];
    for (var key in obj) {
      if (_.isFunction(obj[key])) names.push(key);
    }
    return names.sort();
  };

  // Extend a given object with all the properties in passed-in object(s).
  _.extend = function(obj) {
    if (!_.isObject(obj)) return obj;
    var source, prop;
    for (var i = 1, length = arguments.length; i < length; i++) {
      source = arguments[i];
      for (prop in source) {
        if (hasOwnProperty.call(source, prop)) {
            obj[prop] = source[prop];
        }
      }
    }
    return obj;
  };

  // Return a copy of the object only containing the whitelisted properties.
  _.pick = function(obj, iteratee, context) {
    var result = {}, key;
    if (obj == null) return result;
    if (_.isFunction(iteratee)) {
      iteratee = createCallback(iteratee, context);
      for (key in obj) {
        var value = obj[key];
        if (iteratee(value, key, obj)) result[key] = value;
      }
    } else {
      var keys = concat.apply([], slice.call(arguments, 1));
      obj = new Object(obj);
      for (var i = 0, length = keys.length; i < length; i++) {
        key = keys[i];
        if (key in obj) result[key] = obj[key];
      }
    }
    return result;
  };

   // Return a copy of the object without the blacklisted properties.
  _.omit = function(obj, iteratee, context) {
    if (_.isFunction(iteratee)) {
      iteratee = _.negate(iteratee);
    } else {
      var keys = _.map(concat.apply([], slice.call(arguments, 1)), String);
      iteratee = function(value, key) {
        return !_.contains(keys, key);
      };
    }
    return _.pick(obj, iteratee, context);
  };

  // Fill in a given object with default properties.
  _.defaults = function(obj) {
    if (!_.isObject(obj)) return obj;
    for (var i = 1, length = arguments.length; i < length; i++) {
      var source = arguments[i];
      for (var prop in source) {
        if (obj[prop] === void 0) obj[prop] = source[prop];
      }
    }
    return obj;
  };

  // Create a (shallow-cloned) duplicate of an object.
  _.clone = function(obj) {
    if (!_.isObject(obj)) return obj;
    return _.isArray(obj) ? obj.slice() : _.extend({}, obj);
  };

  // Invokes interceptor with the obj, and then returns obj.
  // The primary purpose of this method is to "tap into" a method chain, in
  // order to perform operations on intermediate results within the chain.
  _.tap = function(obj, interceptor) {
    interceptor(obj);
    return obj;
  };

  // Internal recursive comparison function for `isEqual`.
  var eq = function(a, b, aStack, bStack) {
    // Identical objects are equal. `0 === -0`, but they aren't identical.
    // See the [Harmony `egal` proposal](http://wiki.ecmascript.org/doku.php?id=harmony:egal).
    if (a === b) return a !== 0 || 1 / a === 1 / b;
    // A strict comparison is necessary because `null == undefined`.
    if (a == null || b == null) return a === b;
    // Unwrap any wrapped objects.
    if (a instanceof _) a = a._wrapped;
    if (b instanceof _) b = b._wrapped;
    // Compare `[[Class]]` names.
    var className = toString.call(a);
    if (className !== toString.call(b)) return false;
    switch (className) {
      // Strings, numbers, regular expressions, dates, and booleans are compared by value.
      case '[object RegExp]':
      // RegExps are coerced to strings for comparison (Note: '' + /a/i === '/a/i')
      case '[object String]':
        // Primitives and their corresponding object wrappers are equivalent; thus, `"5"` is
        // equivalent to `new String("5")`.
        return '' + a === '' + b;
      case '[object Number]':
        // `NaN`s are equivalent, but non-reflexive.
        // Object(NaN) is equivalent to NaN
        if (+a !== +a) return +b !== +b;
        // An `egal` comparison is performed for other numeric values.
        return +a === 0 ? 1 / +a === 1 / b : +a === +b;
      case '[object Date]':
      case '[object Boolean]':
        // Coerce dates and booleans to numeric primitive values. Dates are compared by their
        // millisecond representations. Note that invalid dates with millisecond representations
        // of `NaN` are not equivalent.
        return +a === +b;
    }
    if (typeof a != 'object' || typeof b != 'object') return false;
    // Assume equality for cyclic structures. The algorithm for detecting cyclic
    // structures is adapted from ES 5.1 section 15.12.3, abstract operation `JO`.
    var length = aStack.length;
    while (length--) {
      // Linear search. Performance is inversely proportional to the number of
      // unique nested structures.
      if (aStack[length] === a) return bStack[length] === b;
    }
    // Objects with different constructors are not equivalent, but `Object`s
    // from different frames are.
    var aCtor = a.constructor, bCtor = b.constructor;
    if (
      aCtor !== bCtor &&
      // Handle Object.create(x) cases
      'constructor' in a && 'constructor' in b &&
      !(_.isFunction(aCtor) && aCtor instanceof aCtor &&
        _.isFunction(bCtor) && bCtor instanceof bCtor)
    ) {
      return false;
    }
    // Add the first object to the stack of traversed objects.
    aStack.push(a);
    bStack.push(b);
    var size, result;
    // Recursively compare objects and arrays.
    if (className === '[object Array]') {
      // Compare array lengths to determine if a deep comparison is necessary.
      size = a.length;
      result = size === b.length;
      if (result) {
        // Deep compare the contents, ignoring non-numeric properties.
        while (size--) {
          if (!(result = eq(a[size], b[size], aStack, bStack))) break;
        }
      }
    } else {
      // Deep compare objects.
      var keys = _.keys(a), key;
      size = keys.length;
      // Ensure that both objects contain the same number of properties before comparing deep equality.
      result = _.keys(b).length === size;
      if (result) {
        while (size--) {
          // Deep compare each member
          key = keys[size];
          if (!(result = _.has(b, key) && eq(a[key], b[key], aStack, bStack))) break;
        }
      }
    }
    // Remove the first object from the stack of traversed objects.
    aStack.pop();
    bStack.pop();
    return result;
  };

  // Perform a deep comparison to check if two objects are equal.
  _.isEqual = function(a, b) {
    return eq(a, b, [], []);
  };

  // Is a given array, string, or object empty?
  // An "empty" object has no enumerable own-properties.
  _.isEmpty = function(obj) {
    if (obj == null) return true;
    if (_.isArray(obj) || _.isString(obj) || _.isArguments(obj)) return obj.length === 0;
    for (var key in obj) if (_.has(obj, key)) return false;
    return true;
  };

  // Is a given value a DOM element?
  _.isElement = function(obj) {
    return !!(obj && obj.nodeType === 1);
  };

  // Is a given value an array?
  // Delegates to ECMA5's native Array.isArray
  _.isArray = nativeIsArray || function(obj) {
    return toString.call(obj) === '[object Array]';
  };

  // Is a given variable an object?
  _.isObject = function(obj) {
    var type = typeof obj;
    return type === 'function' || type === 'object' && !!obj;
  };

  // Add some isType methods: isArguments, isFunction, isString, isNumber, isDate, isRegExp.
  _.each(['Arguments', 'Function', 'String', 'Number', 'Date', 'RegExp'], function(name) {
    _['is' + name] = function(obj) {
      return toString.call(obj) === '[object ' + name + ']';
    };
  });

  // Define a fallback version of the method in browsers (ahem, IE), where
  // there isn't any inspectable "Arguments" type.
  if (!_.isArguments(arguments)) {
    _.isArguments = function(obj) {
      return _.has(obj, 'callee');
    };
  }

  // Optimize `isFunction` if appropriate. Work around an IE 11 bug.
  if (typeof /./ !== 'function') {
    _.isFunction = function(obj) {
      return typeof obj == 'function' || false;
    };
  }

  // Is a given object a finite number?
  _.isFinite = function(obj) {
    return isFinite(obj) && !isNaN(parseFloat(obj));
  };

  // Is the given value `NaN`? (NaN is the only number which does not equal itself).
  _.isNaN = function(obj) {
    return _.isNumber(obj) && obj !== +obj;
  };

  // Is a given value a boolean?
  _.isBoolean = function(obj) {
    return obj === true || obj === false || toString.call(obj) === '[object Boolean]';
  };

  // Is a given value equal to null?
  _.isNull = function(obj) {
    return obj === null;
  };

  // Is a given variable undefined?
  _.isUndefined = function(obj) {
    return obj === void 0;
  };

  // Shortcut function for checking if an object has a given property directly
  // on itself (in other words, not on a prototype).
  _.has = function(obj, key) {
    return obj != null && hasOwnProperty.call(obj, key);
  };

  // Utility Functions
  // -----------------

  // Run Underscore.js in *noConflict* mode, returning the `_` variable to its
  // previous owner. Returns a reference to the Underscore object.
  _.noConflict = function() {
    root._ = previousUnderscore;
    return this;
  };

  // Keep the identity function around for default iteratees.
  _.identity = function(value) {
    return value;
  };

  _.constant = function(value) {
    return function() {
      return value;
    };
  };

  _.noop = function(){};

  _.property = function(key) {
    return function(obj) {
      return obj[key];
    };
  };

  // Returns a predicate for checking whether an object has a given set of `key:value` pairs.
  _.matches = function(attrs) {
    var pairs = _.pairs(attrs), length = pairs.length;
    return function(obj) {
      if (obj == null) return !length;
      obj = new Object(obj);
      for (var i = 0; i < length; i++) {
        var pair = pairs[i], key = pair[0];
        if (pair[1] !== obj[key] || !(key in obj)) return false;
      }
      return true;
    };
  };

  // Run a function **n** times.
  _.times = function(n, iteratee, context) {
    var accum = Array(Math.max(0, n));
    iteratee = createCallback(iteratee, context, 1);
    for (var i = 0; i < n; i++) accum[i] = iteratee(i);
    return accum;
  };

  // Return a random integer between min and max (inclusive).
  _.random = function(min, max) {
    if (max == null) {
      max = min;
      min = 0;
    }
    return min + Math.floor(Math.random() * (max - min + 1));
  };

  // A (possibly faster) way to get the current timestamp as an integer.
  _.now = Date.now || function() {
    return new Date().getTime();
  };

   // List of HTML entities for escaping.
  var escapeMap = {
    '&': '&amp;',
    '<': '&lt;',
    '>': '&gt;',
    '"': '&quot;',
    "'": '&#x27;',
    '`': '&#x60;'
  };
  var unescapeMap = _.invert(escapeMap);

  // Functions for escaping and unescaping strings to/from HTML interpolation.
  var createEscaper = function(map) {
    var escaper = function(match) {
      return map[match];
    };
    // Regexes for identifying a key that needs to be escaped
    var source = '(?:' + _.keys(map).join('|') + ')';
    var testRegexp = RegExp(source);
    var replaceRegexp = RegExp(source, 'g');
    return function(string) {
      string = string == null ? '' : '' + string;
      return testRegexp.test(string) ? string.replace(replaceRegexp, escaper) : string;
    };
  };
  _.escape = createEscaper(escapeMap);
  _.unescape = createEscaper(unescapeMap);

  // If the value of the named `property` is a function then invoke it with the
  // `object` as context; otherwise, return it.
  _.result = function(object, property) {
    if (object == null) return void 0;
    var value = object[property];
    return _.isFunction(value) ? object[property]() : value;
  };

  // Generate a unique integer id (unique within the entire client session).
  // Useful for temporary DOM ids.
  var idCounter = 0;
  _.uniqueId = function(prefix) {
    var id = ++idCounter + '';
    return prefix ? prefix + id : id;
  };

  // By default, Underscore uses ERB-style template delimiters, change the
  // following template settings to use alternative delimiters.
  _.templateSettings = {
    evaluate    : /<%([\s\S]+?)%>/g,
    interpolate : /<%=([\s\S]+?)%>/g,
    escape      : /<%-([\s\S]+?)%>/g
  };

  // When customizing `templateSettings`, if you don't want to define an
  // interpolation, evaluation or escaping regex, we need one that is
  // guaranteed not to match.
  var noMatch = /(.)^/;

  // Certain characters need to be escaped so that they can be put into a
  // string literal.
  var escapes = {
    "'":      "'",
    '\\':     '\\',
    '\r':     'r',
    '\n':     'n',
    '\u2028': 'u2028',
    '\u2029': 'u2029'
  };

  var escaper = /\\|'|\r|\n|\u2028|\u2029/g;

  var escapeChar = function(match) {
    return '\\' + escapes[match];
  };

  // JavaScript micro-templating, similar to John Resig's implementation.
  // Underscore templating handles arbitrary delimiters, preserves whitespace,
  // and correctly escapes quotes within interpolated code.
  // NB: `oldSettings` only exists for backwards compatibility.
  _.template = function(text, settings, oldSettings) {
    if (!settings && oldSettings) settings = oldSettings;
    settings = _.defaults({}, settings, _.templateSettings);

    // Combine delimiters into one regular expression via alternation.
    var matcher = RegExp([
      (settings.escape || noMatch).source,
      (settings.interpolate || noMatch).source,
      (settings.evaluate || noMatch).source
    ].join('|') + '|$', 'g');

    // Compile the template source, escaping string literals appropriately.
    var index = 0;
    var source = "__p+='";
    text.replace(matcher, function(match, escape, interpolate, evaluate, offset) {
      source += text.slice(index, offset).replace(escaper, escapeChar);
      index = offset + match.length;

      if (escape) {
        source += "'+\n((__t=(" + escape + "))==null?'':_.escape(__t))+\n'";
      } else if (interpolate) {
        source += "'+\n((__t=(" + interpolate + "))==null?'':__t)+\n'";
      } else if (evaluate) {
        source += "';\n" + evaluate + "\n__p+='";
      }

      // Adobe VMs need the match returned to produce the correct offest.
      return match;
    });
    source += "';\n";

    // If a variable is not specified, place data values in local scope.
    if (!settings.variable) source = 'with(obj||{}){\n' + source + '}\n';

    source = "var __t,__p='',__j=Array.prototype.join," +
      "print=function(){__p+=__j.call(arguments,'');};\n" +
      source + 'return __p;\n';

    try {
      var render = new Function(settings.variable || 'obj', '_', source);
    } catch (e) {
      e.source = source;
      throw e;
    }

    var template = function(data) {
      return render.call(this, data, _);
    };

    // Provide the compiled source as a convenience for precompilation.
    var argument = settings.variable || 'obj';
    template.source = 'function(' + argument + '){\n' + source + '}';

    return template;
  };

  // Add a "chain" function. Start chaining a wrapped Underscore object.
  _.chain = function(obj) {
    var instance = _(obj);
    instance._chain = true;
    return instance;
  };

  // OOP
  // ---------------
  // If Underscore is called as a function, it returns a wrapped object that
  // can be used OO-style. This wrapper holds altered versions of all the
  // underscore functions. Wrapped objects may be chained.

  // Helper function to continue chaining intermediate results.
  var result = function(obj) {
    return this._chain ? _(obj).chain() : obj;
  };

  // Add your own custom functions to the Underscore object.
  _.mixin = function(obj) {
    _.each(_.functions(obj), function(name) {
      var func = _[name] = obj[name];
      _.prototype[name] = function() {
        var args = [this._wrapped];
        push.apply(args, arguments);
        return result.call(this, func.apply(_, args));
      };
    });
  };

  // Add all of the Underscore functions to the wrapper object.
  _.mixin(_);

  // Add all mutator Array functions to the wrapper.
  _.each(['pop', 'push', 'reverse', 'shift', 'sort', 'splice', 'unshift'], function(name) {
    var method = ArrayProto[name];
    _.prototype[name] = function() {
      var obj = this._wrapped;
      method.apply(obj, arguments);
      if ((name === 'shift' || name === 'splice') && obj.length === 0) delete obj[0];
      return result.call(this, obj);
    };
  });

  // Add all accessor Array functions to the wrapper.
  _.each(['concat', 'join', 'slice'], function(name) {
    var method = ArrayProto[name];
    _.prototype[name] = function() {
      return result.call(this, method.apply(this._wrapped, arguments));
    };
  });

  // Extracts the result from a wrapped and chained object.
  _.prototype.value = function() {
    return this._wrapped;
  };

  // AMD registration happens at the end for compatibility with AMD loaders
  // that may not enforce next-turn semantics on modules. Even though general
  // practice for AMD registration is to be anonymous, underscore registers
  // as a named module because, like jQuery, it is a base library that is
  // popular enough to be bundled in a third party lib, but not be part of
  // an AMD load request. Those cases could generate an error when an
  // anonymous define() is called outside of a loader request.
  if (typeof define === 'function' && define.amd) {
    define('underscore', [], function() {
      return _;
    });
  }
}.call(this));

},{}],"/mnt/hgfs/deb/react-structured-filter-github/master/src/react-datepicker/calendar.js":[function(require,module,exports){
/** @jsx React.DOM */
var React = require('react/addons');

var Day = require('./day');
var DateUtil = require('./util/date');
var moment = require('moment');

var Calendar = React.createClass({displayName: "Calendar",
  mixins: [require('react-onclickoutside')],

  handleClickOutside: function() {
    this.props.hideCalendar();
  },

  getInitialState: function() {
    return {
      date: new DateUtil(this.props.selected).safeClone(moment())
    };
  },

  increaseMonth: function() {
    this.setState({
      date: this.state.date.addMonth()
    });
  },

  decreaseMonth: function() {
    this.setState({
      date: this.state.date.subtractMonth()
    });
  },

  weeks: function() {
    return this.state.date.mapWeeksInMonth(this.renderWeek);
  },

  handleDayClick: function(day) {
    this.props.onSelect(day);
  },

  renderWeek: function(weekStart, key) {
    if(! weekStart.weekInMonth(this.state.date)) {
      return;
    }

    return (
      React.createElement("div", {key: key}, 
        this.days(weekStart)
      )
    );
  },

  renderDay: function(day, key) {
    var minDate = new DateUtil(this.props.minDate).safeClone(),
        maxDate = new DateUtil(this.props.maxDate).safeClone(),
        disabled = day.isBefore(minDate) || day.isAfter(maxDate);

    return (
      React.createElement(Day, {
        key: key, 
        day: day, 
        date: this.state.date, 
        onClick: this.handleDayClick.bind(this, day), 
        selected: new DateUtil(this.props.selected), 
        disabled: disabled})
    );
  },

  days: function(weekStart) {
    return weekStart.mapDaysInWeek(this.renderDay);
  },

  render: function() {
    return (
      React.createElement("div", {className: "datepicker"}, 
        React.createElement("div", {className: "datepicker__triangle"}), 
        React.createElement("div", {className: "datepicker__header"}, 
          React.createElement("a", {className: "datepicker__navigation datepicker__navigation--previous", 
              onClick: this.decreaseMonth}
          ), 
          React.createElement("span", {className: "datepicker__current-month"}, 
            this.state.date.format("MMMM YYYY")
          ), 
          React.createElement("a", {className: "datepicker__navigation datepicker__navigation--next", 
              onClick: this.increaseMonth}
          ), 
          React.createElement("div", null, 
            React.createElement("div", {className: "datepicker__day"}, "Mo"), 
            React.createElement("div", {className: "datepicker__day"}, "Tu"), 
            React.createElement("div", {className: "datepicker__day"}, "We"), 
            React.createElement("div", {className: "datepicker__day"}, "Th"), 
            React.createElement("div", {className: "datepicker__day"}, "Fr"), 
            React.createElement("div", {className: "datepicker__day"}, "Sa"), 
            React.createElement("div", {className: "datepicker__day"}, "Su")
          )
        ), 
        React.createElement("div", {className: "datepicker__month"}, 
          this.weeks()
        )
      )
    );
  }
});

module.exports = Calendar;

},{"./day":"/mnt/hgfs/deb/react-structured-filter-github/master/src/react-datepicker/day.js","./util/date":"/mnt/hgfs/deb/react-structured-filter-github/master/src/react-datepicker/util/date.js","moment":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/moment/moment.js","react-onclickoutside":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react-onclickoutside/index.js","react/addons":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/addons.js"}],"/mnt/hgfs/deb/react-structured-filter-github/master/src/react-datepicker/date_input.js":[function(require,module,exports){
/** @jsx React.DOM */

var React = require('react/addons');
var moment = require('moment');


var DateUtil = require('./util/date');

var DateInput = React.createClass({displayName: "DateInput",
  propTypes: {
    onKeyDown: React.PropTypes.func
  },

  getDefaultProps: function() {
    return {
      dateFormat: 'YYYY-MM-DD'
    };
  },

  getInitialState: function() {
    return {
      value: this.safeDateFormat(this.props.date)
    };
  },

  componentDidMount: function() {
    this.toggleFocus(this.props.focus);
  },

  componentWillReceiveProps: function(newProps) {
    this.toggleFocus(newProps.focus);

    this.setState({
      value: this.safeDateFormat(newProps.date)
    });
  },

  toggleFocus: function(focus) {
    if (focus) {
      this.refs.entry.getDOMNode().focus();
    } else {
      this.refs.entry.getDOMNode().blur();
    }
  },

  handleChange: function(event) {
    var date = moment(event.target.value, this.props.dateFormat, true);

    this.setState({
      value: event.target.value
    });
  },

  safeDateFormat: function(date) {
    return !! date ? date.format(this.props.dateFormat) : null;
  },

  isValueAValidDate: function() {
    var date = moment(event.target.value, this.props.dateFormat, true);

    return date.isValid();
  },

  handleEnter: function(event) {
    if (this.isValueAValidDate()) {
      var date = moment(event.target.value, this.props.dateFormat, true);
      this.props.setSelected(new DateUtil(date));
    }
  },

  handleKeyDown: function(event) {
    switch(event.key) {
    case "Enter":
      event.preventDefault();
      this.handleEnter(event);
      break;
    case "Backspace":
      this.props.onKeyDown(event);
      break;
    }
  },

  handleClick: function(event) {
    this.props.handleClick(event);
  },

  render: function() {
    return React.createElement("input", {
      ref: "entry", 
      type: "text", 
      value: this.state.value, 
      onClick: this.handleClick, 
      onKeyDown: this.handleKeyDown, 
      onFocus: this.props.onFocus, 
      onChange: this.handleChange, 
      className: "datepicker__input", 
      placeholder: this.props.placeholderText});
  }
});

module.exports = DateInput;

},{"./util/date":"/mnt/hgfs/deb/react-structured-filter-github/master/src/react-datepicker/util/date.js","moment":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/moment/moment.js","react/addons":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/addons.js"}],"/mnt/hgfs/deb/react-structured-filter-github/master/src/react-datepicker/datepicker.js":[function(require,module,exports){
/** @jsx React.DOM */

var React = require('react/addons');

var Popover   = require('./popover');
var DateUtil  = require('./util/date');
var Calendar  = require('./calendar');
var DateInput = require('./date_input');

var DatePicker = React.createClass({displayName: "DatePicker",
  propTypes: {
    onChange: React.PropTypes.func,
    onKeyDown: React.PropTypes.func
  },

  getInitialState: function() {
    return {
      focus: true
    };
  },

  handleFocus: function() {
    this.setState({
      focus: true
    });
  },

  hideCalendar: function() {
      this.setState({
        focus: false
      });
  },

  handleSelect: function(date) {
    this.hideCalendar();
    this.setSelected(date);
  },

  setSelected: function(date) {
    this.props.onChange(date.moment());
  },

  onInputClick: function() {
    this.setState({
      focus: true
    });
  },

  calendar: function() {
    if (this.state.focus) {
      return (
        React.createElement(Popover, null, 
          React.createElement(Calendar, {
            selected: this.props.selected, 
            onSelect: this.handleSelect, 
            hideCalendar: this.hideCalendar, 
            minDate: this.props.minDate, 
            maxDate: this.props.maxDate})
        )
      );
    }
  },

  render: function() {
    return (
      React.createElement("div", null, 
        React.createElement(DateInput, {
          ref: "dateinput", 
          date: this.props.selected, 
          dateFormat: this.props.dateFormat, 
          focus: this.state.focus, 
          onFocus: this.handleFocus, 
          onKeyDown: this.props.onKeyDown, 
          handleClick: this.onInputClick, 
          handleEnter: this.hideCalendar, 
          setSelected: this.setSelected, 
          hideCalendar: this.hideCalendar, 
          placeholderText: this.props.placeholderText}), 
        this.calendar()
      )
    );
  }
});

module.exports = DatePicker;

},{"./calendar":"/mnt/hgfs/deb/react-structured-filter-github/master/src/react-datepicker/calendar.js","./date_input":"/mnt/hgfs/deb/react-structured-filter-github/master/src/react-datepicker/date_input.js","./popover":"/mnt/hgfs/deb/react-structured-filter-github/master/src/react-datepicker/popover.js","./util/date":"/mnt/hgfs/deb/react-structured-filter-github/master/src/react-datepicker/util/date.js","react/addons":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/addons.js"}],"/mnt/hgfs/deb/react-structured-filter-github/master/src/react-datepicker/day.js":[function(require,module,exports){
/** @jsx React.DOM */

var React = require('react/addons');
var moment = require('moment');

var Day = React.createClass({displayName: "Day",
  handleClick: function(event) {
    if (this.props.disabled) return;

    this.props.onClick(event);
  },

  render: function() {
    classes = React.addons.classSet({
      'datepicker__day': true,
      'datepicker__day--disabled': this.props.disabled,
      'datepicker__day--selected': this.props.day.sameDay(this.props.selected),
      'datepicker__day--today': this.props.day.sameDay(moment())
    });

    return (
      React.createElement("div", {className: classes, onClick: this.handleClick}, 
        this.props.day.day()
      )
    );
  }
});

module.exports = Day;

},{"moment":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/moment/moment.js","react/addons":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/addons.js"}],"/mnt/hgfs/deb/react-structured-filter-github/master/src/react-datepicker/popover.js":[function(require,module,exports){
/** @jsx React.DOM */

var React = require('react/addons');
var Tether = require('tether/tether');


var Popover = React.createClass({
  displayName: 'Popover',

  componentWillMount: function() {
    popoverContainer = document.createElement('span');
    popoverContainer.className = 'datepicker__container';

    this._popoverElement = popoverContainer;

    document.querySelector('body').appendChild(this._popoverElement);
  },

  componentDidMount: function() {
    this._renderPopover();
  },

  componentDidUpdate: function() {
    this._renderPopover();
  },

  _popoverComponent: function() {
    var className = this.props.className;
    return (
      React.createElement("div", {className: className}, 
        this.props.children
      )
    );
  },

  _tetherOptions: function() {
    return {
      element: this._popoverElement,
      target: this.getDOMNode().parentElement,
      attachment: 'top left',
      targetAttachment: 'bottom left',
      targetOffset: '10px 0',
      optimizations: {
        moveElement: false // always moves to <body> anyway!
      },
      constraints: [
        {
          to: 'window',
          attachment: 'together',
          pin: true
        }
      ]
    };
  },

  _renderPopover: function() {
    React.render(this._popoverComponent(), this._popoverElement);

    if (this._tether != null) {
      this._tether.setOptions(this._tetherOptions());
    } else {
      this._tether = new Tether(this._tetherOptions());
    }
  },

  componentWillUnmount: function() {
    this._tether.destroy();
    React.unmountComponentAtNode(this._popoverElement);
    if (this._popoverElement.parentNode) {
      this._popoverElement.parentNode.removeChild(this._popoverElement);
    }
  },

  render: function() {
    return React.createElement("span", null);
  }
});

module.exports = Popover;

},{"react/addons":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/addons.js","tether/tether":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/tether/tether.js"}],"/mnt/hgfs/deb/react-structured-filter-github/master/src/react-datepicker/util/date.js":[function(require,module,exports){
function DateUtil(date) {
  this._date = date;
}

DateUtil.prototype.isBefore = function(other) {
  return this._date.isBefore(other._date, 'day');
};

DateUtil.prototype.isAfter = function(other) {
  return this._date.isAfter(other._date, 'day');
};

DateUtil.prototype.sameDay = function(other) {
  return this._date.isSame(other._date, 'day');
};

DateUtil.prototype.sameMonth = function(other) {
  return this._date.isSame(other._date, 'month');
};

DateUtil.prototype.day = function() {
  return this._date.date();
};

DateUtil.prototype.mapDaysInWeek = function(callback) {
  var week = [];
  var firstDay = this._date.clone().startOf('isoWeek');

  for(var i = 0; i < 7; i++) {
    var day = new DateUtil(firstDay.clone().add(i, 'days'));

    week[i] = callback(day, i);
  }

  return week;
};

DateUtil.prototype.mapWeeksInMonth = function(callback) {
  var month = [];
  var firstDay = this._date.clone().startOf('month').startOf('isoWeek');

  for(var i = 0; i < 6; i++) {
    var weekStart = new DateUtil(firstDay.clone().add(i, 'weeks'));

    month[i] = callback(weekStart, i);
  }

  return month;
};

DateUtil.prototype.weekInMonth = function(other) {
  var firstDayInWeek = this._date.clone();
  var lastDayInWeek = this._date.clone().isoWeekday(7);

  return firstDayInWeek.isSame(other._date, 'month') ||
    lastDayInWeek.isSame(other._date, 'month');
};

DateUtil.prototype.format = function() {
  return this._date.format.apply(this._date, arguments);
};

DateUtil.prototype.addMonth = function() {
  return new DateUtil(this._date.clone().add(1, 'month'));
};

DateUtil.prototype.subtractMonth = function() {
  return new DateUtil(this._date.clone().subtract(1, 'month'));
};

DateUtil.prototype.clone = function() {
  return new DateUtil(this._date.clone());
};

DateUtil.prototype.safeClone = function(alternative) {
  if (!! this._date) return this.clone();

  if (alternative === undefined) alternative = null;
  return new DateUtil(alternative);
};

DateUtil.prototype.moment = function() {
  return this._date;
};

module.exports = DateUtil;

},{}],"/mnt/hgfs/deb/react-structured-filter-github/master/src/react-typeahead/keyevent.js":[function(require,module,exports){
/**
 * PolyFills make me sad
 */
var KeyEvent = KeyEvent || {};
KeyEvent.DOM_VK_UP = KeyEvent.DOM_VK_UP || 38;
KeyEvent.DOM_VK_DOWN = KeyEvent.DOM_VK_DOWN || 40;
KeyEvent.DOM_VK_BACK_SPACE = KeyEvent.DOM_VK_BACK_SPACE || 8;
KeyEvent.DOM_VK_RETURN = KeyEvent.DOM_VK_RETURN || 13;
KeyEvent.DOM_VK_ENTER = KeyEvent.DOM_VK_ENTER || 14;
KeyEvent.DOM_VK_ESCAPE = KeyEvent.DOM_VK_ESCAPE || 27;
KeyEvent.DOM_VK_TAB = KeyEvent.DOM_VK_TAB || 9;

module.exports = KeyEvent;

},{}],"/mnt/hgfs/deb/react-structured-filter-github/master/src/react-typeahead/react-typeahead.js":[function(require,module,exports){
var Typeahead = require('./typeahead');
var Tokenizer = require('./tokenizer');

module.exports = {
  Typeahead: Typeahead,
  Tokenizer: Tokenizer
};

},{"./tokenizer":"/mnt/hgfs/deb/react-structured-filter-github/master/src/react-typeahead/tokenizer/index.js","./typeahead":"/mnt/hgfs/deb/react-structured-filter-github/master/src/react-typeahead/typeahead/index.js"}],"/mnt/hgfs/deb/react-structured-filter-github/master/src/react-typeahead/tokenizer/index.js":[function(require,module,exports){
/**
 * @jsx React.DOM
 */

var React = window.React || require('react');
var Token = require('./token');
var KeyEvent = require('../keyevent');
var Typeahead = require('../typeahead');

/**
 * A typeahead that, when an option is selected, instead of simply filling
 * the text entry widget, prepends a renderable "token", that may be deleted
 * by pressing backspace on the beginning of the line with the keyboard.
 */
var TypeaheadTokenizer = React.createClass({displayName: "TypeaheadTokenizer",
  propTypes: {
    options: React.PropTypes.array,
    customClasses: React.PropTypes.object,
    defaultSelected: React.PropTypes.array,
    defaultValue: React.PropTypes.string,
    placeholder: React.PropTypes.string,
    onTokenRemove: React.PropTypes.func,
    onTokenAdd: React.PropTypes.func,
    updateFilter: React.PropTypes.func
  },

  getInitialState: function() {
    return {
      selected: this.props.defaultSelected,
      category: "",
      operator: ""
    };
  },

  getDefaultProps: function() {
    return {
      options: [],
      defaultSelected: [],
      customClasses: {},
      defaultValue: "",
      placeholder: "",
      onTokenAdd: function() {},
      onTokenRemove: function() {}
    };
  },

  // TODO: Support initialized tokens
  //
  _renderTokens: function() {
    var tokenClasses = {}
    tokenClasses[this.props.customClasses.token] = !!this.props.customClasses.token;
    var classList = React.addons.classSet(tokenClasses);
    var result = this.state.selected.map(function(selected) {
      mykey = selected.category + selected.operator + selected.value;

      return (
        React.createElement(Token, {key: mykey, className: classList, 
          onRemove:  this._removeTokenForValue}, 
          selected 
        )

      )
    }, this);
    return result;
  },

  _getOptionsForTypeahead: function() {
    if (this.state.category=="") {
      var categories=[];
      for (var i = 0; i < this.props.options.length; i++) {
        categories.push(this.props.options[i].category);
      }
      return categories;
    } else if (this.state.operator=="") {
      categoryType = this._getCategoryType();

      if (categoryType == "text") { return ["==", "!=", "contains", "!contains"];}
      else if (categoryType == "textoptions") {return ["==", "!="];}
      else if  (categoryType == "number" || categoryType == "date") {return ["==", "!=", "<", "<=", ">", ">="];}
      else {console.log("WARNING: Unknown category type in tokenizer");};

    } else {
      var options = this._getCategoryOptions();
      if (options == null) return []
      else return options();
    }

    return this.props.options;
  },

  _getHeader: function() {
    if (this.state.category=="") {
      return "Category";
    } else if (this.state.operator=="") {
      return "Operator";
    } else {
      return "Value";
    }

    return this.props.options;
  },

  _getCategoryType: function() {
    for (var i = 0; i < this.props.options.length; i++) {
      if (this.props.options[i].category == this.state.category) {
        categoryType = this.props.options[i].type;
        return categoryType;
      }
    }
  },

  _getCategoryOptions: function() {
    for (var i = 0; i < this.props.options.length; i++) {
      if (this.props.options[i].category == this.state.category) {
        return this.props.options[i].options;
      }
    }
  },


  _onKeyDown: function(event) {
    // We only care about intercepting backspaces
    if (event.keyCode !== KeyEvent.DOM_VK_BACK_SPACE) {
      return;
    }

    // Remove token ONLY when bksp pressed at beginning of line
    // without a selection
    var entry = this.refs.typeahead.inputRef().getDOMNode();
    if (entry.selectionStart == entry.selectionEnd &&
        entry.selectionStart == 0)
    {
      if (this.state.operator != "") {
        this.setState({operator: ""});
      } else if (this.state.category != "") {
        this.setState({category: ""});
      } else {
        // No tokens
        if (!this.state.selected.length) {
          return;
        }
        this._removeTokenForValue(
          this.state.selected[this.state.selected.length - 1]
        );
      }
      event.preventDefault();
    }
  },

  _removeTokenForValue: function(value) {
    var index = this.state.selected.indexOf(value);
    if (index == -1) {
      return;
    }

    this.state.selected.splice(index, 1);
    this.setState({selected: this.state.selected});
    this.props.onTokenRemove(this.state.selected);

    return;
  },

  _addTokenForValue: function(value) {
    if (this.state.category == "") {
      this.setState({category: value});
      this.refs.typeahead.setEntryText("");
      return;
    }

    if (this.state.operator == "") {
      this.setState({operator: value});
      this.refs.typeahead.setEntryText("");
      return;
    }

    value = {"category":this.state.category,"operator":this.state.operator,"value":value};

    this.state.selected.push(value);
    this.setState({selected: this.state.selected});
    this.refs.typeahead.setEntryText("");
    this.props.onTokenAdd(this.state.selected);

    this.setState({category: "", operator: ""});

    return;
  },

  /***
   * Returns the data type the input should use ("date" or "text")
   */
  _getInputType: function() {
    if (this.state.category != "" && this.state.operator != "") {
      return this._getCategoryType();
    } else {
      return "text";
    }
  },

  render: function() {
    var classes = {}
    classes[this.props.customClasses.typeahead] = !!this.props.customClasses.typeahead;
    var classList = React.addons.classSet(classes);
    return (
      React.createElement("div", {className: "filter-tokenizer"}, 
        React.createElement("span", {className: "input-group-addon"}, 
          React.createElement("i", {className: "fa fa-search"})
        ), 
        React.createElement("div", {className: "token-collection"}, 
           this._renderTokens(), 

          React.createElement("div", {className: "filter-input-group"}, 
            React.createElement("div", {className: "filter-category"},  this.state.category, " "), 
            React.createElement("div", {className: "filter-operator"},  this.state.operator, " "), 

            React.createElement(Typeahead, {ref: "typeahead", 
              className: classList, 
              placeholder: this.props.placeholder, 
              customClasses: this.props.customClasses, 
              options: this._getOptionsForTypeahead(), 
              header: this._getHeader(), 
              datatype: this._getInputType(), 
              defaultValue: this.props.defaultValue, 
              onOptionSelected: this._addTokenForValue, 
              onKeyDown: this._onKeyDown})
            )
          )
      )
    )
  }
});

module.exports = TypeaheadTokenizer;

},{"../keyevent":"/mnt/hgfs/deb/react-structured-filter-github/master/src/react-typeahead/keyevent.js","../typeahead":"/mnt/hgfs/deb/react-structured-filter-github/master/src/react-typeahead/typeahead/index.js","./token":"/mnt/hgfs/deb/react-structured-filter-github/master/src/react-typeahead/tokenizer/token.js","react":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/react.js"}],"/mnt/hgfs/deb/react-structured-filter-github/master/src/react-typeahead/tokenizer/token.js":[function(require,module,exports){
/**
 * @jsx React.DOM
 */

var React = window.React || require('react');

/**
 * Encapsulates the rendering of an option that has been "selected" in a
 * TypeaheadTokenizer
 */
var Token = React.createClass({displayName: "Token",
  propTypes: {
    children: React.PropTypes.object,
    onRemove: React.PropTypes.func
  },

  render: function() {
    return (
      React.createElement("div", React.__spread({},  this.props, {className: "typeahead-token"}), 
        this.props.children["category"], " ", this.props.children["operator"], " \"", this.props.children["value"], "\"", 
        this._makeCloseButton()
      )
    );
  },

  _makeCloseButton: function() {
    if (!this.props.onRemove) {
      return "";
    }
    return (
      React.createElement("a", {className: "typeahead-token-close", href: "#", onClick: function(event) {
          this.props.onRemove(this.props.children);
          event.preventDefault();
        }.bind(this)}, "×")
    );
  }
});

module.exports = Token;

},{"react":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/react.js"}],"/mnt/hgfs/deb/react-structured-filter-github/master/src/react-typeahead/typeahead/index.js":[function(require,module,exports){
/**
 * @jsx React.DOM
 */

var React = window.React || require('react/addons');
var TypeaheadSelector = require('./selector');
var KeyEvent = require('../keyevent');
var fuzzy = require('fuzzy');
var DatePicker = require('../../react-datepicker/datepicker.js');
var moment = require('moment');

/**
 * A "typeahead", an auto-completing text input
 *
 * Renders an text input that shows options nearby that you can use the
 * keyboard or mouse to select.  Requires CSS for MASSIVE DAMAGE.
 */
var Typeahead = React.createClass({displayName: "Typeahead",
  propTypes: {
    customClasses: React.PropTypes.object,
    maxVisible: React.PropTypes.number,
    options: React.PropTypes.array,
    header: React.PropTypes.string,
    datatype: React.PropTypes.string,
    defaultValue: React.PropTypes.string,
    placeholder: React.PropTypes.string,
    onOptionSelected: React.PropTypes.func,
    onKeyDown: React.PropTypes.func
  },

  mixins: [
    require('react-onclickoutside')
  ],

  getDefaultProps: function() {
    return {
      options: [],
      header: "Category",
      datatype: "text",
      customClasses: {},
      defaultValue: "",
      placeholder: "",
      onKeyDown: function(event) { return },
      onOptionSelected: function(option) { }
    };
  },

  getInitialState: function() {
    return {
      // The set of all options... Does this need to be state?  I guess for lazy load...
      options: this.props.options,
      header: this.props.header,
      datatype: this.props.datatype,

      focused: false,

      // The currently visible set of options
      visible: this.getOptionsForValue(this.props.defaultValue, this.props.options),

      // This should be called something else, "entryValue"
      entryValue: this.props.defaultValue,

      // A valid typeahead value
      selection: null
    };
  },

  componentWillReceiveProps: function(nextProps) {
    this.setState({options: nextProps.options,
      header: nextProps.header,
      datatype: nextProps.datatype,
      visible: nextProps.options});
  },

  getOptionsForValue: function(value, options) {
    var result = fuzzy.filter(value, options).map(function(res) {
      return res.string;
    });

    if (this.props.maxVisible) {
      result = result.slice(0, this.props.maxVisible);
    }
    return result;
  },

  setEntryText: function(value) {
    if (this.refs.entry != null) {
      this.refs.entry.getDOMNode().value = value;
    }
    this._onTextEntryUpdated();
  },

  _renderIncrementalSearchResults: function() {
    if (!this.state.focused) {
      return "";
    }

    // Something was just selected
    if (this.state.selection) {
      return "";
    }

    // There are no typeahead / autocomplete suggestions
    if (!this.state.visible.length) {
      return "";
    }

    return (
      React.createElement(TypeaheadSelector, {
        ref: "sel", options:  this.state.visible, header: this.state.header, 
        onOptionSelected:  this._onOptionSelected, 
        customClasses: this.props.customClasses})
    );
  },

  _onOptionSelected: function(option) {
    var nEntry = this.refs.entry.getDOMNode();
    nEntry.focus();
    nEntry.value = option;
    this.setState({visible: this.getOptionsForValue(option, this.state.options),
                   selection: option,
                   entryValue: option});

    this.props.onOptionSelected(option);
  },

  _onTextEntryUpdated: function() {
    var value = "";
    if (this.refs.entry != null) {
      value = this.refs.entry.getDOMNode().value;
    }
    this.setState({visible: this.getOptionsForValue(value, this.state.options),
                   selection: null,
                   entryValue: value});
  },

  _onEnter: function(event) {
    if (!this.refs.sel.state.selection) {
      return this.props.onKeyDown(event);
    }

    this._onOptionSelected(this.refs.sel.state.selection);
  },

  _onEscape: function() {
    this.refs.sel.setSelectionIndex(null)
  },

  _onTab: function(event) {
    var option = this.refs.sel.state.selection ?
      this.refs.sel.state.selection : this.state.visible[0];
    this._onOptionSelected(option)
  },

  eventMap: function(event) {
    var events = {};

    events[KeyEvent.DOM_VK_UP] = this.refs.sel.navUp;
    events[KeyEvent.DOM_VK_DOWN] = this.refs.sel.navDown;
    events[KeyEvent.DOM_VK_RETURN] = events[KeyEvent.DOM_VK_ENTER] = this._onEnter;
    events[KeyEvent.DOM_VK_ESCAPE] = this._onEscape;
    events[KeyEvent.DOM_VK_TAB] = this._onTab;

    return events;
  },

  _onKeyDown: function(event) {
    // If Enter pressed
    if (event.keyCode === KeyEvent.DOM_VK_RETURN || event.keyCode === KeyEvent.DOM_VK_ENTER) {
      // If no options were provided so we can match on anything
      if (this.props.options.length===0) {
        this._onOptionSelected(this.state.entryValue);
      }

      // If what has been typed in is an exact match of one of the options
      if (this.props.options.indexOf(this.state.entryValue) > -1) {
        this._onOptionSelected(this.state.entryValue);
      }
    }

    // If there are no visible elements, don't perform selector navigation.
    // Just pass this up to the upstream onKeydown handler
    if (!this.refs.sel) {
      return this.props.onKeyDown(event);
    }

    var handler = this.eventMap()[event.keyCode];

    if (handler) {
      handler(event);
    } else {
      return this.props.onKeyDown(event);
    }
    // Don't propagate the keystroke back to the DOM/browser
    event.preventDefault();
  },

  _onFocus: function(event) {
    this.setState({focused: true});
  },

  handleClickOutside: function(event) {
    this.setState({focused:false});
  },

  isDescendant: function(parent, child) {
     var node = child.parentNode;
     while (node != null) {
         if (node == parent) {
             return true;
         }
         node = node.parentNode;
     }
     return false;
  },

  _handleDateChange: function(date) {
    this.props.onOptionSelected(date.format("YYYY-MM-DD"));
  },

  _showDatePicker: function() {
    if (this.state.datatype == "date") {
      return true;
    }
    return false;
  },

  inputRef: function() {
    if (this._showDatePicker()) {
      return this.refs.datepicker.refs.dateinput.refs.entry;
    } else {
      return this.refs.entry;
    }
  },

  render: function() {
    var inputClasses = {}
    inputClasses[this.props.customClasses.input] = !!this.props.customClasses.input;
    var inputClassList = React.addons.classSet(inputClasses)

    var classes = {
      typeahead: true
    }
    classes[this.props.className] = !!this.props.className;
    var classList = React.addons.classSet(classes);

    if (this._showDatePicker()) {
      return (
        React.createElement("span", {ref: "input", className: classList, onFocus: this._onFocus}, 
          React.createElement(DatePicker, {ref: "datepicker", dateFormat: "YYYY-MM-DD", selected: moment(), onChange: this._handleDateChange, onKeyDown: this._onKeyDown})
        )
      );
    }

    return (
      React.createElement("span", {ref: "input", className: classList, onFocus: this._onFocus}, 
        React.createElement("input", {ref: "entry", type: "text", 
          placeholder: this.props.placeholder, 
          className: inputClassList, defaultValue: this.state.entryValue, 
          onChange: this._onTextEntryUpdated, onKeyDown: this._onKeyDown}
          ), 
         this._renderIncrementalSearchResults() 
      )
    );
  }
});

module.exports = Typeahead;

},{"../../react-datepicker/datepicker.js":"/mnt/hgfs/deb/react-structured-filter-github/master/src/react-datepicker/datepicker.js","../keyevent":"/mnt/hgfs/deb/react-structured-filter-github/master/src/react-typeahead/keyevent.js","./selector":"/mnt/hgfs/deb/react-structured-filter-github/master/src/react-typeahead/typeahead/selector.js","fuzzy":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/fuzzy/lib/fuzzy.js","moment":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/moment/moment.js","react-onclickoutside":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react-onclickoutside/index.js","react/addons":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/addons.js"}],"/mnt/hgfs/deb/react-structured-filter-github/master/src/react-typeahead/typeahead/option.js":[function(require,module,exports){
/**
 * @jsx React.DOM
 */

var React = window.React || require('react/addons');

/**
 * A single option within the TypeaheadSelector
 */
var TypeaheadOption = React.createClass({displayName: "TypeaheadOption",
  propTypes: {
    customClasses: React.PropTypes.object,
    onClick: React.PropTypes.func,
    children: React.PropTypes.string
  },

  getDefaultProps: function() {
    return {
      customClasses: {},
      onClick: function(event) { 
        event.preventDefault(); 
      }
    };
  },

  getInitialState: function() {
    return {
      hover: false
    };
  },

  render: function() {
    var classes = {
      hover: this.props.hover
    }
    classes[this.props.customClasses.listItem] = !!this.props.customClasses.listItem;
    var classList = React.addons.classSet(classes);

    return (
      React.createElement("li", {className: classList, onClick: this._onClick}, 
        React.createElement("a", {href: "#", className: this._getClasses(), ref: "anchor"}, 
           this.props.children
        )
      )
    );
  },

  _getClasses: function() {
    var classes = {
      "typeahead-option": true,
    };
    classes[this.props.customClasses.listAnchor] = !!this.props.customClasses.listAnchor;
    return React.addons.classSet(classes);
  },

  _onClick: function() {
    return this.props.onClick();
  }
});


module.exports = TypeaheadOption;

},{"react/addons":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/addons.js"}],"/mnt/hgfs/deb/react-structured-filter-github/master/src/react-typeahead/typeahead/selector.js":[function(require,module,exports){
/**
 * @jsx React.DOM
 */

var React = window.React || require('react/addons');
var TypeaheadOption = require('./option');

/**
 * Container for the options rendered as part of the autocompletion process
 * of the typeahead
 */
var TypeaheadSelector = React.createClass({displayName: "TypeaheadSelector",
  propTypes: {
    options: React.PropTypes.array,
    header: React.PropTypes.string,
    customClasses: React.PropTypes.object,
    selectionIndex: React.PropTypes.number,
    onOptionSelected: React.PropTypes.func
  },

  getDefaultProps: function() {
    return {
      selectionIndex: null,
      customClasses: {},
      onOptionSelected: function(option) { }
    };
  },

  getInitialState: function() {
    return {
      selectionIndex: this.props.selectionIndex,
      selection: this.getSelectionForIndex(this.props.selectionIndex)
    };
  },

  componentWillReceiveProps: function(nextProps) {
    this.setState({selectionIndex: null});
  },

  render: function() {
    var classes = {
      "typeahead-selector": true
    };
    classes[this.props.customClasses.results] = this.props.customClasses.results;
    var classList = React.addons.classSet(classes);

    var results = this.props.options.map(function(result, i) {
      return (
        React.createElement(TypeaheadOption, {ref: result, key: result, 
          hover: this.state.selectionIndex === i, 
          customClasses: this.props.customClasses, 
          onClick: this._onClick.bind(this, result)}, 
          result 
        )
      );
    }, this);
    return React.createElement("ul", {className: classList}, 
      React.createElement("li", {className: "header"}, this.props.header), 
        results 
      );
  },

  setSelectionIndex: function(index) {
    this.setState({
      selectionIndex: index,
      selection: this.getSelectionForIndex(index),
    });
  },

  getSelectionForIndex: function(index) {
    if (index === null) {
      return null;
    }
    return this.props.options[index];
  },

  _onClick: function(result) {
    this.props.onOptionSelected(result);
  },

  _nav: function(delta) {
    if (!this.props.options) {
      return;
    }
    var newIndex;
    if (this.state.selectionIndex === null) {
      if (delta == 1) {
        newIndex = 0;
      } else {
        newIndex = delta;
      }
    } else {
      newIndex = this.state.selectionIndex + delta;
    }
    if (newIndex < 0) {
      newIndex += this.props.options.length;
    } else if (newIndex >= this.props.options.length) {
      newIndex -= this.props.options.length;
    }
    var newSelection = this.getSelectionForIndex(newIndex);
    this.setState({selectionIndex: newIndex,
                   selection: newSelection});
  },

  navDown: function() {
    this._nav(1);
  },

  navUp: function() {
    this._nav(-1);
  }

});

module.exports = TypeaheadSelector;

},{"./option":"/mnt/hgfs/deb/react-structured-filter-github/master/src/react-typeahead/typeahead/option.js","react/addons":"/mnt/hgfs/deb/react-structured-filter-github/master/node_modules/react/addons.js"}]},{},["./example/main.js"])
//# sourceMappingURL=data:application/json;base64,
